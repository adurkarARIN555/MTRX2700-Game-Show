
twoPot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004d3c  08004d3c  00014d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dac  08004dac  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08004dac  08004dac  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004dac  08004dac  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08004db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          000005b8  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000654  20000654  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000faf4  00000000  00000000  0002010f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025b4  00000000  00000000  0002fc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d78  00000000  00000000  000321b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a54  00000000  00000000  00032f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001e8d1  00000000  00000000  00033984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001251e  00000000  00000000  00052255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b7dda  00000000  00000000  00064773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ca0  00000000  00000000  0011c550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  001201f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d24 	.word	0x08004d24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08004d24 	.word	0x08004d24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <enable_clocks>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enable_clocks() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <enable_clocks+0x1c>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <enable_clocks+0x1c>)
 800027a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800027e:	6153      	str	r3, [r2, #20]
	//RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <get_difference>:

int get_difference(int v1, int v2){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
	int diff = v1 - v2;
 800029a:	687a      	ldr	r2, [r7, #4]
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	60fb      	str	r3, [r7, #12]
	diff = abs(diff);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	bfb8      	it	lt
 80002a8:	425b      	neglt	r3, r3
 80002aa:	60fb      	str	r3, [r7, #12]

	return diff;
 80002ac:	68fb      	ldr	r3, [r7, #12]
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
	...

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b0d0      	sub	sp, #320	; 0x140
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fe29 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f8ab 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 fa8d 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ce:	f000 f9eb 	bl	80006a8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002d2:	f000 fa29 	bl	8000728 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002d6:	f000 fa65 	bl	80007a4 <MX_USB_PCD_Init>
  MX_ADC1_Init();
 80002da:	f000 f909 	bl	80004f0 <MX_ADC1_Init>
  MX_ADC4_Init();
 80002de:	f000 f985 	bl	80005ec <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  uint16_t pot_val = 0;
 80002e2:	2300      	movs	r3, #0
 80002e4:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a
  uint16_t pot_val_2 = 0;
 80002e8:	2300      	movs	r3, #0
 80002ea:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

  uint16_t pot_val_prev = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
  uint16_t pot_val_2_prev = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c

  enable_clocks();
 80002fa:	f7ff ffb9 	bl	8000270 <enable_clocks>
  SerialInitialise(BAUD_115200, &USART1_PORT);
 80002fe:	4942      	ldr	r1, [pc, #264]	; (8000408 <main+0x14c>)
 8000300:	2004      	movs	r0, #4
 8000302:	f000 fb01 	bl	8000908 <SerialInitialise>
  {
	  uint8_t buffer[100];
	  uint8_t buffer1[100];
	  uint8_t buffer2[100];

	  HAL_ADC_Start(&hadc1);
 8000306:	4841      	ldr	r0, [pc, #260]	; (800040c <main+0x150>)
 8000308:	f001 f870 	bl	80013ec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800030c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000310:	483e      	ldr	r0, [pc, #248]	; (800040c <main+0x150>)
 8000312:	f001 f981 	bl	8001618 <HAL_ADC_PollForConversion>
	  pot_val = HAL_ADC_GetValue(&hadc1);
 8000316:	483d      	ldr	r0, [pc, #244]	; (800040c <main+0x150>)
 8000318:	f001 fa80 	bl	800181c <HAL_ADC_GetValue>
 800031c:	4603      	mov	r3, r0
 800031e:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

//	  int diff1 = pot_val - pot_val_prev;
//	  diff1 = abs(diff1);
	  int diff1 = get_difference(pot_val, pot_val_prev);
 8000322:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8000326:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ffaf 	bl	8000290 <get_difference>
 8000332:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134

	  if ((diff1 > 50) && (pot_val > 100)){
 8000336:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800033a:	2b32      	cmp	r3, #50	; 0x32
 800033c:	dd0f      	ble.n	800035e <main+0xa2>
 800033e:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8000342:	2b64      	cmp	r3, #100	; 0x64
 8000344:	d90b      	bls.n	800035e <main+0xa2>
		  sprintf(&buffer[0], "%d#", pot_val);
 8000346:	f8b7 213a 	ldrh.w	r2, [r7, #314]	; 0x13a
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4930      	ldr	r1, [pc, #192]	; (8000410 <main+0x154>)
 800034e:	4618      	mov	r0, r3
 8000350:	f004 f844 	bl	80043dc <siprintf>
		  pot_val_prev = pot_val;
 8000354:	f8b7 313a 	ldrh.w	r3, [r7, #314]	; 0x13a
 8000358:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
 800035c:	e006      	b.n	800036c <main+0xb0>
	  }
	  else{
		  sprintf(&buffer[0], "%d#", pot_val_prev);
 800035e:	f8b7 213e 	ldrh.w	r2, [r7, #318]	; 0x13e
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	492a      	ldr	r1, [pc, #168]	; (8000410 <main+0x154>)
 8000366:	4618      	mov	r0, r3
 8000368:	f004 f838 	bl	80043dc <siprintf>
	  }


	  // HAL_ADC_Stop(&hadc1);

	  HAL_ADC_Start(&hadc4);
 800036c:	4829      	ldr	r0, [pc, #164]	; (8000414 <main+0x158>)
 800036e:	f001 f83d 	bl	80013ec <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 8000372:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000376:	4827      	ldr	r0, [pc, #156]	; (8000414 <main+0x158>)
 8000378:	f001 f94e 	bl	8001618 <HAL_ADC_PollForConversion>
	  pot_val_2 = HAL_ADC_GetValue(&hadc4);
 800037c:	4825      	ldr	r0, [pc, #148]	; (8000414 <main+0x158>)
 800037e:	f001 fa4d 	bl	800181c <HAL_ADC_GetValue>
 8000382:	4603      	mov	r3, r0
 8000384:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138

//	  int diff2 = pot_val_2 - pot_val_2_prev;
//	  diff2 = abs(diff2);
	  int diff2 = get_difference(pot_val_2, pot_val_2_prev);
 8000388:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 800038c:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 8000390:	4611      	mov	r1, r2
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ff7c 	bl	8000290 <get_difference>
 8000398:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130

	  if ((diff2 > 50) && (pot_val_2 > 100)){
 800039c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80003a0:	2b32      	cmp	r3, #50	; 0x32
 80003a2:	dd10      	ble.n	80003c6 <main+0x10a>
 80003a4:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80003a8:	2b64      	cmp	r3, #100	; 0x64
 80003aa:	d90c      	bls.n	80003c6 <main+0x10a>
		  sprintf(&buffer2[0], ",%d#", pot_val_2);
 80003ac:	f8b7 2138 	ldrh.w	r2, [r7, #312]	; 0x138
 80003b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003b4:	4918      	ldr	r1, [pc, #96]	; (8000418 <main+0x15c>)
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 f810 	bl	80043dc <siprintf>
		  pot_val_2_prev = pot_val_2;
 80003bc:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 80003c0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
 80003c4:	e007      	b.n	80003d6 <main+0x11a>
	  }
	  else{
		  sprintf(&buffer2[0], ",%d#", pot_val_2_prev);
 80003c6:	f8b7 213c 	ldrh.w	r2, [r7, #316]	; 0x13c
 80003ca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003ce:	4912      	ldr	r1, [pc, #72]	; (8000418 <main+0x15c>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	f004 f803 	bl	80043dc <siprintf>
	  }


	  //HAL_ADC_Stop(&hadc1);

	  strcpy((char*)buffer1, "\r\n#");
 80003d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003da:	4a10      	ldr	r2, [pc, #64]	; (800041c <main+0x160>)
 80003dc:	601a      	str	r2, [r3, #0]

	  HAL_Delay(150);
 80003de:	2096      	movs	r0, #150	; 0x96
 80003e0:	f000 fe00 	bl	8000fe4 <HAL_Delay>
	  SerialOutputString(buffer, &USART1_PORT);
 80003e4:	1d3b      	adds	r3, r7, #4
 80003e6:	4908      	ldr	r1, [pc, #32]	; (8000408 <main+0x14c>)
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 fb16 	bl	8000a1a <SerialOutputString>
	  SerialOutputString(buffer2, &USART1_PORT);
 80003ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80003f2:	4905      	ldr	r1, [pc, #20]	; (8000408 <main+0x14c>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fb10 	bl	8000a1a <SerialOutputString>
	  SerialOutputString(buffer1, &USART1_PORT);
 80003fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80003fe:	4902      	ldr	r1, [pc, #8]	; (8000408 <main+0x14c>)
 8000400:	4618      	mov	r0, r3
 8000402:	f000 fb0a 	bl	8000a1a <SerialOutputString>
  {
 8000406:	e77e      	b.n	8000306 <main+0x4a>
 8000408:	20000000 	.word	0x20000000
 800040c:	200000b8 	.word	0x200000b8
 8000410:	08004d3c 	.word	0x08004d3c
 8000414:	20000108 	.word	0x20000108
 8000418:	08004d40 	.word	0x08004d40
 800041c:	00230a0d 	.word	0x00230a0d

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b09e      	sub	sp, #120	; 0x78
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800042a:	2228      	movs	r2, #40	; 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fff4 	bl	800441c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	463b      	mov	r3, r7
 8000446:	223c      	movs	r2, #60	; 0x3c
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f003 ffe6 	bl	800441c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000450:	2303      	movs	r3, #3
 8000452:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000454:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000458:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045e:	2301      	movs	r3, #1
 8000460:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000462:	2310      	movs	r3, #16
 8000464:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000466:	2302      	movs	r3, #2
 8000468:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800046a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800046e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000474:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000476:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800047a:	4618      	mov	r0, r3
 800047c:	f002 faf2 	bl	8002a64 <HAL_RCC_OscConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000486:	f000 fa39 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048a:	230f      	movs	r3, #15
 800048c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800048e:	2302      	movs	r3, #2
 8000490:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000492:	2300      	movs	r3, #0
 8000494:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004a4:	2101      	movs	r1, #1
 80004a6:	4618      	mov	r0, r3
 80004a8:	f003 fb1a 	bl	8003ae0 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80004b2:	f000 fa23 	bl	80008fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <SystemClock_Config+0xcc>)
 80004b8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80004ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004be:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80004c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c4:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fcea 	bl	8003eac <HAL_RCCEx_PeriphCLKConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80004de:	f000 fa0d 	bl	80008fc <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3778      	adds	r7, #120	; 0x78
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	000201a0 	.word	0x000201a0

080004f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80004f6:	f107 031c 	add.w	r3, r7, #28
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
 8000510:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000512:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000514:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000518:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800051a:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <MX_ADC1_Init+0xf8>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000520:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000526:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_ADC1_Init+0xf8>)
 800052e:	2201      	movs	r2, #1
 8000530:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000532:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053a:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_ADC1_Init+0xf8>)
 800053c:	2200      	movs	r2, #0
 800053e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000542:	2201      	movs	r2, #1
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000548:	2200      	movs	r2, #0
 800054a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_ADC1_Init+0xf8>)
 800054e:	2201      	movs	r2, #1
 8000550:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000552:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_ADC1_Init+0xf8>)
 800055c:	2204      	movs	r2, #4
 800055e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000562:	2200      	movs	r2, #0
 8000564:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000568:	2200      	movs	r2, #0
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800056c:	481e      	ldr	r0, [pc, #120]	; (80005e8 <MX_ADC1_Init+0xf8>)
 800056e:	f000 fd5d 	bl	800102c <HAL_ADC_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000578:	f000 f9c0 	bl	80008fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000580:	f107 031c 	add.w	r3, r7, #28
 8000584:	4619      	mov	r1, r3
 8000586:	4818      	ldr	r0, [pc, #96]	; (80005e8 <MX_ADC1_Init+0xf8>)
 8000588:	f001 fc40 	bl	8001e0c <HAL_ADCEx_MultiModeConfigChannel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000592:	f000 f9b3 	bl	80008fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000596:	2302      	movs	r3, #2
 8000598:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800059a:	2301      	movs	r3, #1
 800059c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800059e:	2300      	movs	r3, #0
 80005a0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4619      	mov	r1, r3
 80005b2:	480d      	ldr	r0, [pc, #52]	; (80005e8 <MX_ADC1_Init+0xf8>)
 80005b4:	f001 f940 	bl	8001838 <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80005be:	f000 f99d 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_3;
 80005c2:	2303      	movs	r3, #3
 80005c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4619      	mov	r1, r3
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <MX_ADC1_Init+0xf8>)
 80005d0:	f001 f932 	bl	8001838 <HAL_ADC_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80005da:	f000 f98f 	bl	80008fc <Error_Handler>
  }

  /* USER CODE END ADC1_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	; 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000b8 	.word	0x200000b8

080005ec <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <MX_ADC4_Init+0xb8>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_ADC4_Init+0xb4>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_ADC4_Init+0xb4>)
 800061c:	2201      	movs	r2, #1
 800061e:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b1d      	ldr	r3, [pc, #116]	; (80006a0 <MX_ADC4_Init+0xb4>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000630:	2201      	movs	r2, #1
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_ADC4_Init+0xb4>)
 800063c:	2201      	movs	r2, #1
 800063e:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <MX_ADC4_Init+0xb4>)
 800064a:	2204      	movs	r2, #4
 800064c:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000650:	2200      	movs	r2, #0
 8000652:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000656:	2200      	movs	r2, #0
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800065a:	4811      	ldr	r0, [pc, #68]	; (80006a0 <MX_ADC4_Init+0xb4>)
 800065c:	f000 fce6 	bl	800102c <HAL_ADC_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 8000666:	f000 f949 	bl	80008fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800066a:	2303      	movs	r3, #3
 800066c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800066e:	2301      	movs	r3, #1
 8000670:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000682:	463b      	mov	r3, r7
 8000684:	4619      	mov	r1, r3
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <MX_ADC4_Init+0xb4>)
 8000688:	f001 f8d6 	bl	8001838 <HAL_ADC_ConfigChannel>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8000692:	f000 f933 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000108 	.word	0x20000108
 80006a4:	50000500 	.word	0x50000500

080006a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <MX_I2C1_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	; (8000720 <MX_I2C1_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_I2C1_Init+0x74>)
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <MX_I2C1_Init+0x7c>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_I2C1_Init+0x74>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <MX_I2C1_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e2:	480e      	ldr	r0, [pc, #56]	; (800071c <MX_I2C1_Init+0x74>)
 80006e4:	f001 ffc6 	bl	8002674 <HAL_I2C_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ee:	f000 f905 	bl	80008fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <MX_I2C1_Init+0x74>)
 80006f6:	f002 f84c 	bl	8002792 <HAL_I2CEx_ConfigAnalogFilter>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000700:	f000 f8fc 	bl	80008fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_I2C1_Init+0x74>)
 8000708:	f002 f88e 	bl	8002828 <HAL_I2CEx_ConfigDigitalFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 f8f3 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000158 	.word	0x20000158
 8000720:	40005400 	.word	0x40005400
 8000724:	2000090e 	.word	0x2000090e

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_SPI1_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_SPI1_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_SPI1_Init+0x74>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_SPI1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI1_Init+0x74>)
 8000742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000746:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI1_Init+0x74>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI1_Init+0x74>)
 800075e:	2208      	movs	r2, #8
 8000760:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI1_Init+0x74>)
 8000776:	2207      	movs	r2, #7
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SPI1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI1_Init+0x74>)
 8000782:	2208      	movs	r2, #8
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_SPI1_Init+0x74>)
 8000788:	f003 fd40 	bl	800420c <HAL_SPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 f8b3 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001ac 	.word	0x200001ac
 80007a0:	40013000 	.word	0x40013000

080007a4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80007a8:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007aa:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <MX_USB_PCD_Init+0x40>)
 80007ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007b0:	2208      	movs	r2, #8
 80007b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007b6:	2202      	movs	r2, #2
 80007b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007bc:	2202      	movs	r2, #2
 80007be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_USB_PCD_Init+0x3c>)
 80007ce:	f002 f877 	bl	80028c0 <HAL_PCD_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 80007d8:	f000 f890 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000210 	.word	0x20000210
 80007e4:	40005c00 	.word	0x40005c00

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	; 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a3c      	ldr	r2, [pc, #240]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b3a      	ldr	r3, [pc, #232]	; (80008f4 <MX_GPIO_Init+0x10c>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	4a36      	ldr	r2, [pc, #216]	; (80008f4 <MX_GPIO_Init+0x10c>)
 800081c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000820:	6153      	str	r3, [r2, #20]
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082e:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a30      	ldr	r2, [pc, #192]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_GPIO_Init+0x10c>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a2a      	ldr	r2, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x10c>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	4a24      	ldr	r2, [pc, #144]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000864:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000868:	6153      	str	r3, [r2, #20]
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_GPIO_Init+0x10c>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <MX_GPIO_Init+0x10c>)
 800087c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000880:	6153      	str	r3, [r2, #20]
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_GPIO_Init+0x10c>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800088e:	2200      	movs	r2, #0
 8000890:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000894:	4818      	ldr	r0, [pc, #96]	; (80008f8 <MX_GPIO_Init+0x110>)
 8000896:	f001 fed5 	bl	8002644 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800089a:	2337      	movs	r3, #55	; 0x37
 800089c:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800089e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <MX_GPIO_Init+0x110>)
 80008b0:	f001 fd4e 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80008b4:	f64f 7308 	movw	r3, #65288	; 0xff08
 80008b8:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	480a      	ldr	r0, [pc, #40]	; (80008f8 <MX_GPIO_Init+0x110>)
 80008ce:	f001 fd3f 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e8:	f001 fd32 	bl	8002350 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ec:	bf00      	nop
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48001000 	.word	0x48001000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	e7fe      	b.n	8000904 <Error_Handler+0x8>
	...

08000908 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <SerialInitialise+0xdc>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <SerialInitialise+0xdc>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <SerialInitialise+0xdc>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <SerialInitialise+0xdc>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	2b02      	cmp	r3, #2
 8000930:	d106      	bne.n	8000940 <SerialInitialise+0x38>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000932:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <SerialInitialise+0xdc>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4a2b      	ldr	r2, [pc, #172]	; (80009e4 <SerialInitialise+0xdc>)
 8000938:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800093c:	6153      	str	r3, [r2, #20]
		break;
 800093e:	e000      	b.n	8000942 <SerialInitialise+0x3a>
	default:
		break;
 8000940:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800094a:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000954:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	69d9      	ldr	r1, [r3, #28]
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	430a      	orrs	r2, r1
 8000974:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b04      	cmp	r3, #4
 8000980:	d821      	bhi.n	80009c6 <SerialInitialise+0xbe>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <SerialInitialise+0x80>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	0800099d 	.word	0x0800099d
 800098c:	080009a5 	.word	0x080009a5
 8000990:	080009ad 	.word	0x080009ad
 8000994:	080009b5 	.word	0x080009b5
 8000998:	080009bd 	.word	0x080009bd
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2246      	movs	r2, #70	; 0x46
 80009a0:	801a      	strh	r2, [r3, #0]
		break;
 80009a2:	e010      	b.n	80009c6 <SerialInitialise+0xbe>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	2246      	movs	r2, #70	; 0x46
 80009a8:	801a      	strh	r2, [r3, #0]
		break;
 80009aa:	e00c      	b.n	80009c6 <SerialInitialise+0xbe>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2246      	movs	r2, #70	; 0x46
 80009b0:	801a      	strh	r2, [r3, #0]
		break;
 80009b2:	e008      	b.n	80009c6 <SerialInitialise+0xbe>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	2246      	movs	r2, #70	; 0x46
 80009b8:	801a      	strh	r2, [r3, #0]
		break;
 80009ba:	e004      	b.n	80009c6 <SerialInitialise+0xbe>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80009c2:	801a      	strh	r2, [r3, #0]
		break;
 80009c4:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f042 020d 	orr.w	r2, r2, #13
 80009d4:	601a      	str	r2, [r3, #0]
}
 80009d6:	bf00      	nop
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 80009f4:	bf00      	nop
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f8      	beq.n	80009f6 <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	79fa      	ldrb	r2, [r7, #7]
 8000a0a:	b292      	uxth	r2, r2
 8000a0c:	801a      	strh	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	b084      	sub	sp, #16
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
	while(*pt != '#') {
 8000a28:	e00b      	b.n	8000a42 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	6839      	ldr	r1, [r7, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffd9 	bl	80009e8 <SerialOutputChar>
		counter++;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
		pt++;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	607b      	str	r3, [r7, #4]
	while(*pt != '#') {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b23      	cmp	r3, #35	; 0x23
 8000a48:	d1ef      	bne.n	8000a2a <SerialOutputString+0x10>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x44>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x44>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x44>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <HAL_MspInit+0x44>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <HAL_MspInit+0x44>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x44>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	603b      	str	r3, [r7, #0]
 8000a88:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a8a:	2007      	movs	r0, #7
 8000a8c:	f001 fc2c 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000abc:	d13d      	bne.n	8000b3a <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000abe:	4b42      	ldr	r3, [pc, #264]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	4a41      	ldr	r2, [pc, #260]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	6153      	str	r3, [r2, #20]
 8000aca:	4b3f      	ldr	r3, [pc, #252]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	623b      	str	r3, [r7, #32]
 8000ad4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad6:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a3b      	ldr	r2, [pc, #236]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	4a35      	ldr	r2, [pc, #212]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	6153      	str	r3, [r2, #20]
 8000afa:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	61bb      	str	r3, [r7, #24]
 8000b04:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PF2     ------> ADC1_IN10
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b06:	2304      	movs	r3, #4
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b16:	4619      	mov	r1, r3
 8000b18:	482c      	ldr	r0, [pc, #176]	; (8000bcc <HAL_ADC_MspInit+0x130>)
 8000b1a:	f001 fc19 	bl	8002350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b22:	2303      	movs	r3, #3
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f001 fc0c 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000b38:	e042      	b.n	8000bc0 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC4)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a24      	ldr	r2, [pc, #144]	; (8000bd0 <HAL_ADC_MspInit+0x134>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d13d      	bne.n	8000bc0 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b4e:	6153      	str	r3, [r2, #20]
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b52:	695b      	ldr	r3, [r3, #20]
 8000b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b5e:	695b      	ldr	r3, [r3, #20]
 8000b60:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b66:	6153      	str	r3, [r2, #20]
 8000b68:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b7e:	6153      	str	r3, [r2, #20]
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <HAL_ADC_MspInit+0x12c>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b92:	2303      	movs	r3, #3
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <HAL_ADC_MspInit+0x138>)
 8000ba2:	f001 fbd5 	bl	8002350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bac:	2303      	movs	r3, #3
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <HAL_ADC_MspInit+0x13c>)
 8000bbc:	f001 fbc8 	bl	8002350 <HAL_GPIO_Init>
}
 8000bc0:	bf00      	nop
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48001400 	.word	0x48001400
 8000bd0:	50000500 	.word	0x50000500
 8000bd4:	48000400 	.word	0x48000400
 8000bd8:	48000c00 	.word	0x48000c00

08000bdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a17      	ldr	r2, [pc, #92]	; (8000c58 <HAL_I2C_MspInit+0x7c>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d127      	bne.n	8000c4e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6153      	str	r3, [r2, #20]
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000c0c:	695b      	ldr	r3, [r3, #20]
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1a:	2312      	movs	r3, #18
 8000c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c26:	2304      	movs	r3, #4
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <HAL_I2C_MspInit+0x84>)
 8000c32:	f001 fb8d 	bl	8002350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c40:	61d3      	str	r3, [r2, #28]
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_I2C_MspInit+0x80>)
 8000c44:	69db      	ldr	r3, [r3, #28]
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	48000400 	.word	0x48000400

08000c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	; 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a17      	ldr	r2, [pc, #92]	; (8000ce0 <HAL_SPI_MspInit+0x7c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d128      	bne.n	8000cd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_SPI_MspInit+0x80>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <HAL_SPI_MspInit+0x80>)
 8000c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c90:	6193      	str	r3, [r2, #24]
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <HAL_SPI_MspInit+0x80>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_SPI_MspInit+0x80>)
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <HAL_SPI_MspInit+0x80>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	6153      	str	r3, [r2, #20]
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_SPI_MspInit+0x80>)
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000cb6:	23e0      	movs	r3, #224	; 0xe0
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd4:	f001 fb3c 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40013000 	.word	0x40013000
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <HAL_PCD_MspInit+0x80>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d129      	bne.n	8000d5e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <HAL_PCD_MspInit+0x84>)
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <HAL_PCD_MspInit+0x84>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	6153      	str	r3, [r2, #20]
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <HAL_PCD_MspInit+0x84>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000d22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000d34:	230e      	movs	r3, #14
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f001 fb05 	bl	8002350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_PCD_MspInit+0x84>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_PCD_MspInit+0x84>)
 8000d4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d50:	61d3      	str	r3, [r2, #28]
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_PCD_MspInit+0x84>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40005c00 	.word	0x40005c00
 8000d6c:	40021000 	.word	0x40021000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f8f2 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f003 fb1a 	bl	800442c <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	2000a000 	.word	0x2000a000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	200004fc 	.word	0x200004fc
 8000e2c:	20000658 	.word	0x20000658

08000e30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <TIM2_IRQHandler>:
	return newPeriod;
}

// The purpose of this function is to deal with interrupts for the timer based upon
// the value of current timer count in comparison to the timer period set in hardware
void TIM2_IRQHandler(void){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	if ((TIM2->SR & TIM_SR_UIF) != 0){
 8000e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d025      	beq.n	8000eb2 <TIM2_IRQHandler+0x5e>
		TIM2->SR &= ~TIM_SR_UIF;
 8000e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	6113      	str	r3, [r2, #16]
		if (one_shot_mode){
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <TIM2_IRQHandler+0x64>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00e      	beq.n	8000e9c <TIM2_IRQHandler+0x48>
			TIM2->CR1 &= ~TIM_CR1_CEN;			// Timer is disabled afterward for a oneshot
 8000e7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6013      	str	r3, [r2, #0]
			if (finished_interval != 0x00){
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <TIM2_IRQHandler+0x68>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <TIM2_IRQHandler+0x48>
				finished_interval();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <TIM2_IRQHandler+0x68>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4798      	blx	r3
			}
		}
		if (continous_mode){
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <TIM2_IRQHandler+0x6c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d006      	beq.n	8000eb2 <TIM2_IRQHandler+0x5e>
			if (finished_interval != 0x00){
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <TIM2_IRQHandler+0x68>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <TIM2_IRQHandler+0x5e>
				finished_interval();
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <TIM2_IRQHandler+0x68>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4798      	blx	r3
			}
		}


	}
}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000505 	.word	0x20000505
 8000ebc:	20000500 	.word	0x20000500
 8000ec0:	20000504 	.word	0x20000504

08000ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec8:	f7ff ffb2 	bl	8000e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopForever+0xe>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopForever+0x16>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f003 faa1 	bl	8004438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ef6:	f7ff f9e1 	bl	80002bc <main>

08000efa <LoopForever>:

LoopForever:
    b LoopForever
 8000efa:	e7fe      	b.n	8000efa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000efc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000f08:	08004db4 	.word	0x08004db4
  ldr r2, =_sbss
 8000f0c:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000f10:	20000654 	.word	0x20000654

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x28>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x28>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f001 f9dd 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff fd8e 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 f9e7 	bl	8002336 <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f80:	f001 f9bd 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000040 	.word	0x20000040
 8000f9c:	20000048 	.word	0x20000048
 8000fa0:	20000044 	.word	0x20000044

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x20>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a04      	ldr	r2, [pc, #16]	; (8000fc8 <HAL_IncTick+0x24>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000048 	.word	0x20000048
 8000fc8:	20000508 	.word	0x20000508

08000fcc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_GetTick+0x14>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000508 	.word	0x20000508

08000fe4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff ffee 	bl	8000fcc <HAL_GetTick>
 8000ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ffc:	d005      	beq.n	800100a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <HAL_Delay+0x44>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800100a:	bf00      	nop
 800100c:	f7ff ffde 	bl	8000fcc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	429a      	cmp	r2, r3
 800101a:	d8f7      	bhi.n	800100c <HAL_Delay+0x28>
  {
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000048 	.word	0x20000048

0800102c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b09a      	sub	sp, #104	; 0x68
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800103a:	2300      	movs	r3, #0
 800103c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e1c9      	b.n	80013e0 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d176      	bne.n	800114c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	2b00      	cmp	r3, #0
 8001064:	d152      	bne.n	800110c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff fd0b 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d13b      	bne.n	800110c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f001 f80f 	bl	80020b8 <ADC_Disable>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d12f      	bne.n	800110c <HAL_ADC_Init+0xe0>
 80010ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d12b      	bne.n	800110c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010bc:	f023 0302 	bic.w	r3, r3, #2
 80010c0:	f043 0202 	orr.w	r2, r3, #2
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80010d6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010e6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010e8:	4b86      	ldr	r3, [pc, #536]	; (8001304 <HAL_ADC_Init+0x2d8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a86      	ldr	r2, [pc, #536]	; (8001308 <HAL_ADC_Init+0x2dc>)
 80010ee:	fba2 2303 	umull	r2, r3, r2, r3
 80010f2:	0c9a      	lsrs	r2, r3, #18
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010fe:	e002      	b.n	8001106 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	3b01      	subs	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f9      	bne.n	8001100 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001128:	d110      	bne.n	800114c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f023 0312 	bic.w	r3, r3, #18
 8001132:	f043 0210 	orr.w	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f043 0201 	orr.w	r2, r3, #1
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b00      	cmp	r3, #0
 8001156:	f040 8136 	bne.w	80013c6 <HAL_ADC_Init+0x39a>
 800115a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800115e:	2b00      	cmp	r3, #0
 8001160:	f040 8131 	bne.w	80013c6 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800116e:	2b00      	cmp	r3, #0
 8001170:	f040 8129 	bne.w	80013c6 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800117c:	f043 0202 	orr.w	r2, r3, #2
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118c:	d004      	beq.n	8001198 <HAL_ADC_Init+0x16c>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a5e      	ldr	r2, [pc, #376]	; (800130c <HAL_ADC_Init+0x2e0>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_ADC_Init+0x170>
 8001198:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_ADC_Init+0x2e4>)
 800119a:	e000      	b.n	800119e <HAL_ADC_Init+0x172>
 800119c:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_ADC_Init+0x2e8>)
 800119e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011a8:	d102      	bne.n	80011b0 <HAL_ADC_Init+0x184>
 80011aa:	4b58      	ldr	r3, [pc, #352]	; (800130c <HAL_ADC_Init+0x2e0>)
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	e01a      	b.n	80011e6 <HAL_ADC_Init+0x1ba>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a55      	ldr	r2, [pc, #340]	; (800130c <HAL_ADC_Init+0x2e0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d103      	bne.n	80011c2 <HAL_ADC_Init+0x196>
 80011ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e011      	b.n	80011e6 <HAL_ADC_Init+0x1ba>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a54      	ldr	r2, [pc, #336]	; (8001318 <HAL_ADC_Init+0x2ec>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d102      	bne.n	80011d2 <HAL_ADC_Init+0x1a6>
 80011cc:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_ADC_Init+0x2f0>)
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e009      	b.n	80011e6 <HAL_ADC_Init+0x1ba>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_ADC_Init+0x2f0>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d102      	bne.n	80011e2 <HAL_ADC_Init+0x1b6>
 80011dc:	4b4e      	ldr	r3, [pc, #312]	; (8001318 <HAL_ADC_Init+0x2ec>)
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e001      	b.n	80011e6 <HAL_ADC_Init+0x1ba>
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d108      	bne.n	8001206 <HAL_ADC_Init+0x1da>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Init+0x1da>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <HAL_ADC_Init+0x1dc>
 8001206:	2300      	movs	r3, #0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d11c      	bne.n	8001246 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800120c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800120e:	2b00      	cmp	r3, #0
 8001210:	d010      	beq.n	8001234 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b01      	cmp	r3, #1
 800121c:	d107      	bne.n	800122e <HAL_ADC_Init+0x202>
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0x202>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_ADC_Init+0x204>
 800122e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	431a      	orrs	r2, r3
 8001242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001244:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7e5b      	ldrb	r3, [r3, #25]
 800124a:	035b      	lsls	r3, r3, #13
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001250:	2a01      	cmp	r2, #1
 8001252:	d002      	beq.n	800125a <HAL_ADC_Init+0x22e>
 8001254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001258:	e000      	b.n	800125c <HAL_ADC_Init+0x230>
 800125a:	2200      	movs	r2, #0
 800125c:	431a      	orrs	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	431a      	orrs	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	4313      	orrs	r3, r2
 800126a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800126c:	4313      	orrs	r3, r2
 800126e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d11b      	bne.n	80012b2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7e5b      	ldrb	r3, [r3, #25]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	3b01      	subs	r3, #1
 8001288:	045a      	lsls	r2, r3, #17
 800128a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800128c:	4313      	orrs	r3, r2
 800128e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001292:	663b      	str	r3, [r7, #96]	; 0x60
 8001294:	e00d      	b.n	80012b2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800129e:	f043 0220 	orr.w	r2, r3, #32
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d03a      	beq.n	8001330 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <HAL_ADC_Init+0x2ec>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d004      	beq.n	80012ce <HAL_ADC_Init+0x2a2>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <HAL_ADC_Init+0x2f0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d128      	bne.n	8001320 <HAL_ADC_Init+0x2f4>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80012d6:	d012      	beq.n	80012fe <HAL_ADC_Init+0x2d2>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012e0:	d00a      	beq.n	80012f8 <HAL_ADC_Init+0x2cc>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80012ea:	d002      	beq.n	80012f2 <HAL_ADC_Init+0x2c6>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f0:	e018      	b.n	8001324 <HAL_ADC_Init+0x2f8>
 80012f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f6:	e015      	b.n	8001324 <HAL_ADC_Init+0x2f8>
 80012f8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80012fc:	e012      	b.n	8001324 <HAL_ADC_Init+0x2f8>
 80012fe:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001302:	e00f      	b.n	8001324 <HAL_ADC_Init+0x2f8>
 8001304:	20000040 	.word	0x20000040
 8001308:	431bde83 	.word	0x431bde83
 800130c:	50000100 	.word	0x50000100
 8001310:	50000300 	.word	0x50000300
 8001314:	50000700 	.word	0x50000700
 8001318:	50000400 	.word	0x50000400
 800131c:	50000500 	.word	0x50000500
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001328:	4313      	orrs	r3, r2
 800132a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800132c:	4313      	orrs	r3, r2
 800132e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d114      	bne.n	8001368 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800134c:	f023 0302 	bic.w	r3, r3, #2
 8001350:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	039a      	lsls	r2, r3, #14
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4313      	orrs	r3, r2
 8001362:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001364:	4313      	orrs	r3, r2
 8001366:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <HAL_ADC_Init+0x3bc>)
 8001370:	4013      	ands	r3, r2
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001378:	430b      	orrs	r3, r1
 800137a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10c      	bne.n	800139e <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f023 010f 	bic.w	r1, r3, #15
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	430a      	orrs	r2, r1
 800139a:	631a      	str	r2, [r3, #48]	; 0x30
 800139c:	e007      	b.n	80013ae <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 020f 	bic.w	r2, r2, #15
 80013ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f023 0303 	bic.w	r3, r3, #3
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40
 80013c4:	e00a      	b.n	80013dc <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f023 0312 	bic.w	r3, r3, #18
 80013ce:	f043 0210 	orr.w	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80013d6:	2301      	movs	r3, #1
 80013d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80013dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3768      	adds	r7, #104	; 0x68
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	fff0c007 	.word	0xfff0c007

080013ec <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 80f9 	bne.w	80015fa <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800140e:	2b01      	cmp	r3, #1
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Start+0x2a>
 8001412:	2302      	movs	r3, #2
 8001414:	e0f4      	b.n	8001600 <HAL_ADC_Start+0x214>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2201      	movs	r2, #1
 800141a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f000 fde6 	bl	8001ff0 <ADC_Enable>
 8001424:	4603      	mov	r3, r0
 8001426:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 80e0 	bne.w	80015f0 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001438:	f023 0301 	bic.w	r3, r3, #1
 800143c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800144c:	d004      	beq.n	8001458 <HAL_ADC_Start+0x6c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6d      	ldr	r2, [pc, #436]	; (8001608 <HAL_ADC_Start+0x21c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d106      	bne.n	8001466 <HAL_ADC_Start+0x7a>
 8001458:	4b6c      	ldr	r3, [pc, #432]	; (800160c <HAL_ADC_Start+0x220>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 031f 	and.w	r3, r3, #31
 8001460:	2b00      	cmp	r3, #0
 8001462:	d010      	beq.n	8001486 <HAL_ADC_Start+0x9a>
 8001464:	e005      	b.n	8001472 <HAL_ADC_Start+0x86>
 8001466:	4b6a      	ldr	r3, [pc, #424]	; (8001610 <HAL_ADC_Start+0x224>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2b00      	cmp	r3, #0
 8001470:	d009      	beq.n	8001486 <HAL_ADC_Start+0x9a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800147a:	d004      	beq.n	8001486 <HAL_ADC_Start+0x9a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a64      	ldr	r2, [pc, #400]	; (8001614 <HAL_ADC_Start+0x228>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d115      	bne.n	80014b2 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d036      	beq.n	800150e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014b0:	e02d      	b.n	800150e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014c6:	d004      	beq.n	80014d2 <HAL_ADC_Start+0xe6>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <HAL_ADC_Start+0x21c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d10a      	bne.n	80014e8 <HAL_ADC_Start+0xfc>
 80014d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	e008      	b.n	80014fa <HAL_ADC_Start+0x10e>
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_ADC_Start+0x228>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf14      	ite	ne
 80014f4:	2301      	movne	r3, #1
 80014f6:	2300      	moveq	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d007      	beq.n	800150e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001506:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151a:	d106      	bne.n	800152a <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001520:	f023 0206 	bic.w	r2, r3, #6
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	645a      	str	r2, [r3, #68]	; 0x44
 8001528:	e002      	b.n	8001530 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	221c      	movs	r2, #28
 800153e:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001548:	d004      	beq.n	8001554 <HAL_ADC_Start+0x168>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <HAL_ADC_Start+0x21c>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d106      	bne.n	8001562 <HAL_ADC_Start+0x176>
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <HAL_ADC_Start+0x220>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 031f 	and.w	r3, r3, #31
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03e      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 8001560:	e005      	b.n	800156e <HAL_ADC_Start+0x182>
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_ADC_Start+0x224>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 031f 	and.w	r3, r3, #31
 800156a:	2b00      	cmp	r3, #0
 800156c:	d037      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001576:	d004      	beq.n	8001582 <HAL_ADC_Start+0x196>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_ADC_Start+0x21c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d106      	bne.n	8001590 <HAL_ADC_Start+0x1a4>
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_ADC_Start+0x220>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	2b05      	cmp	r3, #5
 800158c:	d027      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 800158e:	e005      	b.n	800159c <HAL_ADC_Start+0x1b0>
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_ADC_Start+0x224>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 031f 	and.w	r3, r3, #31
 8001598:	2b05      	cmp	r3, #5
 800159a:	d020      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015a4:	d004      	beq.n	80015b0 <HAL_ADC_Start+0x1c4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_ADC_Start+0x21c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d106      	bne.n	80015be <HAL_ADC_Start+0x1d2>
 80015b0:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_Start+0x220>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d010      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 80015bc:	e005      	b.n	80015ca <HAL_ADC_Start+0x1de>
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_ADC_Start+0x224>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2b09      	cmp	r3, #9
 80015c8:	d009      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015d2:	d004      	beq.n	80015de <HAL_ADC_Start+0x1f2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_ADC_Start+0x228>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d10f      	bne.n	80015fe <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f042 0204 	orr.w	r2, r2, #4
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	e006      	b.n	80015fe <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015f8:	e001      	b.n	80015fe <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015fa:	2302      	movs	r3, #2
 80015fc:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	50000100 	.word	0x50000100
 800160c:	50000300 	.word	0x50000300
 8001610:	50000700 	.word	0x50000700
 8001614:	50000400 	.word	0x50000400

08001618 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d102      	bne.n	8001634 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800162e:	2308      	movs	r3, #8
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e03a      	b.n	80016aa <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800163c:	d004      	beq.n	8001648 <HAL_ADC_PollForConversion+0x30>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a72      	ldr	r2, [pc, #456]	; (800180c <HAL_ADC_PollForConversion+0x1f4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_ADC_PollForConversion+0x34>
 8001648:	4b71      	ldr	r3, [pc, #452]	; (8001810 <HAL_ADC_PollForConversion+0x1f8>)
 800164a:	e000      	b.n	800164e <HAL_ADC_PollForConversion+0x36>
 800164c:	4b71      	ldr	r3, [pc, #452]	; (8001814 <HAL_ADC_PollForConversion+0x1fc>)
 800164e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 031f 	and.w	r3, r3, #31
 8001658:	2b00      	cmp	r3, #0
 800165a:	d112      	bne.n	8001682 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d11d      	bne.n	80016a6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f043 0220 	orr.w	r2, r3, #32
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0bf      	b.n	8001802 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d00b      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f043 0220 	orr.w	r2, r3, #32
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0ad      	b.n	8001802 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016a6:	230c      	movs	r3, #12
 80016a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b2:	d004      	beq.n	80016be <HAL_ADC_PollForConversion+0xa6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_ADC_PollForConversion+0x1f4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d106      	bne.n	80016cc <HAL_ADC_PollForConversion+0xb4>
 80016be:	4b54      	ldr	r3, [pc, #336]	; (8001810 <HAL_ADC_PollForConversion+0x1f8>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d010      	beq.n	80016ec <HAL_ADC_PollForConversion+0xd4>
 80016ca:	e005      	b.n	80016d8 <HAL_ADC_PollForConversion+0xc0>
 80016cc:	4b51      	ldr	r3, [pc, #324]	; (8001814 <HAL_ADC_PollForConversion+0x1fc>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f003 031f 	and.w	r3, r3, #31
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d009      	beq.n	80016ec <HAL_ADC_PollForConversion+0xd4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016e0:	d004      	beq.n	80016ec <HAL_ADC_PollForConversion+0xd4>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_ADC_PollForConversion+0x200>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d104      	bne.n	80016f6 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	e00f      	b.n	8001716 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016fe:	d004      	beq.n	800170a <HAL_ADC_PollForConversion+0xf2>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a41      	ldr	r2, [pc, #260]	; (800180c <HAL_ADC_PollForConversion+0x1f4>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d102      	bne.n	8001710 <HAL_ADC_PollForConversion+0xf8>
 800170a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800170e:	e000      	b.n	8001712 <HAL_ADC_PollForConversion+0xfa>
 8001710:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_ADC_PollForConversion+0x200>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001716:	f7ff fc59 	bl	8000fcc <HAL_GetTick>
 800171a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800171c:	e021      	b.n	8001762 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001724:	d01d      	beq.n	8001762 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <HAL_ADC_PollForConversion+0x124>
 800172c:	f7ff fc4e 	bl	8000fcc <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d212      	bcs.n	8001762 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10b      	bne.n	8001762 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f043 0204 	orr.w	r2, r3, #4
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e04f      	b.n	8001802 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0d6      	beq.n	800171e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001786:	2b00      	cmp	r3, #0
 8001788:	d131      	bne.n	80017ee <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001790:	2b00      	cmp	r3, #0
 8001792:	d12c      	bne.n	80017ee <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d125      	bne.n	80017ee <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d112      	bne.n	80017d6 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d112      	bne.n	80017ee <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f043 0201 	orr.w	r2, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	641a      	str	r2, [r3, #64]	; 0x40
 80017d4:	e00b      	b.n	80017ee <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f043 0220 	orr.w	r2, r3, #32
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f043 0201 	orr.w	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d103      	bne.n	8001800 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	50000100 	.word	0x50000100
 8001810:	50000300 	.word	0x50000300
 8001814:	50000700 	.word	0x50000700
 8001818:	50000400 	.word	0x50000400

0800181c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001838:	b480      	push	{r7}
 800183a:	b09b      	sub	sp, #108	; 0x6c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADC_ConfigChannel+0x22>
 8001856:	2302      	movs	r3, #2
 8001858:	e2c8      	b.n	8001dec <HAL_ADC_ConfigChannel+0x5b4>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 82ac 	bne.w	8001dca <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d81c      	bhi.n	80018b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	461a      	mov	r2, r3
 800188e:	231f      	movs	r3, #31
 8001890:	4093      	lsls	r3, r2
 8001892:	43db      	mvns	r3, r3
 8001894:	4019      	ands	r1, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
 80018b2:	e063      	b.n	800197c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d81e      	bhi.n	80018fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	3b1e      	subs	r3, #30
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	3b1e      	subs	r3, #30
 80018ec:	fa00 f203 	lsl.w	r2, r0, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
 80018f8:	e040      	b.n	800197c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b0e      	cmp	r3, #14
 8001900:	d81e      	bhi.n	8001940 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	3b3c      	subs	r3, #60	; 0x3c
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	3b3c      	subs	r3, #60	; 0x3c
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
 800193e:	e01d      	b.n	800197c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	3b5a      	subs	r3, #90	; 0x5a
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4019      	ands	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	3b5a      	subs	r3, #90	; 0x5a
 8001970:	fa00 f203 	lsl.w	r2, r0, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 80e5 	bne.w	8001b56 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b09      	cmp	r3, #9
 8001992:	d91c      	bls.n	80019ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6999      	ldr	r1, [r3, #24]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	3b1e      	subs	r3, #30
 80019a6:	2207      	movs	r2, #7
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	3b1e      	subs	r3, #30
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]
 80019cc:	e019      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6959      	ldr	r1, [r3, #20]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6898      	ldr	r0, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d84f      	bhi.n	8001ac4 <HAL_ADC_ConfigChannel+0x28c>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <HAL_ADC_ConfigChannel+0x1f4>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a5f 	.word	0x08001a5f
 8001a34:	08001a81 	.word	0x08001a81
 8001a38:	08001aa3 	.word	0x08001aa3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a42:	4b99      	ldr	r3, [pc, #612]	; (8001ca8 <HAL_ADC_ConfigChannel+0x470>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	0691      	lsls	r1, r2, #26
 8001a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a5c:	e07b      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a64:	4b90      	ldr	r3, [pc, #576]	; (8001ca8 <HAL_ADC_ConfigChannel+0x470>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	0691      	lsls	r1, r2, #26
 8001a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a70:	430a      	orrs	r2, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a7e:	e06a      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a86:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <HAL_ADC_ConfigChannel+0x470>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	0691      	lsls	r1, r2, #26
 8001a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a92:	430a      	orrs	r2, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aa0:	e059      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001aa8:	4b7f      	ldr	r3, [pc, #508]	; (8001ca8 <HAL_ADC_ConfigChannel+0x470>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	0691      	lsls	r1, r2, #26
 8001ab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ac0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ac2:	e048      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	069b      	lsls	r3, r3, #26
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ae6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	069b      	lsls	r3, r3, #26
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d107      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	069b      	lsls	r3, r3, #26
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b54:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x33e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x33e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x340>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 8131 	bne.w	8001de0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d00f      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ba4:	e049      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	d91c      	bls.n	8001c02 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6999      	ldr	r1, [r3, #24]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b1b      	subs	r3, #27
 8001bda:	2207      	movs	r2, #7
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4019      	ands	r1, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6898      	ldr	r0, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b1b      	subs	r3, #27
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	e01b      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6959      	ldr	r1, [r3, #20]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	2207      	movs	r2, #7
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4019      	ands	r1, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6898      	ldr	r0, [r3, #8]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c42:	d004      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x416>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_ADC_ConfigChannel+0x474>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d101      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x41a>
 8001c4e:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <HAL_ADC_ConfigChannel+0x478>)
 8001c50:	e000      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x41c>
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_ADC_ConfigChannel+0x47c>)
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d105      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d015      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d105      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c82:	2b12      	cmp	r3, #18
 8001c84:	f040 80ac 	bne.w	8001de0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80a5 	bne.w	8001de0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x480>
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_ADC_ConfigChannel+0x474>)
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	e023      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4b6>
 8001ca6:	bf00      	nop
 8001ca8:	83fff000 	.word	0x83fff000
 8001cac:	50000100 	.word	0x50000100
 8001cb0:	50000300 	.word	0x50000300
 8001cb4:	50000700 	.word	0x50000700
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <HAL_ADC_ConfigChannel+0x5c0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d103      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x492>
 8001cc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e011      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4b6>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a4b      	ldr	r2, [pc, #300]	; (8001dfc <HAL_ADC_ConfigChannel+0x5c4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x4a2>
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	; (8001e00 <HAL_ADC_ConfigChannel+0x5c8>)
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	e009      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4b6>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d102      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x4b2>
 8001ce4:	4b45      	ldr	r3, [pc, #276]	; (8001dfc <HAL_ADC_ConfigChannel+0x5c4>)
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	e001      	b.n	8001cee <HAL_ADC_ConfigChannel+0x4b6>
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d108      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x4d6>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_ADC_ConfigChannel+0x4d6>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x4d8>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d150      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d14:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d010      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d107      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x4fe>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x4fe>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x500>
 8001d36:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d13c      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d11d      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x548>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d4c:	d118      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d58:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5a:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <HAL_ADC_ConfigChannel+0x5cc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <HAL_ADC_ConfigChannel+0x5d0>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	0c9a      	lsrs	r2, r3, #18
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d70:	e002      	b.n	8001d78 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3b01      	subs	r3, #1
 8001d76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f9      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d7e:	e02e      	b.n	8001dde <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b11      	cmp	r3, #17
 8001d86:	d10b      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x568>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d90:	d106      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d9e:	e01e      	b.n	8001dde <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d11a      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001db4:	e013      	b.n	8001dde <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f043 0220 	orr.w	r2, r3, #32
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dc8:	e00a      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f043 0220 	orr.w	r2, r3, #32
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ddc:	e000      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001dde:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001de8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	376c      	adds	r7, #108	; 0x6c
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	50000100 	.word	0x50000100
 8001dfc:	50000400 	.word	0x50000400
 8001e00:	50000500 	.word	0x50000500
 8001e04:	20000040 	.word	0x20000040
 8001e08:	431bde83 	.word	0x431bde83

08001e0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b099      	sub	sp, #100	; 0x64
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e24:	d102      	bne.n	8001e2c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	e01a      	b.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d103      	bne.n	8001e3e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	e011      	b.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a67      	ldr	r2, [pc, #412]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d102      	bne.n	8001e4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e48:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	e009      	b.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a64      	ldr	r2, [pc, #400]	; (8001fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d102      	bne.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	e001      	b.n	8001e62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0b0      	b.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0a9      	b.n	8001fce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f040 808d 	bne.w	8001fac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f040 8086 	bne.w	8001fac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ea8:	d004      	beq.n	8001eb4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a4b      	ldr	r2, [pc, #300]	; (8001fdc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001eb4:	4b4c      	ldr	r3, [pc, #304]	; (8001fe8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001eb6:	e000      	b.n	8001eba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001eb8:	4b4c      	ldr	r3, [pc, #304]	; (8001fec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001eba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d040      	beq.n	8001f46 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6859      	ldr	r1, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed6:	035b      	lsls	r3, r3, #13
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ede:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d108      	bne.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001f00:	2300      	movs	r3, #0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d15c      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d107      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001f22:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d14b      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001f28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001f30:	f023 030f 	bic.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	6811      	ldr	r1, [r2, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	6892      	ldr	r2, [r2, #8]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f42:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f44:	e03c      	b.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001f46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f50:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d108      	bne.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d123      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d107      	bne.n	8001f94 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001f94:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d112      	bne.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001fa2:	f023 030f 	bic.w	r3, r3, #15
 8001fa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fa8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001faa:	e009      	b.n	8001fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f043 0220 	orr.w	r2, r3, #32
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001fbe:	e000      	b.n	8001fc2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001fc0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3764      	adds	r7, #100	; 0x64
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	50000100 	.word	0x50000100
 8001fe0:	50000400 	.word	0x50000400
 8001fe4:	50000500 	.word	0x50000500
 8001fe8:	50000300 	.word	0x50000300
 8001fec:	50000700 	.word	0x50000700

08001ff0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <ADC_Enable+0x2c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <ADC_Enable+0x2c>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <ADC_Enable+0x2e>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d143      	bne.n	80020aa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <ADC_Enable+0xc4>)
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e02f      	b.n	80020ac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0201 	orr.w	r2, r2, #1
 800205a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800205c:	f7fe ffb6 	bl	8000fcc <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002062:	e01b      	b.n	800209c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002064:	f7fe ffb2 	bl	8000fcc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d914      	bls.n	800209c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d00d      	beq.n	800209c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f043 0201 	orr.w	r2, r3, #1
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e007      	b.n	80020ac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d1dc      	bne.n	8002064 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	8000003f 	.word	0x8000003f

080020b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <ADC_Disable+0x2c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <ADC_Disable+0x2c>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e000      	b.n	80020e6 <ADC_Disable+0x2e>
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d047      	beq.n	800217a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030d 	and.w	r3, r3, #13
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10f      	bne.n	8002118 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0202 	orr.w	r2, r2, #2
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2203      	movs	r2, #3
 800210e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002110:	f7fe ff5c 	bl	8000fcc <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002116:	e029      	b.n	800216c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f043 0210 	orr.w	r2, r3, #16
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	f043 0201 	orr.w	r2, r3, #1
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e023      	b.n	800217c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002134:	f7fe ff4a 	bl	8000fcc <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d914      	bls.n	800216c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10d      	bne.n	800216c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f043 0210 	orr.w	r2, r3, #16
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e007      	b.n	800217c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d0dc      	beq.n	8002134 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	; (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	; (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff47 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff5c 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffb0 	bl	80022a4 <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235e:	e154      	b.n	800260a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	4013      	ands	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 8146 	beq.w	8002604 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d005      	beq.n	8002390 <HAL_GPIO_Init+0x40>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d130      	bne.n	80023f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c6:	2201      	movs	r2, #1
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	091b      	lsrs	r3, r3, #4
 80023dc:	f003 0201 	and.w	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d017      	beq.n	800242e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d123      	bne.n	8002482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	220f      	movs	r2, #15
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	6939      	ldr	r1, [r7, #16]
 800247e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	2203      	movs	r2, #3
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0203 	and.w	r2, r3, #3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	693a      	ldr	r2, [r7, #16]
 80024b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 80a0 	beq.w	8002604 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c4:	4b58      	ldr	r3, [pc, #352]	; (8002628 <HAL_GPIO_Init+0x2d8>)
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4a57      	ldr	r2, [pc, #348]	; (8002628 <HAL_GPIO_Init+0x2d8>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6193      	str	r3, [r2, #24]
 80024d0:	4b55      	ldr	r3, [pc, #340]	; (8002628 <HAL_GPIO_Init+0x2d8>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024dc:	4a53      	ldr	r2, [pc, #332]	; (800262c <HAL_GPIO_Init+0x2dc>)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	220f      	movs	r2, #15
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002506:	d019      	beq.n	800253c <HAL_GPIO_Init+0x1ec>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a49      	ldr	r2, [pc, #292]	; (8002630 <HAL_GPIO_Init+0x2e0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <HAL_GPIO_Init+0x1e8>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_GPIO_Init+0x2e4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d00d      	beq.n	8002534 <HAL_GPIO_Init+0x1e4>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a47      	ldr	r2, [pc, #284]	; (8002638 <HAL_GPIO_Init+0x2e8>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <HAL_GPIO_Init+0x1e0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a46      	ldr	r2, [pc, #280]	; (800263c <HAL_GPIO_Init+0x2ec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_GPIO_Init+0x1dc>
 8002528:	2304      	movs	r3, #4
 800252a:	e008      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 800252c:	2305      	movs	r3, #5
 800252e:	e006      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002530:	2303      	movs	r3, #3
 8002532:	e004      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002534:	2302      	movs	r3, #2
 8002536:	e002      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_GPIO_Init+0x1ee>
 800253c:	2300      	movs	r3, #0
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	f002 0203 	and.w	r2, r2, #3
 8002544:	0092      	lsls	r2, r2, #2
 8002546:	4093      	lsls	r3, r2
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800254e:	4937      	ldr	r1, [pc, #220]	; (800262c <HAL_GPIO_Init+0x2dc>)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255c:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43db      	mvns	r3, r3
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002580:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025d4:	4a1a      	ldr	r2, [pc, #104]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <HAL_GPIO_Init+0x2f0>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	f47f aea3 	bne.w	8002360 <HAL_GPIO_Init+0x10>
  }
}
 800261a:	bf00      	nop
 800261c:	bf00      	nop
 800261e:	371c      	adds	r7, #28
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	40021000 	.word	0x40021000
 800262c:	40010000 	.word	0x40010000
 8002630:	48000400 	.word	0x48000400
 8002634:	48000800 	.word	0x48000800
 8002638:	48000c00 	.word	0x48000c00
 800263c:	48001000 	.word	0x48001000
 8002640:	40010400 	.word	0x40010400

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002660:	e002      	b.n	8002668 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e081      	b.n	800278a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fa9e 	bl	8000bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2224      	movs	r2, #36	; 0x24
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0201 	bic.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d107      	bne.n	80026ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	e006      	b.n	80026fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d104      	bne.n	800270e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800270c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002720:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002730:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69d9      	ldr	r1, [r3, #28]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d138      	bne.n	800281a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e032      	b.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2224      	movs	r2, #36	; 0x24
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027e4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0201 	orr.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b20      	cmp	r3, #32
 800283c:	d139      	bne.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002848:	2302      	movs	r3, #2
 800284a:	e033      	b.n	80028b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2224      	movs	r2, #36	; 0x24
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800287a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
  }
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c2:	b08b      	sub	sp, #44	; 0x2c
 80028c4:	af06      	add	r7, sp, #24
 80028c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e0c4      	b.n	8002a5c <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe f9fe 	bl	8000ce8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2203      	movs	r2, #3
 80028f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fd32 	bl	8004362 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fe:	2300      	movs	r3, #0
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e040      	b.n	8002986 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	3301      	adds	r3, #1
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	7bfa      	ldrb	r2, [r7, #15]
 800292c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	440b      	add	r3, r1
 800293e:	3303      	adds	r3, #3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	3338      	adds	r3, #56	; 0x38
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	333c      	adds	r3, #60	; 0x3c
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3340      	adds	r3, #64	; 0x40
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	3301      	adds	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3b9      	bcc.n	8002904 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]
 8002994:	e044      	b.n	8002a20 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002996:	7bfa      	ldrb	r2, [r7, #15]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	440b      	add	r3, r1
 80029a4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d8:	7bfa      	ldrb	r2, [r7, #15]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
 8002a20:	7bfa      	ldrb	r2, [r7, #15]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d3b5      	bcc.n	8002996 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	687e      	ldr	r6, [r7, #4]
 8002a32:	466d      	mov	r5, sp
 8002a34:	f106 0410 	add.w	r4, r6, #16
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	602b      	str	r3, [r5, #0]
 8002a40:	1d33      	adds	r3, r6, #4
 8002a42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a44:	6838      	ldr	r0, [r7, #0]
 8002a46:	f001 fca7 	bl	8004398 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3714      	adds	r7, #20
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a74:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f001 b823 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 817d 	beq.w	8002d9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002aa0:	4bbc      	ldr	r3, [pc, #752]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aac:	4bb9      	ldr	r3, [pc, #740]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d15c      	bne.n	8002b72 <HAL_RCC_OscConfig+0x10e>
 8002ab8:	4bb6      	ldr	r3, [pc, #728]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d155      	bne.n	8002b72 <HAL_RCC_OscConfig+0x10e>
 8002ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002ad2:	fa93 f3a3 	rbit	r3, r3
 8002ad6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ada:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d102      	bne.n	8002af8 <HAL_RCC_OscConfig+0x94>
 8002af2:	4ba8      	ldr	r3, [pc, #672]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	e015      	b.n	8002b24 <HAL_RCC_OscConfig+0xc0>
 8002af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002afc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b10:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002b14:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002b18:	fa93 f3a3 	rbit	r3, r3
 8002b1c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002b20:	4b9c      	ldr	r3, [pc, #624]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b28:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002b2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002b30:	fa92 f2a2 	rbit	r2, r2
 8002b34:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002b38:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002b3c:	fab2 f282 	clz	r2, r2
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	f042 0220 	orr.w	r2, r2, #32
 8002b46:	b2d2      	uxtb	r2, r2
 8002b48:	f002 021f 	and.w	r2, r2, #31
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b52:	4013      	ands	r3, r2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 811f 	beq.w	8002d98 <HAL_RCC_OscConfig+0x334>
 8002b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 8116 	bne.w	8002d98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f000 bfaf 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12e>
 8002b84:	4b83      	ldr	r3, [pc, #524]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a82      	ldr	r2, [pc, #520]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	e036      	b.n	8002c00 <HAL_RCC_OscConfig+0x19c>
 8002b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x158>
 8002ba2:	4b7c      	ldr	r3, [pc, #496]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a7b      	ldr	r2, [pc, #492]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a78      	ldr	r2, [pc, #480]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	e021      	b.n	8002c00 <HAL_RCC_OscConfig+0x19c>
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bcc:	d10c      	bne.n	8002be8 <HAL_RCC_OscConfig+0x184>
 8002bce:	4b71      	ldr	r3, [pc, #452]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a70      	ldr	r2, [pc, #448]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b6e      	ldr	r3, [pc, #440]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6d      	ldr	r2, [pc, #436]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	e00b      	b.n	8002c00 <HAL_RCC_OscConfig+0x19c>
 8002be8:	4b6a      	ldr	r3, [pc, #424]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a69      	ldr	r2, [pc, #420]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	4b67      	ldr	r3, [pc, #412]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a66      	ldr	r2, [pc, #408]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bfe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c00:	4b64      	ldr	r3, [pc, #400]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	f023 020f 	bic.w	r2, r3, #15
 8002c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	495f      	ldr	r1, [pc, #380]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d059      	beq.n	8002cde <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f9cf 	bl	8000fcc <HAL_GetTick>
 8002c2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	e00a      	b.n	8002c4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c34:	f7fe f9ca 	bl	8000fcc <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b64      	cmp	r3, #100	; 0x64
 8002c42:	d902      	bls.n	8002c4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	f000 bf43 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8002c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c4e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002c56:	fa93 f3a3 	rbit	r3, r3
 8002c5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002c5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	095b      	lsrs	r3, r3, #5
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d102      	bne.n	8002c7c <HAL_RCC_OscConfig+0x218>
 8002c76:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	e015      	b.n	8002ca8 <HAL_RCC_OscConfig+0x244>
 8002c7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c80:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002c88:	fa93 f3a3 	rbit	r3, r3
 8002c8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002c90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002c98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002cb0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002cb4:	fa92 f2a2 	rbit	r2, r2
 8002cb8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002cbc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0ab      	beq.n	8002c34 <HAL_RCC_OscConfig+0x1d0>
 8002cdc:	e05d      	b.n	8002d9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7fe f975 	bl	8000fcc <HAL_GetTick>
 8002ce2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e00a      	b.n	8002cfe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f970 	bl	8000fcc <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d902      	bls.n	8002cfe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	f000 bee9 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8002cfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002d12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_OscConfig+0x2cc>
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	e015      	b.n	8002d5c <HAL_RCC_OscConfig+0x2f8>
 8002d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002d44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002d4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002d50:	fa93 f3a3 	rbit	r3, r3
 8002d54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002d58:	4b0e      	ldr	r3, [pc, #56]	; (8002d94 <HAL_RCC_OscConfig+0x330>)
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d60:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002d64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002d68:	fa92 f2a2 	rbit	r2, r2
 8002d6c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002d70:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002d74:	fab2 f282 	clz	r2, r2
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f042 0220 	orr.w	r2, r2, #32
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f002 021f 	and.w	r2, r2, #31
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1ab      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x284>
 8002d90:	e003      	b.n	8002d9a <HAL_RCC_OscConfig+0x336>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 817d 	beq.w	80030aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002db0:	4ba6      	ldr	r3, [pc, #664]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00b      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002dbc:	4ba3      	ldr	r3, [pc, #652]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d172      	bne.n	8002eae <HAL_RCC_OscConfig+0x44a>
 8002dc8:	4ba0      	ldr	r3, [pc, #640]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d16c      	bne.n	8002eae <HAL_RCC_OscConfig+0x44a>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002de6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	fab3 f383 	clz	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	095b      	lsrs	r3, r3, #5
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d102      	bne.n	8002e04 <HAL_RCC_OscConfig+0x3a0>
 8002dfe:	4b93      	ldr	r3, [pc, #588]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	e013      	b.n	8002e2c <HAL_RCC_OscConfig+0x3c8>
 8002e04:	2302      	movs	r3, #2
 8002e06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002e1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002e28:	4b88      	ldr	r3, [pc, #544]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002e32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002e36:	fa92 f2a2 	rbit	r2, r2
 8002e3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002e3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002e42:	fab2 f282 	clz	r2, r2
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	f042 0220 	orr.w	r2, r2, #32
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	f002 021f 	and.w	r2, r2, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f202 	lsl.w	r2, r1, r2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCC_OscConfig+0x410>
 8002e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d002      	beq.n	8002e74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f000 be2e 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	21f8      	movs	r1, #248	; 0xf8
 8002e8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002e92:	fa91 f1a1 	rbit	r1, r1
 8002e96:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002e9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002e9e:	fab1 f181 	clz	r1, r1
 8002ea2:	b2c9      	uxtb	r1, r1
 8002ea4:	408b      	lsls	r3, r1
 8002ea6:	4969      	ldr	r1, [pc, #420]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eac:	e0fd      	b.n	80030aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8088 	beq.w	8002fd0 <HAL_RCC_OscConfig+0x56c>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002eca:	fa93 f3a3 	rbit	r3, r3
 8002ece:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002ed2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed6:	fab3 f383 	clz	r3, r3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2301      	movs	r3, #1
 8002eea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eec:	f7fe f86e 	bl	8000fcc <HAL_GetTick>
 8002ef0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef6:	f7fe f869 	bl	8000fcc <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d902      	bls.n	8002f0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	f000 bde2 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002f16:	fa93 f3a3 	rbit	r3, r3
 8002f1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002f1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	095b      	lsrs	r3, r3, #5
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f043 0301 	orr.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <HAL_RCC_OscConfig+0x4d8>
 8002f36:	4b45      	ldr	r3, [pc, #276]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	e013      	b.n	8002f64 <HAL_RCC_OscConfig+0x500>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002f46:	fa93 f3a3 	rbit	r3, r3
 8002f4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002f4e:	2302      	movs	r3, #2
 8002f50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002f54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002f60:	4b3a      	ldr	r3, [pc, #232]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2202      	movs	r2, #2
 8002f66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002f6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002f6e:	fa92 f2a2 	rbit	r2, r2
 8002f72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002f76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002f7a:	fab2 f282 	clz	r2, r2
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	f002 021f 	and.w	r2, r2, #31
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0af      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f96:	4b2d      	ldr	r3, [pc, #180]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	21f8      	movs	r1, #248	; 0xf8
 8002fac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002fb4:	fa91 f1a1 	rbit	r1, r1
 8002fb8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002fbc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002fc0:	fab1 f181 	clz	r1, r1
 8002fc4:	b2c9      	uxtb	r1, r1
 8002fc6:	408b      	lsls	r3, r1
 8002fc8:	4920      	ldr	r1, [pc, #128]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	e06c      	b.n	80030aa <HAL_RCC_OscConfig+0x646>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002fe2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	fab3 f383 	clz	r3, r3
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ff0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fd ffe6 	bl	8000fcc <HAL_GetTick>
 8003000:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003006:	f7fd ffe1 	bl	8000fcc <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	f000 bd5a 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800302e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f043 0301 	orr.w	r3, r3, #1
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d104      	bne.n	8003050 <HAL_RCC_OscConfig+0x5ec>
 8003046:	4b01      	ldr	r3, [pc, #4]	; (800304c <HAL_RCC_OscConfig+0x5e8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	e015      	b.n	8003078 <HAL_RCC_OscConfig+0x614>
 800304c:	40021000 	.word	0x40021000
 8003050:	2302      	movs	r3, #2
 8003052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800305a:	fa93 f3a3 	rbit	r3, r3
 800305e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003062:	2302      	movs	r3, #2
 8003064:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003068:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003074:	4bc8      	ldr	r3, [pc, #800]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	2202      	movs	r2, #2
 800307a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800307e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003082:	fa92 f2a2 	rbit	r2, r2
 8003086:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800308a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f042 0220 	orr.w	r2, r2, #32
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	f002 021f 	and.w	r2, r2, #31
 800309e:	2101      	movs	r1, #1
 80030a0:	fa01 f202 	lsl.w	r2, r1, r2
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1ad      	bne.n	8003006 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8110 	beq.w	80032e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d079      	beq.n	80031c4 <HAL_RCC_OscConfig+0x760>
 80030d0:	2301      	movs	r3, #1
 80030d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80030e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4bab      	ldr	r3, [pc, #684]	; (800339c <HAL_RCC_OscConfig+0x938>)
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	461a      	mov	r2, r3
 80030f6:	2301      	movs	r3, #1
 80030f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fa:	f7fd ff67 	bl	8000fcc <HAL_GetTick>
 80030fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003104:	f7fd ff62 	bl	8000fcc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	f000 bcdb 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
 800311a:	2302      	movs	r3, #2
 800311c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003134:	2202      	movs	r2, #2
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	fa93 f2a3 	rbit	r2, r3
 8003146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800314a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003158:	2202      	movs	r2, #2
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	fa93 f2a3 	rbit	r2, r3
 800316a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003172:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003174:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 8003176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003180:	2102      	movs	r1, #2
 8003182:	6019      	str	r1, [r3, #0]
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	fa93 f1a3 	rbit	r1, r3
 8003192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003196:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800319a:	6019      	str	r1, [r3, #0]
  return result;
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0a0      	beq.n	8003104 <HAL_RCC_OscConfig+0x6a0>
 80031c2:	e08d      	b.n	80032e0 <HAL_RCC_OscConfig+0x87c>
 80031c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	fa93 f2a3 	rbit	r2, r3
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031e6:	601a      	str	r2, [r3, #0]
  return result;
 80031e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b68      	ldr	r3, [pc, #416]	; (800339c <HAL_RCC_OscConfig+0x938>)
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	461a      	mov	r2, r3
 8003202:	2300      	movs	r3, #0
 8003204:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fd fee1 	bl	8000fcc <HAL_GetTick>
 800320a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003210:	f7fd fedc 	bl	8000fcc <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d902      	bls.n	8003226 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	f000 bc55 	b.w	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8003226:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800322e:	2202      	movs	r2, #2
 8003230:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003236:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	fa93 f2a3 	rbit	r2, r3
 8003240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003244:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800324e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003252:	2202      	movs	r2, #2
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	fa93 f2a3 	rbit	r2, r3
 8003264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003290:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003292:	4b41      	ldr	r3, [pc, #260]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 8003294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800329e:	2102      	movs	r1, #2
 80032a0:	6019      	str	r1, [r3, #0]
 80032a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	fa93 f1a3 	rbit	r1, r3
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032b8:	6019      	str	r1, [r3, #0]
  return result;
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f303 	lsl.w	r3, r1, r3
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d197      	bne.n	8003210 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 81a1 	beq.w	8003638 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fc:	4b26      	ldr	r3, [pc, #152]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d116      	bne.n	8003336 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4a22      	ldr	r2, [pc, #136]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	61d3      	str	r3, [r2, #28]
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800332a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800332e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003330:	2301      	movs	r3, #1
 8003332:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_RCC_OscConfig+0x93c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11a      	bne.n	8003378 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003342:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <HAL_RCC_OscConfig+0x93c>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a16      	ldr	r2, [pc, #88]	; (80033a0 <HAL_RCC_OscConfig+0x93c>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800334e:	f7fd fe3d 	bl	8000fcc <HAL_GetTick>
 8003352:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003356:	e009      	b.n	800336c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003358:	f7fd fe38 	bl	8000fcc <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b64      	cmp	r3, #100	; 0x64
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e3b1      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_RCC_OscConfig+0x93c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ef      	beq.n	8003358 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x940>
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4a02      	ldr	r2, [pc, #8]	; (8003398 <HAL_RCC_OscConfig+0x934>)
 800338e:	f043 0301 	orr.w	r3, r3, #1
 8003392:	6213      	str	r3, [r2, #32]
 8003394:	e03c      	b.n	8003410 <HAL_RCC_OscConfig+0x9ac>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
 800339c:	10908120 	.word	0x10908120
 80033a0:	40007000 	.word	0x40007000
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10c      	bne.n	80033ce <HAL_RCC_OscConfig+0x96a>
 80033b4:	4bc1      	ldr	r3, [pc, #772]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4ac0      	ldr	r2, [pc, #768]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033ba:	f023 0301 	bic.w	r3, r3, #1
 80033be:	6213      	str	r3, [r2, #32]
 80033c0:	4bbe      	ldr	r3, [pc, #760]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4abd      	ldr	r2, [pc, #756]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033c6:	f023 0304 	bic.w	r3, r3, #4
 80033ca:	6213      	str	r3, [r2, #32]
 80033cc:	e020      	b.n	8003410 <HAL_RCC_OscConfig+0x9ac>
 80033ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b05      	cmp	r3, #5
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x994>
 80033de:	4bb7      	ldr	r3, [pc, #732]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	4ab6      	ldr	r2, [pc, #728]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6213      	str	r3, [r2, #32]
 80033ea:	4bb4      	ldr	r3, [pc, #720]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	4ab3      	ldr	r2, [pc, #716]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	6213      	str	r3, [r2, #32]
 80033f6:	e00b      	b.n	8003410 <HAL_RCC_OscConfig+0x9ac>
 80033f8:	4bb0      	ldr	r3, [pc, #704]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	4aaf      	ldr	r2, [pc, #700]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6213      	str	r3, [r2, #32]
 8003404:	4bad      	ldr	r3, [pc, #692]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	4aac      	ldr	r2, [pc, #688]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 800340a:	f023 0304 	bic.w	r3, r3, #4
 800340e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003414:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8081 	beq.w	8003524 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fd fdd3 	bl	8000fcc <HAL_GetTick>
 8003426:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	e00b      	b.n	8003444 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fd fdce 	bl	8000fcc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	f241 3288 	movw	r2, #5000	; 0x1388
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e345      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8003444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003448:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800344c:	2202      	movs	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	fa93 f2a3 	rbit	r2, r3
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003470:	2202      	movs	r2, #2
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003478:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	fa93 f2a3 	rbit	r2, r3
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800348a:	601a      	str	r2, [r3, #0]
  return result;
 800348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003490:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003494:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003496:	fab3 f383 	clz	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f043 0302 	orr.w	r3, r3, #2
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d102      	bne.n	80034b0 <HAL_RCC_OscConfig+0xa4c>
 80034aa:	4b84      	ldr	r3, [pc, #528]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	e013      	b.n	80034d8 <HAL_RCC_OscConfig+0xa74>
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034b8:	2202      	movs	r2, #2
 80034ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	fa93 f2a3 	rbit	r2, r3
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	4b79      	ldr	r3, [pc, #484]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034e0:	2102      	movs	r1, #2
 80034e2:	6011      	str	r1, [r2, #0]
 80034e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80034ec:	6812      	ldr	r2, [r2, #0]
 80034ee:	fa92 f1a2 	rbit	r1, r2
 80034f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80034fa:	6011      	str	r1, [r2, #0]
  return result;
 80034fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003500:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003504:	6812      	ldr	r2, [r2, #0]
 8003506:	fab2 f282 	clz	r2, r2
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	f002 021f 	and.w	r2, r2, #31
 8003516:	2101      	movs	r1, #1
 8003518:	fa01 f202 	lsl.w	r2, r1, r2
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d084      	beq.n	800342c <HAL_RCC_OscConfig+0x9c8>
 8003522:	e07f      	b.n	8003624 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003524:	f7fd fd52 	bl	8000fcc <HAL_GetTick>
 8003528:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352c:	e00b      	b.n	8003546 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800352e:	f7fd fd4d 	bl	8000fcc <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	f241 3288 	movw	r2, #5000	; 0x1388
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e2c4      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800354e:	2202      	movs	r2, #2
 8003550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800356e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003572:	2202      	movs	r2, #2
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800357a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fa93 f2a3 	rbit	r2, r3
 8003584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003588:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800358c:	601a      	str	r2, [r3, #0]
  return result;
 800358e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003592:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003596:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	095b      	lsrs	r3, r3, #5
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_OscConfig+0xb4e>
 80035ac:	4b43      	ldr	r3, [pc, #268]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	e013      	b.n	80035da <HAL_RCC_OscConfig+0xb76>
 80035b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035ba:	2202      	movs	r2, #2
 80035bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	fa93 f2a3 	rbit	r2, r3
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	4b39      	ldr	r3, [pc, #228]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035e2:	2102      	movs	r1, #2
 80035e4:	6011      	str	r1, [r2, #0]
 80035e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	fa92 f1a2 	rbit	r1, r2
 80035f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80035f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80035fc:	6011      	str	r1, [r2, #0]
  return result;
 80035fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003602:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	f002 021f 	and.w	r2, r2, #31
 8003618:	2101      	movs	r1, #1
 800361a:	fa01 f202 	lsl.w	r2, r1, r2
 800361e:	4013      	ands	r3, r2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d184      	bne.n	800352e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003624:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003628:	2b01      	cmp	r3, #1
 800362a:	d105      	bne.n	8003638 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362c:	4b23      	ldr	r3, [pc, #140]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 8003632:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003636:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003638:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800363c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8242 	beq.w	8003ace <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800364a:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <HAL_RCC_OscConfig+0xc58>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 030c 	and.w	r3, r3, #12
 8003652:	2b08      	cmp	r3, #8
 8003654:	f000 8213 	beq.w	8003a7e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	2b02      	cmp	r3, #2
 8003666:	f040 8162 	bne.w	800392e <HAL_RCC_OscConfig+0xeca>
 800366a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800366e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003672:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	fa93 f2a3 	rbit	r2, r3
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800368e:	601a      	str	r2, [r3, #0]
  return result;
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003698:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	461a      	mov	r2, r3
 80036ac:	2300      	movs	r3, #0
 80036ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fd fc8c 	bl	8000fcc <HAL_GetTick>
 80036b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	e00c      	b.n	80036d4 <HAL_RCC_OscConfig+0xc70>
 80036ba:	bf00      	nop
 80036bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fd fc84 	bl	8000fcc <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1fd      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
 80036d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80036f8:	601a      	str	r2, [r3, #0]
  return result;
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003702:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d102      	bne.n	800371e <HAL_RCC_OscConfig+0xcba>
 8003718:	4bb0      	ldr	r3, [pc, #704]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	e027      	b.n	800376e <HAL_RCC_OscConfig+0xd0a>
 800371e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003722:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003726:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800372a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003748:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800374c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003756:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	fa93 f2a3 	rbit	r2, r3
 8003760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003764:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	4b9c      	ldr	r3, [pc, #624]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003772:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003776:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800377a:	6011      	str	r1, [r2, #0]
 800377c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003780:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	fa92 f1a2 	rbit	r1, r2
 800378a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800378e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003792:	6011      	str	r1, [r2, #0]
  return result;
 8003794:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003798:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0220 	orr.w	r2, r2, #32
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d182      	bne.n	80036c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ba:	4b88      	ldr	r3, [pc, #544]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	430b      	orrs	r3, r1
 80037dc:	497f      	ldr	r1, [pc, #508]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80037ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003806:	601a      	str	r2, [r3, #0]
  return result;
 8003808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003810:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800381c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	461a      	mov	r2, r3
 8003824:	2301      	movs	r3, #1
 8003826:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7fd fbd0 	bl	8000fcc <HAL_GetTick>
 800382c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003830:	e009      	b.n	8003846 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003832:	f7fd fbcb 	bl	8000fcc <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e144      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8003846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800384e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	fa93 f2a3 	rbit	r2, r3
 8003862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003866:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800386a:	601a      	str	r2, [r3, #0]
  return result;
 800386c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003870:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003874:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003876:	fab3 f383 	clz	r3, r3
 800387a:	b2db      	uxtb	r3, r3
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	b2db      	uxtb	r3, r3
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <HAL_RCC_OscConfig+0xe2c>
 800388a:	4b54      	ldr	r3, [pc, #336]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	e027      	b.n	80038e0 <HAL_RCC_OscConfig+0xe7c>
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003898:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800389c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	fa93 f2a3 	rbit	r2, r3
 80038d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80038ec:	6011      	str	r1, [r2, #0]
 80038ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80038f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	fa92 f1a2 	rbit	r1, r2
 80038fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003900:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003904:	6011      	str	r1, [r2, #0]
  return result;
 8003906:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800390a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	fab2 f282 	clz	r2, r2
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f042 0220 	orr.w	r2, r2, #32
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	f002 021f 	and.w	r2, r2, #31
 8003920:	2101      	movs	r1, #1
 8003922:	fa01 f202 	lsl.w	r2, r1, r2
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d082      	beq.n	8003832 <HAL_RCC_OscConfig+0xdce>
 800392c:	e0cf      	b.n	8003ace <HAL_RCC_OscConfig+0x106a>
 800392e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003932:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800393a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003940:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003952:	601a      	str	r2, [r3, #0]
  return result;
 8003954:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003958:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800395c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	fab3 f383 	clz	r3, r3
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003968:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	461a      	mov	r2, r3
 8003970:	2300      	movs	r3, #0
 8003972:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7fd fb2a 	bl	8000fcc <HAL_GetTick>
 8003978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397c:	e009      	b.n	8003992 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397e:	f7fd fb25 	bl	8000fcc <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e09e      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800399a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800399e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	fa93 f2a3 	rbit	r2, r3
 80039ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039b6:	601a      	str	r2, [r3, #0]
  return result;
 80039b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80039c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039c2:	fab3 f383 	clz	r3, r3
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d104      	bne.n	80039e0 <HAL_RCC_OscConfig+0xf7c>
 80039d6:	4b01      	ldr	r3, [pc, #4]	; (80039dc <HAL_RCC_OscConfig+0xf78>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	e029      	b.n	8003a30 <HAL_RCC_OscConfig+0xfcc>
 80039dc:	40021000 	.word	0x40021000
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	fa93 f2a3 	rbit	r2, r3
 80039fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a00:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a18:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	fa93 f2a3 	rbit	r2, r3
 8003a22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a26:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	4b2b      	ldr	r3, [pc, #172]	; (8003adc <HAL_RCC_OscConfig+0x1078>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a34:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a3c:	6011      	str	r1, [r2, #0]
 8003a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a42:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	fa92 f1a2 	rbit	r1, r2
 8003a4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a50:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a54:	6011      	str	r1, [r2, #0]
  return result;
 8003a56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a5a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	fab2 f282 	clz	r2, r2
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f042 0220 	orr.w	r2, r2, #32
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f002 021f 	and.w	r2, r2, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f202 	lsl.w	r2, r1, r2
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d180      	bne.n	800397e <HAL_RCC_OscConfig+0xf1a>
 8003a7c:	e027      	b.n	8003ace <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e01e      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a92:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_RCC_OscConfig+0x1078>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a9e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d10b      	bne.n	8003aca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ab2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ab6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003aba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b09e      	sub	sp, #120	; 0x78
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e162      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af8:	4b90      	ldr	r3, [pc, #576]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d910      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b8d      	ldr	r3, [pc, #564]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	498b      	ldr	r1, [pc, #556]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b89      	ldr	r3, [pc, #548]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e14a      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b82      	ldr	r3, [pc, #520]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	497f      	ldr	r1, [pc, #508]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80dc 	beq.w	8003d0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d13c      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xf6>
 8003b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b64:	fa93 f3a3 	rbit	r3, r3
 8003b68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6c:	fab3 f383 	clz	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	f043 0301 	orr.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d102      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xa6>
 8003b80:	4b6f      	ldr	r3, [pc, #444]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	e00f      	b.n	8003ba6 <HAL_RCC_ClockConfig+0xc6>
 8003b86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	667b      	str	r3, [r7, #100]	; 0x64
 8003b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b98:	663b      	str	r3, [r7, #96]	; 0x60
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ba2:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003baa:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bae:	fa92 f2a2 	rbit	r2, r2
 8003bb2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003bb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bb6:	fab2 f282 	clz	r2, r2
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	f042 0220 	orr.w	r2, r2, #32
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	f002 021f 	and.w	r2, r2, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d17b      	bne.n	8003cca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0f3      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d13c      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x178>
 8003bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bee:	fab3 f383 	clz	r3, r3
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x128>
 8003c02:	4b4f      	ldr	r3, [pc, #316]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	e00f      	b.n	8003c28 <HAL_RCC_ClockConfig+0x148>
 8003c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	fa93 f3a3 	rbit	r3, r3
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c30:	fa92 f2a2 	rbit	r2, r2
 8003c34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c38:	fab2 f282 	clz	r2, r2
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	f042 0220 	orr.w	r2, r2, #32
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	f002 021f 	and.w	r2, r2, #31
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d13a      	bne.n	8003cca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b2      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d102      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x1a0>
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	e00d      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1bc>
 8003c80:	2302      	movs	r3, #2
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	fa93 f3a3 	rbit	r3, r3
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	623b      	str	r3, [r7, #32]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	fa93 f3a3 	rbit	r3, r3
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	4b29      	ldr	r3, [pc, #164]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	61ba      	str	r2, [r7, #24]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	fa92 f2a2 	rbit	r2, r2
 8003ca6:	617a      	str	r2, [r7, #20]
  return result;
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	fab2 f282 	clz	r2, r2
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	f042 0220 	orr.w	r2, r2, #32
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	f002 021f 	and.w	r2, r2, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e079      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	491a      	ldr	r1, [pc, #104]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd f976 	bl	8000fcc <HAL_GetTick>
 8003ce0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd f972 	bl	8000fcc <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e061      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_RCC_ClockConfig+0x260>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d214      	bcs.n	8003d44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 0207 	bic.w	r2, r3, #7
 8003d22:	4906      	ldr	r1, [pc, #24]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <HAL_RCC_ClockConfig+0x25c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d005      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e040      	b.n	8003dbe <HAL_RCC_ClockConfig+0x2de>
 8003d3c:	40022000 	.word	0x40022000
 8003d40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d008      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	491a      	ldr	r1, [pc, #104]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0308 	and.w	r3, r3, #8
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d009      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d6e:	4b16      	ldr	r3, [pc, #88]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	4912      	ldr	r1, [pc, #72]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d82:	f000 f829 	bl	8003dd8 <HAL_RCC_GetSysClockFreq>
 8003d86:	4601      	mov	r1, r0
 8003d88:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d90:	22f0      	movs	r2, #240	; 0xf0
 8003d92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	fa92 f2a2 	rbit	r2, r2
 8003d9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	fab2 f282 	clz	r2, r2
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	40d3      	lsrs	r3, r2
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_ClockConfig+0x2ec>)
 8003da8:	5cd3      	ldrb	r3, [r2, r3]
 8003daa:	fa21 f303 	lsr.w	r3, r1, r3
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <HAL_RCC_ClockConfig+0x2f0>)
 8003db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCC_ClockConfig+0x2f4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd f8c4 	bl	8000f44 <HAL_InitTick>
  
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3778      	adds	r7, #120	; 0x78
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08004d48 	.word	0x08004d48
 8003dd0:	20000040 	.word	0x20000040
 8003dd4:	20000044 	.word	0x20000044

08003dd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b08b      	sub	sp, #44	; 0x2c
 8003ddc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003df2:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d002      	beq.n	8003e08 <HAL_RCC_GetSysClockFreq+0x30>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d003      	beq.n	8003e0e <HAL_RCC_GetSysClockFreq+0x36>
 8003e06:	e03c      	b.n	8003e82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e0a:	623b      	str	r3, [r7, #32]
      break;
 8003e0c:	e03c      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003e14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003e18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	fa92 f2a2 	rbit	r2, r2
 8003e20:	607a      	str	r2, [r7, #4]
  return result;
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	fab2 f282 	clz	r2, r2
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	40d3      	lsrs	r3, r2
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e32:	4b19      	ldr	r3, [pc, #100]	; (8003e98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	fa92 f2a2 	rbit	r2, r2
 8003e44:	60fa      	str	r2, [r7, #12]
  return result;
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	40d3      	lsrs	r3, r2
 8003e50:	4a14      	ldr	r2, [pc, #80]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e60:	4a0e      	ldr	r2, [pc, #56]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	fb02 f303 	mul.w	r3, r2, r3
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e70:	e004      	b.n	8003e7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	623b      	str	r3, [r7, #32]
      break;
 8003e80:	e002      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e84:	623b      	str	r3, [r7, #32]
      break;
 8003e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e88:	6a3b      	ldr	r3, [r7, #32]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	372c      	adds	r7, #44	; 0x2c
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	007a1200 	.word	0x007a1200
 8003ea0:	08004d58 	.word	0x08004d58
 8003ea4:	08004d68 	.word	0x08004d68
 8003ea8:	003d0900 	.word	0x003d0900

08003eac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b092      	sub	sp, #72	; 0x48
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80d4 	beq.w	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ed0:	4b4e      	ldr	r3, [pc, #312]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10e      	bne.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	4a4a      	ldr	r2, [pc, #296]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	61d3      	str	r3, [r2, #28]
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efa:	4b45      	ldr	r3, [pc, #276]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d118      	bne.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f06:	4b42      	ldr	r3, [pc, #264]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a41      	ldr	r2, [pc, #260]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f12:	f7fd f85b 	bl	8000fcc <HAL_GetTick>
 8003f16:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	e008      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1a:	f7fd f857 	bl	8000fcc <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b64      	cmp	r3, #100	; 0x64
 8003f26:	d901      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e169      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2c:	4b38      	ldr	r3, [pc, #224]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0f0      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f38:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8084 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d07c      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f58:	4b2c      	ldr	r3, [pc, #176]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	461a      	mov	r2, r3
 8003f82:	2301      	movs	r3, #1
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003faa:	4a18      	ldr	r2, [pc, #96]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04b      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fd f807 	bl	8000fcc <HAL_GetTick>
 8003fbe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd f803 	bl	8000fcc <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e113      	b.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	623b      	str	r3, [r7, #32]
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	61fb      	str	r3, [r7, #28]
  return result;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	fab3 f383 	clz	r3, r3
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	095b      	lsrs	r3, r3, #5
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f043 0302 	orr.w	r3, r3, #2
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d108      	bne.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004006:	4b01      	ldr	r3, [pc, #4]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	e00d      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800400c:	40021000 	.word	0x40021000
 8004010:	40007000 	.word	0x40007000
 8004014:	10908100 	.word	0x10908100
 8004018:	2302      	movs	r3, #2
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2202      	movs	r2, #2
 800402a:	613a      	str	r2, [r7, #16]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	fa92 f2a2 	rbit	r2, r2
 8004032:	60fa      	str	r2, [r7, #12]
  return result;
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	fab2 f282 	clz	r2, r2
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	f002 021f 	and.w	r2, r2, #31
 8004046:	2101      	movs	r1, #1
 8004048:	fa01 f202 	lsl.w	r2, r1, r2
 800404c:	4013      	ands	r3, r2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0b7      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004052:	4b6d      	ldr	r3, [pc, #436]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	496a      	ldr	r1, [pc, #424]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004060:	4313      	orrs	r3, r2
 8004062:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004064:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406c:	4b66      	ldr	r3, [pc, #408]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800406e:	69db      	ldr	r3, [r3, #28]
 8004070:	4a65      	ldr	r2, [pc, #404]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004076:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004084:	4b60      	ldr	r3, [pc, #384]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	495d      	ldr	r1, [pc, #372]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a2:	4b59      	ldr	r3, [pc, #356]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	4956      	ldr	r1, [pc, #344]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	494e      	ldr	r1, [pc, #312]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040de:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	f023 0210 	bic.w	r2, r3, #16
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4947      	ldr	r1, [pc, #284]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80040fc:	4b42      	ldr	r3, [pc, #264]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	493f      	ldr	r1, [pc, #252]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411e:	f023 0220 	bic.w	r2, r3, #32
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4938      	ldr	r1, [pc, #224]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004138:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	4930      	ldr	r1, [pc, #192]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004146:	4313      	orrs	r3, r2
 8004148:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004174:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	4921      	ldr	r1, [pc, #132]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	491a      	ldr	r1, [pc, #104]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80041b0:	4b15      	ldr	r3, [pc, #84]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041bc:	4912      	ldr	r1, [pc, #72]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	490b      	ldr	r1, [pc, #44]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80041ec:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	4903      	ldr	r1, [pc, #12]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3748      	adds	r7, #72	; 0x48
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000

0800420c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e09d      	b.n	800435a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d108      	bne.n	8004238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422e:	d009      	beq.n	8004244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	61da      	str	r2, [r3, #28]
 8004236:	e005      	b.n	8004244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fc fd00 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004284:	d902      	bls.n	800428c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	e002      	b.n	8004292 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800428c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004290:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800429a:	d007      	beq.n	80042ac <HAL_SPI_Init+0xa0>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042a4:	d002      	beq.n	80042ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	ea42 0103 	orr.w	r1, r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	f003 0204 	and.w	r2, r3, #4
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004328:	ea42 0103 	orr.w	r1, r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004348:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800436a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800436e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	b29b      	uxth	r3, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	b29b      	uxth	r3, r3
 8004380:	4013      	ands	r3, r2
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004398:	b084      	sub	sp, #16
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	f107 0014 	add.w	r0, r7, #20
 80043a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	b004      	add	sp, #16
 80043d8:	4770      	bx	lr
	...

080043dc <siprintf>:
 80043dc:	b40e      	push	{r1, r2, r3}
 80043de:	b500      	push	{lr}
 80043e0:	b09c      	sub	sp, #112	; 0x70
 80043e2:	ab1d      	add	r3, sp, #116	; 0x74
 80043e4:	9002      	str	r0, [sp, #8]
 80043e6:	9006      	str	r0, [sp, #24]
 80043e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043ec:	4809      	ldr	r0, [pc, #36]	; (8004414 <siprintf+0x38>)
 80043ee:	9107      	str	r1, [sp, #28]
 80043f0:	9104      	str	r1, [sp, #16]
 80043f2:	4909      	ldr	r1, [pc, #36]	; (8004418 <siprintf+0x3c>)
 80043f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043f8:	9105      	str	r1, [sp, #20]
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	9301      	str	r3, [sp, #4]
 80043fe:	a902      	add	r1, sp, #8
 8004400:	f000 f89a 	bl	8004538 <_svfiprintf_r>
 8004404:	9b02      	ldr	r3, [sp, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	b01c      	add	sp, #112	; 0x70
 800440c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004410:	b003      	add	sp, #12
 8004412:	4770      	bx	lr
 8004414:	20000098 	.word	0x20000098
 8004418:	ffff0208 	.word	0xffff0208

0800441c <memset>:
 800441c:	4402      	add	r2, r0
 800441e:	4603      	mov	r3, r0
 8004420:	4293      	cmp	r3, r2
 8004422:	d100      	bne.n	8004426 <memset+0xa>
 8004424:	4770      	bx	lr
 8004426:	f803 1b01 	strb.w	r1, [r3], #1
 800442a:	e7f9      	b.n	8004420 <memset+0x4>

0800442c <__errno>:
 800442c:	4b01      	ldr	r3, [pc, #4]	; (8004434 <__errno+0x8>)
 800442e:	6818      	ldr	r0, [r3, #0]
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	20000098 	.word	0x20000098

08004438 <__libc_init_array>:
 8004438:	b570      	push	{r4, r5, r6, lr}
 800443a:	4d0d      	ldr	r5, [pc, #52]	; (8004470 <__libc_init_array+0x38>)
 800443c:	4c0d      	ldr	r4, [pc, #52]	; (8004474 <__libc_init_array+0x3c>)
 800443e:	1b64      	subs	r4, r4, r5
 8004440:	10a4      	asrs	r4, r4, #2
 8004442:	2600      	movs	r6, #0
 8004444:	42a6      	cmp	r6, r4
 8004446:	d109      	bne.n	800445c <__libc_init_array+0x24>
 8004448:	4d0b      	ldr	r5, [pc, #44]	; (8004478 <__libc_init_array+0x40>)
 800444a:	4c0c      	ldr	r4, [pc, #48]	; (800447c <__libc_init_array+0x44>)
 800444c:	f000 fc6a 	bl	8004d24 <_init>
 8004450:	1b64      	subs	r4, r4, r5
 8004452:	10a4      	asrs	r4, r4, #2
 8004454:	2600      	movs	r6, #0
 8004456:	42a6      	cmp	r6, r4
 8004458:	d105      	bne.n	8004466 <__libc_init_array+0x2e>
 800445a:	bd70      	pop	{r4, r5, r6, pc}
 800445c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004460:	4798      	blx	r3
 8004462:	3601      	adds	r6, #1
 8004464:	e7ee      	b.n	8004444 <__libc_init_array+0xc>
 8004466:	f855 3b04 	ldr.w	r3, [r5], #4
 800446a:	4798      	blx	r3
 800446c:	3601      	adds	r6, #1
 800446e:	e7f2      	b.n	8004456 <__libc_init_array+0x1e>
 8004470:	08004dac 	.word	0x08004dac
 8004474:	08004dac 	.word	0x08004dac
 8004478:	08004dac 	.word	0x08004dac
 800447c:	08004db0 	.word	0x08004db0

08004480 <__retarget_lock_acquire_recursive>:
 8004480:	4770      	bx	lr

08004482 <__retarget_lock_release_recursive>:
 8004482:	4770      	bx	lr

08004484 <__ssputs_r>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	688e      	ldr	r6, [r1, #8]
 800448a:	461f      	mov	r7, r3
 800448c:	42be      	cmp	r6, r7
 800448e:	680b      	ldr	r3, [r1, #0]
 8004490:	4682      	mov	sl, r0
 8004492:	460c      	mov	r4, r1
 8004494:	4690      	mov	r8, r2
 8004496:	d82c      	bhi.n	80044f2 <__ssputs_r+0x6e>
 8004498:	898a      	ldrh	r2, [r1, #12]
 800449a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800449e:	d026      	beq.n	80044ee <__ssputs_r+0x6a>
 80044a0:	6965      	ldr	r5, [r4, #20]
 80044a2:	6909      	ldr	r1, [r1, #16]
 80044a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a8:	eba3 0901 	sub.w	r9, r3, r1
 80044ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044b0:	1c7b      	adds	r3, r7, #1
 80044b2:	444b      	add	r3, r9
 80044b4:	106d      	asrs	r5, r5, #1
 80044b6:	429d      	cmp	r5, r3
 80044b8:	bf38      	it	cc
 80044ba:	461d      	movcc	r5, r3
 80044bc:	0553      	lsls	r3, r2, #21
 80044be:	d527      	bpl.n	8004510 <__ssputs_r+0x8c>
 80044c0:	4629      	mov	r1, r5
 80044c2:	f000 f957 	bl	8004774 <_malloc_r>
 80044c6:	4606      	mov	r6, r0
 80044c8:	b360      	cbz	r0, 8004524 <__ssputs_r+0xa0>
 80044ca:	6921      	ldr	r1, [r4, #16]
 80044cc:	464a      	mov	r2, r9
 80044ce:	f000 fbc7 	bl	8004c60 <memcpy>
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	6126      	str	r6, [r4, #16]
 80044e0:	6165      	str	r5, [r4, #20]
 80044e2:	444e      	add	r6, r9
 80044e4:	eba5 0509 	sub.w	r5, r5, r9
 80044e8:	6026      	str	r6, [r4, #0]
 80044ea:	60a5      	str	r5, [r4, #8]
 80044ec:	463e      	mov	r6, r7
 80044ee:	42be      	cmp	r6, r7
 80044f0:	d900      	bls.n	80044f4 <__ssputs_r+0x70>
 80044f2:	463e      	mov	r6, r7
 80044f4:	6820      	ldr	r0, [r4, #0]
 80044f6:	4632      	mov	r2, r6
 80044f8:	4641      	mov	r1, r8
 80044fa:	f000 fb86 	bl	8004c0a <memmove>
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	1b9b      	subs	r3, r3, r6
 8004502:	60a3      	str	r3, [r4, #8]
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	4433      	add	r3, r6
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	2000      	movs	r0, #0
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	462a      	mov	r2, r5
 8004512:	f000 fb4b 	bl	8004bac <_realloc_r>
 8004516:	4606      	mov	r6, r0
 8004518:	2800      	cmp	r0, #0
 800451a:	d1e0      	bne.n	80044de <__ssputs_r+0x5a>
 800451c:	6921      	ldr	r1, [r4, #16]
 800451e:	4650      	mov	r0, sl
 8004520:	f000 fbac 	bl	8004c7c <_free_r>
 8004524:	230c      	movs	r3, #12
 8004526:	f8ca 3000 	str.w	r3, [sl]
 800452a:	89a3      	ldrh	r3, [r4, #12]
 800452c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004536:	e7e9      	b.n	800450c <__ssputs_r+0x88>

08004538 <_svfiprintf_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	4698      	mov	r8, r3
 800453e:	898b      	ldrh	r3, [r1, #12]
 8004540:	061b      	lsls	r3, r3, #24
 8004542:	b09d      	sub	sp, #116	; 0x74
 8004544:	4607      	mov	r7, r0
 8004546:	460d      	mov	r5, r1
 8004548:	4614      	mov	r4, r2
 800454a:	d50e      	bpl.n	800456a <_svfiprintf_r+0x32>
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	b963      	cbnz	r3, 800456a <_svfiprintf_r+0x32>
 8004550:	2140      	movs	r1, #64	; 0x40
 8004552:	f000 f90f 	bl	8004774 <_malloc_r>
 8004556:	6028      	str	r0, [r5, #0]
 8004558:	6128      	str	r0, [r5, #16]
 800455a:	b920      	cbnz	r0, 8004566 <_svfiprintf_r+0x2e>
 800455c:	230c      	movs	r3, #12
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004564:	e0d0      	b.n	8004708 <_svfiprintf_r+0x1d0>
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	616b      	str	r3, [r5, #20]
 800456a:	2300      	movs	r3, #0
 800456c:	9309      	str	r3, [sp, #36]	; 0x24
 800456e:	2320      	movs	r3, #32
 8004570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004574:	f8cd 800c 	str.w	r8, [sp, #12]
 8004578:	2330      	movs	r3, #48	; 0x30
 800457a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004720 <_svfiprintf_r+0x1e8>
 800457e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004582:	f04f 0901 	mov.w	r9, #1
 8004586:	4623      	mov	r3, r4
 8004588:	469a      	mov	sl, r3
 800458a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800458e:	b10a      	cbz	r2, 8004594 <_svfiprintf_r+0x5c>
 8004590:	2a25      	cmp	r2, #37	; 0x25
 8004592:	d1f9      	bne.n	8004588 <_svfiprintf_r+0x50>
 8004594:	ebba 0b04 	subs.w	fp, sl, r4
 8004598:	d00b      	beq.n	80045b2 <_svfiprintf_r+0x7a>
 800459a:	465b      	mov	r3, fp
 800459c:	4622      	mov	r2, r4
 800459e:	4629      	mov	r1, r5
 80045a0:	4638      	mov	r0, r7
 80045a2:	f7ff ff6f 	bl	8004484 <__ssputs_r>
 80045a6:	3001      	adds	r0, #1
 80045a8:	f000 80a9 	beq.w	80046fe <_svfiprintf_r+0x1c6>
 80045ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045ae:	445a      	add	r2, fp
 80045b0:	9209      	str	r2, [sp, #36]	; 0x24
 80045b2:	f89a 3000 	ldrb.w	r3, [sl]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80a1 	beq.w	80046fe <_svfiprintf_r+0x1c6>
 80045bc:	2300      	movs	r3, #0
 80045be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c6:	f10a 0a01 	add.w	sl, sl, #1
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	9307      	str	r3, [sp, #28]
 80045ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045d2:	931a      	str	r3, [sp, #104]	; 0x68
 80045d4:	4654      	mov	r4, sl
 80045d6:	2205      	movs	r2, #5
 80045d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045dc:	4850      	ldr	r0, [pc, #320]	; (8004720 <_svfiprintf_r+0x1e8>)
 80045de:	f7fb fdf7 	bl	80001d0 <memchr>
 80045e2:	9a04      	ldr	r2, [sp, #16]
 80045e4:	b9d8      	cbnz	r0, 800461e <_svfiprintf_r+0xe6>
 80045e6:	06d0      	lsls	r0, r2, #27
 80045e8:	bf44      	itt	mi
 80045ea:	2320      	movmi	r3, #32
 80045ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f0:	0711      	lsls	r1, r2, #28
 80045f2:	bf44      	itt	mi
 80045f4:	232b      	movmi	r3, #43	; 0x2b
 80045f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045fa:	f89a 3000 	ldrb.w	r3, [sl]
 80045fe:	2b2a      	cmp	r3, #42	; 0x2a
 8004600:	d015      	beq.n	800462e <_svfiprintf_r+0xf6>
 8004602:	9a07      	ldr	r2, [sp, #28]
 8004604:	4654      	mov	r4, sl
 8004606:	2000      	movs	r0, #0
 8004608:	f04f 0c0a 	mov.w	ip, #10
 800460c:	4621      	mov	r1, r4
 800460e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004612:	3b30      	subs	r3, #48	; 0x30
 8004614:	2b09      	cmp	r3, #9
 8004616:	d94d      	bls.n	80046b4 <_svfiprintf_r+0x17c>
 8004618:	b1b0      	cbz	r0, 8004648 <_svfiprintf_r+0x110>
 800461a:	9207      	str	r2, [sp, #28]
 800461c:	e014      	b.n	8004648 <_svfiprintf_r+0x110>
 800461e:	eba0 0308 	sub.w	r3, r0, r8
 8004622:	fa09 f303 	lsl.w	r3, r9, r3
 8004626:	4313      	orrs	r3, r2
 8004628:	9304      	str	r3, [sp, #16]
 800462a:	46a2      	mov	sl, r4
 800462c:	e7d2      	b.n	80045d4 <_svfiprintf_r+0x9c>
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	1d19      	adds	r1, r3, #4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	9103      	str	r1, [sp, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	bfbb      	ittet	lt
 800463a:	425b      	neglt	r3, r3
 800463c:	f042 0202 	orrlt.w	r2, r2, #2
 8004640:	9307      	strge	r3, [sp, #28]
 8004642:	9307      	strlt	r3, [sp, #28]
 8004644:	bfb8      	it	lt
 8004646:	9204      	strlt	r2, [sp, #16]
 8004648:	7823      	ldrb	r3, [r4, #0]
 800464a:	2b2e      	cmp	r3, #46	; 0x2e
 800464c:	d10c      	bne.n	8004668 <_svfiprintf_r+0x130>
 800464e:	7863      	ldrb	r3, [r4, #1]
 8004650:	2b2a      	cmp	r3, #42	; 0x2a
 8004652:	d134      	bne.n	80046be <_svfiprintf_r+0x186>
 8004654:	9b03      	ldr	r3, [sp, #12]
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	9203      	str	r2, [sp, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	bfb8      	it	lt
 8004660:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004664:	3402      	adds	r4, #2
 8004666:	9305      	str	r3, [sp, #20]
 8004668:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004730 <_svfiprintf_r+0x1f8>
 800466c:	7821      	ldrb	r1, [r4, #0]
 800466e:	2203      	movs	r2, #3
 8004670:	4650      	mov	r0, sl
 8004672:	f7fb fdad 	bl	80001d0 <memchr>
 8004676:	b138      	cbz	r0, 8004688 <_svfiprintf_r+0x150>
 8004678:	9b04      	ldr	r3, [sp, #16]
 800467a:	eba0 000a 	sub.w	r0, r0, sl
 800467e:	2240      	movs	r2, #64	; 0x40
 8004680:	4082      	lsls	r2, r0
 8004682:	4313      	orrs	r3, r2
 8004684:	3401      	adds	r4, #1
 8004686:	9304      	str	r3, [sp, #16]
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	4825      	ldr	r0, [pc, #148]	; (8004724 <_svfiprintf_r+0x1ec>)
 800468e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004692:	2206      	movs	r2, #6
 8004694:	f7fb fd9c 	bl	80001d0 <memchr>
 8004698:	2800      	cmp	r0, #0
 800469a:	d038      	beq.n	800470e <_svfiprintf_r+0x1d6>
 800469c:	4b22      	ldr	r3, [pc, #136]	; (8004728 <_svfiprintf_r+0x1f0>)
 800469e:	bb1b      	cbnz	r3, 80046e8 <_svfiprintf_r+0x1b0>
 80046a0:	9b03      	ldr	r3, [sp, #12]
 80046a2:	3307      	adds	r3, #7
 80046a4:	f023 0307 	bic.w	r3, r3, #7
 80046a8:	3308      	adds	r3, #8
 80046aa:	9303      	str	r3, [sp, #12]
 80046ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ae:	4433      	add	r3, r6
 80046b0:	9309      	str	r3, [sp, #36]	; 0x24
 80046b2:	e768      	b.n	8004586 <_svfiprintf_r+0x4e>
 80046b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b8:	460c      	mov	r4, r1
 80046ba:	2001      	movs	r0, #1
 80046bc:	e7a6      	b.n	800460c <_svfiprintf_r+0xd4>
 80046be:	2300      	movs	r3, #0
 80046c0:	3401      	adds	r4, #1
 80046c2:	9305      	str	r3, [sp, #20]
 80046c4:	4619      	mov	r1, r3
 80046c6:	f04f 0c0a 	mov.w	ip, #10
 80046ca:	4620      	mov	r0, r4
 80046cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046d0:	3a30      	subs	r2, #48	; 0x30
 80046d2:	2a09      	cmp	r2, #9
 80046d4:	d903      	bls.n	80046de <_svfiprintf_r+0x1a6>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d0c6      	beq.n	8004668 <_svfiprintf_r+0x130>
 80046da:	9105      	str	r1, [sp, #20]
 80046dc:	e7c4      	b.n	8004668 <_svfiprintf_r+0x130>
 80046de:	fb0c 2101 	mla	r1, ip, r1, r2
 80046e2:	4604      	mov	r4, r0
 80046e4:	2301      	movs	r3, #1
 80046e6:	e7f0      	b.n	80046ca <_svfiprintf_r+0x192>
 80046e8:	ab03      	add	r3, sp, #12
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	462a      	mov	r2, r5
 80046ee:	4b0f      	ldr	r3, [pc, #60]	; (800472c <_svfiprintf_r+0x1f4>)
 80046f0:	a904      	add	r1, sp, #16
 80046f2:	4638      	mov	r0, r7
 80046f4:	f3af 8000 	nop.w
 80046f8:	1c42      	adds	r2, r0, #1
 80046fa:	4606      	mov	r6, r0
 80046fc:	d1d6      	bne.n	80046ac <_svfiprintf_r+0x174>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	065b      	lsls	r3, r3, #25
 8004702:	f53f af2d 	bmi.w	8004560 <_svfiprintf_r+0x28>
 8004706:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004708:	b01d      	add	sp, #116	; 0x74
 800470a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800470e:	ab03      	add	r3, sp, #12
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	462a      	mov	r2, r5
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <_svfiprintf_r+0x1f4>)
 8004716:	a904      	add	r1, sp, #16
 8004718:	4638      	mov	r0, r7
 800471a:	f000 f919 	bl	8004950 <_printf_i>
 800471e:	e7eb      	b.n	80046f8 <_svfiprintf_r+0x1c0>
 8004720:	08004d78 	.word	0x08004d78
 8004724:	08004d82 	.word	0x08004d82
 8004728:	00000000 	.word	0x00000000
 800472c:	08004485 	.word	0x08004485
 8004730:	08004d7e 	.word	0x08004d7e

08004734 <sbrk_aligned>:
 8004734:	b570      	push	{r4, r5, r6, lr}
 8004736:	4e0e      	ldr	r6, [pc, #56]	; (8004770 <sbrk_aligned+0x3c>)
 8004738:	460c      	mov	r4, r1
 800473a:	6831      	ldr	r1, [r6, #0]
 800473c:	4605      	mov	r5, r0
 800473e:	b911      	cbnz	r1, 8004746 <sbrk_aligned+0x12>
 8004740:	f000 fa7e 	bl	8004c40 <_sbrk_r>
 8004744:	6030      	str	r0, [r6, #0]
 8004746:	4621      	mov	r1, r4
 8004748:	4628      	mov	r0, r5
 800474a:	f000 fa79 	bl	8004c40 <_sbrk_r>
 800474e:	1c43      	adds	r3, r0, #1
 8004750:	d00a      	beq.n	8004768 <sbrk_aligned+0x34>
 8004752:	1cc4      	adds	r4, r0, #3
 8004754:	f024 0403 	bic.w	r4, r4, #3
 8004758:	42a0      	cmp	r0, r4
 800475a:	d007      	beq.n	800476c <sbrk_aligned+0x38>
 800475c:	1a21      	subs	r1, r4, r0
 800475e:	4628      	mov	r0, r5
 8004760:	f000 fa6e 	bl	8004c40 <_sbrk_r>
 8004764:	3001      	adds	r0, #1
 8004766:	d101      	bne.n	800476c <sbrk_aligned+0x38>
 8004768:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800476c:	4620      	mov	r0, r4
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	2000064c 	.word	0x2000064c

08004774 <_malloc_r>:
 8004774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004778:	1ccd      	adds	r5, r1, #3
 800477a:	f025 0503 	bic.w	r5, r5, #3
 800477e:	3508      	adds	r5, #8
 8004780:	2d0c      	cmp	r5, #12
 8004782:	bf38      	it	cc
 8004784:	250c      	movcc	r5, #12
 8004786:	2d00      	cmp	r5, #0
 8004788:	4607      	mov	r7, r0
 800478a:	db01      	blt.n	8004790 <_malloc_r+0x1c>
 800478c:	42a9      	cmp	r1, r5
 800478e:	d905      	bls.n	800479c <_malloc_r+0x28>
 8004790:	230c      	movs	r3, #12
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	2600      	movs	r6, #0
 8004796:	4630      	mov	r0, r6
 8004798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800479c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004870 <_malloc_r+0xfc>
 80047a0:	f000 f9f8 	bl	8004b94 <__malloc_lock>
 80047a4:	f8d8 3000 	ldr.w	r3, [r8]
 80047a8:	461c      	mov	r4, r3
 80047aa:	bb5c      	cbnz	r4, 8004804 <_malloc_r+0x90>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	f7ff ffc0 	bl	8004734 <sbrk_aligned>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	4604      	mov	r4, r0
 80047b8:	d155      	bne.n	8004866 <_malloc_r+0xf2>
 80047ba:	f8d8 4000 	ldr.w	r4, [r8]
 80047be:	4626      	mov	r6, r4
 80047c0:	2e00      	cmp	r6, #0
 80047c2:	d145      	bne.n	8004850 <_malloc_r+0xdc>
 80047c4:	2c00      	cmp	r4, #0
 80047c6:	d048      	beq.n	800485a <_malloc_r+0xe6>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	4631      	mov	r1, r6
 80047cc:	4638      	mov	r0, r7
 80047ce:	eb04 0903 	add.w	r9, r4, r3
 80047d2:	f000 fa35 	bl	8004c40 <_sbrk_r>
 80047d6:	4581      	cmp	r9, r0
 80047d8:	d13f      	bne.n	800485a <_malloc_r+0xe6>
 80047da:	6821      	ldr	r1, [r4, #0]
 80047dc:	1a6d      	subs	r5, r5, r1
 80047de:	4629      	mov	r1, r5
 80047e0:	4638      	mov	r0, r7
 80047e2:	f7ff ffa7 	bl	8004734 <sbrk_aligned>
 80047e6:	3001      	adds	r0, #1
 80047e8:	d037      	beq.n	800485a <_malloc_r+0xe6>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	442b      	add	r3, r5
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	f8d8 3000 	ldr.w	r3, [r8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d038      	beq.n	800486a <_malloc_r+0xf6>
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	42a2      	cmp	r2, r4
 80047fc:	d12b      	bne.n	8004856 <_malloc_r+0xe2>
 80047fe:	2200      	movs	r2, #0
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e00f      	b.n	8004824 <_malloc_r+0xb0>
 8004804:	6822      	ldr	r2, [r4, #0]
 8004806:	1b52      	subs	r2, r2, r5
 8004808:	d41f      	bmi.n	800484a <_malloc_r+0xd6>
 800480a:	2a0b      	cmp	r2, #11
 800480c:	d917      	bls.n	800483e <_malloc_r+0xca>
 800480e:	1961      	adds	r1, r4, r5
 8004810:	42a3      	cmp	r3, r4
 8004812:	6025      	str	r5, [r4, #0]
 8004814:	bf18      	it	ne
 8004816:	6059      	strne	r1, [r3, #4]
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	bf08      	it	eq
 800481c:	f8c8 1000 	streq.w	r1, [r8]
 8004820:	5162      	str	r2, [r4, r5]
 8004822:	604b      	str	r3, [r1, #4]
 8004824:	4638      	mov	r0, r7
 8004826:	f104 060b 	add.w	r6, r4, #11
 800482a:	f000 f9b9 	bl	8004ba0 <__malloc_unlock>
 800482e:	f026 0607 	bic.w	r6, r6, #7
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	1af2      	subs	r2, r6, r3
 8004836:	d0ae      	beq.n	8004796 <_malloc_r+0x22>
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	50a3      	str	r3, [r4, r2]
 800483c:	e7ab      	b.n	8004796 <_malloc_r+0x22>
 800483e:	42a3      	cmp	r3, r4
 8004840:	6862      	ldr	r2, [r4, #4]
 8004842:	d1dd      	bne.n	8004800 <_malloc_r+0x8c>
 8004844:	f8c8 2000 	str.w	r2, [r8]
 8004848:	e7ec      	b.n	8004824 <_malloc_r+0xb0>
 800484a:	4623      	mov	r3, r4
 800484c:	6864      	ldr	r4, [r4, #4]
 800484e:	e7ac      	b.n	80047aa <_malloc_r+0x36>
 8004850:	4634      	mov	r4, r6
 8004852:	6876      	ldr	r6, [r6, #4]
 8004854:	e7b4      	b.n	80047c0 <_malloc_r+0x4c>
 8004856:	4613      	mov	r3, r2
 8004858:	e7cc      	b.n	80047f4 <_malloc_r+0x80>
 800485a:	230c      	movs	r3, #12
 800485c:	603b      	str	r3, [r7, #0]
 800485e:	4638      	mov	r0, r7
 8004860:	f000 f99e 	bl	8004ba0 <__malloc_unlock>
 8004864:	e797      	b.n	8004796 <_malloc_r+0x22>
 8004866:	6025      	str	r5, [r4, #0]
 8004868:	e7dc      	b.n	8004824 <_malloc_r+0xb0>
 800486a:	605b      	str	r3, [r3, #4]
 800486c:	deff      	udf	#255	; 0xff
 800486e:	bf00      	nop
 8004870:	20000648 	.word	0x20000648

08004874 <_printf_common>:
 8004874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	4616      	mov	r6, r2
 800487a:	4699      	mov	r9, r3
 800487c:	688a      	ldr	r2, [r1, #8]
 800487e:	690b      	ldr	r3, [r1, #16]
 8004880:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004884:	4293      	cmp	r3, r2
 8004886:	bfb8      	it	lt
 8004888:	4613      	movlt	r3, r2
 800488a:	6033      	str	r3, [r6, #0]
 800488c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004890:	4607      	mov	r7, r0
 8004892:	460c      	mov	r4, r1
 8004894:	b10a      	cbz	r2, 800489a <_printf_common+0x26>
 8004896:	3301      	adds	r3, #1
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	0699      	lsls	r1, r3, #26
 800489e:	bf42      	ittt	mi
 80048a0:	6833      	ldrmi	r3, [r6, #0]
 80048a2:	3302      	addmi	r3, #2
 80048a4:	6033      	strmi	r3, [r6, #0]
 80048a6:	6825      	ldr	r5, [r4, #0]
 80048a8:	f015 0506 	ands.w	r5, r5, #6
 80048ac:	d106      	bne.n	80048bc <_printf_common+0x48>
 80048ae:	f104 0a19 	add.w	sl, r4, #25
 80048b2:	68e3      	ldr	r3, [r4, #12]
 80048b4:	6832      	ldr	r2, [r6, #0]
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	42ab      	cmp	r3, r5
 80048ba:	dc26      	bgt.n	800490a <_printf_common+0x96>
 80048bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048c0:	1e13      	subs	r3, r2, #0
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	bf18      	it	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	0692      	lsls	r2, r2, #26
 80048ca:	d42b      	bmi.n	8004924 <_printf_common+0xb0>
 80048cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048d0:	4649      	mov	r1, r9
 80048d2:	4638      	mov	r0, r7
 80048d4:	47c0      	blx	r8
 80048d6:	3001      	adds	r0, #1
 80048d8:	d01e      	beq.n	8004918 <_printf_common+0xa4>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	6922      	ldr	r2, [r4, #16]
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	bf02      	ittt	eq
 80048e6:	68e5      	ldreq	r5, [r4, #12]
 80048e8:	6833      	ldreq	r3, [r6, #0]
 80048ea:	1aed      	subeq	r5, r5, r3
 80048ec:	68a3      	ldr	r3, [r4, #8]
 80048ee:	bf0c      	ite	eq
 80048f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048f4:	2500      	movne	r5, #0
 80048f6:	4293      	cmp	r3, r2
 80048f8:	bfc4      	itt	gt
 80048fa:	1a9b      	subgt	r3, r3, r2
 80048fc:	18ed      	addgt	r5, r5, r3
 80048fe:	2600      	movs	r6, #0
 8004900:	341a      	adds	r4, #26
 8004902:	42b5      	cmp	r5, r6
 8004904:	d11a      	bne.n	800493c <_printf_common+0xc8>
 8004906:	2000      	movs	r0, #0
 8004908:	e008      	b.n	800491c <_printf_common+0xa8>
 800490a:	2301      	movs	r3, #1
 800490c:	4652      	mov	r2, sl
 800490e:	4649      	mov	r1, r9
 8004910:	4638      	mov	r0, r7
 8004912:	47c0      	blx	r8
 8004914:	3001      	adds	r0, #1
 8004916:	d103      	bne.n	8004920 <_printf_common+0xac>
 8004918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800491c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004920:	3501      	adds	r5, #1
 8004922:	e7c6      	b.n	80048b2 <_printf_common+0x3e>
 8004924:	18e1      	adds	r1, r4, r3
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	2030      	movs	r0, #48	; 0x30
 800492a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800492e:	4422      	add	r2, r4
 8004930:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004934:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004938:	3302      	adds	r3, #2
 800493a:	e7c7      	b.n	80048cc <_printf_common+0x58>
 800493c:	2301      	movs	r3, #1
 800493e:	4622      	mov	r2, r4
 8004940:	4649      	mov	r1, r9
 8004942:	4638      	mov	r0, r7
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d0e6      	beq.n	8004918 <_printf_common+0xa4>
 800494a:	3601      	adds	r6, #1
 800494c:	e7d9      	b.n	8004902 <_printf_common+0x8e>
	...

08004950 <_printf_i>:
 8004950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004954:	7e0f      	ldrb	r7, [r1, #24]
 8004956:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004958:	2f78      	cmp	r7, #120	; 0x78
 800495a:	4691      	mov	r9, r2
 800495c:	4680      	mov	r8, r0
 800495e:	460c      	mov	r4, r1
 8004960:	469a      	mov	sl, r3
 8004962:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004966:	d807      	bhi.n	8004978 <_printf_i+0x28>
 8004968:	2f62      	cmp	r7, #98	; 0x62
 800496a:	d80a      	bhi.n	8004982 <_printf_i+0x32>
 800496c:	2f00      	cmp	r7, #0
 800496e:	f000 80d4 	beq.w	8004b1a <_printf_i+0x1ca>
 8004972:	2f58      	cmp	r7, #88	; 0x58
 8004974:	f000 80c0 	beq.w	8004af8 <_printf_i+0x1a8>
 8004978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800497c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004980:	e03a      	b.n	80049f8 <_printf_i+0xa8>
 8004982:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004986:	2b15      	cmp	r3, #21
 8004988:	d8f6      	bhi.n	8004978 <_printf_i+0x28>
 800498a:	a101      	add	r1, pc, #4	; (adr r1, 8004990 <_printf_i+0x40>)
 800498c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004990:	080049e9 	.word	0x080049e9
 8004994:	080049fd 	.word	0x080049fd
 8004998:	08004979 	.word	0x08004979
 800499c:	08004979 	.word	0x08004979
 80049a0:	08004979 	.word	0x08004979
 80049a4:	08004979 	.word	0x08004979
 80049a8:	080049fd 	.word	0x080049fd
 80049ac:	08004979 	.word	0x08004979
 80049b0:	08004979 	.word	0x08004979
 80049b4:	08004979 	.word	0x08004979
 80049b8:	08004979 	.word	0x08004979
 80049bc:	08004b01 	.word	0x08004b01
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	08004abb 	.word	0x08004abb
 80049c8:	08004979 	.word	0x08004979
 80049cc:	08004979 	.word	0x08004979
 80049d0:	08004b23 	.word	0x08004b23
 80049d4:	08004979 	.word	0x08004979
 80049d8:	08004a29 	.word	0x08004a29
 80049dc:	08004979 	.word	0x08004979
 80049e0:	08004979 	.word	0x08004979
 80049e4:	08004ac3 	.word	0x08004ac3
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	1d1a      	adds	r2, r3, #4
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	602a      	str	r2, [r5, #0]
 80049f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049f8:	2301      	movs	r3, #1
 80049fa:	e09f      	b.n	8004b3c <_printf_i+0x1ec>
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	0607      	lsls	r7, r0, #24
 8004a02:	f103 0104 	add.w	r1, r3, #4
 8004a06:	6029      	str	r1, [r5, #0]
 8004a08:	d501      	bpl.n	8004a0e <_printf_i+0xbe>
 8004a0a:	681e      	ldr	r6, [r3, #0]
 8004a0c:	e003      	b.n	8004a16 <_printf_i+0xc6>
 8004a0e:	0646      	lsls	r6, r0, #25
 8004a10:	d5fb      	bpl.n	8004a0a <_printf_i+0xba>
 8004a12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a16:	2e00      	cmp	r6, #0
 8004a18:	da03      	bge.n	8004a22 <_printf_i+0xd2>
 8004a1a:	232d      	movs	r3, #45	; 0x2d
 8004a1c:	4276      	negs	r6, r6
 8004a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a22:	485a      	ldr	r0, [pc, #360]	; (8004b8c <_printf_i+0x23c>)
 8004a24:	230a      	movs	r3, #10
 8004a26:	e012      	b.n	8004a4e <_printf_i+0xfe>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	6820      	ldr	r0, [r4, #0]
 8004a2c:	1d19      	adds	r1, r3, #4
 8004a2e:	6029      	str	r1, [r5, #0]
 8004a30:	0605      	lsls	r5, r0, #24
 8004a32:	d501      	bpl.n	8004a38 <_printf_i+0xe8>
 8004a34:	681e      	ldr	r6, [r3, #0]
 8004a36:	e002      	b.n	8004a3e <_printf_i+0xee>
 8004a38:	0641      	lsls	r1, r0, #25
 8004a3a:	d5fb      	bpl.n	8004a34 <_printf_i+0xe4>
 8004a3c:	881e      	ldrh	r6, [r3, #0]
 8004a3e:	4853      	ldr	r0, [pc, #332]	; (8004b8c <_printf_i+0x23c>)
 8004a40:	2f6f      	cmp	r7, #111	; 0x6f
 8004a42:	bf0c      	ite	eq
 8004a44:	2308      	moveq	r3, #8
 8004a46:	230a      	movne	r3, #10
 8004a48:	2100      	movs	r1, #0
 8004a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a4e:	6865      	ldr	r5, [r4, #4]
 8004a50:	60a5      	str	r5, [r4, #8]
 8004a52:	2d00      	cmp	r5, #0
 8004a54:	bfa2      	ittt	ge
 8004a56:	6821      	ldrge	r1, [r4, #0]
 8004a58:	f021 0104 	bicge.w	r1, r1, #4
 8004a5c:	6021      	strge	r1, [r4, #0]
 8004a5e:	b90e      	cbnz	r6, 8004a64 <_printf_i+0x114>
 8004a60:	2d00      	cmp	r5, #0
 8004a62:	d04b      	beq.n	8004afc <_printf_i+0x1ac>
 8004a64:	4615      	mov	r5, r2
 8004a66:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a6a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a6e:	5dc7      	ldrb	r7, [r0, r7]
 8004a70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a74:	4637      	mov	r7, r6
 8004a76:	42bb      	cmp	r3, r7
 8004a78:	460e      	mov	r6, r1
 8004a7a:	d9f4      	bls.n	8004a66 <_printf_i+0x116>
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d10b      	bne.n	8004a98 <_printf_i+0x148>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07de      	lsls	r6, r3, #31
 8004a84:	d508      	bpl.n	8004a98 <_printf_i+0x148>
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6861      	ldr	r1, [r4, #4]
 8004a8a:	4299      	cmp	r1, r3
 8004a8c:	bfde      	ittt	le
 8004a8e:	2330      	movle	r3, #48	; 0x30
 8004a90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a98:	1b52      	subs	r2, r2, r5
 8004a9a:	6122      	str	r2, [r4, #16]
 8004a9c:	f8cd a000 	str.w	sl, [sp]
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	aa03      	add	r2, sp, #12
 8004aa4:	4621      	mov	r1, r4
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	f7ff fee4 	bl	8004874 <_printf_common>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d14a      	bne.n	8004b46 <_printf_i+0x1f6>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab4:	b004      	add	sp, #16
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	f043 0320 	orr.w	r3, r3, #32
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	4833      	ldr	r0, [pc, #204]	; (8004b90 <_printf_i+0x240>)
 8004ac4:	2778      	movs	r7, #120	; 0x78
 8004ac6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	6829      	ldr	r1, [r5, #0]
 8004ace:	061f      	lsls	r7, r3, #24
 8004ad0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ad4:	d402      	bmi.n	8004adc <_printf_i+0x18c>
 8004ad6:	065f      	lsls	r7, r3, #25
 8004ad8:	bf48      	it	mi
 8004ada:	b2b6      	uxthmi	r6, r6
 8004adc:	07df      	lsls	r7, r3, #31
 8004ade:	bf48      	it	mi
 8004ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ae4:	6029      	str	r1, [r5, #0]
 8004ae6:	bf48      	it	mi
 8004ae8:	6023      	strmi	r3, [r4, #0]
 8004aea:	b91e      	cbnz	r6, 8004af4 <_printf_i+0x1a4>
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	f023 0320 	bic.w	r3, r3, #32
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	2310      	movs	r3, #16
 8004af6:	e7a7      	b.n	8004a48 <_printf_i+0xf8>
 8004af8:	4824      	ldr	r0, [pc, #144]	; (8004b8c <_printf_i+0x23c>)
 8004afa:	e7e4      	b.n	8004ac6 <_printf_i+0x176>
 8004afc:	4615      	mov	r5, r2
 8004afe:	e7bd      	b.n	8004a7c <_printf_i+0x12c>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	6826      	ldr	r6, [r4, #0]
 8004b04:	6961      	ldr	r1, [r4, #20]
 8004b06:	1d18      	adds	r0, r3, #4
 8004b08:	6028      	str	r0, [r5, #0]
 8004b0a:	0635      	lsls	r5, r6, #24
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	d501      	bpl.n	8004b14 <_printf_i+0x1c4>
 8004b10:	6019      	str	r1, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <_printf_i+0x1ca>
 8004b14:	0670      	lsls	r0, r6, #25
 8004b16:	d5fb      	bpl.n	8004b10 <_printf_i+0x1c0>
 8004b18:	8019      	strh	r1, [r3, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	6123      	str	r3, [r4, #16]
 8004b1e:	4615      	mov	r5, r2
 8004b20:	e7bc      	b.n	8004a9c <_printf_i+0x14c>
 8004b22:	682b      	ldr	r3, [r5, #0]
 8004b24:	1d1a      	adds	r2, r3, #4
 8004b26:	602a      	str	r2, [r5, #0]
 8004b28:	681d      	ldr	r5, [r3, #0]
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4628      	mov	r0, r5
 8004b30:	f7fb fb4e 	bl	80001d0 <memchr>
 8004b34:	b108      	cbz	r0, 8004b3a <_printf_i+0x1ea>
 8004b36:	1b40      	subs	r0, r0, r5
 8004b38:	6060      	str	r0, [r4, #4]
 8004b3a:	6863      	ldr	r3, [r4, #4]
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b44:	e7aa      	b.n	8004a9c <_printf_i+0x14c>
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4649      	mov	r1, r9
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	47d0      	blx	sl
 8004b50:	3001      	adds	r0, #1
 8004b52:	d0ad      	beq.n	8004ab0 <_printf_i+0x160>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	079b      	lsls	r3, r3, #30
 8004b58:	d413      	bmi.n	8004b82 <_printf_i+0x232>
 8004b5a:	68e0      	ldr	r0, [r4, #12]
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	4298      	cmp	r0, r3
 8004b60:	bfb8      	it	lt
 8004b62:	4618      	movlt	r0, r3
 8004b64:	e7a6      	b.n	8004ab4 <_printf_i+0x164>
 8004b66:	2301      	movs	r3, #1
 8004b68:	4632      	mov	r2, r6
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	47d0      	blx	sl
 8004b70:	3001      	adds	r0, #1
 8004b72:	d09d      	beq.n	8004ab0 <_printf_i+0x160>
 8004b74:	3501      	adds	r5, #1
 8004b76:	68e3      	ldr	r3, [r4, #12]
 8004b78:	9903      	ldr	r1, [sp, #12]
 8004b7a:	1a5b      	subs	r3, r3, r1
 8004b7c:	42ab      	cmp	r3, r5
 8004b7e:	dcf2      	bgt.n	8004b66 <_printf_i+0x216>
 8004b80:	e7eb      	b.n	8004b5a <_printf_i+0x20a>
 8004b82:	2500      	movs	r5, #0
 8004b84:	f104 0619 	add.w	r6, r4, #25
 8004b88:	e7f5      	b.n	8004b76 <_printf_i+0x226>
 8004b8a:	bf00      	nop
 8004b8c:	08004d89 	.word	0x08004d89
 8004b90:	08004d9a 	.word	0x08004d9a

08004b94 <__malloc_lock>:
 8004b94:	4801      	ldr	r0, [pc, #4]	; (8004b9c <__malloc_lock+0x8>)
 8004b96:	f7ff bc73 	b.w	8004480 <__retarget_lock_acquire_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	20000644 	.word	0x20000644

08004ba0 <__malloc_unlock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__malloc_unlock+0x8>)
 8004ba2:	f7ff bc6e 	b.w	8004482 <__retarget_lock_release_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000644 	.word	0x20000644

08004bac <_realloc_r>:
 8004bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb0:	4680      	mov	r8, r0
 8004bb2:	4614      	mov	r4, r2
 8004bb4:	460e      	mov	r6, r1
 8004bb6:	b921      	cbnz	r1, 8004bc2 <_realloc_r+0x16>
 8004bb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	f7ff bdd9 	b.w	8004774 <_malloc_r>
 8004bc2:	b92a      	cbnz	r2, 8004bd0 <_realloc_r+0x24>
 8004bc4:	f000 f85a 	bl	8004c7c <_free_r>
 8004bc8:	4625      	mov	r5, r4
 8004bca:	4628      	mov	r0, r5
 8004bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bd0:	f000 f8a0 	bl	8004d14 <_malloc_usable_size_r>
 8004bd4:	4284      	cmp	r4, r0
 8004bd6:	4607      	mov	r7, r0
 8004bd8:	d802      	bhi.n	8004be0 <_realloc_r+0x34>
 8004bda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004bde:	d812      	bhi.n	8004c06 <_realloc_r+0x5a>
 8004be0:	4621      	mov	r1, r4
 8004be2:	4640      	mov	r0, r8
 8004be4:	f7ff fdc6 	bl	8004774 <_malloc_r>
 8004be8:	4605      	mov	r5, r0
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d0ed      	beq.n	8004bca <_realloc_r+0x1e>
 8004bee:	42bc      	cmp	r4, r7
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4631      	mov	r1, r6
 8004bf4:	bf28      	it	cs
 8004bf6:	463a      	movcs	r2, r7
 8004bf8:	f000 f832 	bl	8004c60 <memcpy>
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f000 f83c 	bl	8004c7c <_free_r>
 8004c04:	e7e1      	b.n	8004bca <_realloc_r+0x1e>
 8004c06:	4635      	mov	r5, r6
 8004c08:	e7df      	b.n	8004bca <_realloc_r+0x1e>

08004c0a <memmove>:
 8004c0a:	4288      	cmp	r0, r1
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	eb01 0402 	add.w	r4, r1, r2
 8004c12:	d902      	bls.n	8004c1a <memmove+0x10>
 8004c14:	4284      	cmp	r4, r0
 8004c16:	4623      	mov	r3, r4
 8004c18:	d807      	bhi.n	8004c2a <memmove+0x20>
 8004c1a:	1e43      	subs	r3, r0, #1
 8004c1c:	42a1      	cmp	r1, r4
 8004c1e:	d008      	beq.n	8004c32 <memmove+0x28>
 8004c20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c24:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c28:	e7f8      	b.n	8004c1c <memmove+0x12>
 8004c2a:	4402      	add	r2, r0
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	428a      	cmp	r2, r1
 8004c30:	d100      	bne.n	8004c34 <memmove+0x2a>
 8004c32:	bd10      	pop	{r4, pc}
 8004c34:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c38:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c3c:	e7f7      	b.n	8004c2e <memmove+0x24>
	...

08004c40 <_sbrk_r>:
 8004c40:	b538      	push	{r3, r4, r5, lr}
 8004c42:	4d06      	ldr	r5, [pc, #24]	; (8004c5c <_sbrk_r+0x1c>)
 8004c44:	2300      	movs	r3, #0
 8004c46:	4604      	mov	r4, r0
 8004c48:	4608      	mov	r0, r1
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	f7fc f8ba 	bl	8000dc4 <_sbrk>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_sbrk_r+0x1a>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_sbrk_r+0x1a>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	20000650 	.word	0x20000650

08004c60 <memcpy>:
 8004c60:	440a      	add	r2, r1
 8004c62:	4291      	cmp	r1, r2
 8004c64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c68:	d100      	bne.n	8004c6c <memcpy+0xc>
 8004c6a:	4770      	bx	lr
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c76:	4291      	cmp	r1, r2
 8004c78:	d1f9      	bne.n	8004c6e <memcpy+0xe>
 8004c7a:	bd10      	pop	{r4, pc}

08004c7c <_free_r>:
 8004c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c7e:	2900      	cmp	r1, #0
 8004c80:	d044      	beq.n	8004d0c <_free_r+0x90>
 8004c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c86:	9001      	str	r0, [sp, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c8e:	bfb8      	it	lt
 8004c90:	18e4      	addlt	r4, r4, r3
 8004c92:	f7ff ff7f 	bl	8004b94 <__malloc_lock>
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <_free_r+0x94>)
 8004c98:	9801      	ldr	r0, [sp, #4]
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	b933      	cbnz	r3, 8004cac <_free_r+0x30>
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	6014      	str	r4, [r2, #0]
 8004ca2:	b003      	add	sp, #12
 8004ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ca8:	f7ff bf7a 	b.w	8004ba0 <__malloc_unlock>
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d908      	bls.n	8004cc2 <_free_r+0x46>
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	bf01      	itttt	eq
 8004cb8:	6819      	ldreq	r1, [r3, #0]
 8004cba:	685b      	ldreq	r3, [r3, #4]
 8004cbc:	1949      	addeq	r1, r1, r5
 8004cbe:	6021      	streq	r1, [r4, #0]
 8004cc0:	e7ed      	b.n	8004c9e <_free_r+0x22>
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	b10b      	cbz	r3, 8004ccc <_free_r+0x50>
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	d9fa      	bls.n	8004cc2 <_free_r+0x46>
 8004ccc:	6811      	ldr	r1, [r2, #0]
 8004cce:	1855      	adds	r5, r2, r1
 8004cd0:	42a5      	cmp	r5, r4
 8004cd2:	d10b      	bne.n	8004cec <_free_r+0x70>
 8004cd4:	6824      	ldr	r4, [r4, #0]
 8004cd6:	4421      	add	r1, r4
 8004cd8:	1854      	adds	r4, r2, r1
 8004cda:	42a3      	cmp	r3, r4
 8004cdc:	6011      	str	r1, [r2, #0]
 8004cde:	d1e0      	bne.n	8004ca2 <_free_r+0x26>
 8004ce0:	681c      	ldr	r4, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	6053      	str	r3, [r2, #4]
 8004ce6:	440c      	add	r4, r1
 8004ce8:	6014      	str	r4, [r2, #0]
 8004cea:	e7da      	b.n	8004ca2 <_free_r+0x26>
 8004cec:	d902      	bls.n	8004cf4 <_free_r+0x78>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	6003      	str	r3, [r0, #0]
 8004cf2:	e7d6      	b.n	8004ca2 <_free_r+0x26>
 8004cf4:	6825      	ldr	r5, [r4, #0]
 8004cf6:	1961      	adds	r1, r4, r5
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	bf04      	itt	eq
 8004cfc:	6819      	ldreq	r1, [r3, #0]
 8004cfe:	685b      	ldreq	r3, [r3, #4]
 8004d00:	6063      	str	r3, [r4, #4]
 8004d02:	bf04      	itt	eq
 8004d04:	1949      	addeq	r1, r1, r5
 8004d06:	6021      	streq	r1, [r4, #0]
 8004d08:	6054      	str	r4, [r2, #4]
 8004d0a:	e7ca      	b.n	8004ca2 <_free_r+0x26>
 8004d0c:	b003      	add	sp, #12
 8004d0e:	bd30      	pop	{r4, r5, pc}
 8004d10:	20000648 	.word	0x20000648

08004d14 <_malloc_usable_size_r>:
 8004d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d18:	1f18      	subs	r0, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	bfbc      	itt	lt
 8004d1e:	580b      	ldrlt	r3, [r1, r0]
 8004d20:	18c0      	addlt	r0, r0, r3
 8004d22:	4770      	bx	lr

08004d24 <_init>:
 8004d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d26:	bf00      	nop
 8004d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2a:	bc08      	pop	{r3}
 8004d2c:	469e      	mov	lr, r3
 8004d2e:	4770      	bx	lr

08004d30 <_fini>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr
