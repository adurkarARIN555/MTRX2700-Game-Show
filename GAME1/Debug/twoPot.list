
twoPot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f74  08004f74  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08004f74  08004f74  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f74  08004f74  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08004f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a0  2**0
                  CONTENTS
 10 .bss          000005bc  200000a0  200000a0  000200a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000065c  2000065c  000200a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fbfb  00000000  00000000  00020113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025af  00000000  00000000  0002fd0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d78  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a54  00000000  00000000  00033038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eb72  00000000  00000000  00033a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012e47  00000000  00000000  000525fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b7df6  00000000  00000000  00065445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ca4  00000000  00000000  0011d23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00120ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004eec 	.word	0x08004eec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08004eec 	.word	0x08004eec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <enable_clocks>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enable_clocks() {
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <enable_clocks+0x28>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a07      	ldr	r2, [pc, #28]	; (8000298 <enable_clocks+0x28>)
 800027a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800027e:	6153      	str	r3, [r2, #20]

	// worked
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000280:	4b05      	ldr	r3, [pc, #20]	; (8000298 <enable_clocks+0x28>)
 8000282:	69db      	ldr	r3, [r3, #28]
 8000284:	4a04      	ldr	r2, [pc, #16]	; (8000298 <enable_clocks+0x28>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	61d3      	str	r3, [r2, #28]
	// worked
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000

0800029c <get_difference>:


int get_difference(int v1, int v2){
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	6039      	str	r1, [r7, #0]
	int diff = v1 - v2;
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	60fb      	str	r3, [r7, #12]
	diff = abs(diff);
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	bfb8      	it	lt
 80002b4:	425b      	neglt	r3, r3
 80002b6:	60fb      	str	r3, [r7, #12]

	return diff;
 80002b8:	68fb      	ldr	r3, [r7, #12]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
	...

080002c8 <timer_comp>:
uint8_t timer_elapsed = 0;
// worked
void timer_comp(){
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0

	timer_elapsed++;
 80002cc:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <timer_comp+0x1c>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	3301      	adds	r3, #1
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <timer_comp+0x1c>)
 80002d6:	701a      	strb	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	20000500 	.word	0x20000500

080002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b0e8      	sub	sp, #416	; 0x1a0
 80002ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ee:	f000 fef7 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f2:	f000 f8c9 	bl	8000488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f6:	f000 faab 	bl	8000850 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002fa:	f000 fa09 	bl	8000710 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002fe:	f000 fa47 	bl	8000790 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000302:	f000 fa83 	bl	800080c <MX_USB_PCD_Init>
  MX_ADC1_Init();
 8000306:	f000 f927 	bl	8000558 <MX_ADC1_Init>
  MX_ADC4_Init();
 800030a:	f000 f9a3 	bl	8000654 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  uint16_t pot_val = 0;
 800030e:	2300      	movs	r3, #0
 8000310:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  uint16_t pot_val_2 = 0;
 8000314:	2300      	movs	r3, #0
 8000316:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198

  uint16_t pot_val_prev = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
  uint16_t pot_val_2_prev = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c

  enable_clocks();
 8000326:	f7ff ffa3 	bl	8000270 <enable_clocks>

  SerialInitialise(BAUD_115200, &USART1_PORT);
 800032a:	494f      	ldr	r1, [pc, #316]	; (8000468 <main+0x180>)
 800032c:	2004      	movs	r0, #4
 800032e:	f000 fb1f 	bl	8000970 <SerialInitialise>

  // worked
  trigger_prescaler(1000);
 8000332:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000336:	f000 fe8c 	bl	8001052 <trigger_prescaler>
  enable_interrupt_timer2();
 800033a:	f000 fe73 	bl	8001024 <enable_interrupt_timer2>
  interval_mode(5000, &timer_comp);
 800033e:	494b      	ldr	r1, [pc, #300]	; (800046c <main+0x184>)
 8000340:	f241 3088 	movw	r0, #5000	; 0x1388
 8000344:	f000 fe14 	bl	8000f70 <interval_mode>

	  // worked
	  uint8_t buffer3[100];
	  // worked

	  HAL_ADC_Start(&hadc1);
 8000348:	4849      	ldr	r0, [pc, #292]	; (8000470 <main+0x188>)
 800034a:	f001 f933 	bl	80015b4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800034e:	f04f 31ff 	mov.w	r1, #4294967295
 8000352:	4847      	ldr	r0, [pc, #284]	; (8000470 <main+0x188>)
 8000354:	f001 fa44 	bl	80017e0 <HAL_ADC_PollForConversion>
	  pot_val = HAL_ADC_GetValue(&hadc1);
 8000358:	4845      	ldr	r0, [pc, #276]	; (8000470 <main+0x188>)
 800035a:	f001 fb43 	bl	80019e4 <HAL_ADC_GetValue>
 800035e:	4603      	mov	r3, r0
 8000360:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a

//	  int diff1 = pot_val - pot_val_prev;
//	  diff1 = abs(diff1);
	  int diff1 = get_difference(pot_val, pot_val_prev);
 8000364:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8000368:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 800036c:	4611      	mov	r1, r2
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ff94 	bl	800029c <get_difference>
 8000374:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194

	  if ((diff1 > 50) && (pot_val > 100)){
 8000378:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800037c:	2b32      	cmp	r3, #50	; 0x32
 800037e:	dd0f      	ble.n	80003a0 <main+0xb8>
 8000380:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 8000384:	2b64      	cmp	r3, #100	; 0x64
 8000386:	d90b      	bls.n	80003a0 <main+0xb8>
		  sprintf(&buffer[0], "%d#", pot_val);
 8000388:	f8b7 219a 	ldrh.w	r2, [r7, #410]	; 0x19a
 800038c:	463b      	mov	r3, r7
 800038e:	4939      	ldr	r1, [pc, #228]	; (8000474 <main+0x18c>)
 8000390:	4618      	mov	r0, r3
 8000392:	f004 f907 	bl	80045a4 <siprintf>
		  pot_val_prev = pot_val;
 8000396:	f8b7 319a 	ldrh.w	r3, [r7, #410]	; 0x19a
 800039a:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
 800039e:	e006      	b.n	80003ae <main+0xc6>
	  }
	  else{
		  sprintf(&buffer[0], "%d#", pot_val_prev);
 80003a0:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 80003a4:	463b      	mov	r3, r7
 80003a6:	4933      	ldr	r1, [pc, #204]	; (8000474 <main+0x18c>)
 80003a8:	4618      	mov	r0, r3
 80003aa:	f004 f8fb 	bl	80045a4 <siprintf>
	  }


	  // HAL_ADC_Stop(&hadc1);

	  HAL_ADC_Start(&hadc4);
 80003ae:	4832      	ldr	r0, [pc, #200]	; (8000478 <main+0x190>)
 80003b0:	f001 f900 	bl	80015b4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 80003b4:	f04f 31ff 	mov.w	r1, #4294967295
 80003b8:	482f      	ldr	r0, [pc, #188]	; (8000478 <main+0x190>)
 80003ba:	f001 fa11 	bl	80017e0 <HAL_ADC_PollForConversion>
	  pot_val_2 = HAL_ADC_GetValue(&hadc4);
 80003be:	482e      	ldr	r0, [pc, #184]	; (8000478 <main+0x190>)
 80003c0:	f001 fb10 	bl	80019e4 <HAL_ADC_GetValue>
 80003c4:	4603      	mov	r3, r0
 80003c6:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198

//	  int diff2 = pot_val_2 - pot_val_2_prev;
//	  diff2 = abs(diff2);
	  int diff2 = get_difference(pot_val_2, pot_val_2_prev);
 80003ca:	f8b7 3198 	ldrh.w	r3, [r7, #408]	; 0x198
 80003ce:	f8b7 219c 	ldrh.w	r2, [r7, #412]	; 0x19c
 80003d2:	4611      	mov	r1, r2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff61 	bl	800029c <get_difference>
 80003da:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190

	  if ((diff2 > 50) && (pot_val_2 > 100)){
 80003de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80003e2:	2b32      	cmp	r3, #50	; 0x32
 80003e4:	dd10      	ble.n	8000408 <main+0x120>
 80003e6:	f8b7 3198 	ldrh.w	r3, [r7, #408]	; 0x198
 80003ea:	2b64      	cmp	r3, #100	; 0x64
 80003ec:	d90c      	bls.n	8000408 <main+0x120>
		  sprintf(&buffer2[0], ",%d#", pot_val_2);
 80003ee:	f8b7 2198 	ldrh.w	r2, [r7, #408]	; 0x198
 80003f2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80003f6:	4921      	ldr	r1, [pc, #132]	; (800047c <main+0x194>)
 80003f8:	4618      	mov	r0, r3
 80003fa:	f004 f8d3 	bl	80045a4 <siprintf>
		  pot_val_2_prev = pot_val_2;
 80003fe:	f8b7 3198 	ldrh.w	r3, [r7, #408]	; 0x198
 8000402:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8000406:	e007      	b.n	8000418 <main+0x130>
	  }
	  else{
		  sprintf(&buffer2[0], ",%d#", pot_val_2_prev);
 8000408:	f8b7 219c 	ldrh.w	r2, [r7, #412]	; 0x19c
 800040c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000410:	491a      	ldr	r1, [pc, #104]	; (800047c <main+0x194>)
 8000412:	4618      	mov	r0, r3
 8000414:	f004 f8c6 	bl	80045a4 <siprintf>
	  }

	  // worked
	  sprintf(&buffer3[0], ",%d#", timer_elapsed);
 8000418:	4b19      	ldr	r3, [pc, #100]	; (8000480 <main+0x198>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000422:	4916      	ldr	r1, [pc, #88]	; (800047c <main+0x194>)
 8000424:	4618      	mov	r0, r3
 8000426:	f004 f8bd 	bl	80045a4 <siprintf>
	  // worked

	  //HAL_ADC_Stop(&hadc1);

	  strcpy((char*)buffer1, "\r\n#");
 800042a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800042e:	4a15      	ldr	r2, [pc, #84]	; (8000484 <main+0x19c>)
 8000430:	601a      	str	r2, [r3, #0]

	  HAL_Delay(150);
 8000432:	2096      	movs	r0, #150	; 0x96
 8000434:	f000 feba 	bl	80011ac <HAL_Delay>
	  SerialOutputString(buffer, &USART1_PORT);
 8000438:	463b      	mov	r3, r7
 800043a:	490b      	ldr	r1, [pc, #44]	; (8000468 <main+0x180>)
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fb20 	bl	8000a82 <SerialOutputString>
	  SerialOutputString(buffer2, &USART1_PORT);
 8000442:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000446:	4908      	ldr	r1, [pc, #32]	; (8000468 <main+0x180>)
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fb1a 	bl	8000a82 <SerialOutputString>

	  // worked
	  SerialOutputString(buffer3, &USART1_PORT);
 800044e:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8000452:	4905      	ldr	r1, [pc, #20]	; (8000468 <main+0x180>)
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fb14 	bl	8000a82 <SerialOutputString>
	  // worked

	  SerialOutputString(buffer1, &USART1_PORT);
 800045a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800045e:	4902      	ldr	r1, [pc, #8]	; (8000468 <main+0x180>)
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fb0e 	bl	8000a82 <SerialOutputString>
  {
 8000466:	e76f      	b.n	8000348 <main+0x60>
 8000468:	20000000 	.word	0x20000000
 800046c:	080002c9 	.word	0x080002c9
 8000470:	200000bc 	.word	0x200000bc
 8000474:	08004f04 	.word	0x08004f04
 8000478:	2000010c 	.word	0x2000010c
 800047c:	08004f08 	.word	0x08004f08
 8000480:	20000500 	.word	0x20000500
 8000484:	00230a0d 	.word	0x00230a0d

08000488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b09e      	sub	sp, #120	; 0x78
 800048c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000492:	2228      	movs	r2, #40	; 0x28
 8000494:	2100      	movs	r1, #0
 8000496:	4618      	mov	r0, r3
 8000498:	f004 f8a4 	bl	80045e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800049c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	605a      	str	r2, [r3, #4]
 80004a6:	609a      	str	r2, [r3, #8]
 80004a8:	60da      	str	r2, [r3, #12]
 80004aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004ac:	463b      	mov	r3, r7
 80004ae:	223c      	movs	r2, #60	; 0x3c
 80004b0:	2100      	movs	r1, #0
 80004b2:	4618      	mov	r0, r3
 80004b4:	f004 f896 	bl	80045e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80004b8:	2303      	movs	r3, #3
 80004ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80004bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80004c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c6:	2301      	movs	r3, #1
 80004c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ca:	2310      	movs	r3, #16
 80004cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ce:	2302      	movs	r3, #2
 80004d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004dc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 fba2 	bl	8002c2c <HAL_RCC_OscConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004ee:	f000 fa39 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	230f      	movs	r3, #15
 80004f4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f6:	2302      	movs	r3, #2
 80004f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800050c:	2101      	movs	r1, #1
 800050e:	4618      	mov	r0, r3
 8000510:	f003 fbca 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800051a:	f000 fa23 	bl	8000964 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SystemClock_Config+0xcc>)
 8000520:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000526:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800052c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000536:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000538:	463b      	mov	r3, r7
 800053a:	4618      	mov	r0, r3
 800053c:	f003 fd9a 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000546:	f000 fa0d 	bl	8000964 <Error_Handler>
  }
}
 800054a:	bf00      	nop
 800054c:	3778      	adds	r7, #120	; 0x78
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	000201a0 	.word	0x000201a0

08000558 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800055e:	f107 031c 	add.w	r3, r7, #28
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
 8000578:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <MX_ADC1_Init+0xf8>)
 800057c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000580:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000582:	4b33      	ldr	r3, [pc, #204]	; (8000650 <MX_ADC1_Init+0xf8>)
 8000584:	2200      	movs	r2, #0
 8000586:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000588:	4b31      	ldr	r3, [pc, #196]	; (8000650 <MX_ADC1_Init+0xf8>)
 800058a:	2200      	movs	r2, #0
 800058c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800058e:	4b30      	ldr	r3, [pc, #192]	; (8000650 <MX_ADC1_Init+0xf8>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <MX_ADC1_Init+0xf8>)
 8000596:	2201      	movs	r2, #1
 8000598:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800059a:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <MX_ADC1_Init+0xf8>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ae:	4b28      	ldr	r3, [pc, #160]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ba:	4b25      	ldr	r3, [pc, #148]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005c2:	4b23      	ldr	r3, [pc, #140]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005c4:	2204      	movs	r2, #4
 80005c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80005ce:	4b20      	ldr	r3, [pc, #128]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d4:	481e      	ldr	r0, [pc, #120]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005d6:	f000 fe0d 	bl	80011f4 <HAL_ADC_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80005e0:	f000 f9c0 	bl	8000964 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e8:	f107 031c 	add.w	r3, r7, #28
 80005ec:	4619      	mov	r1, r3
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <MX_ADC1_Init+0xf8>)
 80005f0:	f001 fcf0 	bl	8001fd4 <HAL_ADCEx_MultiModeConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80005fa:	f000 f9b3 	bl	8000964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005fe:	2302      	movs	r3, #2
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000602:	2301      	movs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4619      	mov	r1, r3
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <MX_ADC1_Init+0xf8>)
 800061c:	f001 f9f0 	bl	8001a00 <HAL_ADC_ConfigChannel>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000626:	f000 f99d 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  sConfig.Channel = ADC_CHANNEL_3;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800062e:	2302      	movs	r3, #2
 8000630:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_ADC1_Init+0xf8>)
 8000638:	f001 f9e2 	bl	8001a00 <HAL_ADC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000642:	f000 f98f 	bl	8000964 <Error_Handler>
  }

  /* USER CODE END ADC1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3728      	adds	r7, #40	; 0x28
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000bc 	.word	0x200000bc

08000654 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]
 8000668:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <MX_ADC4_Init+0xb4>)
 800066c:	4a27      	ldr	r2, [pc, #156]	; (800070c <MX_ADC4_Init+0xb8>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_ADC4_Init+0xb4>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b24      	ldr	r3, [pc, #144]	; (8000708 <MX_ADC4_Init+0xb4>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_ADC4_Init+0xb4>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000682:	4b21      	ldr	r3, [pc, #132]	; (8000708 <MX_ADC4_Init+0xb4>)
 8000684:	2201      	movs	r2, #1
 8000686:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_ADC4_Init+0xb4>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000690:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_ADC4_Init+0xb4>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000696:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_ADC4_Init+0xb4>)
 8000698:	2201      	movs	r2, #1
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_ADC4_Init+0xb4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80006a2:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80006c2:	4811      	ldr	r0, [pc, #68]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006c4:	f000 fd96 	bl	80011f4 <HAL_ADC_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80006ce:	f000 f949 	bl	8000964 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d2:	2303      	movs	r3, #3
 80006d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006da:	2300      	movs	r3, #0
 80006dc:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80006ea:	463b      	mov	r3, r7
 80006ec:	4619      	mov	r1, r3
 80006ee:	4806      	ldr	r0, [pc, #24]	; (8000708 <MX_ADC4_Init+0xb4>)
 80006f0:	f001 f986 	bl	8001a00 <HAL_ADC_ConfigChannel>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80006fa:	f000 f933 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000010c 	.word	0x2000010c
 800070c:	50000500 	.word	0x50000500

08000710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_I2C1_Init+0x74>)
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_I2C1_Init+0x78>)
 8000718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_I2C1_Init+0x74>)
 800071c:	4a1b      	ldr	r2, [pc, #108]	; (800078c <MX_I2C1_Init+0x7c>)
 800071e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_I2C1_Init+0x74>)
 8000728:	2201      	movs	r2, #1
 800072a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_I2C1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2C1_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_I2C1_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_I2C1_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800074a:	480e      	ldr	r0, [pc, #56]	; (8000784 <MX_I2C1_Init+0x74>)
 800074c:	f002 f876 	bl	800283c <HAL_I2C_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000756:	f000 f905 	bl	8000964 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <MX_I2C1_Init+0x74>)
 800075e:	f002 f8fc 	bl	800295a <HAL_I2CEx_ConfigAnalogFilter>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000768:	f000 f8fc 	bl	8000964 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_I2C1_Init+0x74>)
 8000770:	f002 f93e 	bl	80029f0 <HAL_I2CEx_ConfigDigitalFilter>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800077a:	f000 f8f3 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000015c 	.word	0x2000015c
 8000788:	40005400 	.word	0x40005400
 800078c:	2000090e 	.word	0x2000090e

08000790 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_SPI1_Init+0x74>)
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_SPI1_Init+0x78>)
 8000798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_SPI1_Init+0x74>)
 800079c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x74>)
 80007aa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_SPI1_Init+0x74>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x74>)
 80007be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x74>)
 80007c6:	2208      	movs	r2, #8
 80007c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x74>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x74>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_SPI1_Init+0x74>)
 80007d8:	2200      	movs	r2, #0
 80007da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x74>)
 80007de:	2207      	movs	r2, #7
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_SPI1_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x74>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_SPI1_Init+0x74>)
 80007f0:	f003 fdf0 	bl	80043d4 <HAL_SPI_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 f8b3 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200001b0 	.word	0x200001b0
 8000808:	40013000 	.word	0x40013000

0800080c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <MX_USB_PCD_Init+0x40>)
 8000814:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 8000818:	2208      	movs	r2, #8
 800081a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 800081e:	2202      	movs	r2, #2
 8000820:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 8000824:	2202      	movs	r2, #2
 8000826:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_USB_PCD_Init+0x3c>)
 8000836:	f002 f927 	bl	8002a88 <HAL_PCD_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000840:	f000 f890 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000214 	.word	0x20000214
 800084c:	40005c00 	.word	0x40005c00

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	; 0x30
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000866:	4b3d      	ldr	r3, [pc, #244]	; (800095c <MX_GPIO_Init+0x10c>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a3c      	ldr	r2, [pc, #240]	; (800095c <MX_GPIO_Init+0x10c>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <MX_GPIO_Init+0x10c>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	4b37      	ldr	r3, [pc, #220]	; (800095c <MX_GPIO_Init+0x10c>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a36      	ldr	r2, [pc, #216]	; (800095c <MX_GPIO_Init+0x10c>)
 8000884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b34      	ldr	r3, [pc, #208]	; (800095c <MX_GPIO_Init+0x10c>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <MX_GPIO_Init+0x10c>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a30      	ldr	r2, [pc, #192]	; (800095c <MX_GPIO_Init+0x10c>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_GPIO_Init+0x10c>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_GPIO_Init+0x10c>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a2a      	ldr	r2, [pc, #168]	; (800095c <MX_GPIO_Init+0x10c>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_GPIO_Init+0x10c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_GPIO_Init+0x10c>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	4a24      	ldr	r2, [pc, #144]	; (800095c <MX_GPIO_Init+0x10c>)
 80008cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d0:	6153      	str	r3, [r2, #20]
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_GPIO_Init+0x10c>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_GPIO_Init+0x10c>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	4a1e      	ldr	r2, [pc, #120]	; (800095c <MX_GPIO_Init+0x10c>)
 80008e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008e8:	6153      	str	r3, [r2, #20]
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_GPIO_Init+0x10c>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f64f 7108 	movw	r1, #65288	; 0xff08
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <MX_GPIO_Init+0x110>)
 80008fe:	f001 ff85 	bl	800280c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000902:	2337      	movs	r3, #55	; 0x37
 8000904:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000906:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0x110>)
 8000918:	f001 fdfe 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800091c:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000920:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	480a      	ldr	r0, [pc, #40]	; (8000960 <MX_GPIO_Init+0x110>)
 8000936:	f001 fdef 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800093a:	2301      	movs	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000950:	f001 fde2 	bl	8002518 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40021000 	.word	0x40021000
 8000960:	48001000 	.word	0x48001000

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	e7fe      	b.n	800096c <Error_Handler+0x8>
	...

08000970 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port) {
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800097a:	4b34      	ldr	r3, [pc, #208]	; (8000a4c <SerialInitialise+0xdc>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	4a33      	ldr	r2, [pc, #204]	; (8000a4c <SerialInitialise+0xdc>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000986:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SerialInitialise+0xdc>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SerialInitialise+0xdc>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	6a1b      	ldr	r3, [r3, #32]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d106      	bne.n	80009a8 <SerialInitialise+0x38>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800099a:	4b2c      	ldr	r3, [pc, #176]	; (8000a4c <SerialInitialise+0xdc>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	4a2b      	ldr	r2, [pc, #172]	; (8000a4c <SerialInitialise+0xdc>)
 80009a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009a4:	6153      	str	r3, [r2, #20]
		break;
 80009a6:	e000      	b.n	80009aa <SerialInitialise+0x3a>
	default:
		break;
 80009a8:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80009b2:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80009bc:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c2:	683a      	ldr	r2, [r7, #0]
 80009c4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80009c8:	b2d2      	uxtb	r2, r2
 80009ca:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	69d9      	ldr	r1, [r3, #28]
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	699b      	ldr	r3, [r3, #24]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	430a      	orrs	r2, r1
 80009dc:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	60fb      	str	r3, [r7, #12]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d821      	bhi.n	8000a2e <SerialInitialise+0xbe>
 80009ea:	a201      	add	r2, pc, #4	; (adr r2, 80009f0 <SerialInitialise+0x80>)
 80009ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f0:	08000a05 	.word	0x08000a05
 80009f4:	08000a0d 	.word	0x08000a0d
 80009f8:	08000a15 	.word	0x08000a15
 80009fc:	08000a1d 	.word	0x08000a1d
 8000a00:	08000a25 	.word	0x08000a25
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2246      	movs	r2, #70	; 0x46
 8000a08:	801a      	strh	r2, [r3, #0]
		break;
 8000a0a:	e010      	b.n	8000a2e <SerialInitialise+0xbe>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2246      	movs	r2, #70	; 0x46
 8000a10:	801a      	strh	r2, [r3, #0]
		break;
 8000a12:	e00c      	b.n	8000a2e <SerialInitialise+0xbe>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2246      	movs	r2, #70	; 0x46
 8000a18:	801a      	strh	r2, [r3, #0]
		break;
 8000a1a:	e008      	b.n	8000a2e <SerialInitialise+0xbe>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2246      	movs	r2, #70	; 0x46
 8000a20:	801a      	strh	r2, [r3, #0]
		break;
 8000a22:	e004      	b.n	8000a2e <SerialInitialise+0xbe>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8000a2a:	801a      	strh	r2, [r3, #0]
		break;
 8000a2c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f042 020d 	orr.w	r2, r2, #13
 8000a3c:	601a      	str	r2, [r3, #0]
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40021000 	.word	0x40021000

08000a50 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8000a5c:	bf00      	nop
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f8      	beq.n	8000a5e <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	b292      	uxth	r2, r2
 8000a74:	801a      	strh	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
	while(*pt != '#') {
 8000a90:	e00b      	b.n	8000aaa <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	6839      	ldr	r1, [r7, #0]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ffd9 	bl	8000a50 <SerialOutputChar>
		counter++;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
		pt++;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
	while(*pt != '#') {
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b23      	cmp	r3, #35	; 0x23
 8000ab0:	d1ef      	bne.n	8000a92 <SerialOutputString+0x10>
	}
}
 8000ab2:	bf00      	nop
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f001 fcdc 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08e      	sub	sp, #56	; 0x38
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b24:	d13d      	bne.n	8000ba2 <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a41      	ldr	r2, [pc, #260]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b39      	ldr	r3, [pc, #228]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b52:	61fb      	str	r3, [r7, #28]
 8000b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b36      	ldr	r3, [pc, #216]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a35      	ldr	r2, [pc, #212]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PF2     ------> ADC1_IN10
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b72:	2303      	movs	r3, #3
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b7e:	4619      	mov	r1, r3
 8000b80:	482c      	ldr	r0, [pc, #176]	; (8000c34 <HAL_ADC_MspInit+0x130>)
 8000b82:	f001 fcc9 	bl	8002518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b86:	2302      	movs	r3, #2
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f001 fcbc 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000ba0:	e042      	b.n	8000c28 <HAL_ADC_MspInit+0x124>
  else if(hadc->Instance==ADC4)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a24      	ldr	r2, [pc, #144]	; (8000c38 <HAL_ADC_MspInit+0x134>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d13d      	bne.n	8000c28 <HAL_ADC_MspInit+0x124>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8000bac:	4b20      	ldr	r3, [pc, #128]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bb6:	6153      	str	r3, [r2, #20]
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bce:	6153      	str	r3, [r2, #20]
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be6:	6153      	str	r3, [r2, #20]
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_ADC_MspInit+0x12c>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	; (8000c3c <HAL_ADC_MspInit+0x138>)
 8000c0a:	f001 fc85 	bl	8002518 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c14:	2303      	movs	r3, #3
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <HAL_ADC_MspInit+0x13c>)
 8000c24:	f001 fc78 	bl	8002518 <HAL_GPIO_Init>
}
 8000c28:	bf00      	nop
 8000c2a:	3738      	adds	r7, #56	; 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48001400 	.word	0x48001400
 8000c38:	50000500 	.word	0x50000500
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	48000c00 	.word	0x48000c00

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_I2C_MspInit+0x7c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d127      	bne.n	8000cb6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6153      	str	r3, [r2, #20]
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c7e:	23c0      	movs	r3, #192	; 0xc0
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c82:	2312      	movs	r3, #18
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <HAL_I2C_MspInit+0x84>)
 8000c9a:	f001 fc3d 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ca8:	61d3      	str	r3, [r2, #28]
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_I2C_MspInit+0x80>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3728      	adds	r7, #40	; 0x28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40005400 	.word	0x40005400
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000400 	.word	0x48000400

08000ccc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_SPI_MspInit+0x7c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d128      	bne.n	8000d40 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_SPI_MspInit+0x80>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_SPI_MspInit+0x80>)
 8000cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf8:	6193      	str	r3, [r2, #24]
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_SPI_MspInit+0x80>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_SPI_MspInit+0x80>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <HAL_SPI_MspInit+0x80>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6153      	str	r3, [r2, #20]
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_SPI_MspInit+0x80>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000d1e:	23e0      	movs	r3, #224	; 0xe0
 8000d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2e:	2305      	movs	r3, #5
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3c:	f001 fbec 	bl	8002518 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40013000 	.word	0x40013000
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_PCD_MspInit+0x80>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d129      	bne.n	8000dc6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_PCD_MspInit+0x84>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	4a17      	ldr	r2, [pc, #92]	; (8000dd4 <HAL_PCD_MspInit+0x84>)
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	6153      	str	r3, [r2, #20]
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_PCD_MspInit+0x84>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000d8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000d9c:	230e      	movs	r3, #14
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f001 fbb5 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_PCD_MspInit+0x84>)
 8000db0:	69db      	ldr	r3, [r3, #28]
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_PCD_MspInit+0x84>)
 8000db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000db8:	61d3      	str	r3, [r2, #28]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_PCD_MspInit+0x84>)
 8000dbc:	69db      	ldr	r3, [r3, #28]
 8000dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3728      	adds	r7, #40	; 0x28
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40005c00 	.word	0x40005c00
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f9a2 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f003 fbca 	bl	80045f4 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	2000a000 	.word	0x2000a000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000504 	.word	0x20000504
 8000e94:	20000660 	.word	0x20000660

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <__NVIC_EnableIRQ+0x38>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000e100 	.word	0xe000e100

08000ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db0a      	blt.n	8000f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	490c      	ldr	r1, [pc, #48]	; (8000f44 <__NVIC_SetPriority+0x4c>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f20:	e00a      	b.n	8000f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4908      	ldr	r1, [pc, #32]	; (8000f48 <__NVIC_SetPriority+0x50>)
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	f003 030f 	and.w	r3, r3, #15
 8000f2e:	3b04      	subs	r3, #4
 8000f30:	0112      	lsls	r2, r2, #4
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	440b      	add	r3, r1
 8000f36:	761a      	strb	r2, [r3, #24]
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000e100 	.word	0xe000e100
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <reset_modes>:
	}
}

// The purpose of this function is to reset the current mode the timer is working
// Doing this ensures that only one mode is currently running at a time
void reset_modes(){
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
	continous_mode = 0;							// Resets continous mode
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <reset_modes+0x1c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	701a      	strb	r2, [r3, #0]
	one_shot_mode = 0;							// Resets one shot mode
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <reset_modes+0x20>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2000050c 	.word	0x2000050c
 8000f6c:	2000050d 	.word	0x2000050d

08000f70 <interval_mode>:
	finished_interval = display_func;

}

// This function intialises the callback function and sets the mode to continous mode
void interval_mode(uint32_t period, void(*display_func)(void)){// j
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	reset_modes();
 8000f7a:	f7ff ffe7 	bl	8000f4c <reset_modes>
	continous_mode = 1;
 8000f7e:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <interval_mode+0x44>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	701a      	strb	r2, [r3, #0]
	newPeriod = period;// j
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <interval_mode+0x48>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
	set_period(newPeriod);//j
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <interval_mode+0x48>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f816 	bl	8000fc0 <set_period>
	TIM2->CR1 |= TIM_CR1_CEN; 					// enable timer2
 8000f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
	finished_interval = display_func;// j
 8000fa4:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <interval_mode+0x4c>)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	6013      	str	r3, [r2, #0]
}// j
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000050c 	.word	0x2000050c
 8000fb8:	20000044 	.word	0x20000044
 8000fbc:	20000508 	.word	0x20000508

08000fc0 <set_period>:

// This function changes the current period
void set_period(uint32_t period){// j
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0x00;// j
 8000fc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = newPeriod - 1;// j
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <set_period+0x28>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	62d3      	str	r3, [r2, #44]	; 0x2c

}// j
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20000044 	.word	0x20000044

08000fec <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	if ((TIM2->SR & TIM_SR_UIF) != 0) {			// check update interrupt flag timer2
 8000ff0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00e      	beq.n	800101c <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF; 				// Clear the update interrupt flag
 8000ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6113      	str	r3, [r2, #16]
        										// Set LEDs to OFF state after timer expires
        //display(); 								// Update the LEDs to OFF state
        if (finished_interval != 0x00){
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <TIM2_IRQHandler+0x34>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <TIM2_IRQHandler+0x30>
        	finished_interval();
 8001016:	4b02      	ldr	r3, [pc, #8]	; (8001020 <TIM2_IRQHandler+0x34>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4798      	blx	r3
        }

	}
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000508 	.word	0x20000508

08001024 <enable_interrupt_timer2>:

void enable_interrupt_timer2(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
    __disable_irq();
    TIM2->DIER |= TIM_DIER_UIE; 				// Enable update interrupt for timer 2
 800102c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 0); 			// Set Priority
 800103c:	2100      	movs	r1, #0
 800103e:	201c      	movs	r0, #28
 8001040:	f7ff ff5a 	bl	8000ef8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 					// Enable interrupts for timer 2
 8001044:	201c      	movs	r0, #28
 8001046:	f7ff ff39 	bl	8000ebc <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800104a:	b662      	cpsie	i
}
 800104c:	bf00      	nop
    __enable_irq();
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}

08001052 <trigger_prescaler>:

void trigger_prescaler(uint32_t periodInSeconds) {
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    TIM2->CR1 = 0;
 800105a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
    TIM2->PSC = 7999;
 8001062:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001066:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800106a:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->ARR = periodInSeconds - 1;
 800106c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8001076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800107a:	2201      	movs	r2, #1
 800107c:	615a      	str	r2, [r3, #20]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001090:	f7ff ff02 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <LoopForever+0xe>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <LoopForever+0x16>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f003 faa1 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010be:	f7ff f913 	bl	80002e8 <main>

080010c2 <LoopForever>:

LoopForever:
    b LoopForever
 80010c2:	e7fe      	b.n	80010c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80010c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010cc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80010d0:	08004f7c 	.word	0x08004f7c
  ldr r2, =_sbss
 80010d4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80010d8:	2000065c 	.word	0x2000065c

080010dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC1_2_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f001 f9dd 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fcde 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f001 f9e7 	bl	80024fe <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f001 f9bd 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000040 	.word	0x20000040
 8001164:	2000004c 	.word	0x2000004c
 8001168:	20000048 	.word	0x20000048

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000004c 	.word	0x2000004c
 8001190:	20000510 	.word	0x20000510

08001194 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;  
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000510 	.word	0x20000510

080011ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000004c 	.word	0x2000004c

080011f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b09a      	sub	sp, #104	; 0x68
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e1c9      	b.n	80015a8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 0310 	and.w	r3, r3, #16
 8001222:	2b00      	cmp	r3, #0
 8001224:	d176      	bne.n	8001314 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d152      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff fc5b 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d13b      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f001 f80f 	bl	8002280 <ADC_Disable>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	2b00      	cmp	r3, #0
 8001272:	d12f      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
 8001274:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001278:	2b00      	cmp	r3, #0
 800127a:	d12b      	bne.n	80012d4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001284:	f023 0302 	bic.w	r3, r3, #2
 8001288:	f043 0202 	orr.w	r2, r3, #2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689a      	ldr	r2, [r3, #8]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800129e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012ae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012b0:	4b86      	ldr	r3, [pc, #536]	; (80014cc <HAL_ADC_Init+0x2d8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a86      	ldr	r2, [pc, #536]	; (80014d0 <HAL_ADC_Init+0x2dc>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9a      	lsrs	r2, r3, #18
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012c6:	e002      	b.n	80012ce <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f9      	bne.n	80012c8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80012ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f0:	d110      	bne.n	8001314 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f023 0312 	bic.w	r3, r3, #18
 80012fa:	f043 0210 	orr.w	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f043 0201 	orr.w	r2, r3, #1
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	f040 8136 	bne.w	800158e <HAL_ADC_Init+0x39a>
 8001322:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 8131 	bne.w	800158e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 8129 	bne.w	800158e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001344:	f043 0202 	orr.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001354:	d004      	beq.n	8001360 <HAL_ADC_Init+0x16c>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5e      	ldr	r2, [pc, #376]	; (80014d4 <HAL_ADC_Init+0x2e0>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_ADC_Init+0x170>
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_ADC_Init+0x2e4>)
 8001362:	e000      	b.n	8001366 <HAL_ADC_Init+0x172>
 8001364:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_ADC_Init+0x2e8>)
 8001366:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001370:	d102      	bne.n	8001378 <HAL_ADC_Init+0x184>
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_ADC_Init+0x2e0>)
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	e01a      	b.n	80013ae <HAL_ADC_Init+0x1ba>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <HAL_ADC_Init+0x2e0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d103      	bne.n	800138a <HAL_ADC_Init+0x196>
 8001382:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e011      	b.n	80013ae <HAL_ADC_Init+0x1ba>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_ADC_Init+0x2ec>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <HAL_ADC_Init+0x1a6>
 8001394:	4b53      	ldr	r3, [pc, #332]	; (80014e4 <HAL_ADC_Init+0x2f0>)
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	e009      	b.n	80013ae <HAL_ADC_Init+0x1ba>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a51      	ldr	r2, [pc, #324]	; (80014e4 <HAL_ADC_Init+0x2f0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d102      	bne.n	80013aa <HAL_ADC_Init+0x1b6>
 80013a4:	4b4e      	ldr	r3, [pc, #312]	; (80014e0 <HAL_ADC_Init+0x2ec>)
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e001      	b.n	80013ae <HAL_ADC_Init+0x1ba>
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d108      	bne.n	80013ce <HAL_ADC_Init+0x1da>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x1da>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <HAL_ADC_Init+0x1dc>
 80013ce:	2300      	movs	r3, #0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d11c      	bne.n	800140e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_ADC_Init+0x202>
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x202>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_ADC_Init+0x204>
 80013f6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d108      	bne.n	800140e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80013fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	431a      	orrs	r2, r3
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e5b      	ldrb	r3, [r3, #25]
 8001412:	035b      	lsls	r3, r3, #13
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001418:	2a01      	cmp	r2, #1
 800141a:	d002      	beq.n	8001422 <HAL_ADC_Init+0x22e>
 800141c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001420:	e000      	b.n	8001424 <HAL_ADC_Init+0x230>
 8001422:	2200      	movs	r2, #0
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001434:	4313      	orrs	r3, r2
 8001436:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d11b      	bne.n	800147a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	7e5b      	ldrb	r3, [r3, #25]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	3b01      	subs	r3, #1
 8001450:	045a      	lsls	r2, r3, #17
 8001452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001454:	4313      	orrs	r3, r2
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	663b      	str	r3, [r7, #96]	; 0x60
 800145c:	e00d      	b.n	800147a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001466:	f043 0220 	orr.w	r2, r3, #32
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	2b01      	cmp	r3, #1
 8001480:	d03a      	beq.n	80014f8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a16      	ldr	r2, [pc, #88]	; (80014e0 <HAL_ADC_Init+0x2ec>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Init+0x2a2>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <HAL_ADC_Init+0x2f0>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d128      	bne.n	80014e8 <HAL_ADC_Init+0x2f4>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800149e:	d012      	beq.n	80014c6 <HAL_ADC_Init+0x2d2>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a8:	d00a      	beq.n	80014c0 <HAL_ADC_Init+0x2cc>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80014b2:	d002      	beq.n	80014ba <HAL_ADC_Init+0x2c6>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	e018      	b.n	80014ec <HAL_ADC_Init+0x2f8>
 80014ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014be:	e015      	b.n	80014ec <HAL_ADC_Init+0x2f8>
 80014c0:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80014c4:	e012      	b.n	80014ec <HAL_ADC_Init+0x2f8>
 80014c6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80014ca:	e00f      	b.n	80014ec <HAL_ADC_Init+0x2f8>
 80014cc:	20000040 	.word	0x20000040
 80014d0:	431bde83 	.word	0x431bde83
 80014d4:	50000100 	.word	0x50000100
 80014d8:	50000300 	.word	0x50000300
 80014dc:	50000700 	.word	0x50000700
 80014e0:	50000400 	.word	0x50000400
 80014e4:	50000500 	.word	0x50000500
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80014f0:	4313      	orrs	r3, r2
 80014f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014f4:	4313      	orrs	r3, r2
 80014f6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d114      	bne.n	8001530 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001514:	f023 0302 	bic.w	r3, r3, #2
 8001518:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7e1b      	ldrb	r3, [r3, #24]
 800151e:	039a      	lsls	r2, r3, #14
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4313      	orrs	r3, r2
 800152a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800152c:	4313      	orrs	r3, r2
 800152e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	4b1e      	ldr	r3, [pc, #120]	; (80015b0 <HAL_ADC_Init+0x3bc>)
 8001538:	4013      	ands	r3, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001540:	430b      	orrs	r3, r1
 8001542:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10c      	bne.n	8001566 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f023 010f 	bic.w	r1, r3, #15
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69db      	ldr	r3, [r3, #28]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
 8001564:	e007      	b.n	8001576 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 020f 	bic.w	r2, r2, #15
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f023 0303 	bic.w	r3, r3, #3
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
 800158c:	e00a      	b.n	80015a4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f023 0312 	bic.w	r3, r3, #18
 8001596:	f043 0210 	orr.w	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80015a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3768      	adds	r7, #104	; 0x68
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	fff0c007 	.word	0xfff0c007

080015b4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 80f9 	bne.w	80017c2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Start+0x2a>
 80015da:	2302      	movs	r3, #2
 80015dc:	e0f4      	b.n	80017c8 <HAL_ADC_Start+0x214>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fde6 	bl	80021b8 <ADC_Enable>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80e0 	bne.w	80017b8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001614:	d004      	beq.n	8001620 <HAL_ADC_Start+0x6c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6d      	ldr	r2, [pc, #436]	; (80017d0 <HAL_ADC_Start+0x21c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d106      	bne.n	800162e <HAL_ADC_Start+0x7a>
 8001620:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_ADC_Start+0x220>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	2b00      	cmp	r3, #0
 800162a:	d010      	beq.n	800164e <HAL_ADC_Start+0x9a>
 800162c:	e005      	b.n	800163a <HAL_ADC_Start+0x86>
 800162e:	4b6a      	ldr	r3, [pc, #424]	; (80017d8 <HAL_ADC_Start+0x224>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	2b00      	cmp	r3, #0
 8001638:	d009      	beq.n	800164e <HAL_ADC_Start+0x9a>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001642:	d004      	beq.n	800164e <HAL_ADC_Start+0x9a>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a64      	ldr	r2, [pc, #400]	; (80017dc <HAL_ADC_Start+0x228>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d115      	bne.n	800167a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d036      	beq.n	80016d6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001670:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001678:	e02d      	b.n	80016d6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800168e:	d004      	beq.n	800169a <HAL_ADC_Start+0xe6>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_ADC_Start+0x21c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d10a      	bne.n	80016b0 <HAL_ADC_Start+0xfc>
 800169a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	e008      	b.n	80016c2 <HAL_ADC_Start+0x10e>
 80016b0:	4b4a      	ldr	r3, [pc, #296]	; (80017dc <HAL_ADC_Start+0x228>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf14      	ite	ne
 80016bc:	2301      	movne	r3, #1
 80016be:	2300      	moveq	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e2:	d106      	bne.n	80016f2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f023 0206 	bic.w	r2, r3, #6
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	221c      	movs	r2, #28
 8001706:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001710:	d004      	beq.n	800171c <HAL_ADC_Start+0x168>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a2e      	ldr	r2, [pc, #184]	; (80017d0 <HAL_ADC_Start+0x21c>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d106      	bne.n	800172a <HAL_ADC_Start+0x176>
 800171c:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_ADC_Start+0x220>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 031f 	and.w	r3, r3, #31
 8001724:	2b00      	cmp	r3, #0
 8001726:	d03e      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 8001728:	e005      	b.n	8001736 <HAL_ADC_Start+0x182>
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_ADC_Start+0x224>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 031f 	and.w	r3, r3, #31
 8001732:	2b00      	cmp	r3, #0
 8001734:	d037      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173e:	d004      	beq.n	800174a <HAL_ADC_Start+0x196>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a22      	ldr	r2, [pc, #136]	; (80017d0 <HAL_ADC_Start+0x21c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d106      	bne.n	8001758 <HAL_ADC_Start+0x1a4>
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_ADC_Start+0x220>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 031f 	and.w	r3, r3, #31
 8001752:	2b05      	cmp	r3, #5
 8001754:	d027      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 8001756:	e005      	b.n	8001764 <HAL_ADC_Start+0x1b0>
 8001758:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_ADC_Start+0x224>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 031f 	and.w	r3, r3, #31
 8001760:	2b05      	cmp	r3, #5
 8001762:	d020      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800176c:	d004      	beq.n	8001778 <HAL_ADC_Start+0x1c4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_ADC_Start+0x21c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d106      	bne.n	8001786 <HAL_ADC_Start+0x1d2>
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_ADC_Start+0x220>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	2b09      	cmp	r3, #9
 8001782:	d010      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 8001784:	e005      	b.n	8001792 <HAL_ADC_Start+0x1de>
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_ADC_Start+0x224>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	2b09      	cmp	r3, #9
 8001790:	d009      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800179a:	d004      	beq.n	80017a6 <HAL_ADC_Start+0x1f2>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_ADC_Start+0x228>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10f      	bne.n	80017c6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f042 0204 	orr.w	r2, r2, #4
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	e006      	b.n	80017c6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80017c0:	e001      	b.n	80017c6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017c2:	2302      	movs	r3, #2
 80017c4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	50000100 	.word	0x50000100
 80017d4:	50000300 	.word	0x50000300
 80017d8:	50000700 	.word	0x50000700
 80017dc:	50000400 	.word	0x50000400

080017e0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d102      	bne.n	80017fc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80017f6:	2308      	movs	r3, #8
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e03a      	b.n	8001872 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001804:	d004      	beq.n	8001810 <HAL_ADC_PollForConversion+0x30>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a72      	ldr	r2, [pc, #456]	; (80019d4 <HAL_ADC_PollForConversion+0x1f4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d101      	bne.n	8001814 <HAL_ADC_PollForConversion+0x34>
 8001810:	4b71      	ldr	r3, [pc, #452]	; (80019d8 <HAL_ADC_PollForConversion+0x1f8>)
 8001812:	e000      	b.n	8001816 <HAL_ADC_PollForConversion+0x36>
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <HAL_ADC_PollForConversion+0x1fc>)
 8001816:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	2b00      	cmp	r3, #0
 8001822:	d112      	bne.n	800184a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d11d      	bne.n	800186e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f043 0220 	orr.w	r2, r3, #32
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0bf      	b.n	80019ca <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f043 0220 	orr.w	r2, r3, #32
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0ad      	b.n	80019ca <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800186e:	230c      	movs	r3, #12
 8001870:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187a:	d004      	beq.n	8001886 <HAL_ADC_PollForConversion+0xa6>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a54      	ldr	r2, [pc, #336]	; (80019d4 <HAL_ADC_PollForConversion+0x1f4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d106      	bne.n	8001894 <HAL_ADC_PollForConversion+0xb4>
 8001886:	4b54      	ldr	r3, [pc, #336]	; (80019d8 <HAL_ADC_PollForConversion+0x1f8>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 031f 	and.w	r3, r3, #31
 800188e:	2b00      	cmp	r3, #0
 8001890:	d010      	beq.n	80018b4 <HAL_ADC_PollForConversion+0xd4>
 8001892:	e005      	b.n	80018a0 <HAL_ADC_PollForConversion+0xc0>
 8001894:	4b51      	ldr	r3, [pc, #324]	; (80019dc <HAL_ADC_PollForConversion+0x1fc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	2b00      	cmp	r3, #0
 800189e:	d009      	beq.n	80018b4 <HAL_ADC_PollForConversion+0xd4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a8:	d004      	beq.n	80018b4 <HAL_ADC_PollForConversion+0xd4>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a4c      	ldr	r2, [pc, #304]	; (80019e0 <HAL_ADC_PollForConversion+0x200>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d104      	bne.n	80018be <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e00f      	b.n	80018de <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018c6:	d004      	beq.n	80018d2 <HAL_ADC_PollForConversion+0xf2>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <HAL_ADC_PollForConversion+0x1f4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d102      	bne.n	80018d8 <HAL_ADC_PollForConversion+0xf8>
 80018d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018d6:	e000      	b.n	80018da <HAL_ADC_PollForConversion+0xfa>
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <HAL_ADC_PollForConversion+0x200>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80018de:	f7ff fc59 	bl	8001194 <HAL_GetTick>
 80018e2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80018e4:	e021      	b.n	800192a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ec:	d01d      	beq.n	800192a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_ADC_PollForConversion+0x124>
 80018f4:	f7ff fc4e 	bl	8001194 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d212      	bcs.n	800192a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	4013      	ands	r3, r2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10b      	bne.n	800192a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f043 0204 	orr.w	r2, r3, #4
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04f      	b.n	80019ca <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0d6      	beq.n	80018e6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800194e:	2b00      	cmp	r3, #0
 8001950:	d131      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001958:	2b00      	cmp	r3, #0
 800195a:	d12c      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b08      	cmp	r3, #8
 8001968:	d125      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d112      	bne.n	800199e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d112      	bne.n	80019b6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0201 	orr.w	r2, r3, #1
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
 800199c:	e00b      	b.n	80019b6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f043 0220 	orr.w	r2, r3, #32
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d103      	bne.n	80019c8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	50000100 	.word	0x50000100
 80019d8:	50000300 	.word	0x50000300
 80019dc:	50000700 	.word	0x50000700
 80019e0:	50000400 	.word	0x50000400

080019e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b09b      	sub	sp, #108	; 0x6c
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x22>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	e2c8      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x5b4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 82ac 	bne.w	8001f92 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d81c      	bhi.n	8001a7c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	461a      	mov	r2, r3
 8001a56:	231f      	movs	r3, #31
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	4019      	ands	r1, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6818      	ldr	r0, [r3, #0]
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	e063      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d81e      	bhi.n	8001ac2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	3b1e      	subs	r3, #30
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	4019      	ands	r1, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	3b1e      	subs	r3, #30
 8001ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac0:	e040      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b0e      	cmp	r3, #14
 8001ac8:	d81e      	bhi.n	8001b08 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	3b3c      	subs	r3, #60	; 0x3c
 8001ade:	221f      	movs	r2, #31
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4019      	ands	r1, r3
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	3b3c      	subs	r3, #60	; 0x3c
 8001afa:	fa00 f203 	lsl.w	r2, r0, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
 8001b06:	e01d      	b.n	8001b44 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	3b5a      	subs	r3, #90	; 0x5a
 8001b1c:	221f      	movs	r2, #31
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4019      	ands	r1, r3
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	3b5a      	subs	r3, #90	; 0x5a
 8001b38:	fa00 f203 	lsl.w	r2, r0, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f040 80e5 	bne.w	8001d1e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b09      	cmp	r3, #9
 8001b5a:	d91c      	bls.n	8001b96 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6999      	ldr	r1, [r3, #24]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b1e      	subs	r3, #30
 8001b6e:	2207      	movs	r2, #7
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	4019      	ands	r1, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6898      	ldr	r0, [r3, #8]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	3b1e      	subs	r3, #30
 8001b88:	fa00 f203 	lsl.w	r2, r0, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	619a      	str	r2, [r3, #24]
 8001b94:	e019      	b.n	8001bca <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6959      	ldr	r1, [r3, #20]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6898      	ldr	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	08db      	lsrs	r3, r3, #3
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d84f      	bhi.n	8001c8c <HAL_ADC_ConfigChannel+0x28c>
 8001bec:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf2:	bf00      	nop
 8001bf4:	08001c05 	.word	0x08001c05
 8001bf8:	08001c27 	.word	0x08001c27
 8001bfc:	08001c49 	.word	0x08001c49
 8001c00:	08001c6b 	.word	0x08001c6b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c0a:	4b99      	ldr	r3, [pc, #612]	; (8001e70 <HAL_ADC_ConfigChannel+0x470>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6812      	ldr	r2, [r2, #0]
 8001c12:	0691      	lsls	r1, r2, #26
 8001c14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c16:	430a      	orrs	r2, r1
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c22:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c24:	e07b      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c2c:	4b90      	ldr	r3, [pc, #576]	; (8001e70 <HAL_ADC_ConfigChannel+0x470>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	0691      	lsls	r1, r2, #26
 8001c36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c44:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c46:	e06a      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_ADC_ConfigChannel+0x470>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	0691      	lsls	r1, r2, #26
 8001c58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c66:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c68:	e059      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c70:	4b7f      	ldr	r3, [pc, #508]	; (8001e70 <HAL_ADC_ConfigChannel+0x470>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	0691      	lsls	r1, r2, #26
 8001c7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c88:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c8a:	e048      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cae:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	069b      	lsls	r3, r3, #26
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cd2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	069b      	lsls	r3, r3, #26
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cf6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	069b      	lsls	r3, r3, #26
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d1a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d1c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d108      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x33e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x33e>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x340>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 8131 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d00f      	beq.n	8001d6e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43da      	mvns	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	400a      	ands	r2, r1
 8001d68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001d6c:	e049      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	409a      	lsls	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d91c      	bls.n	8001dca <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6999      	ldr	r1, [r3, #24]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	3b1b      	subs	r3, #27
 8001da2:	2207      	movs	r2, #7
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4019      	ands	r1, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	6898      	ldr	r0, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	3b1b      	subs	r3, #27
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	619a      	str	r2, [r3, #24]
 8001dc8:	e01b      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6959      	ldr	r1, [r3, #20]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	2207      	movs	r2, #7
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4019      	ands	r1, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6898      	ldr	r0, [r3, #8]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e0a:	d004      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x416>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <HAL_ADC_ConfigChannel+0x474>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x41a>
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_ADC_ConfigChannel+0x478>)
 8001e18:	e000      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x41c>
 8001e1a:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_ADC_ConfigChannel+0x47c>)
 8001e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b10      	cmp	r3, #16
 8001e24:	d105      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d015      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e36:	2b11      	cmp	r3, #17
 8001e38:	d105      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e4a:	2b12      	cmp	r3, #18
 8001e4c:	f040 80ac 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f040 80a5 	bne.w	8001fa8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e66:	d10b      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x480>
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <HAL_ADC_ConfigChannel+0x474>)
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e023      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001e6e:	bf00      	nop
 8001e70:	83fff000 	.word	0x83fff000
 8001e74:	50000100 	.word	0x50000100
 8001e78:	50000300 	.word	0x50000300
 8001e7c:	50000700 	.word	0x50000700
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a4e      	ldr	r2, [pc, #312]	; (8001fc0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d103      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x492>
 8001e8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e011      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d102      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x4a2>
 8001e9c:	4b4a      	ldr	r3, [pc, #296]	; (8001fc8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	e009      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d102      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x4b2>
 8001eac:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e001      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x4b6>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d108      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x4d6>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x4d6>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x4d8>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d150      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001edc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d010      	beq.n	8001f04 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x4fe>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x4fe>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x500>
 8001efe:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d13c      	bne.n	8001f7e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d11d      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x548>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f14:	d118      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f20:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <HAL_ADC_ConfigChannel+0x5cc>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	0c9a      	lsrs	r2, r3, #18
 8001f2e:	4613      	mov	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f38:	e002      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f9      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f46:	e02e      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b11      	cmp	r3, #17
 8001f4e:	d10b      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x568>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f58:	d106      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f66:	e01e      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d11a      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f7a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f7c:	e013      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f043 0220 	orr.w	r2, r3, #32
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f90:	e00a      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f043 0220 	orr.w	r2, r3, #32
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001fa4:	e000      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fa6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	376c      	adds	r7, #108	; 0x6c
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	50000100 	.word	0x50000100
 8001fc4:	50000400 	.word	0x50000400
 8001fc8:	50000500 	.word	0x50000500
 8001fcc:	20000040 	.word	0x20000040
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b099      	sub	sp, #100	; 0x64
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fec:	d102      	bne.n	8001ff4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001fee:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	e01a      	b.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d103      	bne.n	8002006 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	e011      	b.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a67      	ldr	r2, [pc, #412]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d102      	bne.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002010:	4b66      	ldr	r3, [pc, #408]	; (80021ac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e009      	b.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a64      	ldr	r2, [pc, #400]	; (80021ac <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d102      	bne.n	8002026 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002020:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002022:	60bb      	str	r3, [r7, #8]
 8002024:	e001      	b.n	800202a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0b0      	b.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800203e:	2302      	movs	r3, #2
 8002040:	e0a9      	b.n	8002196 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 808d 	bne.w	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	f040 8086 	bne.w	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002070:	d004      	beq.n	800207c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d101      	bne.n	8002080 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800207e:	e000      	b.n	8002082 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002080:	4b4c      	ldr	r3, [pc, #304]	; (80021b4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002082:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d040      	beq.n	800210e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 800208c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800209e:	035b      	lsls	r3, r3, #13
 80020a0:	430b      	orrs	r3, r1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d108      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80020c8:	2300      	movs	r3, #0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d15c      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80020ea:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d14b      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80020f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80020f8:	f023 030f 	bic.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	6811      	ldr	r1, [r2, #0]
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	6892      	ldr	r2, [r2, #8]
 8002104:	430a      	orrs	r2, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800210a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800210c:	e03c      	b.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800210e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002118:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d108      	bne.n	800213a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800213a:	2300      	movs	r3, #0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d123      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	2b01      	cmp	r3, #1
 800214a:	d107      	bne.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 800215c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800215e:	2b00      	cmp	r3, #0
 8002160:	d112      	bne.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800216a:	f023 030f 	bic.w	r3, r3, #15
 800216e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002170:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002172:	e009      	b.n	8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002178:	f043 0220 	orr.w	r2, r3, #32
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002186:	e000      	b.n	800218a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002188:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002196:	4618      	mov	r0, r3
 8002198:	3764      	adds	r7, #100	; 0x64
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	50000100 	.word	0x50000100
 80021a8:	50000400 	.word	0x50000400
 80021ac:	50000500 	.word	0x50000500
 80021b0:	50000300 	.word	0x50000300
 80021b4:	50000700 	.word	0x50000700

080021b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <ADC_Enable+0x2c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <ADC_Enable+0x2c>
 80021e0:	2301      	movs	r3, #1
 80021e2:	e000      	b.n	80021e6 <ADC_Enable+0x2e>
 80021e4:	2300      	movs	r3, #0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d143      	bne.n	8002272 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <ADC_Enable+0xc4>)
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f043 0210 	orr.w	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	f043 0201 	orr.w	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e02f      	b.n	8002274 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002224:	f7fe ffb6 	bl	8001194 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800222a:	e01b      	b.n	8002264 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800222c:	f7fe ffb2 	bl	8001194 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d914      	bls.n	8002264 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b01      	cmp	r3, #1
 8002246:	d00d      	beq.n	8002264 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0210 	orr.w	r2, r3, #16
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002258:	f043 0201 	orr.w	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e007      	b.n	8002274 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d1dc      	bne.n	800222c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	8000003f 	.word	0x8000003f

08002280 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <ADC_Disable+0x2c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <ADC_Disable+0x2c>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <ADC_Disable+0x2e>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d047      	beq.n	8002342 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 030d 	and.w	r3, r3, #13
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d10f      	bne.n	80022e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0202 	orr.w	r2, r2, #2
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2203      	movs	r2, #3
 80022d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80022d8:	f7fe ff5c 	bl	8001194 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80022de:	e029      	b.n	8002334 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0210 	orr.w	r2, r3, #16
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	f043 0201 	orr.w	r2, r3, #1
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e023      	b.n	8002344 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022fc:	f7fe ff4a 	bl	8001194 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d914      	bls.n	8002334 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10d      	bne.n	8002334 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e007      	b.n	8002344 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b01      	cmp	r3, #1
 8002340:	d0dc      	beq.n	80022fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <__NVIC_SetPriorityGrouping>:
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237e:	4a04      	ldr	r2, [pc, #16]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	60d3      	str	r3, [r2, #12]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_GetPriorityGrouping>:
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_SetPriority>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff47 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff5c 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffb0 	bl	800246c <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002526:	e154      	b.n	80027d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	4013      	ands	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8146 	beq.w	80027cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d005      	beq.n	8002558 <HAL_GPIO_Init+0x40>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d130      	bne.n	80025ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4013      	ands	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800258e:	2201      	movs	r2, #1
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	091b      	lsrs	r3, r3, #4
 80025a4:	f003 0201 	and.w	r2, r3, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d017      	beq.n	80025f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	2203      	movs	r2, #3
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d123      	bne.n	800264a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	08da      	lsrs	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3208      	adds	r2, #8
 800260a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	220f      	movs	r2, #15
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	08da      	lsrs	r2, r3, #3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3208      	adds	r2, #8
 8002644:	6939      	ldr	r1, [r7, #16]
 8002646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	693a      	ldr	r2, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0203 	and.w	r2, r3, #3
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 80a0 	beq.w	80027cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800268c:	4b58      	ldr	r3, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x2d8>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_GPIO_Init+0x2d8>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	6193      	str	r3, [r2, #24]
 8002698:	4b55      	ldr	r3, [pc, #340]	; (80027f0 <HAL_GPIO_Init+0x2d8>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026a4:	4a53      	ldr	r2, [pc, #332]	; (80027f4 <HAL_GPIO_Init+0x2dc>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ce:	d019      	beq.n	8002704 <HAL_GPIO_Init+0x1ec>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a49      	ldr	r2, [pc, #292]	; (80027f8 <HAL_GPIO_Init+0x2e0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_GPIO_Init+0x1e8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a48      	ldr	r2, [pc, #288]	; (80027fc <HAL_GPIO_Init+0x2e4>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00d      	beq.n	80026fc <HAL_GPIO_Init+0x1e4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a47      	ldr	r2, [pc, #284]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x1e0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a46      	ldr	r2, [pc, #280]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_GPIO_Init+0x1dc>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e008      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 80026f4:	2305      	movs	r3, #5
 80026f6:	e006      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 80026f8:	2303      	movs	r3, #3
 80026fa:	e004      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e002      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_GPIO_Init+0x1ee>
 8002704:	2300      	movs	r3, #0
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	f002 0203 	and.w	r2, r2, #3
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	4093      	lsls	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002716:	4937      	ldr	r1, [pc, #220]	; (80027f4 <HAL_GPIO_Init+0x2dc>)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002724:	4b38      	ldr	r3, [pc, #224]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	43db      	mvns	r3, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002748:	4a2f      	ldr	r2, [pc, #188]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274e:	4b2e      	ldr	r3, [pc, #184]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002772:	4a25      	ldr	r2, [pc, #148]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800279c:	4a1a      	ldr	r2, [pc, #104]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a2:	4b19      	ldr	r3, [pc, #100]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	43db      	mvns	r3, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4013      	ands	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027c6:	4a10      	ldr	r2, [pc, #64]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3301      	adds	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	fa22 f303 	lsr.w	r3, r2, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f aea3 	bne.w	8002528 <HAL_GPIO_Init+0x10>
  }
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	371c      	adds	r7, #28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000
 80027f8:	48000400 	.word	0x48000400
 80027fc:	48000800 	.word	0x48000800
 8002800:	48000c00 	.word	0x48000c00
 8002804:	48001000 	.word	0x48001000
 8002808:	40010400 	.word	0x40010400

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002828:	e002      	b.n	8002830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e081      	b.n	8002952 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d106      	bne.n	8002868 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7fe f9ee 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2224      	movs	r2, #36	; 0x24
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d104      	bne.n	80028d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69d9      	ldr	r1, [r3, #28]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0201 	orr.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b20      	cmp	r3, #32
 800296e:	d138      	bne.n	80029e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800297a:	2302      	movs	r3, #2
 800297c:	e032      	b.n	80029e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2224      	movs	r2, #36	; 0x24
 800298a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f042 0201 	orr.w	r2, r2, #1
 80029cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d139      	bne.n	8002a7a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e033      	b.n	8002a7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2224      	movs	r2, #36	; 0x24
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a42:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	e000      	b.n	8002a7c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8a:	b08b      	sub	sp, #44	; 0x2c
 8002a8c:	af06      	add	r7, sp, #24
 8002a8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e0c4      	b.n	8002c24 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d106      	bne.n	8002ab4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7fe f94e 	bl	8000d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fd32 	bl	800452a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	e040      	b.n	8002b4e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3301      	adds	r3, #1
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	6879      	ldr	r1, [r7, #4]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	440b      	add	r3, r1
 8002b06:	3303      	adds	r3, #3
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3338      	adds	r3, #56	; 0x38
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	440b      	add	r3, r1
 8002b2e:	333c      	adds	r3, #60	; 0x3c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	3340      	adds	r3, #64	; 0x40
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3b9      	bcc.n	8002acc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e044      	b.n	8002be8 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	440b      	add	r3, r1
 8002b82:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	3301      	adds	r3, #1
 8002be6:	73fb      	strb	r3, [r7, #15]
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d3b5      	bcc.n	8002b5e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	687e      	ldr	r6, [r7, #4]
 8002bfa:	466d      	mov	r5, sp
 8002bfc:	f106 0410 	add.w	r4, r6, #16
 8002c00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c04:	6823      	ldr	r3, [r4, #0]
 8002c06:	602b      	str	r3, [r5, #0]
 8002c08:	1d33      	adds	r3, r6, #4
 8002c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c0c:	6838      	ldr	r0, [r7, #0]
 8002c0e:	f001 fca7 	bl	8004560 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c38:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d102      	bne.n	8002c52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f001 b823 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 817d 	beq.w	8002f62 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c68:	4bbc      	ldr	r3, [pc, #752]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c74:	4bb9      	ldr	r3, [pc, #740]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d15c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x10e>
 8002c80:	4bb6      	ldr	r3, [pc, #728]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d155      	bne.n	8002d3a <HAL_RCC_OscConfig+0x10e>
 8002c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c92:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002c9a:	fa93 f3a3 	rbit	r3, r3
 8002c9e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ca2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	095b      	lsrs	r3, r3, #5
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d102      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x94>
 8002cba:	4ba8      	ldr	r3, [pc, #672]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	e015      	b.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002cc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cc4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002cd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cd8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002cdc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ce8:	4b9c      	ldr	r3, [pc, #624]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002cf0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002cf4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002cf8:	fa92 f2a2 	rbit	r2, r2
 8002cfc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d00:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d04:	fab2 f282 	clz	r2, r2
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	f042 0220 	orr.w	r2, r2, #32
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	f002 021f 	and.w	r2, r2, #31
 8002d14:	2101      	movs	r1, #1
 8002d16:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 811f 	beq.w	8002f60 <HAL_RCC_OscConfig+0x334>
 8002d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 8116 	bne.w	8002f60 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	f000 bfaf 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4a:	d106      	bne.n	8002d5a <HAL_RCC_OscConfig+0x12e>
 8002d4c:	4b83      	ldr	r3, [pc, #524]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a82      	ldr	r2, [pc, #520]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e036      	b.n	8002dc8 <HAL_RCC_OscConfig+0x19c>
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x158>
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7b      	ldr	r2, [pc, #492]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b79      	ldr	r3, [pc, #484]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a78      	ldr	r2, [pc, #480]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e021      	b.n	8002dc8 <HAL_RCC_OscConfig+0x19c>
 8002d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x184>
 8002d96:	4b71      	ldr	r3, [pc, #452]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a70      	ldr	r2, [pc, #448]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b6e      	ldr	r3, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a6d      	ldr	r2, [pc, #436]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e00b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x19c>
 8002db0:	4b6a      	ldr	r3, [pc, #424]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a69      	ldr	r2, [pc, #420]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002db6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b67      	ldr	r3, [pc, #412]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a66      	ldr	r2, [pc, #408]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002dc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dc6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc8:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f023 020f 	bic.w	r2, r3, #15
 8002dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	495f      	ldr	r1, [pc, #380]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d059      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe f9cf 	bl	8001194 <HAL_GetTick>
 8002df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe f9ca 	bl	8001194 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b64      	cmp	r3, #100	; 0x64
 8002e0a:	d902      	bls.n	8002e12 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	f000 bf43 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
 8002e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e16:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d102      	bne.n	8002e44 <HAL_RCC_OscConfig+0x218>
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	e015      	b.n	8002e70 <HAL_RCC_OscConfig+0x244>
 8002e44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e48:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e5c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002e60:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e74:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002e78:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002e7c:	fa92 f2a2 	rbit	r2, r2
 8002e80:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002e84:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002e88:	fab2 f282 	clz	r2, r2
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	f042 0220 	orr.w	r2, r2, #32
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f002 021f 	and.w	r2, r2, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ab      	beq.n	8002dfc <HAL_RCC_OscConfig+0x1d0>
 8002ea4:	e05d      	b.n	8002f62 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe f975 	bl	8001194 <HAL_GetTick>
 8002eaa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb0:	f7fe f970 	bl	8001194 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d902      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f000 bee9 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
 8002ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eca:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002ed2:	fa93 f3a3 	rbit	r3, r3
 8002ed6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002eda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	095b      	lsrs	r3, r3, #5
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x2cc>
 8002ef2:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	e015      	b.n	8002f24 <HAL_RCC_OscConfig+0x2f8>
 8002ef8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002efc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f00:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f10:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f14:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_RCC_OscConfig+0x330>)
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f28:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f2c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f30:	fa92 f2a2 	rbit	r2, r2
 8002f34:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f38:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	f042 0220 	orr.w	r2, r2, #32
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	f002 021f 	and.w	r2, r2, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ab      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x284>
 8002f58:	e003      	b.n	8002f62 <HAL_RCC_OscConfig+0x336>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 817d 	beq.w	8003272 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f78:	4ba6      	ldr	r3, [pc, #664]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f84:	4ba3      	ldr	r3, [pc, #652]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 030c 	and.w	r3, r3, #12
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d172      	bne.n	8003076 <HAL_RCC_OscConfig+0x44a>
 8002f90:	4ba0      	ldr	r3, [pc, #640]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d16c      	bne.n	8003076 <HAL_RCC_OscConfig+0x44a>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002fae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	095b      	lsrs	r3, r3, #5
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d102      	bne.n	8002fcc <HAL_RCC_OscConfig+0x3a0>
 8002fc6:	4b93      	ldr	r3, [pc, #588]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	e013      	b.n	8002ff4 <HAL_RCC_OscConfig+0x3c8>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002fd6:	fa93 f3a3 	rbit	r3, r3
 8002fda:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002fde:	2302      	movs	r3, #2
 8002fe0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002fe4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002ff0:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002ffa:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002ffe:	fa92 f2a2 	rbit	r2, r2
 8003002:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003006:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800300a:	fab2 f282 	clz	r2, r2
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	f042 0220 	orr.w	r2, r2, #32
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f002 021f 	and.w	r2, r2, #31
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f202 	lsl.w	r2, r1, r2
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCC_OscConfig+0x410>
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	f000 be2e 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303c:	4b75      	ldr	r3, [pc, #468]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	21f8      	movs	r1, #248	; 0xf8
 8003052:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003056:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800305a:	fa91 f1a1 	rbit	r1, r1
 800305e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003062:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003066:	fab1 f181 	clz	r1, r1
 800306a:	b2c9      	uxtb	r1, r1
 800306c:	408b      	lsls	r3, r1
 800306e:	4969      	ldr	r1, [pc, #420]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003074:	e0fd      	b.n	8003272 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8088 	beq.w	8003198 <HAL_RCC_OscConfig+0x56c>
 8003088:	2301      	movs	r3, #1
 800308a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800309a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	461a      	mov	r2, r3
 80030b0:	2301      	movs	r3, #1
 80030b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe f86e 	bl	8001194 <HAL_GetTick>
 80030b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030be:	f7fe f869 	bl	8001194 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d902      	bls.n	80030d4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	f000 bde2 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
 80030d4:	2302      	movs	r3, #2
 80030d6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80030e6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_RCC_OscConfig+0x4d8>
 80030fe:	4b45      	ldr	r3, [pc, #276]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	e013      	b.n	800312c <HAL_RCC_OscConfig+0x500>
 8003104:	2302      	movs	r3, #2
 8003106:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003116:	2302      	movs	r3, #2
 8003118:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800311c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003128:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2202      	movs	r2, #2
 800312e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003132:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003136:	fa92 f2a2 	rbit	r2, r2
 800313a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800313e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003142:	fab2 f282 	clz	r2, r2
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	f042 0220 	orr.w	r2, r2, #32
 800314c:	b2d2      	uxtb	r2, r2
 800314e:	f002 021f 	and.w	r2, r2, #31
 8003152:	2101      	movs	r1, #1
 8003154:	fa01 f202 	lsl.w	r2, r1, r2
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0af      	beq.n	80030be <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800316a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	21f8      	movs	r1, #248	; 0xf8
 8003174:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800317c:	fa91 f1a1 	rbit	r1, r1
 8003180:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003184:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003188:	fab1 f181 	clz	r1, r1
 800318c:	b2c9      	uxtb	r1, r1
 800318e:	408b      	lsls	r3, r1
 8003190:	4920      	ldr	r1, [pc, #128]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8003192:	4313      	orrs	r3, r2
 8003194:	600b      	str	r3, [r1, #0]
 8003196:	e06c      	b.n	8003272 <HAL_RCC_OscConfig+0x646>
 8003198:	2301      	movs	r3, #1
 800319a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800319e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	461a      	mov	r2, r3
 80031c0:	2300      	movs	r3, #0
 80031c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fd ffe6 	bl	8001194 <HAL_GetTick>
 80031c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fd ffe1 	bl	8001194 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d902      	bls.n	80031e4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	f000 bd5a 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
 80031e4:	2302      	movs	r3, #2
 80031e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80031f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fa:	fab3 f383 	clz	r3, r3
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b01      	cmp	r3, #1
 800320c:	d104      	bne.n	8003218 <HAL_RCC_OscConfig+0x5ec>
 800320e:	4b01      	ldr	r3, [pc, #4]	; (8003214 <HAL_RCC_OscConfig+0x5e8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	e015      	b.n	8003240 <HAL_RCC_OscConfig+0x614>
 8003214:	40021000 	.word	0x40021000
 8003218:	2302      	movs	r3, #2
 800321a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003222:	fa93 f3a3 	rbit	r3, r3
 8003226:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800322a:	2302      	movs	r3, #2
 800322c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003230:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800323c:	4bc8      	ldr	r3, [pc, #800]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	2202      	movs	r2, #2
 8003242:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003246:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800324a:	fa92 f2a2 	rbit	r2, r2
 800324e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003252:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003256:	fab2 f282 	clz	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f042 0220 	orr.w	r2, r2, #32
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	f002 021f 	and.w	r2, r2, #31
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1ad      	bne.n	80031ce <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	f000 8110 	beq.w	80034a8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d079      	beq.n	800338c <HAL_RCC_OscConfig+0x760>
 8003298:	2301      	movs	r3, #1
 800329a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032a2:	fa93 f3a3 	rbit	r3, r3
 80032a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	4bab      	ldr	r3, [pc, #684]	; (8003564 <HAL_RCC_OscConfig+0x938>)
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	461a      	mov	r2, r3
 80032be:	2301      	movs	r3, #1
 80032c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fd ff67 	bl	8001194 <HAL_GetTick>
 80032c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fd ff62 	bl	8001194 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d902      	bls.n	80032e2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	f000 bcdb 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
 80032e2:	2302      	movs	r3, #2
 80032e4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80032fc:	2202      	movs	r2, #2
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003304:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	fa93 f2a3 	rbit	r2, r3
 800330e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003320:	2202      	movs	r2, #2
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	fa93 f2a3 	rbit	r2, r3
 8003332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003336:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800333a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333c:	4b88      	ldr	r3, [pc, #544]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 800333e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003340:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003344:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003348:	2102      	movs	r1, #2
 800334a:	6019      	str	r1, [r3, #0]
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	fa93 f1a3 	rbit	r1, r3
 800335a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003362:	6019      	str	r1, [r3, #0]
  return result;
 8003364:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003368:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	2101      	movs	r1, #1
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	4013      	ands	r3, r2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0a0      	beq.n	80032cc <HAL_RCC_OscConfig+0x6a0>
 800338a:	e08d      	b.n	80034a8 <HAL_RCC_OscConfig+0x87c>
 800338c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003390:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	fa93 f2a3 	rbit	r2, r3
 80033a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033aa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033ae:	601a      	str	r2, [r3, #0]
  return result;
 80033b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80033b8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	4b68      	ldr	r3, [pc, #416]	; (8003564 <HAL_RCC_OscConfig+0x938>)
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	2300      	movs	r3, #0
 80033cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fee1 	bl	8001194 <HAL_GetTick>
 80033d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d8:	f7fd fedc 	bl	8001194 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d902      	bls.n	80033ee <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	f000 bc55 	b.w	8003c98 <HAL_RCC_OscConfig+0x106c>
 80033ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033f6:	2202      	movs	r2, #2
 80033f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	fa93 f2a3 	rbit	r2, r3
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800341a:	2202      	movs	r2, #2
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	fa93 f2a3 	rbit	r2, r3
 800342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800343e:	2202      	movs	r2, #2
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003446:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	fa93 f2a3 	rbit	r2, r3
 8003450:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003454:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003458:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 800345c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003462:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003466:	2102      	movs	r1, #2
 8003468:	6019      	str	r1, [r3, #0]
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	fa93 f1a3 	rbit	r1, r3
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003480:	6019      	str	r1, [r3, #0]
  return result;
 8003482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003486:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	fab3 f383 	clz	r3, r3
 8003490:	b2db      	uxtb	r3, r3
 8003492:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2101      	movs	r1, #1
 800349e:	fa01 f303 	lsl.w	r3, r1, r3
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d197      	bne.n	80033d8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 81a1 	beq.w	8003800 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d116      	bne.n	80034fe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d0:	4b23      	ldr	r3, [pc, #140]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 80034d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034da:	61d3      	str	r3, [r2, #28]
 80034dc:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80034e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80034f6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_OscConfig+0x93c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11a      	bne.n	8003540 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800350a:	4b17      	ldr	r3, [pc, #92]	; (8003568 <HAL_RCC_OscConfig+0x93c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a16      	ldr	r2, [pc, #88]	; (8003568 <HAL_RCC_OscConfig+0x93c>)
 8003510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003514:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003516:	f7fd fe3d 	bl	8001194 <HAL_GetTick>
 800351a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800351e:	e009      	b.n	8003534 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fd fe38 	bl	8001194 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e3b1      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_RCC_OscConfig+0x93c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0ef      	beq.n	8003520 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003544:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d10d      	bne.n	800356c <HAL_RCC_OscConfig+0x940>
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	4a02      	ldr	r2, [pc, #8]	; (8003560 <HAL_RCC_OscConfig+0x934>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6213      	str	r3, [r2, #32]
 800355c:	e03c      	b.n	80035d8 <HAL_RCC_OscConfig+0x9ac>
 800355e:	bf00      	nop
 8003560:	40021000 	.word	0x40021000
 8003564:	10908120 	.word	0x10908120
 8003568:	40007000 	.word	0x40007000
 800356c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003570:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_OscConfig+0x96a>
 800357c:	4bc1      	ldr	r3, [pc, #772]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4ac0      	ldr	r2, [pc, #768]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6213      	str	r3, [r2, #32]
 8003588:	4bbe      	ldr	r3, [pc, #760]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4abd      	ldr	r2, [pc, #756]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 800358e:	f023 0304 	bic.w	r3, r3, #4
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e020      	b.n	80035d8 <HAL_RCC_OscConfig+0x9ac>
 8003596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b05      	cmp	r3, #5
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x994>
 80035a6:	4bb7      	ldr	r3, [pc, #732]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4ab6      	ldr	r2, [pc, #728]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6213      	str	r3, [r2, #32]
 80035b2:	4bb4      	ldr	r3, [pc, #720]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	4ab3      	ldr	r2, [pc, #716]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6213      	str	r3, [r2, #32]
 80035be:	e00b      	b.n	80035d8 <HAL_RCC_OscConfig+0x9ac>
 80035c0:	4bb0      	ldr	r3, [pc, #704]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4aaf      	ldr	r2, [pc, #700]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035c6:	f023 0301 	bic.w	r3, r3, #1
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	4bad      	ldr	r3, [pc, #692]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4aac      	ldr	r2, [pc, #688]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80035d2:	f023 0304 	bic.w	r3, r3, #4
 80035d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8081 	beq.w	80036ec <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fd fdd3 	bl	8001194 <HAL_GetTick>
 80035ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00b      	b.n	800360c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fd fdce 	bl	8001194 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	; 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e345      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
 800360c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003610:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003614:	2202      	movs	r2, #2
 8003616:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	fa93 f2a3 	rbit	r2, r3
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003638:	2202      	movs	r2, #2
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003652:	601a      	str	r2, [r3, #0]
  return result;
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800365c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d102      	bne.n	8003678 <HAL_RCC_OscConfig+0xa4c>
 8003672:	4b84      	ldr	r3, [pc, #528]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	e013      	b.n	80036a0 <HAL_RCC_OscConfig+0xa74>
 8003678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003680:	2202      	movs	r2, #2
 8003682:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003688:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	fa93 f2a3 	rbit	r2, r3
 8003692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003696:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	4b79      	ldr	r3, [pc, #484]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 800369e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036a4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036a8:	2102      	movs	r1, #2
 80036aa:	6011      	str	r1, [r2, #0]
 80036ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	fa92 f1a2 	rbit	r1, r2
 80036ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036be:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036c2:	6011      	str	r1, [r2, #0]
  return result;
 80036c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036c8:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	fab2 f282 	clz	r2, r2
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	f002 021f 	and.w	r2, r2, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d084      	beq.n	80035f4 <HAL_RCC_OscConfig+0x9c8>
 80036ea:	e07f      	b.n	80037ec <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ec:	f7fd fd52 	bl	8001194 <HAL_GetTick>
 80036f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f4:	e00b      	b.n	800370e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd fd4d 	bl	8001194 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e2c4      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003716:	2202      	movs	r2, #2
 8003718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	fa93 f2a3 	rbit	r2, r3
 8003728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800372c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003736:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800373a:	2202      	movs	r2, #2
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003742:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	fa93 f2a3 	rbit	r2, r3
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003754:	601a      	str	r2, [r3, #0]
  return result;
 8003756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800375e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	fab3 f383 	clz	r3, r3
 8003764:	b2db      	uxtb	r3, r3
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	b2db      	uxtb	r3, r3
 800376a:	f043 0302 	orr.w	r3, r3, #2
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d102      	bne.n	800377a <HAL_RCC_OscConfig+0xb4e>
 8003774:	4b43      	ldr	r3, [pc, #268]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	e013      	b.n	80037a2 <HAL_RCC_OscConfig+0xb76>
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003782:	2202      	movs	r2, #2
 8003784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	fa93 f2a3 	rbit	r2, r3
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037a6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037aa:	2102      	movs	r1, #2
 80037ac:	6011      	str	r1, [r2, #0]
 80037ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	fa92 f1a2 	rbit	r1, r2
 80037bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037c0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037c4:	6011      	str	r1, [r2, #0]
  return result;
 80037c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037ca:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	fab2 f282 	clz	r2, r2
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	f002 021f 	and.w	r2, r2, #31
 80037e0:	2101      	movs	r1, #1
 80037e2:	fa01 f202 	lsl.w	r2, r1, r2
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d184      	bne.n	80036f6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f4:	4b23      	ldr	r3, [pc, #140]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4a22      	ldr	r2, [pc, #136]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 80037fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037fe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8242 	beq.w	8003c96 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_RCC_OscConfig+0xc58>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	f000 8213 	beq.w	8003c46 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	2b02      	cmp	r3, #2
 800382e:	f040 8162 	bne.w	8003af6 <HAL_RCC_OscConfig+0xeca>
 8003832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003836:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800383a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800383e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003844:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	fa93 f2a3 	rbit	r2, r3
 800384e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003852:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003856:	601a      	str	r2, [r3, #0]
  return result;
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003860:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003862:	fab3 f383 	clz	r3, r3
 8003866:	b2db      	uxtb	r3, r3
 8003868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800386c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	461a      	mov	r2, r3
 8003874:	2300      	movs	r3, #0
 8003876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fc8c 	bl	8001194 <HAL_GetTick>
 800387c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	e00c      	b.n	800389c <HAL_RCC_OscConfig+0xc70>
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fd fc84 	bl	8001194 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e1fd      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
 800389c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	fa93 f2a3 	rbit	r2, r3
 80038b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038bc:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038c0:	601a      	str	r2, [r3, #0]
  return result;
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80038ca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	fab3 f383 	clz	r3, r3
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d102      	bne.n	80038e6 <HAL_RCC_OscConfig+0xcba>
 80038e0:	4bb0      	ldr	r3, [pc, #704]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	e027      	b.n	8003936 <HAL_RCC_OscConfig+0xd0a>
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003910:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	fa93 f2a3 	rbit	r2, r3
 8003928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	4b9c      	ldr	r3, [pc, #624]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800393a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800393e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003942:	6011      	str	r1, [r2, #0]
 8003944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003948:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	fa92 f1a2 	rbit	r1, r2
 8003952:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003956:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800395a:	6011      	str	r1, [r2, #0]
  return result;
 800395c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003960:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003964:	6812      	ldr	r2, [r2, #0]
 8003966:	fab2 f282 	clz	r2, r2
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	f042 0220 	orr.w	r2, r2, #32
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	f002 021f 	and.w	r2, r2, #31
 8003976:	2101      	movs	r1, #1
 8003978:	fa01 f202 	lsl.w	r2, r1, r2
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d182      	bne.n	8003888 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003982:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800398a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	430b      	orrs	r3, r1
 80039a4:	497f      	ldr	r1, [pc, #508]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039bc:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f2a3 	rbit	r2, r3
 80039c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039ce:	601a      	str	r2, [r3, #0]
  return result;
 80039d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80039d8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	461a      	mov	r2, r3
 80039ec:	2301      	movs	r3, #1
 80039ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f0:	f7fd fbd0 	bl	8001194 <HAL_GetTick>
 80039f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039f8:	e009      	b.n	8003a0e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fa:	f7fd fbcb 	bl	8001194 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e144      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
 8003a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a12:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	fa93 f2a3 	rbit	r2, r3
 8003a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a32:	601a      	str	r2, [r3, #0]
  return result;
 8003a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a38:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f043 0301 	orr.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d102      	bne.n	8003a58 <HAL_RCC_OscConfig+0xe2c>
 8003a52:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	e027      	b.n	8003aa8 <HAL_RCC_OscConfig+0xe7c>
 8003a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	fa93 f2a3 	rbit	r2, r3
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a82:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aac:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ab0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ab4:	6011      	str	r1, [r2, #0]
 8003ab6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aba:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	fa92 f1a2 	rbit	r1, r2
 8003ac4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003acc:	6011      	str	r1, [r2, #0]
  return result;
 8003ace:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f042 0220 	orr.w	r2, r2, #32
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f002 021f 	and.w	r2, r2, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d082      	beq.n	80039fa <HAL_RCC_OscConfig+0xdce>
 8003af4:	e0cf      	b.n	8003c96 <HAL_RCC_OscConfig+0x106a>
 8003af6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003afe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	fa93 f2a3 	rbit	r2, r3
 8003b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b16:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b1a:	601a      	str	r2, [r3, #0]
  return result;
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b24:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	461a      	mov	r2, r3
 8003b38:	2300      	movs	r3, #0
 8003b3a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fd fb2a 	bl	8001194 <HAL_GetTick>
 8003b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b44:	e009      	b.n	8003b5a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fd fb25 	bl	8001194 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e09e      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
 8003b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	fa93 f2a3 	rbit	r2, r3
 8003b76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b7e:	601a      	str	r2, [r3, #0]
  return result;
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003b88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8a:	fab3 f383 	clz	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d104      	bne.n	8003ba8 <HAL_RCC_OscConfig+0xf7c>
 8003b9e:	4b01      	ldr	r3, [pc, #4]	; (8003ba4 <HAL_RCC_OscConfig+0xf78>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	e029      	b.n	8003bf8 <HAL_RCC_OscConfig+0xfcc>
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bac:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bba:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f2a3 	rbit	r2, r3
 8003bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003bcc:	601a      	str	r2, [r3, #0]
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003bd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	fa93 f2a3 	rbit	r2, r3
 8003bea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	4b2b      	ldr	r3, [pc, #172]	; (8003ca4 <HAL_RCC_OscConfig+0x1078>)
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bfc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c0a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	fa92 f1a2 	rbit	r1, r2
 8003c14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c18:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c1c:	6011      	str	r1, [r2, #0]
  return result;
 8003c1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c22:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c26:	6812      	ldr	r2, [r2, #0]
 8003c28:	fab2 f282 	clz	r2, r2
 8003c2c:	b2d2      	uxtb	r2, r2
 8003c2e:	f042 0220 	orr.w	r2, r2, #32
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	f002 021f 	and.w	r2, r2, #31
 8003c38:	2101      	movs	r1, #1
 8003c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d180      	bne.n	8003b46 <HAL_RCC_OscConfig+0xf1a>
 8003c44:	e027      	b.n	8003c96 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e01e      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c5a:	4b12      	ldr	r3, [pc, #72]	; (8003ca4 <HAL_RCC_OscConfig+0x1078>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c66:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d10b      	bne.n	8003c92 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003c7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40021000 	.word	0x40021000

08003ca8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b09e      	sub	sp, #120	; 0x78
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e162      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b90      	ldr	r3, [pc, #576]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d910      	bls.n	8003cf0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b8d      	ldr	r3, [pc, #564]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0207 	bic.w	r2, r3, #7
 8003cd6:	498b      	ldr	r1, [pc, #556]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b89      	ldr	r3, [pc, #548]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e14a      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cfc:	4b82      	ldr	r3, [pc, #520]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	497f      	ldr	r1, [pc, #508]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f000 80dc 	beq.w	8003ed4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d13c      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xf6>
 8003d24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d28:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d2c:	fa93 f3a3 	rbit	r3, r3
 8003d30:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d34:	fab3 f383 	clz	r3, r3
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	095b      	lsrs	r3, r3, #5
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d102      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xa6>
 8003d48:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	e00f      	b.n	8003d6e <HAL_RCC_ClockConfig+0xc6>
 8003d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d52:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	667b      	str	r3, [r7, #100]	; 0x64
 8003d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60
 8003d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d64:	fa93 f3a3 	rbit	r3, r3
 8003d68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d6a:	4b67      	ldr	r3, [pc, #412]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d72:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d76:	fa92 f2a2 	rbit	r2, r2
 8003d7a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d7e:	fab2 f282 	clz	r2, r2
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	f042 0220 	orr.w	r2, r2, #32
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	f002 021f 	and.w	r2, r2, #31
 8003d8e:	2101      	movs	r1, #1
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d17b      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0f3      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d13c      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x178>
 8003da6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003daa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	fab3 f383 	clz	r3, r3
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d102      	bne.n	8003dd0 <HAL_RCC_ClockConfig+0x128>
 8003dca:	4b4f      	ldr	r3, [pc, #316]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	e00f      	b.n	8003df0 <HAL_RCC_ClockConfig+0x148>
 8003dd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	fa93 f3a3 	rbit	r3, r3
 8003ddc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40
 8003de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de6:	fa93 f3a3 	rbit	r3, r3
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dec:	4b46      	ldr	r3, [pc, #280]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df4:	63ba      	str	r2, [r7, #56]	; 0x38
 8003df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003df8:	fa92 f2a2 	rbit	r2, r2
 8003dfc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e00:	fab2 f282 	clz	r2, r2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	f042 0220 	orr.w	r2, r2, #32
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	f002 021f 	and.w	r2, r2, #31
 8003e10:	2101      	movs	r1, #1
 8003e12:	fa01 f202 	lsl.w	r2, r1, r2
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d13a      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b2      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
 8003e20:	2302      	movs	r3, #2
 8003e22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	fab3 f383 	clz	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	095b      	lsrs	r3, r3, #5
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x1a0>
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	e00d      	b.n	8003e64 <HAL_RCC_ClockConfig+0x1bc>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	fa93 f3a3 	rbit	r3, r3
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
 8003e54:	2302      	movs	r3, #2
 8003e56:	623b      	str	r3, [r7, #32]
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2202      	movs	r2, #2
 8003e66:	61ba      	str	r2, [r7, #24]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	fa92 f2a2 	rbit	r2, r2
 8003e6e:	617a      	str	r2, [r7, #20]
  return result;
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	fab2 f282 	clz	r2, r2
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	f042 0220 	orr.w	r2, r2, #32
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	f002 021f 	and.w	r2, r2, #31
 8003e82:	2101      	movs	r1, #1
 8003e84:	fa01 f202 	lsl.w	r2, r1, r2
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e079      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	491a      	ldr	r1, [pc, #104]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fd f976 	bl	8001194 <HAL_GetTick>
 8003ea8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fd f972 	bl	8001194 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e061      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <HAL_RCC_ClockConfig+0x260>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d214      	bcs.n	8003f0c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f023 0207 	bic.w	r2, r3, #7
 8003eea:	4906      	ldr	r1, [pc, #24]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef2:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <HAL_RCC_ClockConfig+0x25c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e040      	b.n	8003f86 <HAL_RCC_ClockConfig+0x2de>
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d008      	beq.n	8003f2a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_RCC_ClockConfig+0x2e8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	491a      	ldr	r1, [pc, #104]	; (8003f90 <HAL_RCC_ClockConfig+0x2e8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d009      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f36:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <HAL_RCC_ClockConfig+0x2e8>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	4912      	ldr	r1, [pc, #72]	; (8003f90 <HAL_RCC_ClockConfig+0x2e8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f4a:	f000 f829 	bl	8003fa0 <HAL_RCC_GetSysClockFreq>
 8003f4e:	4601      	mov	r1, r0
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCC_ClockConfig+0x2e8>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f58:	22f0      	movs	r2, #240	; 0xf0
 8003f5a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	fa92 f2a2 	rbit	r2, r2
 8003f62:	60fa      	str	r2, [r7, #12]
  return result;
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	fab2 f282 	clz	r2, r2
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	40d3      	lsrs	r3, r2
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <HAL_RCC_ClockConfig+0x2ec>)
 8003f70:	5cd3      	ldrb	r3, [r2, r3]
 8003f72:	fa21 f303 	lsr.w	r3, r1, r3
 8003f76:	4a08      	ldr	r2, [pc, #32]	; (8003f98 <HAL_RCC_ClockConfig+0x2f0>)
 8003f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <HAL_RCC_ClockConfig+0x2f4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fd f8c4 	bl	800110c <HAL_InitTick>
  
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3778      	adds	r7, #120	; 0x78
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40021000 	.word	0x40021000
 8003f94:	08004f10 	.word	0x08004f10
 8003f98:	20000040 	.word	0x20000040
 8003f9c:	20000048 	.word	0x20000048

08003fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b08b      	sub	sp, #44	; 0x2c
 8003fa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	2300      	movs	r3, #0
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d002      	beq.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x30>
 8003fca:	2b08      	cmp	r3, #8
 8003fcc:	d003      	beq.n	8003fd6 <HAL_RCC_GetSysClockFreq+0x36>
 8003fce:	e03c      	b.n	800404a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fd2:	623b      	str	r3, [r7, #32]
      break;
 8003fd4:	e03c      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003fdc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003fe0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	fa92 f2a2 	rbit	r2, r2
 8003fe8:	607a      	str	r2, [r7, #4]
  return result;
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	fab2 f282 	clz	r2, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	40d3      	lsrs	r3, r2
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ff6:	5cd3      	ldrb	r3, [r2, r3]
 8003ff8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	220f      	movs	r2, #15
 8004004:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	fa92 f2a2 	rbit	r2, r2
 800400c:	60fa      	str	r2, [r7, #12]
  return result;
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	fab2 f282 	clz	r2, r2
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	40d3      	lsrs	r3, r2
 8004018:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_RCC_GetSysClockFreq+0xcc>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004028:	4a0e      	ldr	r2, [pc, #56]	; (8004064 <HAL_RCC_GetSysClockFreq+0xc4>)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
 8004038:	e004      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	4a0c      	ldr	r2, [pc, #48]	; (8004070 <HAL_RCC_GetSysClockFreq+0xd0>)
 800403e:	fb02 f303 	mul.w	r3, r2, r3
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	623b      	str	r3, [r7, #32]
      break;
 8004048:	e002      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800404a:	4b06      	ldr	r3, [pc, #24]	; (8004064 <HAL_RCC_GetSysClockFreq+0xc4>)
 800404c:	623b      	str	r3, [r7, #32]
      break;
 800404e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004050:	6a3b      	ldr	r3, [r7, #32]
}
 8004052:	4618      	mov	r0, r3
 8004054:	372c      	adds	r7, #44	; 0x2c
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	007a1200 	.word	0x007a1200
 8004068:	08004f20 	.word	0x08004f20
 800406c:	08004f30 	.word	0x08004f30
 8004070:	003d0900 	.word	0x003d0900

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b092      	sub	sp, #72	; 0x48
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80d4 	beq.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004098:	4b4e      	ldr	r3, [pc, #312]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10e      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	4b4b      	ldr	r3, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4a4a      	ldr	r2, [pc, #296]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	61d3      	str	r3, [r2, #28]
 80040b0:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	4b45      	ldr	r3, [pc, #276]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a41      	ldr	r2, [pc, #260]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040da:	f7fd f85b 	bl	8001194 <HAL_GetTick>
 80040de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	e008      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e2:	f7fd f857 	bl	8001194 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b64      	cmp	r3, #100	; 0x64
 80040ee:	d901      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e169      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004100:	4b34      	ldr	r3, [pc, #208]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 8084 	beq.w	800421a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800411c:	429a      	cmp	r2, r3
 800411e:	d07c      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004120:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	fa93 f3a3 	rbit	r3, r3
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800413a:	fab3 f383 	clz	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	461a      	mov	r2, r3
 8004142:	4b26      	ldr	r3, [pc, #152]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	461a      	mov	r2, r3
 800414a:	2301      	movs	r3, #1
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	fa93 f3a3 	rbit	r3, r3
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	4b1d      	ldr	r3, [pc, #116]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004172:	4a18      	ldr	r2, [pc, #96]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004176:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04b      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004182:	f7fd f807 	bl	8001194 <HAL_GetTick>
 8004186:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004188:	e00a      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800418a:	f7fd f803 	bl	8001194 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f241 3288 	movw	r2, #5000	; 0x1388
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e113      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041a0:	2302      	movs	r3, #2
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	fa93 f3a3 	rbit	r3, r3
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	2302      	movs	r3, #2
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	61fb      	str	r3, [r7, #28]
  return result;
 80041b8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	095b      	lsrs	r3, r3, #5
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0302 	orr.w	r3, r3, #2
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d108      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041ce:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	e00d      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
 80041dc:	10908100 	.word	0x10908100
 80041e0:	2302      	movs	r3, #2
 80041e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa93 f3a3 	rbit	r3, r3
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	4b78      	ldr	r3, [pc, #480]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	2202      	movs	r2, #2
 80041f2:	613a      	str	r2, [r7, #16]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	fa92 f2a2 	rbit	r2, r2
 80041fa:	60fa      	str	r2, [r7, #12]
  return result;
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	fab2 f282 	clz	r2, r2
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	f002 021f 	and.w	r2, r2, #31
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f202 	lsl.w	r2, r1, r2
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0b7      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800421a:	4b6d      	ldr	r3, [pc, #436]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	496a      	ldr	r1, [pc, #424]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004228:	4313      	orrs	r3, r2
 800422a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800422c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004234:	4b66      	ldr	r3, [pc, #408]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	4a65      	ldr	r2, [pc, #404]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800423e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800424c:	4b60      	ldr	r3, [pc, #384]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f023 0203 	bic.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	495d      	ldr	r1, [pc, #372]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800425a:	4313      	orrs	r3, r2
 800425c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d008      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800426a:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	4956      	ldr	r1, [pc, #344]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004288:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	494e      	ldr	r1, [pc, #312]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d008      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f023 0210 	bic.w	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4947      	ldr	r1, [pc, #284]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042c4:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	493f      	ldr	r1, [pc, #252]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e6:	f023 0220 	bic.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4938      	ldr	r1, [pc, #224]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004300:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	4930      	ldr	r1, [pc, #192]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d008      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800431e:	4b2c      	ldr	r3, [pc, #176]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	4929      	ldr	r1, [pc, #164]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4921      	ldr	r1, [pc, #132]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800434a:	4313      	orrs	r3, r2
 800434c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	491a      	ldr	r1, [pc, #104]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004368:	4313      	orrs	r3, r2
 800436a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004378:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	4912      	ldr	r1, [pc, #72]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004386:	4313      	orrs	r3, r2
 8004388:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d008      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004396:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	490b      	ldr	r1, [pc, #44]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d008      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80043b4:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	4903      	ldr	r1, [pc, #12]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3748      	adds	r7, #72	; 0x48
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40021000 	.word	0x40021000

080043d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e09d      	b.n	8004522 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043f6:	d009      	beq.n	800440c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
 80043fe:	e005      	b.n	800440c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7fc fc50 	bl	8000ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800444c:	d902      	bls.n	8004454 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e002      	b.n	800445a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004458:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004462:	d007      	beq.n	8004474 <HAL_SPI_Init+0xa0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800446c:	d002      	beq.n	8004474 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a2:	431a      	orrs	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	ea42 0103 	orr.w	r1, r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	f003 0204 	and.w	r2, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f003 0310 	and.w	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80044f0:	ea42 0103 	orr.w	r1, r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69da      	ldr	r2, [r3, #28]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004532:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004536:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800453e:	b29a      	uxth	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	b29b      	uxth	r3, r3
 8004544:	43db      	mvns	r3, r3
 8004546:	b29b      	uxth	r3, r3
 8004548:	4013      	ands	r3, r2
 800454a:	b29a      	uxth	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004560:	b084      	sub	sp, #16
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
 800456a:	f107 0014 	add.w	r0, r7, #20
 800456e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	b004      	add	sp, #16
 80045a0:	4770      	bx	lr
	...

080045a4 <siprintf>:
 80045a4:	b40e      	push	{r1, r2, r3}
 80045a6:	b500      	push	{lr}
 80045a8:	b09c      	sub	sp, #112	; 0x70
 80045aa:	ab1d      	add	r3, sp, #116	; 0x74
 80045ac:	9002      	str	r0, [sp, #8]
 80045ae:	9006      	str	r0, [sp, #24]
 80045b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045b4:	4809      	ldr	r0, [pc, #36]	; (80045dc <siprintf+0x38>)
 80045b6:	9107      	str	r1, [sp, #28]
 80045b8:	9104      	str	r1, [sp, #16]
 80045ba:	4909      	ldr	r1, [pc, #36]	; (80045e0 <siprintf+0x3c>)
 80045bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c0:	9105      	str	r1, [sp, #20]
 80045c2:	6800      	ldr	r0, [r0, #0]
 80045c4:	9301      	str	r3, [sp, #4]
 80045c6:	a902      	add	r1, sp, #8
 80045c8:	f000 f992 	bl	80048f0 <_svfiprintf_r>
 80045cc:	9b02      	ldr	r3, [sp, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	b01c      	add	sp, #112	; 0x70
 80045d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80045d8:	b003      	add	sp, #12
 80045da:	4770      	bx	lr
 80045dc:	2000009c 	.word	0x2000009c
 80045e0:	ffff0208 	.word	0xffff0208

080045e4 <memset>:
 80045e4:	4402      	add	r2, r0
 80045e6:	4603      	mov	r3, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d100      	bne.n	80045ee <memset+0xa>
 80045ec:	4770      	bx	lr
 80045ee:	f803 1b01 	strb.w	r1, [r3], #1
 80045f2:	e7f9      	b.n	80045e8 <memset+0x4>

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	2000009c 	.word	0x2000009c

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 fc6a 	bl	8004eec <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08004f74 	.word	0x08004f74
 800463c:	08004f74 	.word	0x08004f74
 8004640:	08004f74 	.word	0x08004f74
 8004644:	08004f78 	.word	0x08004f78

08004648 <__retarget_lock_acquire_recursive>:
 8004648:	4770      	bx	lr

0800464a <__retarget_lock_release_recursive>:
 800464a:	4770      	bx	lr

0800464c <_free_r>:
 800464c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800464e:	2900      	cmp	r1, #0
 8004650:	d044      	beq.n	80046dc <_free_r+0x90>
 8004652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004656:	9001      	str	r0, [sp, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f1a1 0404 	sub.w	r4, r1, #4
 800465e:	bfb8      	it	lt
 8004660:	18e4      	addlt	r4, r4, r3
 8004662:	f000 f8df 	bl	8004824 <__malloc_lock>
 8004666:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <_free_r+0x94>)
 8004668:	9801      	ldr	r0, [sp, #4]
 800466a:	6813      	ldr	r3, [r2, #0]
 800466c:	b933      	cbnz	r3, 800467c <_free_r+0x30>
 800466e:	6063      	str	r3, [r4, #4]
 8004670:	6014      	str	r4, [r2, #0]
 8004672:	b003      	add	sp, #12
 8004674:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004678:	f000 b8da 	b.w	8004830 <__malloc_unlock>
 800467c:	42a3      	cmp	r3, r4
 800467e:	d908      	bls.n	8004692 <_free_r+0x46>
 8004680:	6825      	ldr	r5, [r4, #0]
 8004682:	1961      	adds	r1, r4, r5
 8004684:	428b      	cmp	r3, r1
 8004686:	bf01      	itttt	eq
 8004688:	6819      	ldreq	r1, [r3, #0]
 800468a:	685b      	ldreq	r3, [r3, #4]
 800468c:	1949      	addeq	r1, r1, r5
 800468e:	6021      	streq	r1, [r4, #0]
 8004690:	e7ed      	b.n	800466e <_free_r+0x22>
 8004692:	461a      	mov	r2, r3
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b10b      	cbz	r3, 800469c <_free_r+0x50>
 8004698:	42a3      	cmp	r3, r4
 800469a:	d9fa      	bls.n	8004692 <_free_r+0x46>
 800469c:	6811      	ldr	r1, [r2, #0]
 800469e:	1855      	adds	r5, r2, r1
 80046a0:	42a5      	cmp	r5, r4
 80046a2:	d10b      	bne.n	80046bc <_free_r+0x70>
 80046a4:	6824      	ldr	r4, [r4, #0]
 80046a6:	4421      	add	r1, r4
 80046a8:	1854      	adds	r4, r2, r1
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	d1e0      	bne.n	8004672 <_free_r+0x26>
 80046b0:	681c      	ldr	r4, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	6053      	str	r3, [r2, #4]
 80046b6:	440c      	add	r4, r1
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	e7da      	b.n	8004672 <_free_r+0x26>
 80046bc:	d902      	bls.n	80046c4 <_free_r+0x78>
 80046be:	230c      	movs	r3, #12
 80046c0:	6003      	str	r3, [r0, #0]
 80046c2:	e7d6      	b.n	8004672 <_free_r+0x26>
 80046c4:	6825      	ldr	r5, [r4, #0]
 80046c6:	1961      	adds	r1, r4, r5
 80046c8:	428b      	cmp	r3, r1
 80046ca:	bf04      	itt	eq
 80046cc:	6819      	ldreq	r1, [r3, #0]
 80046ce:	685b      	ldreq	r3, [r3, #4]
 80046d0:	6063      	str	r3, [r4, #4]
 80046d2:	bf04      	itt	eq
 80046d4:	1949      	addeq	r1, r1, r5
 80046d6:	6021      	streq	r1, [r4, #0]
 80046d8:	6054      	str	r4, [r2, #4]
 80046da:	e7ca      	b.n	8004672 <_free_r+0x26>
 80046dc:	b003      	add	sp, #12
 80046de:	bd30      	pop	{r4, r5, pc}
 80046e0:	20000654 	.word	0x20000654

080046e4 <sbrk_aligned>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	4e0e      	ldr	r6, [pc, #56]	; (8004720 <sbrk_aligned+0x3c>)
 80046e8:	460c      	mov	r4, r1
 80046ea:	6831      	ldr	r1, [r6, #0]
 80046ec:	4605      	mov	r5, r0
 80046ee:	b911      	cbnz	r1, 80046f6 <sbrk_aligned+0x12>
 80046f0:	f000 fba6 	bl	8004e40 <_sbrk_r>
 80046f4:	6030      	str	r0, [r6, #0]
 80046f6:	4621      	mov	r1, r4
 80046f8:	4628      	mov	r0, r5
 80046fa:	f000 fba1 	bl	8004e40 <_sbrk_r>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	d00a      	beq.n	8004718 <sbrk_aligned+0x34>
 8004702:	1cc4      	adds	r4, r0, #3
 8004704:	f024 0403 	bic.w	r4, r4, #3
 8004708:	42a0      	cmp	r0, r4
 800470a:	d007      	beq.n	800471c <sbrk_aligned+0x38>
 800470c:	1a21      	subs	r1, r4, r0
 800470e:	4628      	mov	r0, r5
 8004710:	f000 fb96 	bl	8004e40 <_sbrk_r>
 8004714:	3001      	adds	r0, #1
 8004716:	d101      	bne.n	800471c <sbrk_aligned+0x38>
 8004718:	f04f 34ff 	mov.w	r4, #4294967295
 800471c:	4620      	mov	r0, r4
 800471e:	bd70      	pop	{r4, r5, r6, pc}
 8004720:	20000658 	.word	0x20000658

08004724 <_malloc_r>:
 8004724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004728:	1ccd      	adds	r5, r1, #3
 800472a:	f025 0503 	bic.w	r5, r5, #3
 800472e:	3508      	adds	r5, #8
 8004730:	2d0c      	cmp	r5, #12
 8004732:	bf38      	it	cc
 8004734:	250c      	movcc	r5, #12
 8004736:	2d00      	cmp	r5, #0
 8004738:	4607      	mov	r7, r0
 800473a:	db01      	blt.n	8004740 <_malloc_r+0x1c>
 800473c:	42a9      	cmp	r1, r5
 800473e:	d905      	bls.n	800474c <_malloc_r+0x28>
 8004740:	230c      	movs	r3, #12
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	2600      	movs	r6, #0
 8004746:	4630      	mov	r0, r6
 8004748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800474c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004820 <_malloc_r+0xfc>
 8004750:	f000 f868 	bl	8004824 <__malloc_lock>
 8004754:	f8d8 3000 	ldr.w	r3, [r8]
 8004758:	461c      	mov	r4, r3
 800475a:	bb5c      	cbnz	r4, 80047b4 <_malloc_r+0x90>
 800475c:	4629      	mov	r1, r5
 800475e:	4638      	mov	r0, r7
 8004760:	f7ff ffc0 	bl	80046e4 <sbrk_aligned>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	4604      	mov	r4, r0
 8004768:	d155      	bne.n	8004816 <_malloc_r+0xf2>
 800476a:	f8d8 4000 	ldr.w	r4, [r8]
 800476e:	4626      	mov	r6, r4
 8004770:	2e00      	cmp	r6, #0
 8004772:	d145      	bne.n	8004800 <_malloc_r+0xdc>
 8004774:	2c00      	cmp	r4, #0
 8004776:	d048      	beq.n	800480a <_malloc_r+0xe6>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	4631      	mov	r1, r6
 800477c:	4638      	mov	r0, r7
 800477e:	eb04 0903 	add.w	r9, r4, r3
 8004782:	f000 fb5d 	bl	8004e40 <_sbrk_r>
 8004786:	4581      	cmp	r9, r0
 8004788:	d13f      	bne.n	800480a <_malloc_r+0xe6>
 800478a:	6821      	ldr	r1, [r4, #0]
 800478c:	1a6d      	subs	r5, r5, r1
 800478e:	4629      	mov	r1, r5
 8004790:	4638      	mov	r0, r7
 8004792:	f7ff ffa7 	bl	80046e4 <sbrk_aligned>
 8004796:	3001      	adds	r0, #1
 8004798:	d037      	beq.n	800480a <_malloc_r+0xe6>
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	442b      	add	r3, r5
 800479e:	6023      	str	r3, [r4, #0]
 80047a0:	f8d8 3000 	ldr.w	r3, [r8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d038      	beq.n	800481a <_malloc_r+0xf6>
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	42a2      	cmp	r2, r4
 80047ac:	d12b      	bne.n	8004806 <_malloc_r+0xe2>
 80047ae:	2200      	movs	r2, #0
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	e00f      	b.n	80047d4 <_malloc_r+0xb0>
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	1b52      	subs	r2, r2, r5
 80047b8:	d41f      	bmi.n	80047fa <_malloc_r+0xd6>
 80047ba:	2a0b      	cmp	r2, #11
 80047bc:	d917      	bls.n	80047ee <_malloc_r+0xca>
 80047be:	1961      	adds	r1, r4, r5
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	6025      	str	r5, [r4, #0]
 80047c4:	bf18      	it	ne
 80047c6:	6059      	strne	r1, [r3, #4]
 80047c8:	6863      	ldr	r3, [r4, #4]
 80047ca:	bf08      	it	eq
 80047cc:	f8c8 1000 	streq.w	r1, [r8]
 80047d0:	5162      	str	r2, [r4, r5]
 80047d2:	604b      	str	r3, [r1, #4]
 80047d4:	4638      	mov	r0, r7
 80047d6:	f104 060b 	add.w	r6, r4, #11
 80047da:	f000 f829 	bl	8004830 <__malloc_unlock>
 80047de:	f026 0607 	bic.w	r6, r6, #7
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	1af2      	subs	r2, r6, r3
 80047e6:	d0ae      	beq.n	8004746 <_malloc_r+0x22>
 80047e8:	1b9b      	subs	r3, r3, r6
 80047ea:	50a3      	str	r3, [r4, r2]
 80047ec:	e7ab      	b.n	8004746 <_malloc_r+0x22>
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	6862      	ldr	r2, [r4, #4]
 80047f2:	d1dd      	bne.n	80047b0 <_malloc_r+0x8c>
 80047f4:	f8c8 2000 	str.w	r2, [r8]
 80047f8:	e7ec      	b.n	80047d4 <_malloc_r+0xb0>
 80047fa:	4623      	mov	r3, r4
 80047fc:	6864      	ldr	r4, [r4, #4]
 80047fe:	e7ac      	b.n	800475a <_malloc_r+0x36>
 8004800:	4634      	mov	r4, r6
 8004802:	6876      	ldr	r6, [r6, #4]
 8004804:	e7b4      	b.n	8004770 <_malloc_r+0x4c>
 8004806:	4613      	mov	r3, r2
 8004808:	e7cc      	b.n	80047a4 <_malloc_r+0x80>
 800480a:	230c      	movs	r3, #12
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4638      	mov	r0, r7
 8004810:	f000 f80e 	bl	8004830 <__malloc_unlock>
 8004814:	e797      	b.n	8004746 <_malloc_r+0x22>
 8004816:	6025      	str	r5, [r4, #0]
 8004818:	e7dc      	b.n	80047d4 <_malloc_r+0xb0>
 800481a:	605b      	str	r3, [r3, #4]
 800481c:	deff      	udf	#255	; 0xff
 800481e:	bf00      	nop
 8004820:	20000654 	.word	0x20000654

08004824 <__malloc_lock>:
 8004824:	4801      	ldr	r0, [pc, #4]	; (800482c <__malloc_lock+0x8>)
 8004826:	f7ff bf0f 	b.w	8004648 <__retarget_lock_acquire_recursive>
 800482a:	bf00      	nop
 800482c:	20000650 	.word	0x20000650

08004830 <__malloc_unlock>:
 8004830:	4801      	ldr	r0, [pc, #4]	; (8004838 <__malloc_unlock+0x8>)
 8004832:	f7ff bf0a 	b.w	800464a <__retarget_lock_release_recursive>
 8004836:	bf00      	nop
 8004838:	20000650 	.word	0x20000650

0800483c <__ssputs_r>:
 800483c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004840:	688e      	ldr	r6, [r1, #8]
 8004842:	461f      	mov	r7, r3
 8004844:	42be      	cmp	r6, r7
 8004846:	680b      	ldr	r3, [r1, #0]
 8004848:	4682      	mov	sl, r0
 800484a:	460c      	mov	r4, r1
 800484c:	4690      	mov	r8, r2
 800484e:	d82c      	bhi.n	80048aa <__ssputs_r+0x6e>
 8004850:	898a      	ldrh	r2, [r1, #12]
 8004852:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004856:	d026      	beq.n	80048a6 <__ssputs_r+0x6a>
 8004858:	6965      	ldr	r5, [r4, #20]
 800485a:	6909      	ldr	r1, [r1, #16]
 800485c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004860:	eba3 0901 	sub.w	r9, r3, r1
 8004864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004868:	1c7b      	adds	r3, r7, #1
 800486a:	444b      	add	r3, r9
 800486c:	106d      	asrs	r5, r5, #1
 800486e:	429d      	cmp	r5, r3
 8004870:	bf38      	it	cc
 8004872:	461d      	movcc	r5, r3
 8004874:	0553      	lsls	r3, r2, #21
 8004876:	d527      	bpl.n	80048c8 <__ssputs_r+0x8c>
 8004878:	4629      	mov	r1, r5
 800487a:	f7ff ff53 	bl	8004724 <_malloc_r>
 800487e:	4606      	mov	r6, r0
 8004880:	b360      	cbz	r0, 80048dc <__ssputs_r+0xa0>
 8004882:	6921      	ldr	r1, [r4, #16]
 8004884:	464a      	mov	r2, r9
 8004886:	f000 faeb 	bl	8004e60 <memcpy>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	6126      	str	r6, [r4, #16]
 8004898:	6165      	str	r5, [r4, #20]
 800489a:	444e      	add	r6, r9
 800489c:	eba5 0509 	sub.w	r5, r5, r9
 80048a0:	6026      	str	r6, [r4, #0]
 80048a2:	60a5      	str	r5, [r4, #8]
 80048a4:	463e      	mov	r6, r7
 80048a6:	42be      	cmp	r6, r7
 80048a8:	d900      	bls.n	80048ac <__ssputs_r+0x70>
 80048aa:	463e      	mov	r6, r7
 80048ac:	6820      	ldr	r0, [r4, #0]
 80048ae:	4632      	mov	r2, r6
 80048b0:	4641      	mov	r1, r8
 80048b2:	f000 faab 	bl	8004e0c <memmove>
 80048b6:	68a3      	ldr	r3, [r4, #8]
 80048b8:	1b9b      	subs	r3, r3, r6
 80048ba:	60a3      	str	r3, [r4, #8]
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	4433      	add	r3, r6
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	2000      	movs	r0, #0
 80048c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c8:	462a      	mov	r2, r5
 80048ca:	f000 fad7 	bl	8004e7c <_realloc_r>
 80048ce:	4606      	mov	r6, r0
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d1e0      	bne.n	8004896 <__ssputs_r+0x5a>
 80048d4:	6921      	ldr	r1, [r4, #16]
 80048d6:	4650      	mov	r0, sl
 80048d8:	f7ff feb8 	bl	800464c <_free_r>
 80048dc:	230c      	movs	r3, #12
 80048de:	f8ca 3000 	str.w	r3, [sl]
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	f04f 30ff 	mov.w	r0, #4294967295
 80048ee:	e7e9      	b.n	80048c4 <__ssputs_r+0x88>

080048f0 <_svfiprintf_r>:
 80048f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f4:	4698      	mov	r8, r3
 80048f6:	898b      	ldrh	r3, [r1, #12]
 80048f8:	061b      	lsls	r3, r3, #24
 80048fa:	b09d      	sub	sp, #116	; 0x74
 80048fc:	4607      	mov	r7, r0
 80048fe:	460d      	mov	r5, r1
 8004900:	4614      	mov	r4, r2
 8004902:	d50e      	bpl.n	8004922 <_svfiprintf_r+0x32>
 8004904:	690b      	ldr	r3, [r1, #16]
 8004906:	b963      	cbnz	r3, 8004922 <_svfiprintf_r+0x32>
 8004908:	2140      	movs	r1, #64	; 0x40
 800490a:	f7ff ff0b 	bl	8004724 <_malloc_r>
 800490e:	6028      	str	r0, [r5, #0]
 8004910:	6128      	str	r0, [r5, #16]
 8004912:	b920      	cbnz	r0, 800491e <_svfiprintf_r+0x2e>
 8004914:	230c      	movs	r3, #12
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	f04f 30ff 	mov.w	r0, #4294967295
 800491c:	e0d0      	b.n	8004ac0 <_svfiprintf_r+0x1d0>
 800491e:	2340      	movs	r3, #64	; 0x40
 8004920:	616b      	str	r3, [r5, #20]
 8004922:	2300      	movs	r3, #0
 8004924:	9309      	str	r3, [sp, #36]	; 0x24
 8004926:	2320      	movs	r3, #32
 8004928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800492c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004930:	2330      	movs	r3, #48	; 0x30
 8004932:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ad8 <_svfiprintf_r+0x1e8>
 8004936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800493a:	f04f 0901 	mov.w	r9, #1
 800493e:	4623      	mov	r3, r4
 8004940:	469a      	mov	sl, r3
 8004942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004946:	b10a      	cbz	r2, 800494c <_svfiprintf_r+0x5c>
 8004948:	2a25      	cmp	r2, #37	; 0x25
 800494a:	d1f9      	bne.n	8004940 <_svfiprintf_r+0x50>
 800494c:	ebba 0b04 	subs.w	fp, sl, r4
 8004950:	d00b      	beq.n	800496a <_svfiprintf_r+0x7a>
 8004952:	465b      	mov	r3, fp
 8004954:	4622      	mov	r2, r4
 8004956:	4629      	mov	r1, r5
 8004958:	4638      	mov	r0, r7
 800495a:	f7ff ff6f 	bl	800483c <__ssputs_r>
 800495e:	3001      	adds	r0, #1
 8004960:	f000 80a9 	beq.w	8004ab6 <_svfiprintf_r+0x1c6>
 8004964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004966:	445a      	add	r2, fp
 8004968:	9209      	str	r2, [sp, #36]	; 0x24
 800496a:	f89a 3000 	ldrb.w	r3, [sl]
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80a1 	beq.w	8004ab6 <_svfiprintf_r+0x1c6>
 8004974:	2300      	movs	r3, #0
 8004976:	f04f 32ff 	mov.w	r2, #4294967295
 800497a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800497e:	f10a 0a01 	add.w	sl, sl, #1
 8004982:	9304      	str	r3, [sp, #16]
 8004984:	9307      	str	r3, [sp, #28]
 8004986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800498a:	931a      	str	r3, [sp, #104]	; 0x68
 800498c:	4654      	mov	r4, sl
 800498e:	2205      	movs	r2, #5
 8004990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004994:	4850      	ldr	r0, [pc, #320]	; (8004ad8 <_svfiprintf_r+0x1e8>)
 8004996:	f7fb fc1b 	bl	80001d0 <memchr>
 800499a:	9a04      	ldr	r2, [sp, #16]
 800499c:	b9d8      	cbnz	r0, 80049d6 <_svfiprintf_r+0xe6>
 800499e:	06d0      	lsls	r0, r2, #27
 80049a0:	bf44      	itt	mi
 80049a2:	2320      	movmi	r3, #32
 80049a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049a8:	0711      	lsls	r1, r2, #28
 80049aa:	bf44      	itt	mi
 80049ac:	232b      	movmi	r3, #43	; 0x2b
 80049ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049b2:	f89a 3000 	ldrb.w	r3, [sl]
 80049b6:	2b2a      	cmp	r3, #42	; 0x2a
 80049b8:	d015      	beq.n	80049e6 <_svfiprintf_r+0xf6>
 80049ba:	9a07      	ldr	r2, [sp, #28]
 80049bc:	4654      	mov	r4, sl
 80049be:	2000      	movs	r0, #0
 80049c0:	f04f 0c0a 	mov.w	ip, #10
 80049c4:	4621      	mov	r1, r4
 80049c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049ca:	3b30      	subs	r3, #48	; 0x30
 80049cc:	2b09      	cmp	r3, #9
 80049ce:	d94d      	bls.n	8004a6c <_svfiprintf_r+0x17c>
 80049d0:	b1b0      	cbz	r0, 8004a00 <_svfiprintf_r+0x110>
 80049d2:	9207      	str	r2, [sp, #28]
 80049d4:	e014      	b.n	8004a00 <_svfiprintf_r+0x110>
 80049d6:	eba0 0308 	sub.w	r3, r0, r8
 80049da:	fa09 f303 	lsl.w	r3, r9, r3
 80049de:	4313      	orrs	r3, r2
 80049e0:	9304      	str	r3, [sp, #16]
 80049e2:	46a2      	mov	sl, r4
 80049e4:	e7d2      	b.n	800498c <_svfiprintf_r+0x9c>
 80049e6:	9b03      	ldr	r3, [sp, #12]
 80049e8:	1d19      	adds	r1, r3, #4
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	9103      	str	r1, [sp, #12]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	bfbb      	ittet	lt
 80049f2:	425b      	neglt	r3, r3
 80049f4:	f042 0202 	orrlt.w	r2, r2, #2
 80049f8:	9307      	strge	r3, [sp, #28]
 80049fa:	9307      	strlt	r3, [sp, #28]
 80049fc:	bfb8      	it	lt
 80049fe:	9204      	strlt	r2, [sp, #16]
 8004a00:	7823      	ldrb	r3, [r4, #0]
 8004a02:	2b2e      	cmp	r3, #46	; 0x2e
 8004a04:	d10c      	bne.n	8004a20 <_svfiprintf_r+0x130>
 8004a06:	7863      	ldrb	r3, [r4, #1]
 8004a08:	2b2a      	cmp	r3, #42	; 0x2a
 8004a0a:	d134      	bne.n	8004a76 <_svfiprintf_r+0x186>
 8004a0c:	9b03      	ldr	r3, [sp, #12]
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	9203      	str	r2, [sp, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bfb8      	it	lt
 8004a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a1c:	3402      	adds	r4, #2
 8004a1e:	9305      	str	r3, [sp, #20]
 8004a20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004ae8 <_svfiprintf_r+0x1f8>
 8004a24:	7821      	ldrb	r1, [r4, #0]
 8004a26:	2203      	movs	r2, #3
 8004a28:	4650      	mov	r0, sl
 8004a2a:	f7fb fbd1 	bl	80001d0 <memchr>
 8004a2e:	b138      	cbz	r0, 8004a40 <_svfiprintf_r+0x150>
 8004a30:	9b04      	ldr	r3, [sp, #16]
 8004a32:	eba0 000a 	sub.w	r0, r0, sl
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	4082      	lsls	r2, r0
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	3401      	adds	r4, #1
 8004a3e:	9304      	str	r3, [sp, #16]
 8004a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a44:	4825      	ldr	r0, [pc, #148]	; (8004adc <_svfiprintf_r+0x1ec>)
 8004a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a4a:	2206      	movs	r2, #6
 8004a4c:	f7fb fbc0 	bl	80001d0 <memchr>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d038      	beq.n	8004ac6 <_svfiprintf_r+0x1d6>
 8004a54:	4b22      	ldr	r3, [pc, #136]	; (8004ae0 <_svfiprintf_r+0x1f0>)
 8004a56:	bb1b      	cbnz	r3, 8004aa0 <_svfiprintf_r+0x1b0>
 8004a58:	9b03      	ldr	r3, [sp, #12]
 8004a5a:	3307      	adds	r3, #7
 8004a5c:	f023 0307 	bic.w	r3, r3, #7
 8004a60:	3308      	adds	r3, #8
 8004a62:	9303      	str	r3, [sp, #12]
 8004a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a66:	4433      	add	r3, r6
 8004a68:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6a:	e768      	b.n	800493e <_svfiprintf_r+0x4e>
 8004a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a70:	460c      	mov	r4, r1
 8004a72:	2001      	movs	r0, #1
 8004a74:	e7a6      	b.n	80049c4 <_svfiprintf_r+0xd4>
 8004a76:	2300      	movs	r3, #0
 8004a78:	3401      	adds	r4, #1
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	f04f 0c0a 	mov.w	ip, #10
 8004a82:	4620      	mov	r0, r4
 8004a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a88:	3a30      	subs	r2, #48	; 0x30
 8004a8a:	2a09      	cmp	r2, #9
 8004a8c:	d903      	bls.n	8004a96 <_svfiprintf_r+0x1a6>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0c6      	beq.n	8004a20 <_svfiprintf_r+0x130>
 8004a92:	9105      	str	r1, [sp, #20]
 8004a94:	e7c4      	b.n	8004a20 <_svfiprintf_r+0x130>
 8004a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e7f0      	b.n	8004a82 <_svfiprintf_r+0x192>
 8004aa0:	ab03      	add	r3, sp, #12
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	462a      	mov	r2, r5
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <_svfiprintf_r+0x1f4>)
 8004aa8:	a904      	add	r1, sp, #16
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f3af 8000 	nop.w
 8004ab0:	1c42      	adds	r2, r0, #1
 8004ab2:	4606      	mov	r6, r0
 8004ab4:	d1d6      	bne.n	8004a64 <_svfiprintf_r+0x174>
 8004ab6:	89ab      	ldrh	r3, [r5, #12]
 8004ab8:	065b      	lsls	r3, r3, #25
 8004aba:	f53f af2d 	bmi.w	8004918 <_svfiprintf_r+0x28>
 8004abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ac0:	b01d      	add	sp, #116	; 0x74
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac6:	ab03      	add	r3, sp, #12
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	462a      	mov	r2, r5
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <_svfiprintf_r+0x1f4>)
 8004ace:	a904      	add	r1, sp, #16
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f000 f879 	bl	8004bc8 <_printf_i>
 8004ad6:	e7eb      	b.n	8004ab0 <_svfiprintf_r+0x1c0>
 8004ad8:	08004f40 	.word	0x08004f40
 8004adc:	08004f4a 	.word	0x08004f4a
 8004ae0:	00000000 	.word	0x00000000
 8004ae4:	0800483d 	.word	0x0800483d
 8004ae8:	08004f46 	.word	0x08004f46

08004aec <_printf_common>:
 8004aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af0:	4616      	mov	r6, r2
 8004af2:	4699      	mov	r9, r3
 8004af4:	688a      	ldr	r2, [r1, #8]
 8004af6:	690b      	ldr	r3, [r1, #16]
 8004af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bfb8      	it	lt
 8004b00:	4613      	movlt	r3, r2
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b08:	4607      	mov	r7, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	b10a      	cbz	r2, 8004b12 <_printf_common+0x26>
 8004b0e:	3301      	adds	r3, #1
 8004b10:	6033      	str	r3, [r6, #0]
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	0699      	lsls	r1, r3, #26
 8004b16:	bf42      	ittt	mi
 8004b18:	6833      	ldrmi	r3, [r6, #0]
 8004b1a:	3302      	addmi	r3, #2
 8004b1c:	6033      	strmi	r3, [r6, #0]
 8004b1e:	6825      	ldr	r5, [r4, #0]
 8004b20:	f015 0506 	ands.w	r5, r5, #6
 8004b24:	d106      	bne.n	8004b34 <_printf_common+0x48>
 8004b26:	f104 0a19 	add.w	sl, r4, #25
 8004b2a:	68e3      	ldr	r3, [r4, #12]
 8004b2c:	6832      	ldr	r2, [r6, #0]
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	42ab      	cmp	r3, r5
 8004b32:	dc26      	bgt.n	8004b82 <_printf_common+0x96>
 8004b34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b38:	1e13      	subs	r3, r2, #0
 8004b3a:	6822      	ldr	r2, [r4, #0]
 8004b3c:	bf18      	it	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	0692      	lsls	r2, r2, #26
 8004b42:	d42b      	bmi.n	8004b9c <_printf_common+0xb0>
 8004b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b48:	4649      	mov	r1, r9
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c0      	blx	r8
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d01e      	beq.n	8004b90 <_printf_common+0xa4>
 8004b52:	6823      	ldr	r3, [r4, #0]
 8004b54:	6922      	ldr	r2, [r4, #16]
 8004b56:	f003 0306 	and.w	r3, r3, #6
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	bf02      	ittt	eq
 8004b5e:	68e5      	ldreq	r5, [r4, #12]
 8004b60:	6833      	ldreq	r3, [r6, #0]
 8004b62:	1aed      	subeq	r5, r5, r3
 8004b64:	68a3      	ldr	r3, [r4, #8]
 8004b66:	bf0c      	ite	eq
 8004b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b6c:	2500      	movne	r5, #0
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	bfc4      	itt	gt
 8004b72:	1a9b      	subgt	r3, r3, r2
 8004b74:	18ed      	addgt	r5, r5, r3
 8004b76:	2600      	movs	r6, #0
 8004b78:	341a      	adds	r4, #26
 8004b7a:	42b5      	cmp	r5, r6
 8004b7c:	d11a      	bne.n	8004bb4 <_printf_common+0xc8>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	e008      	b.n	8004b94 <_printf_common+0xa8>
 8004b82:	2301      	movs	r3, #1
 8004b84:	4652      	mov	r2, sl
 8004b86:	4649      	mov	r1, r9
 8004b88:	4638      	mov	r0, r7
 8004b8a:	47c0      	blx	r8
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	d103      	bne.n	8004b98 <_printf_common+0xac>
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b98:	3501      	adds	r5, #1
 8004b9a:	e7c6      	b.n	8004b2a <_printf_common+0x3e>
 8004b9c:	18e1      	adds	r1, r4, r3
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	2030      	movs	r0, #48	; 0x30
 8004ba2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ba6:	4422      	add	r2, r4
 8004ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	e7c7      	b.n	8004b44 <_printf_common+0x58>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4622      	mov	r2, r4
 8004bb8:	4649      	mov	r1, r9
 8004bba:	4638      	mov	r0, r7
 8004bbc:	47c0      	blx	r8
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d0e6      	beq.n	8004b90 <_printf_common+0xa4>
 8004bc2:	3601      	adds	r6, #1
 8004bc4:	e7d9      	b.n	8004b7a <_printf_common+0x8e>
	...

08004bc8 <_printf_i>:
 8004bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bcc:	7e0f      	ldrb	r7, [r1, #24]
 8004bce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bd0:	2f78      	cmp	r7, #120	; 0x78
 8004bd2:	4691      	mov	r9, r2
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	469a      	mov	sl, r3
 8004bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bde:	d807      	bhi.n	8004bf0 <_printf_i+0x28>
 8004be0:	2f62      	cmp	r7, #98	; 0x62
 8004be2:	d80a      	bhi.n	8004bfa <_printf_i+0x32>
 8004be4:	2f00      	cmp	r7, #0
 8004be6:	f000 80d4 	beq.w	8004d92 <_printf_i+0x1ca>
 8004bea:	2f58      	cmp	r7, #88	; 0x58
 8004bec:	f000 80c0 	beq.w	8004d70 <_printf_i+0x1a8>
 8004bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bf8:	e03a      	b.n	8004c70 <_printf_i+0xa8>
 8004bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bfe:	2b15      	cmp	r3, #21
 8004c00:	d8f6      	bhi.n	8004bf0 <_printf_i+0x28>
 8004c02:	a101      	add	r1, pc, #4	; (adr r1, 8004c08 <_printf_i+0x40>)
 8004c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c75 	.word	0x08004c75
 8004c10:	08004bf1 	.word	0x08004bf1
 8004c14:	08004bf1 	.word	0x08004bf1
 8004c18:	08004bf1 	.word	0x08004bf1
 8004c1c:	08004bf1 	.word	0x08004bf1
 8004c20:	08004c75 	.word	0x08004c75
 8004c24:	08004bf1 	.word	0x08004bf1
 8004c28:	08004bf1 	.word	0x08004bf1
 8004c2c:	08004bf1 	.word	0x08004bf1
 8004c30:	08004bf1 	.word	0x08004bf1
 8004c34:	08004d79 	.word	0x08004d79
 8004c38:	08004ca1 	.word	0x08004ca1
 8004c3c:	08004d33 	.word	0x08004d33
 8004c40:	08004bf1 	.word	0x08004bf1
 8004c44:	08004bf1 	.word	0x08004bf1
 8004c48:	08004d9b 	.word	0x08004d9b
 8004c4c:	08004bf1 	.word	0x08004bf1
 8004c50:	08004ca1 	.word	0x08004ca1
 8004c54:	08004bf1 	.word	0x08004bf1
 8004c58:	08004bf1 	.word	0x08004bf1
 8004c5c:	08004d3b 	.word	0x08004d3b
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	602a      	str	r2, [r5, #0]
 8004c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c70:	2301      	movs	r3, #1
 8004c72:	e09f      	b.n	8004db4 <_printf_i+0x1ec>
 8004c74:	6820      	ldr	r0, [r4, #0]
 8004c76:	682b      	ldr	r3, [r5, #0]
 8004c78:	0607      	lsls	r7, r0, #24
 8004c7a:	f103 0104 	add.w	r1, r3, #4
 8004c7e:	6029      	str	r1, [r5, #0]
 8004c80:	d501      	bpl.n	8004c86 <_printf_i+0xbe>
 8004c82:	681e      	ldr	r6, [r3, #0]
 8004c84:	e003      	b.n	8004c8e <_printf_i+0xc6>
 8004c86:	0646      	lsls	r6, r0, #25
 8004c88:	d5fb      	bpl.n	8004c82 <_printf_i+0xba>
 8004c8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	da03      	bge.n	8004c9a <_printf_i+0xd2>
 8004c92:	232d      	movs	r3, #45	; 0x2d
 8004c94:	4276      	negs	r6, r6
 8004c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c9a:	485a      	ldr	r0, [pc, #360]	; (8004e04 <_printf_i+0x23c>)
 8004c9c:	230a      	movs	r3, #10
 8004c9e:	e012      	b.n	8004cc6 <_printf_i+0xfe>
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	6820      	ldr	r0, [r4, #0]
 8004ca4:	1d19      	adds	r1, r3, #4
 8004ca6:	6029      	str	r1, [r5, #0]
 8004ca8:	0605      	lsls	r5, r0, #24
 8004caa:	d501      	bpl.n	8004cb0 <_printf_i+0xe8>
 8004cac:	681e      	ldr	r6, [r3, #0]
 8004cae:	e002      	b.n	8004cb6 <_printf_i+0xee>
 8004cb0:	0641      	lsls	r1, r0, #25
 8004cb2:	d5fb      	bpl.n	8004cac <_printf_i+0xe4>
 8004cb4:	881e      	ldrh	r6, [r3, #0]
 8004cb6:	4853      	ldr	r0, [pc, #332]	; (8004e04 <_printf_i+0x23c>)
 8004cb8:	2f6f      	cmp	r7, #111	; 0x6f
 8004cba:	bf0c      	ite	eq
 8004cbc:	2308      	moveq	r3, #8
 8004cbe:	230a      	movne	r3, #10
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cc6:	6865      	ldr	r5, [r4, #4]
 8004cc8:	60a5      	str	r5, [r4, #8]
 8004cca:	2d00      	cmp	r5, #0
 8004ccc:	bfa2      	ittt	ge
 8004cce:	6821      	ldrge	r1, [r4, #0]
 8004cd0:	f021 0104 	bicge.w	r1, r1, #4
 8004cd4:	6021      	strge	r1, [r4, #0]
 8004cd6:	b90e      	cbnz	r6, 8004cdc <_printf_i+0x114>
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	d04b      	beq.n	8004d74 <_printf_i+0x1ac>
 8004cdc:	4615      	mov	r5, r2
 8004cde:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ce2:	fb03 6711 	mls	r7, r3, r1, r6
 8004ce6:	5dc7      	ldrb	r7, [r0, r7]
 8004ce8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cec:	4637      	mov	r7, r6
 8004cee:	42bb      	cmp	r3, r7
 8004cf0:	460e      	mov	r6, r1
 8004cf2:	d9f4      	bls.n	8004cde <_printf_i+0x116>
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d10b      	bne.n	8004d10 <_printf_i+0x148>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	07de      	lsls	r6, r3, #31
 8004cfc:	d508      	bpl.n	8004d10 <_printf_i+0x148>
 8004cfe:	6923      	ldr	r3, [r4, #16]
 8004d00:	6861      	ldr	r1, [r4, #4]
 8004d02:	4299      	cmp	r1, r3
 8004d04:	bfde      	ittt	le
 8004d06:	2330      	movle	r3, #48	; 0x30
 8004d08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d10:	1b52      	subs	r2, r2, r5
 8004d12:	6122      	str	r2, [r4, #16]
 8004d14:	f8cd a000 	str.w	sl, [sp]
 8004d18:	464b      	mov	r3, r9
 8004d1a:	aa03      	add	r2, sp, #12
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	4640      	mov	r0, r8
 8004d20:	f7ff fee4 	bl	8004aec <_printf_common>
 8004d24:	3001      	adds	r0, #1
 8004d26:	d14a      	bne.n	8004dbe <_printf_i+0x1f6>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	b004      	add	sp, #16
 8004d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	f043 0320 	orr.w	r3, r3, #32
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	4833      	ldr	r0, [pc, #204]	; (8004e08 <_printf_i+0x240>)
 8004d3c:	2778      	movs	r7, #120	; 0x78
 8004d3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	6829      	ldr	r1, [r5, #0]
 8004d46:	061f      	lsls	r7, r3, #24
 8004d48:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d4c:	d402      	bmi.n	8004d54 <_printf_i+0x18c>
 8004d4e:	065f      	lsls	r7, r3, #25
 8004d50:	bf48      	it	mi
 8004d52:	b2b6      	uxthmi	r6, r6
 8004d54:	07df      	lsls	r7, r3, #31
 8004d56:	bf48      	it	mi
 8004d58:	f043 0320 	orrmi.w	r3, r3, #32
 8004d5c:	6029      	str	r1, [r5, #0]
 8004d5e:	bf48      	it	mi
 8004d60:	6023      	strmi	r3, [r4, #0]
 8004d62:	b91e      	cbnz	r6, 8004d6c <_printf_i+0x1a4>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	f023 0320 	bic.w	r3, r3, #32
 8004d6a:	6023      	str	r3, [r4, #0]
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	e7a7      	b.n	8004cc0 <_printf_i+0xf8>
 8004d70:	4824      	ldr	r0, [pc, #144]	; (8004e04 <_printf_i+0x23c>)
 8004d72:	e7e4      	b.n	8004d3e <_printf_i+0x176>
 8004d74:	4615      	mov	r5, r2
 8004d76:	e7bd      	b.n	8004cf4 <_printf_i+0x12c>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	6826      	ldr	r6, [r4, #0]
 8004d7c:	6961      	ldr	r1, [r4, #20]
 8004d7e:	1d18      	adds	r0, r3, #4
 8004d80:	6028      	str	r0, [r5, #0]
 8004d82:	0635      	lsls	r5, r6, #24
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	d501      	bpl.n	8004d8c <_printf_i+0x1c4>
 8004d88:	6019      	str	r1, [r3, #0]
 8004d8a:	e002      	b.n	8004d92 <_printf_i+0x1ca>
 8004d8c:	0670      	lsls	r0, r6, #25
 8004d8e:	d5fb      	bpl.n	8004d88 <_printf_i+0x1c0>
 8004d90:	8019      	strh	r1, [r3, #0]
 8004d92:	2300      	movs	r3, #0
 8004d94:	6123      	str	r3, [r4, #16]
 8004d96:	4615      	mov	r5, r2
 8004d98:	e7bc      	b.n	8004d14 <_printf_i+0x14c>
 8004d9a:	682b      	ldr	r3, [r5, #0]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	602a      	str	r2, [r5, #0]
 8004da0:	681d      	ldr	r5, [r3, #0]
 8004da2:	6862      	ldr	r2, [r4, #4]
 8004da4:	2100      	movs	r1, #0
 8004da6:	4628      	mov	r0, r5
 8004da8:	f7fb fa12 	bl	80001d0 <memchr>
 8004dac:	b108      	cbz	r0, 8004db2 <_printf_i+0x1ea>
 8004dae:	1b40      	subs	r0, r0, r5
 8004db0:	6060      	str	r0, [r4, #4]
 8004db2:	6863      	ldr	r3, [r4, #4]
 8004db4:	6123      	str	r3, [r4, #16]
 8004db6:	2300      	movs	r3, #0
 8004db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dbc:	e7aa      	b.n	8004d14 <_printf_i+0x14c>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	462a      	mov	r2, r5
 8004dc2:	4649      	mov	r1, r9
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	47d0      	blx	sl
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d0ad      	beq.n	8004d28 <_printf_i+0x160>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	079b      	lsls	r3, r3, #30
 8004dd0:	d413      	bmi.n	8004dfa <_printf_i+0x232>
 8004dd2:	68e0      	ldr	r0, [r4, #12]
 8004dd4:	9b03      	ldr	r3, [sp, #12]
 8004dd6:	4298      	cmp	r0, r3
 8004dd8:	bfb8      	it	lt
 8004dda:	4618      	movlt	r0, r3
 8004ddc:	e7a6      	b.n	8004d2c <_printf_i+0x164>
 8004dde:	2301      	movs	r3, #1
 8004de0:	4632      	mov	r2, r6
 8004de2:	4649      	mov	r1, r9
 8004de4:	4640      	mov	r0, r8
 8004de6:	47d0      	blx	sl
 8004de8:	3001      	adds	r0, #1
 8004dea:	d09d      	beq.n	8004d28 <_printf_i+0x160>
 8004dec:	3501      	adds	r5, #1
 8004dee:	68e3      	ldr	r3, [r4, #12]
 8004df0:	9903      	ldr	r1, [sp, #12]
 8004df2:	1a5b      	subs	r3, r3, r1
 8004df4:	42ab      	cmp	r3, r5
 8004df6:	dcf2      	bgt.n	8004dde <_printf_i+0x216>
 8004df8:	e7eb      	b.n	8004dd2 <_printf_i+0x20a>
 8004dfa:	2500      	movs	r5, #0
 8004dfc:	f104 0619 	add.w	r6, r4, #25
 8004e00:	e7f5      	b.n	8004dee <_printf_i+0x226>
 8004e02:	bf00      	nop
 8004e04:	08004f51 	.word	0x08004f51
 8004e08:	08004f62 	.word	0x08004f62

08004e0c <memmove>:
 8004e0c:	4288      	cmp	r0, r1
 8004e0e:	b510      	push	{r4, lr}
 8004e10:	eb01 0402 	add.w	r4, r1, r2
 8004e14:	d902      	bls.n	8004e1c <memmove+0x10>
 8004e16:	4284      	cmp	r4, r0
 8004e18:	4623      	mov	r3, r4
 8004e1a:	d807      	bhi.n	8004e2c <memmove+0x20>
 8004e1c:	1e43      	subs	r3, r0, #1
 8004e1e:	42a1      	cmp	r1, r4
 8004e20:	d008      	beq.n	8004e34 <memmove+0x28>
 8004e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e2a:	e7f8      	b.n	8004e1e <memmove+0x12>
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4601      	mov	r1, r0
 8004e30:	428a      	cmp	r2, r1
 8004e32:	d100      	bne.n	8004e36 <memmove+0x2a>
 8004e34:	bd10      	pop	{r4, pc}
 8004e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e3e:	e7f7      	b.n	8004e30 <memmove+0x24>

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fb ffee 	bl	8000e2c <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	2000064c 	.word	0x2000064c

08004e60 <memcpy>:
 8004e60:	440a      	add	r2, r1
 8004e62:	4291      	cmp	r1, r2
 8004e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e68:	d100      	bne.n	8004e6c <memcpy+0xc>
 8004e6a:	4770      	bx	lr
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e76:	4291      	cmp	r1, r2
 8004e78:	d1f9      	bne.n	8004e6e <memcpy+0xe>
 8004e7a:	bd10      	pop	{r4, pc}

08004e7c <_realloc_r>:
 8004e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e80:	4680      	mov	r8, r0
 8004e82:	4614      	mov	r4, r2
 8004e84:	460e      	mov	r6, r1
 8004e86:	b921      	cbnz	r1, 8004e92 <_realloc_r+0x16>
 8004e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	f7ff bc49 	b.w	8004724 <_malloc_r>
 8004e92:	b92a      	cbnz	r2, 8004ea0 <_realloc_r+0x24>
 8004e94:	f7ff fbda 	bl	800464c <_free_r>
 8004e98:	4625      	mov	r5, r4
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea0:	f000 f81b 	bl	8004eda <_malloc_usable_size_r>
 8004ea4:	4284      	cmp	r4, r0
 8004ea6:	4607      	mov	r7, r0
 8004ea8:	d802      	bhi.n	8004eb0 <_realloc_r+0x34>
 8004eaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004eae:	d812      	bhi.n	8004ed6 <_realloc_r+0x5a>
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f7ff fc36 	bl	8004724 <_malloc_r>
 8004eb8:	4605      	mov	r5, r0
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d0ed      	beq.n	8004e9a <_realloc_r+0x1e>
 8004ebe:	42bc      	cmp	r4, r7
 8004ec0:	4622      	mov	r2, r4
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	bf28      	it	cs
 8004ec6:	463a      	movcs	r2, r7
 8004ec8:	f7ff ffca 	bl	8004e60 <memcpy>
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4640      	mov	r0, r8
 8004ed0:	f7ff fbbc 	bl	800464c <_free_r>
 8004ed4:	e7e1      	b.n	8004e9a <_realloc_r+0x1e>
 8004ed6:	4635      	mov	r5, r6
 8004ed8:	e7df      	b.n	8004e9a <_realloc_r+0x1e>

08004eda <_malloc_usable_size_r>:
 8004eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ede:	1f18      	subs	r0, r3, #4
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bfbc      	itt	lt
 8004ee4:	580b      	ldrlt	r3, [r1, r0]
 8004ee6:	18c0      	addlt	r0, r0, r3
 8004ee8:	4770      	bx	lr
	...

08004eec <_init>:
 8004eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eee:	bf00      	nop
 8004ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef2:	bc08      	pop	{r3}
 8004ef4:	469e      	mov	lr, r3
 8004ef6:	4770      	bx	lr

08004ef8 <_fini>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	bf00      	nop
 8004efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004efe:	bc08      	pop	{r3}
 8004f00:	469e      	mov	lr, r3
 8004f02:	4770      	bx	lr
