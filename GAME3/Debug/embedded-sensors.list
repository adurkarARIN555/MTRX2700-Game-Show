
embedded-sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000943c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  080095d0  080095d0  000195d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009994  08009994  000202f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009994  08009994  000202f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009994  08009994  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009994  08009994  00019994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800999c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f0  2**0
                  CONTENTS
 10 .bss          000005e0  200002f0  200002f0  000202f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008d0  200008d0  000202f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011f33  00000000  00000000  00020363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000339e  00000000  00000000  00032296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001070  00000000  00000000  00035638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c71  00000000  00000000  000366a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da31  00000000  00000000  00037319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000159d5  00000000  00000000  00074d4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb06a  00000000  00000000  0008a71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005354  00000000  00000000  0017578c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0017aae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095b4 	.word	0x080095b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	080095b4 	.word	0x080095b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <USART1_IRQHandler>:
float velocity = 0;
float angle;
float steering_output;

void USART1_IRQHandler()
{
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b094      	sub	sp, #80	; 0x50
 8000bac:	af00      	add	r7, sp, #0
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <USART1_IRQHandler+0x90>)
 8000bb0:	f107 0408 	add.w	r4, r7, #8
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	6828      	ldr	r0, [r5, #0]
 8000bb8:	6869      	ldr	r1, [r5, #4]
 8000bba:	68aa      	ldr	r2, [r5, #8]
 8000bbc:	68eb      	ldr	r3, [r5, #12]
 8000bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc0:	6928      	ldr	r0, [r5, #16]
 8000bc2:	6020      	str	r0, [r4, #0]
 8000bc4:	7d2b      	ldrb	r3, [r5, #20]
 8000bc6:	7123      	strb	r3, [r4, #4]
 8000bc8:	f107 031d 	add.w	r3, r7, #29
 8000bcc:	222b      	movs	r2, #43	; 0x2b
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f006 fbf6 	bl	80073c2 <memset>
	sprintf(string_to_send, "%0.6f,%f\r\n", 0, 0);
 8000bd6:	f107 0008 	add.w	r0, r7, #8
 8000bda:	2300      	movs	r3, #0
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4917      	ldr	r1, [pc, #92]	; (8000c3c <USART1_IRQHandler+0x94>)
 8000be0:	f006 fb8c 	bl	80072fc <siprintf>
    SerialOutputString(string_to_send, &USART1_PORT);
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4915      	ldr	r1, [pc, #84]	; (8000c40 <USART1_IRQHandler+0x98>)
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fb7f 	bl	80012ee <SerialOutputString>
	if((USART1->ISR & USART_ISR_RXNE)){
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <USART1_IRQHandler+0x9c>)
 8000bf2:	69db      	ldr	r3, [r3, #28]
 8000bf4:	f003 0320 	and.w	r3, r3, #32
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d019      	beq.n	8000c30 <USART1_IRQHandler+0x88>
		velocity = 0;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <USART1_IRQHandler+0xa0>)
 8000bfe:	f04f 0200 	mov.w	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
		uint8_t dummy;
		SerialReceiveChar(&USART1_PORT, &dummy);
 8000c04:	1dfb      	adds	r3, r7, #7
 8000c06:	4619      	mov	r1, r3
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <USART1_IRQHandler+0x98>)
 8000c0a:	f000 fb94 	bl	8001336 <SerialReceiveChar>
		if(dummy == '2'){
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	2b32      	cmp	r3, #50	; 0x32
 8000c12:	d105      	bne.n	8000c20 <USART1_IRQHandler+0x78>
			uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000c14:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <USART1_IRQHandler+0xa4>)
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
			*led_register = 0b00100010;
 8000c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c1a:	2222      	movs	r2, #34	; 0x22
 8000c1c:	701a      	strb	r2, [r3, #0]
		else if(dummy == '3'){
			uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
			*led_register = 0b10001000;
		}
	}
}
 8000c1e:	e007      	b.n	8000c30 <USART1_IRQHandler+0x88>
		else if(dummy == '3'){
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b33      	cmp	r3, #51	; 0x33
 8000c24:	d104      	bne.n	8000c30 <USART1_IRQHandler+0x88>
			uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <USART1_IRQHandler+0xa4>)
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
			*led_register = 0b10001000;
 8000c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c2c:	2288      	movs	r2, #136	; 0x88
 8000c2e:	701a      	strb	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	3750      	adds	r7, #80	; 0x50
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}
 8000c38:	080095dc 	.word	0x080095dc
 8000c3c:	080095d0 	.word	0x080095d0
 8000c40:	20000000 	.word	0x20000000
 8000c44:	40013800 	.word	0x40013800
 8000c48:	200006b0 	.word	0x200006b0
 8000c4c:	48001015 	.word	0x48001015

08000c50 <enable_clocks>:

void enable_clocks() {
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <enable_clocks+0x28>)
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <enable_clocks+0x28>)
 8000c5a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000c5e:	6153      	str	r3, [r2, #20]

	// worked
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <enable_clocks+0x28>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <enable_clocks+0x28>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	61d3      	str	r3, [r2, #28]
	// worked
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <read_and_transmit>:

void read_and_transmit(){
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b098      	sub	sp, #96	; 0x60
 8000c84:	af02      	add	r7, sp, #8
  uint8_t string_to_send[64] = "This is a string !\r\n";
 8000c86:	4b4c      	ldr	r3, [pc, #304]	; (8000db8 <read_and_transmit+0x138>)
 8000c88:	f107 040c 	add.w	r4, r7, #12
 8000c8c:	461d      	mov	r5, r3
 8000c8e:	6828      	ldr	r0, [r5, #0]
 8000c90:	6869      	ldr	r1, [r5, #4]
 8000c92:	68aa      	ldr	r2, [r5, #8]
 8000c94:	68eb      	ldr	r3, [r5, #12]
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	6928      	ldr	r0, [r5, #16]
 8000c9a:	6020      	str	r0, [r4, #0]
 8000c9c:	7d2b      	ldrb	r3, [r5, #20]
 8000c9e:	7123      	strb	r3, [r4, #4]
 8000ca0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8000ca4:	222b      	movs	r2, #43	; 0x2b
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f006 fb8a 	bl	80073c2 <memset>

  float gyro_values[3];
  BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fbaf 	bl	8005414 <BSP_GYRO_GetXYZ>

  int *ptr;

  // Assign the desired address to the pointer
  ptr = (int *)(0x48000000 + 0x10);
 8000cb6:	4b41      	ldr	r3, [pc, #260]	; (8000dbc <read_and_transmit+0x13c>)
 8000cb8:	657b      	str	r3, [r7, #84]	; 0x54

  // Dereference the pointer to get the value at that address
  int value = *ptr;
 8000cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	653b      	str	r3, [r7, #80]	; 0x50

  if((value&0x01) && (velocity < 15)){
 8000cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d014      	beq.n	8000cf4 <read_and_transmit+0x74>
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <read_and_transmit+0x140>)
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	d50a      	bpl.n	8000cf4 <read_and_transmit+0x74>
	  velocity+=0.5;
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <read_and_transmit+0x140>)
 8000ce0:	edd3 7a00 	vldr	s15, [r3]
 8000ce4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000ce8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cec:	4b34      	ldr	r3, [pc, #208]	; (8000dc0 <read_and_transmit+0x140>)
 8000cee:	edc3 7a00 	vstr	s15, [r3]
 8000cf2:	e01b      	b.n	8000d2c <read_and_transmit+0xac>
  }
  else if(!(value&0x01) && (velocity > 0.01)){
 8000cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d116      	bne.n	8000d2c <read_and_transmit+0xac>
 8000cfe:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <read_and_transmit+0x140>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff fc20 	bl	8000548 <__aeabi_f2d>
 8000d08:	a329      	add	r3, pc, #164	; (adr r3, 8000db0 <read_and_transmit+0x130>)
 8000d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0e:	f7ff ff03 	bl	8000b18 <__aeabi_dcmpgt>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d009      	beq.n	8000d2c <read_and_transmit+0xac>
	  velocity -= 0.25;
 8000d18:	4b29      	ldr	r3, [pc, #164]	; (8000dc0 <read_and_transmit+0x140>)
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <read_and_transmit+0x140>)
 8000d28:	edc3 7a00 	vstr	s15, [r3]
  }

  float delta_angle = gyro_values[2]/20000;
 8000d2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000d30:	eddf 6a24 	vldr	s13, [pc, #144]	; 8000dc4 <read_and_transmit+0x144>
 8000d34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d38:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
  angle += delta_angle;
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <read_and_transmit+0x148>)
 8000d3e:	ed93 7a00 	vldr	s14, [r3]
 8000d42:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d4a:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <read_and_transmit+0x148>)
 8000d4c:	edc3 7a00 	vstr	s15, [r3]
  steering_output += angle / 10;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <read_and_transmit+0x148>)
 8000d52:	edd3 7a00 	vldr	s15, [r3]
 8000d56:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000d5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <read_and_transmit+0x14c>)
 8000d60:	edd3 7a00 	vldr	s15, [r3]
 8000d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <read_and_transmit+0x14c>)
 8000d6a:	edc3 7a00 	vstr	s15, [r3]

  sprintf(string_to_send, "%0.6f,%f\r\n", steering_output, velocity);
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <read_and_transmit+0x14c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fbe8 	bl	8000548 <__aeabi_f2d>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <read_and_transmit+0x140>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fbe1 	bl	8000548 <__aeabi_f2d>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	f107 000c 	add.w	r0, r7, #12
 8000d8e:	e9cd 2300 	strd	r2, r3, [sp]
 8000d92:	4622      	mov	r2, r4
 8000d94:	462b      	mov	r3, r5
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <read_and_transmit+0x150>)
 8000d98:	f006 fab0 	bl	80072fc <siprintf>
  SerialOutputString(string_to_send, &USART1_PORT);
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	490c      	ldr	r1, [pc, #48]	; (8000dd4 <read_and_transmit+0x154>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 faa3 	bl	80012ee <SerialOutputString>
}
 8000da8:	bf00      	nop
 8000daa:	3758      	adds	r7, #88	; 0x58
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bdb0      	pop	{r4, r5, r7, pc}
 8000db0:	47ae147b 	.word	0x47ae147b
 8000db4:	3f847ae1 	.word	0x3f847ae1
 8000db8:	080095dc 	.word	0x080095dc
 8000dbc:	48000010 	.word	0x48000010
 8000dc0:	200006b0 	.word	0x200006b0
 8000dc4:	469c4000 	.word	0x469c4000
 8000dc8:	200006b4 	.word	0x200006b4
 8000dcc:	200006b8 	.word	0x200006b8
 8000dd0:	080095d0 	.word	0x080095d0
 8000dd4:	20000000 	.word	0x20000000

08000dd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ddc:	f000 fe28 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de0:	f000 f822 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000de4:	f000 f922 	bl	800102c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000de8:	f000 f880 	bl	8000eec <MX_I2C1_Init>
  MX_SPI1_Init();
 8000dec:	f000 f8be 	bl	8000f6c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000df0:	f000 f8fa 	bl	8000fe8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000df4:	f004 fa58 	bl	80052a8 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 8000df8:	f004 f994 	bl	8005124 <BSP_ACCELERO_Init>


  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	4908      	ldr	r1, [pc, #32]	; (8000e20 <main+0x48>)
 8000e00:	2004      	movs	r0, #4
 8000e02:	f000 f9df 	bl	80011c4 <SerialInitialise>

  enable_clocks();
 8000e06:	f7ff ff23 	bl	8000c50 <enable_clocks>
  trigger_prescaler(1000);
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	f000 fdc8 	bl	80019a2 <trigger_prescaler>
  enable_interrupt_timer2();
 8000e12:	f000 fdaf 	bl	8001974 <enable_interrupt_timer2>

  interval_mode(125, &read_and_transmit);
 8000e16:	4903      	ldr	r1, [pc, #12]	; (8000e24 <main+0x4c>)
 8000e18:	207d      	movs	r0, #125	; 0x7d
 8000e1a:	f000 fd51 	bl	80018c0 <interval_mode>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <main+0x46>
 8000e20:	20000000 	.word	0x20000000
 8000e24:	08000c81 	.word	0x08000c81

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b09e      	sub	sp, #120	; 0x78
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e32:	2228      	movs	r2, #40	; 0x28
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f006 fac3 	bl	80073c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	223c      	movs	r2, #60	; 0x3c
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f006 fab5 	bl	80073c2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e76:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e7c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 f8d6 	bl	8003034 <HAL_RCC_OscConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000e8e:	f000 f94b 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e92:	230f      	movs	r3, #15
 8000e94:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e96:	2302      	movs	r3, #2
 8000e98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ea8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000eac:	2101      	movs	r1, #1
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 f8fe 	bl	80040b0 <HAL_RCC_ClockConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000eba:	f000 f935 	bl	8001128 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <SystemClock_Config+0xc0>)
 8000ec0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000ec6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fad4 	bl	800447c <HAL_RCCEx_PeriphCLKConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000eda:	f000 f925 	bl	8001128 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3778      	adds	r7, #120	; 0x78
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	00020020 	.word	0x00020020

08000eec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <MX_I2C1_Init+0x78>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <MX_I2C1_Init+0x7c>)
 8000efa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000efc:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f02:	4b17      	ldr	r3, [pc, #92]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f26:	480e      	ldr	r0, [pc, #56]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f28:	f001 f968 	bl	80021fc <HAL_I2C_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f32:	f000 f8f9 	bl	8001128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f3a:	f001 ff11 	bl	8002d60 <HAL_I2CEx_ConfigAnalogFilter>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f44:	f000 f8f0 	bl	8001128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_I2C1_Init+0x74>)
 8000f4c:	f001 ff53 	bl	8002df6 <HAL_I2CEx_ConfigDigitalFilter>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f56:	f000 f8e7 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000030c 	.word	0x2000030c
 8000f64:	40005400 	.word	0x40005400
 8000f68:	2000090e 	.word	0x2000090e

08000f6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_SPI1_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7e:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa2:	2208      	movs	r2, #8
 8000fa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fba:	2207      	movs	r2, #7
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_SPI1_Init+0x74>)
 8000fcc:	f003 fc06 	bl	80047dc <HAL_SPI_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f8a7 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000360 	.word	0x20000360
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8000fee:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <MX_USB_PCD_Init+0x40>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8000ff4:	2208      	movs	r2, #8
 8000ff6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8001000:	2202      	movs	r2, #2
 8001002:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USB_PCD_Init+0x3c>)
 8001012:	f001 ff3c 	bl	8002e8e <HAL_PCD_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800101c:	f000 f884 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200003c4 	.word	0x200003c4
 8001028:	40005c00 	.word	0x40005c00

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	4b37      	ldr	r3, [pc, #220]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a36      	ldr	r2, [pc, #216]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001048:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b34      	ldr	r3, [pc, #208]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <MX_GPIO_Init+0xf4>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a30      	ldr	r2, [pc, #192]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a2a      	ldr	r2, [pc, #168]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b25      	ldr	r3, [pc, #148]	; (8001120 <MX_GPIO_Init+0xf4>)
 800108c:	695b      	ldr	r3, [r3, #20]
 800108e:	4a24      	ldr	r2, [pc, #144]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6153      	str	r3, [r2, #20]
 8001096:	4b22      	ldr	r3, [pc, #136]	; (8001120 <MX_GPIO_Init+0xf4>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_GPIO_Init+0xf4>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <MX_GPIO_Init+0xf4>)
 80010a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ac:	6153      	str	r3, [r2, #20]
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_GPIO_Init+0xf4>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010ba:	2200      	movs	r2, #0
 80010bc:	f64f 7108 	movw	r1, #65288	; 0xff08
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_GPIO_Init+0xf8>)
 80010c2:	f001 f883 	bl	80021cc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80010c6:	2337      	movs	r3, #55	; 0x37
 80010c8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4812      	ldr	r0, [pc, #72]	; (8001124 <MX_GPIO_Init+0xf8>)
 80010dc:	f000 fe20 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80010e0:	f64f 7308 	movw	r3, #65288	; 0xff08
 80010e4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <MX_GPIO_Init+0xf8>)
 80010fa:	f000 fe11 	bl	8001d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010fe:	2301      	movs	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001114:	f000 fe04 	bl	8001d20 <HAL_GPIO_Init>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	48001000 	.word	0x48001000

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	e7fe      	b.n	8001130 <Error_Handler+0x8>
	...

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop

	__disable_irq();
	serial_port->completion_function = completion_function;
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <SerialInitialise+0xf4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <SerialInitialise+0xf4>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <SerialInitialise+0xf4>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <SerialInitialise+0xf4>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d106      	bne.n	8001208 <SerialInitialise+0x44>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	; (80012b8 <SerialInitialise+0xf4>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a2e      	ldr	r2, [pc, #184]	; (80012b8 <SerialInitialise+0xf4>)
 8001200:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001204:	6153      	str	r3, [r2, #20]
		break;
 8001206:	e000      	b.n	800120a <SerialInitialise+0x46>
	default:
		break;
 8001208:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001212:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800121c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	69d9      	ldr	r1, [r3, #28]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d821      	bhi.n	800128e <SerialInitialise+0xca>
 800124a:	a201      	add	r2, pc, #4	; (adr r2, 8001250 <SerialInitialise+0x8c>)
 800124c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001250:	08001265 	.word	0x08001265
 8001254:	0800126d 	.word	0x0800126d
 8001258:	08001275 	.word	0x08001275
 800125c:	0800127d 	.word	0x0800127d
 8001260:	08001285 	.word	0x08001285
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2246      	movs	r2, #70	; 0x46
 8001268:	801a      	strh	r2, [r3, #0]
		break;
 800126a:	e010      	b.n	800128e <SerialInitialise+0xca>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2246      	movs	r2, #70	; 0x46
 8001270:	801a      	strh	r2, [r3, #0]
		break;
 8001272:	e00c      	b.n	800128e <SerialInitialise+0xca>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2246      	movs	r2, #70	; 0x46
 8001278:	801a      	strh	r2, [r3, #0]
		break;
 800127a:	e008      	b.n	800128e <SerialInitialise+0xca>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2246      	movs	r2, #70	; 0x46
 8001280:	801a      	strh	r2, [r3, #0]
		break;
 8001282:	e004      	b.n	800128e <SerialInitialise+0xca>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800128a:	801a      	strh	r2, [r3, #0]
		break;
 800128c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 800129c:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART1_IRQn, 1);  // Set Priority
 800129e:	2101      	movs	r1, #1
 80012a0:	2025      	movs	r0, #37	; 0x25
 80012a2:	f7ff ff65 	bl	8001170 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80012a6:	2025      	movs	r0, #37	; 0x25
 80012a8:	f7ff ff44 	bl	8001134 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80012ac:	b662      	cpsie	i
}
 80012ae:	bf00      	nop

	__enable_irq();
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40021000 	.word	0x40021000

080012bc <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 80012c8:	bf00      	nop
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d0f8      	beq.n	80012ca <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	b292      	uxth	r2, r2
 80012e0:	801a      	strh	r2, [r3, #0]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80012fc:	e00b      	b.n	8001316 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	6839      	ldr	r1, [r7, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ffd9 	bl	80012bc <SerialOutputChar>
		counter++;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3301      	adds	r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
		pt++;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3301      	adds	r3, #1
 8001314:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ef      	bne.n	80012fe <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	4798      	blx	r3
}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 8001336:	b480      	push	{r7}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0xffff;
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	81fb      	strh	r3, [r7, #14]
	while (1) {
		timeout--;
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	3b01      	subs	r3, #1
 800134a:	81fb      	strh	r3, [r7, #14]
		if (timeout == 0)
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <SerialReceiveChar+0x20>
			return 0;
 8001352:	2300      	movs	r3, #0
 8001354:	e026      	b.n	80013a4 <SerialReceiveChar+0x6e>

		if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <SerialReceiveChar+0x3c>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d007      	beq.n	8001382 <SerialReceiveChar+0x4c>
			*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f042 020a 	orr.w	r2, r2, #10
 8001380:	601a      	str	r2, [r3, #0]
		}

		if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b00      	cmp	r3, #0
 800138e:	d100      	bne.n	8001392 <SerialReceiveChar+0x5c>
		timeout--;
 8001390:	e7d9      	b.n	8001346 <SerialReceiveChar+0x10>
			break;
 8001392:	bf00      	nop
		}
	}
	*received_char = *(serial_port->DataInputRegister);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	b29b      	uxth	r3, r3
 800139c:	b2da      	uxtb	r2, r3
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	701a      	strb	r2, [r3, #0]
	return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <HAL_MspInit+0x44>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <HAL_MspInit+0x44>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6193      	str	r3, [r2, #24]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <HAL_MspInit+0x44>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_MspInit+0x44>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_MspInit+0x44>)
 80013d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_MspInit+0x44>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 fc58 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000

080013f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	; 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <HAL_I2C_MspInit+0x7c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d127      	bne.n	800146a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_I2C_MspInit+0x80>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_I2C_MspInit+0x80>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_I2C_MspInit+0x80>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001432:	23c0      	movs	r3, #192	; 0xc0
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001442:	2304      	movs	r3, #4
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	480b      	ldr	r0, [pc, #44]	; (800147c <HAL_I2C_MspInit+0x84>)
 800144e:	f000 fc67 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_I2C_MspInit+0x80>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_I2C_MspInit+0x80>)
 8001458:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_I2C_MspInit+0x80>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40021000 	.word	0x40021000
 800147c:	48000400 	.word	0x48000400

08001480 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_I2C_MspDeInit+0x38>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d10d      	bne.n	80014ae <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_I2C_MspDeInit+0x3c>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <HAL_I2C_MspDeInit+0x3c>)
 8001498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800149c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 800149e:	2140      	movs	r1, #64	; 0x40
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <HAL_I2C_MspDeInit+0x40>)
 80014a2:	f000 fdb7 	bl	8002014 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_I2C_MspDeInit+0x40>)
 80014aa:	f000 fdb3 	bl	8002014 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40005400 	.word	0x40005400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	48000400 	.word	0x48000400

080014c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a17      	ldr	r2, [pc, #92]	; (8001540 <HAL_SPI_MspInit+0x7c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d128      	bne.n	8001538 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_SPI_MspInit+0x80>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a16      	ldr	r2, [pc, #88]	; (8001544 <HAL_SPI_MspInit+0x80>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <HAL_SPI_MspInit+0x80>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_SPI_MspInit+0x80>)
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_SPI_MspInit+0x80>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6153      	str	r3, [r2, #20]
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_SPI_MspInit+0x80>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001516:	23e0      	movs	r3, #224	; 0xe0
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001526:	2305      	movs	r3, #5
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f000 fbf4 	bl	8001d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001538:	bf00      	nop
 800153a:	3728      	adds	r7, #40	; 0x28
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40013000 	.word	0x40013000
 8001544:	40021000 	.word	0x40021000

08001548 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_SPI_MspDeInit+0x30>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d10a      	bne.n	8001570 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_SPI_MspDeInit+0x34>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_SPI_MspDeInit+0x34>)
 8001560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001564:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 8001566:	21e0      	movs	r1, #224	; 0xe0
 8001568:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156c:	f000 fd52 	bl	8002014 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40013000 	.word	0x40013000
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a18      	ldr	r2, [pc, #96]	; (8001600 <HAL_PCD_MspInit+0x80>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d129      	bne.n	80015f6 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_PCD_MspInit+0x84>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	4a17      	ldr	r2, [pc, #92]	; (8001604 <HAL_PCD_MspInit+0x84>)
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	6153      	str	r3, [r2, #20]
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_PCD_MspInit+0x84>)
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80015ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80015cc:	230e      	movs	r3, #14
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f000 fba1 	bl	8001d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_PCD_MspInit+0x84>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a08      	ldr	r2, [pc, #32]	; (8001604 <HAL_PCD_MspInit+0x84>)
 80015e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_PCD_MspInit+0x84>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3728      	adds	r7, #40	; 0x28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005c00 	.word	0x40005c00
 8001604:	40021000 	.word	0x40021000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 fa32 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
	return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_kill>:

int _kill(int pid, int sig)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001676:	f005 fef7 	bl	8007468 <__errno>
 800167a:	4603      	mov	r3, r0
 800167c:	2216      	movs	r2, #22
 800167e:	601a      	str	r2, [r3, #0]
	return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ffe7 	bl	800166c <_kill>
	while (1) {}		/* Make sure we hang here */
 800169e:	e7fe      	b.n	800169e <_exit+0x12>

080016a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e00a      	b.n	80016c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016b2:	f3af 8000 	nop.w
 80016b6:	4601      	mov	r1, r0
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	b2ca      	uxtb	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	dbf0      	blt.n	80016b2 <_read+0x12>
	}

return len;
 80016d0:	687b      	ldr	r3, [r7, #4]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e009      	b.n	8001700 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbf1      	blt.n	80016ec <_write+0x12>
	}
	return len;
 8001708:	687b      	ldr	r3, [r7, #4]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <_close>:

int _close(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
	return -1;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800173a:	605a      	str	r2, [r3, #4]
	return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_isatty>:

int _isatty(int file)
{
 800174a:	b480      	push	{r7}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
	return 1;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
	return 0;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	; (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f005 fe5c 	bl	8007468 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	2000a000 	.word	0x2000a000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	200006bc 	.word	0x200006bc
 80017e4:	200008d0 	.word	0x200008d0

080017e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <reset_modes>:
	}
}

// The purpose of this function is to reset the current mode the timer is working
// Doing this ensures that only one mode is currently running at a time
void reset_modes(){
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
	continous_mode = 0;							// Resets continous mode
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <reset_modes+0x1c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	one_shot_mode = 0;							// Resets one shot mode
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <reset_modes+0x20>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200006c4 	.word	0x200006c4
 80018bc:	200006c5 	.word	0x200006c5

080018c0 <interval_mode>:
	finished_interval = display_func;

}

// This function intialises the callback function and sets the mode to continous mode
void interval_mode(uint32_t period, void(*display_func)(void)){// j
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	reset_modes();
 80018ca:	f7ff ffe7 	bl	800189c <reset_modes>
	continous_mode = 1;
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <interval_mode+0x44>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
	newPeriod = period;// j
 80018d4:	4a0c      	ldr	r2, [pc, #48]	; (8001908 <interval_mode+0x48>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
	set_period(newPeriod);//j
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <interval_mode+0x48>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f816 	bl	8001910 <set_period>
	TIM2->CR1 |= TIM_CR1_CEN; 					// enable timer2
 80018e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6013      	str	r3, [r2, #0]
	finished_interval = display_func;// j
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <interval_mode+0x4c>)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6013      	str	r3, [r2, #0]
}// j
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200006c4 	.word	0x200006c4
 8001908:	20000044 	.word	0x20000044
 800190c:	200006c0 	.word	0x200006c0

08001910 <set_period>:

// This function changes the current period
void set_period(uint32_t period){// j
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0x00;// j
 8001918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = newPeriod - 1;// j
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <set_period+0x28>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001928:	3b01      	subs	r3, #1
 800192a:	62d3      	str	r3, [r2, #44]	; 0x2c

}// j
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000044 	.word	0x20000044

0800193c <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	if ((TIM2->SR & TIM_SR_UIF) != 0) {			// check update interrupt flag timer2
 8001940:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00e      	beq.n	800196c <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF; 				// Clear the update interrupt flag
 800194e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001958:	f023 0301 	bic.w	r3, r3, #1
 800195c:	6113      	str	r3, [r2, #16]
        										// Set LEDs to OFF state after timer expires
        //display(); 								// Update the LEDs to OFF state
        if (finished_interval != 0x00){
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <TIM2_IRQHandler+0x34>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <TIM2_IRQHandler+0x30>
        	finished_interval();
 8001966:	4b02      	ldr	r3, [pc, #8]	; (8001970 <TIM2_IRQHandler+0x34>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4798      	blx	r3
        }

	}
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200006c0 	.word	0x200006c0

08001974 <enable_interrupt_timer2>:

void enable_interrupt_timer2(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
    __disable_irq();
    TIM2->DIER |= TIM_DIER_UIE; 				// Enable update interrupt for timer 2
 800197c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 0); 			// Set Priority
 800198c:	2100      	movs	r1, #0
 800198e:	201c      	movs	r0, #28
 8001990:	f7ff ff5a 	bl	8001848 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 					// Enable interrupts for timer 2
 8001994:	201c      	movs	r0, #28
 8001996:	f7ff ff39 	bl	800180c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800199a:	b662      	cpsie	i
}
 800199c:	bf00      	nop
    __enable_irq();
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <trigger_prescaler>:

void trigger_prescaler(uint32_t periodInSeconds) {
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
    TIM2->CR1 = 0;
 80019aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
    TIM2->PSC = 7999;
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->ARR = periodInSeconds - 1;
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 80019c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ca:	2201      	movs	r2, #1
 80019cc:	615a      	str	r2, [r3, #20]
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e0:	f7ff ff02 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <LoopForever+0x6>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	; (8001a1c <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <LoopForever+0xe>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	; (8001a28 <LoopForever+0x16>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f005 fd33 	bl	8007474 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0e:	f7ff f9e3 	bl	8000dd8 <main>

08001a12 <LoopForever>:

LoopForever:
    b LoopForever
 8001a12:	e7fe      	b.n	8001a12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a14:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8001a20:	0800999c 	.word	0x0800999c
  ldr r2, =_sbss
 8001a24:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8001a28:	200008d0 	.word	0x200008d0

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x28>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x28>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f92b 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fcb0 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f943 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f90b 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000040 	.word	0x20000040
 8001ab4:	2000004c 	.word	0x2000004c
 8001ab8:	20000048 	.word	0x20000048

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	2000004c 	.word	0x2000004c
 8001ae0:	200006c8 	.word	0x200006c8

08001ae4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200006c8 	.word	0x200006c8

08001afc <__NVIC_SetPriorityGrouping>:
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	; (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff3e 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff31 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa2 	bl	8001c58 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d2e:	e154      	b.n	8001fda <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8146 	beq.w	8001fd4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x40>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	6939      	ldr	r1, [r7, #16]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80a0 	beq.w	8001fd4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b58      	ldr	r3, [pc, #352]	; (8001ff8 <HAL_GPIO_Init+0x2d8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a57      	ldr	r2, [pc, #348]	; (8001ff8 <HAL_GPIO_Init+0x2d8>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b55      	ldr	r3, [pc, #340]	; (8001ff8 <HAL_GPIO_Init+0x2d8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001eac:	4a53      	ldr	r2, [pc, #332]	; (8001ffc <HAL_GPIO_Init+0x2dc>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ed6:	d019      	beq.n	8001f0c <HAL_GPIO_Init+0x1ec>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_GPIO_Init+0x2e0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_GPIO_Init+0x1e8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x2e4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d00d      	beq.n	8001f04 <HAL_GPIO_Init+0x1e4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_GPIO_Init+0x2e8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d007      	beq.n	8001f00 <HAL_GPIO_Init+0x1e0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a46      	ldr	r2, [pc, #280]	; (800200c <HAL_GPIO_Init+0x2ec>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_GPIO_Init+0x1dc>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e008      	b.n	8001f0e <HAL_GPIO_Init+0x1ee>
 8001efc:	2305      	movs	r3, #5
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x1ee>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e004      	b.n	8001f0e <HAL_GPIO_Init+0x1ee>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e002      	b.n	8001f0e <HAL_GPIO_Init+0x1ee>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_GPIO_Init+0x1ee>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	f002 0203 	and.w	r2, r2, #3
 8001f14:	0092      	lsls	r2, r2, #2
 8001f16:	4093      	lsls	r3, r2
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f1e:	4937      	ldr	r1, [pc, #220]	; (8001ffc <HAL_GPIO_Init+0x2dc>)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f50:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f56:	4b2e      	ldr	r3, [pc, #184]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f7a:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fa4:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_GPIO_Init+0x2f0>)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f aea3 	bne.w	8001d30 <HAL_GPIO_Init+0x10>
  }
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40010000 	.word	0x40010000
 8002000:	48000400 	.word	0x48000400
 8002004:	48000800 	.word	0x48000800
 8002008:	48000c00 	.word	0x48000c00
 800200c:	48001000 	.word	0x48001000
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002022:	e0b8      	b.n	8002196 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002024:	2201      	movs	r2, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80ab 	beq.w	8002190 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800203a:	4a5e      	ldr	r2, [pc, #376]	; (80021b4 <HAL_GPIO_DeInit+0x1a0>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002062:	d019      	beq.n	8002098 <HAL_GPIO_DeInit+0x84>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <HAL_GPIO_DeInit+0x1a4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d013      	beq.n	8002094 <HAL_GPIO_DeInit+0x80>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_GPIO_DeInit+0x1a8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00d      	beq.n	8002090 <HAL_GPIO_DeInit+0x7c>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_GPIO_DeInit+0x1ac>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d007      	beq.n	800208c <HAL_GPIO_DeInit+0x78>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_GPIO_DeInit+0x1b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_GPIO_DeInit+0x74>
 8002084:	2304      	movs	r3, #4
 8002086:	e008      	b.n	800209a <HAL_GPIO_DeInit+0x86>
 8002088:	2305      	movs	r3, #5
 800208a:	e006      	b.n	800209a <HAL_GPIO_DeInit+0x86>
 800208c:	2303      	movs	r3, #3
 800208e:	e004      	b.n	800209a <HAL_GPIO_DeInit+0x86>
 8002090:	2302      	movs	r3, #2
 8002092:	e002      	b.n	800209a <HAL_GPIO_DeInit+0x86>
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_GPIO_DeInit+0x86>
 8002098:	2300      	movs	r3, #0
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	f002 0203 	and.w	r2, r2, #3
 80020a0:	0092      	lsls	r2, r2, #2
 80020a2:	4093      	lsls	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d132      	bne.n	8002110 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	4945      	ldr	r1, [pc, #276]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80020b8:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	4941      	ldr	r1, [pc, #260]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020c6:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	43db      	mvns	r3, r3
 80020ce:	493e      	ldr	r1, [pc, #248]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	493a      	ldr	r1, [pc, #232]	; (80021c8 <HAL_GPIO_DeInit+0x1b4>)
 80020de:	4013      	ands	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020f2:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_GPIO_DeInit+0x1a0>)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	3302      	adds	r3, #2
 80020fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	43da      	mvns	r2, r3
 8002102:	482c      	ldr	r0, [pc, #176]	; (80021b4 <HAL_GPIO_DeInit+0x1a0>)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	400a      	ands	r2, r1
 800210a:	3302      	adds	r3, #2
 800210c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	2103      	movs	r1, #3
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	401a      	ands	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	220f      	movs	r2, #15
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	43db      	mvns	r3, r3
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	08d2      	lsrs	r2, r2, #3
 8002146:	4019      	ands	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2103      	movs	r1, #3
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	401a      	ands	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	2101      	movs	r1, #1
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	401a      	ands	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2103      	movs	r1, #3
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	401a      	ands	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3301      	adds	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	fa22 f303 	lsr.w	r3, r2, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f47f af40 	bne.w	8002024 <HAL_GPIO_DeInit+0x10>
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40010000 	.word	0x40010000
 80021b8:	48000400 	.word	0x48000400
 80021bc:	48000800 	.word	0x48000800
 80021c0:	48000c00 	.word	0x48000c00
 80021c4:	48001000 	.word	0x48001000
 80021c8:	40010400 	.word	0x40010400

080021cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	460b      	mov	r3, r1
 80021d6:	807b      	strh	r3, [r7, #2]
 80021d8:	4613      	mov	r3, r2
 80021da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021dc:	787b      	ldrb	r3, [r7, #1]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021e2:	887a      	ldrh	r2, [r7, #2]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e8:	e002      	b.n	80021f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e081      	b.n	8002312 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff f8e8 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 0201 	bic.w	r2, r2, #1
 800223e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800224c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800225c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	e006      	b.n	8002284 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002282:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d104      	bne.n	8002296 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e021      	b.n	8002370 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0201 	bic.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f89b 	bl	8001480 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	460b      	mov	r3, r1
 800238c:	813b      	strh	r3, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b20      	cmp	r3, #32
 800239c:	f040 80f9 	bne.w	8002592 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HAL_I2C_Mem_Write+0x34>
 80023a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d105      	bne.n	80023b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0ed      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2C_Mem_Write+0x4e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0e6      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ce:	f7ff fb89 	bl	8001ae4 <HAL_GetTick>
 80023d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	2319      	movs	r3, #25
 80023da:	2201      	movs	r2, #1
 80023dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fad1 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0d1      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2221      	movs	r2, #33	; 0x21
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6a3a      	ldr	r2, [r7, #32]
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002418:	88f8      	ldrh	r0, [r7, #6]
 800241a:	893a      	ldrh	r2, [r7, #8]
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	9300      	str	r3, [sp, #0]
 8002426:	4603      	mov	r3, r0
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 f9e1 	bl	80027f0 <I2C_RequestMemoryWrite>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d005      	beq.n	8002440 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0a9      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2bff      	cmp	r3, #255	; 0xff
 8002448:	d90e      	bls.n	8002468 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	8979      	ldrh	r1, [r7, #10]
 8002458:	2300      	movs	r3, #0
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fc4b 	bl	8002cfc <I2C_TransferConfig>
 8002466:	e00f      	b.n	8002488 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	b2da      	uxtb	r2, r3
 8002478:	8979      	ldrh	r1, [r7, #10]
 800247a:	2300      	movs	r3, #0
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fc3a 	bl	8002cfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 faca 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e07b      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c4:	3b01      	subs	r3, #1
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d034      	beq.n	8002540 <HAL_I2C_Mem_Write+0x1c8>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d130      	bne.n	8002540 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	2200      	movs	r2, #0
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa4d 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e04d      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2bff      	cmp	r3, #255	; 0xff
 8002500:	d90e      	bls.n	8002520 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	22ff      	movs	r2, #255	; 0xff
 8002506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	b2da      	uxtb	r2, r3
 800250e:	8979      	ldrh	r1, [r7, #10]
 8002510:	2300      	movs	r3, #0
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fbef 	bl	8002cfc <I2C_TransferConfig>
 800251e:	e00f      	b.n	8002540 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252e:	b2da      	uxtb	r2, r3
 8002530:	8979      	ldrh	r1, [r7, #10]
 8002532:	2300      	movs	r3, #0
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fbde 	bl	8002cfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d19e      	bne.n	8002488 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 fab0 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e01a      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2220      	movs	r2, #32
 8002564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6859      	ldr	r1, [r3, #4]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <HAL_I2C_Mem_Write+0x224>)
 8002572:	400b      	ands	r3, r1
 8002574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	fe00e800 	.word	0xfe00e800

080025a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af02      	add	r7, sp, #8
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	461a      	mov	r2, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	817b      	strh	r3, [r7, #10]
 80025b2:	460b      	mov	r3, r1
 80025b4:	813b      	strh	r3, [r7, #8]
 80025b6:	4613      	mov	r3, r2
 80025b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	f040 80fd 	bne.w	80027c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_I2C_Mem_Read+0x34>
 80025ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e0f1      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Mem_Read+0x4e>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e0ea      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025f6:	f7ff fa75 	bl	8001ae4 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2319      	movs	r3, #25
 8002602:	2201      	movs	r2, #1
 8002604:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	f000 f9bd 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e0d5      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2222      	movs	r2, #34	; 0x22
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a3a      	ldr	r2, [r7, #32]
 8002632:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002640:	88f8      	ldrh	r0, [r7, #6]
 8002642:	893a      	ldrh	r2, [r7, #8]
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4603      	mov	r3, r0
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f921 	bl	8002898 <I2C_RequestMemoryRead>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0ad      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d90e      	bls.n	8002690 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	b2da      	uxtb	r2, r3
 800267e:	8979      	ldrh	r1, [r7, #10]
 8002680:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_I2C_Mem_Read+0x22c>)
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fb37 	bl	8002cfc <I2C_TransferConfig>
 800268e:	e00f      	b.n	80026b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	8979      	ldrh	r1, [r7, #10]
 80026a2:	4b4a      	ldr	r3, [pc, #296]	; (80027cc <HAL_I2C_Mem_Read+0x22c>)
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fb26 	bl	8002cfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b6:	2200      	movs	r2, #0
 80026b8:	2104      	movs	r1, #4
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f000 f964 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07c      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d034      	beq.n	8002770 <HAL_I2C_Mem_Read+0x1d0>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d130      	bne.n	8002770 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002714:	2200      	movs	r2, #0
 8002716:	2180      	movs	r1, #128	; 0x80
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 f935 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e04d      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	2bff      	cmp	r3, #255	; 0xff
 8002730:	d90e      	bls.n	8002750 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	22ff      	movs	r2, #255	; 0xff
 8002736:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	b2da      	uxtb	r2, r3
 800273e:	8979      	ldrh	r1, [r7, #10]
 8002740:	2300      	movs	r3, #0
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 fad7 	bl	8002cfc <I2C_TransferConfig>
 800274e:	e00f      	b.n	8002770 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	b2da      	uxtb	r2, r3
 8002760:	8979      	ldrh	r1, [r7, #10]
 8002762:	2300      	movs	r3, #0
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 fac6 	bl	8002cfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d19a      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f000 f998 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e01a      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2220      	movs	r2, #32
 8002794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <HAL_I2C_Mem_Read+0x230>)
 80027a2:	400b      	ands	r3, r1
 80027a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
  }
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	80002400 	.word	0x80002400
 80027d0:	fe00e800 	.word	0xfe00e800

080027d4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027e2:	b2db      	uxtb	r3, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	4603      	mov	r3, r0
 8002800:	817b      	strh	r3, [r7, #10]
 8002802:	460b      	mov	r3, r1
 8002804:	813b      	strh	r3, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <I2C_RequestMemoryWrite+0xa4>)
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fa6f 	bl	8002cfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	69b9      	ldr	r1, [r7, #24]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f8ff 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e02c      	b.n	800288c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002838:	893b      	ldrh	r3, [r7, #8]
 800283a:	b2da      	uxtb	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
 8002842:	e015      	b.n	8002870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002844:	893b      	ldrh	r3, [r7, #8]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	b29b      	uxth	r3, r3
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002852:	69fa      	ldr	r2, [r7, #28]
 8002854:	69b9      	ldr	r1, [r7, #24]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f8e5 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e012      	b.n	800288c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002866:	893b      	ldrh	r3, [r7, #8]
 8002868:	b2da      	uxtb	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2200      	movs	r2, #0
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f884 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	80002000 	.word	0x80002000

08002898 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af02      	add	r7, sp, #8
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	461a      	mov	r2, r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	817b      	strh	r3, [r7, #10]
 80028aa:	460b      	mov	r3, r1
 80028ac:	813b      	strh	r3, [r7, #8]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	8979      	ldrh	r1, [r7, #10]
 80028b8:	4b20      	ldr	r3, [pc, #128]	; (800293c <I2C_RequestMemoryRead+0xa4>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2300      	movs	r3, #0
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa1c 	bl	8002cfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f8ac 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e02c      	b.n	8002932 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028de:	893b      	ldrh	r3, [r7, #8]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28
 80028e8:	e015      	b.n	8002916 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	0a1b      	lsrs	r3, r3, #8
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f892 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e012      	b.n	8002932 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800290c:	893b      	ldrh	r3, [r7, #8]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	2200      	movs	r2, #0
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f831 	bl	8002988 <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e000      	b.n	8002932 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	80002000 	.word	0x80002000

08002940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b02      	cmp	r3, #2
 8002954:	d103      	bne.n	800295e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2200      	movs	r2, #0
 800295c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d007      	beq.n	800297c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699a      	ldr	r2, [r3, #24]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 0201 	orr.w	r2, r2, #1
 800297a:	619a      	str	r2, [r3, #24]
  }
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002998:	e031      	b.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d02d      	beq.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7ff f89f 	bl	8001ae4 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d122      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d113      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f043 0220 	orr.w	r2, r3, #32
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d0be      	beq.n	800299a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a32:	e033      	b.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f87f 	bl	8002b3c <I2C_IsErrorOccurred>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e031      	b.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d025      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7ff f848 	bl	8001ae4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11a      	bne.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d013      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d1c4      	bne.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac0:	e02f      	b.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f838 	bl	8002b3c <I2C_IsErrorOccurred>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e02d      	b.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7ff f805 	bl	8001ae4 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11a      	bne.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d013      	beq.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d1c8      	bne.n	8002ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	; 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d068      	beq.n	8002c3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2210      	movs	r2, #16
 8002b6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b70:	e049      	b.n	8002c06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d045      	beq.n	8002c06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b7a:	f7fe ffb3 	bl	8001ae4 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d302      	bcc.n	8002b90 <I2C_IsErrorOccurred+0x54>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d13a      	bne.n	8002c06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ba2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb2:	d121      	bne.n	8002bf8 <I2C_IsErrorOccurred+0xbc>
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bba:	d01d      	beq.n	8002bf8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b20      	cmp	r3, #32
 8002bc0:	d01a      	beq.n	8002bf8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bd2:	f7fe ff87 	bl	8001ae4 <HAL_GetTick>
 8002bd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd8:	e00e      	b.n	8002bf8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bda:	f7fe ff83 	bl	8001ae4 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b19      	cmp	r3, #25
 8002be6:	d907      	bls.n	8002bf8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f043 0320 	orr.w	r3, r3, #32
 8002bee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002bf6:	e006      	b.n	8002c06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0320 	and.w	r3, r3, #32
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d1e9      	bne.n	8002bda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	f003 0320 	and.w	r3, r3, #32
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d003      	beq.n	8002c1c <I2C_IsErrorOccurred+0xe0>
 8002c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0aa      	beq.n	8002b72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00b      	beq.n	8002c64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00b      	beq.n	8002c86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	f043 0308 	orr.w	r3, r3, #8
 8002c74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f043 0302 	orr.w	r3, r3, #2
 8002c96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01c      	beq.n	8002cea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f7ff fe45 	bl	8002940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6859      	ldr	r1, [r3, #4]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <I2C_IsErrorOccurred+0x1bc>)
 8002cc2:	400b      	ands	r3, r1
 8002cc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3728      	adds	r7, #40	; 0x28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	fe00e800 	.word	0xfe00e800

08002cfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d0e:	897b      	ldrh	r3, [r7, #10]
 8002d10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d14:	7a7b      	ldrb	r3, [r7, #9]
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	0d5b      	lsrs	r3, r3, #21
 8002d36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <I2C_TransferConfig+0x60>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	ea02 0103 	and.w	r1, r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d4e:	bf00      	nop
 8002d50:	371c      	adds	r7, #28
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	03ff63ff 	.word	0x03ff63ff

08002d60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d138      	bne.n	8002de8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e032      	b.n	8002dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002db2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	e000      	b.n	8002dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
 8002dfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d139      	bne.n	8002e80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e033      	b.n	8002e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2224      	movs	r2, #36	; 0x24
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	021b      	lsls	r3, r3, #8
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	e000      	b.n	8002e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e80:	2302      	movs	r3, #2
  }
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e90:	b08b      	sub	sp, #44	; 0x2c
 8002e92:	af06      	add	r7, sp, #24
 8002e94:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0c4      	b.n	800302a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fe fb63 	bl	8001580 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2203      	movs	r2, #3
 8002ebe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f002 f8f0 	bl	80050ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
 8002ed0:	e040      	b.n	8002f54 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	440b      	add	r3, r1
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3303      	adds	r3, #3
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f12:	7bfa      	ldrb	r2, [r7, #15]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	440b      	add	r3, r1
 8002f20:	3338      	adds	r3, #56	; 0x38
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	440b      	add	r3, r1
 8002f34:	333c      	adds	r3, #60	; 0x3c
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	440b      	add	r3, r1
 8002f48:	3340      	adds	r3, #64	; 0x40
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3b9      	bcc.n	8002ed2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
 8002f62:	e044      	b.n	8002fee <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f8c:	7bfa      	ldrb	r2, [r7, #15]
 8002f8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	440b      	add	r3, r1
 8002fca:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd2:	7bfa      	ldrb	r2, [r7, #15]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	440b      	add	r3, r1
 8002fe0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	3301      	adds	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	7bfa      	ldrb	r2, [r7, #15]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d3b5      	bcc.n	8002f64 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	687e      	ldr	r6, [r7, #4]
 8003000:	466d      	mov	r5, sp
 8003002:	f106 0410 	add.w	r4, r6, #16
 8003006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	602b      	str	r3, [r5, #0]
 800300e:	1d33      	adds	r3, r6, #4
 8003010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003012:	6838      	ldr	r0, [r7, #0]
 8003014:	f002 f865 	bl	80050e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003034 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800303a:	af00      	add	r7, sp, #0
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003044:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	f001 b823 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 817d 	beq.w	800336a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003070:	4bbc      	ldr	r3, [pc, #752]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b04      	cmp	r3, #4
 800307a:	d00c      	beq.n	8003096 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800307c:	4bb9      	ldr	r3, [pc, #740]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 030c 	and.w	r3, r3, #12
 8003084:	2b08      	cmp	r3, #8
 8003086:	d15c      	bne.n	8003142 <HAL_RCC_OscConfig+0x10e>
 8003088:	4bb6      	ldr	r3, [pc, #728]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003094:	d155      	bne.n	8003142 <HAL_RCC_OscConfig+0x10e>
 8003096:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800309a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80030a2:	fa93 f3a3 	rbit	r3, r3
 80030a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ae:	fab3 f383 	clz	r3, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d102      	bne.n	80030c8 <HAL_RCC_OscConfig+0x94>
 80030c2:	4ba8      	ldr	r3, [pc, #672]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	e015      	b.n	80030f4 <HAL_RCC_OscConfig+0xc0>
 80030c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030cc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030e4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80030e8:	fa93 f3a3 	rbit	r3, r3
 80030ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80030f0:	4b9c      	ldr	r3, [pc, #624]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030f8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80030fc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003100:	fa92 f2a2 	rbit	r2, r2
 8003104:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003108:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800310c:	fab2 f282 	clz	r2, r2
 8003110:	b2d2      	uxtb	r2, r2
 8003112:	f042 0220 	orr.w	r2, r2, #32
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	f002 021f 	and.w	r2, r2, #31
 800311c:	2101      	movs	r1, #1
 800311e:	fa01 f202 	lsl.w	r2, r1, r2
 8003122:	4013      	ands	r3, r2
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 811f 	beq.w	8003368 <HAL_RCC_OscConfig+0x334>
 800312a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	f040 8116 	bne.w	8003368 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f000 bfaf 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x12e>
 8003154:	4b83      	ldr	r3, [pc, #524]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a82      	ldr	r2, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e036      	b.n	80031d0 <HAL_RCC_OscConfig+0x19c>
 8003162:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003166:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10c      	bne.n	800318c <HAL_RCC_OscConfig+0x158>
 8003172:	4b7c      	ldr	r3, [pc, #496]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a7b      	ldr	r2, [pc, #492]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	4b79      	ldr	r3, [pc, #484]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a78      	ldr	r2, [pc, #480]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	e021      	b.n	80031d0 <HAL_RCC_OscConfig+0x19c>
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x184>
 800319e:	4b71      	ldr	r3, [pc, #452]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a70      	ldr	r2, [pc, #448]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6d      	ldr	r2, [pc, #436]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x19c>
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a69      	ldr	r2, [pc, #420]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a66      	ldr	r2, [pc, #408]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ce:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031d0:	4b64      	ldr	r3, [pc, #400]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f023 020f 	bic.w	r2, r3, #15
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	495f      	ldr	r1, [pc, #380]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d059      	beq.n	80032ae <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fc73 	bl	8001ae4 <HAL_GetTick>
 80031fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	e00a      	b.n	800321a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003204:	f7fe fc6e 	bl	8001ae4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b64      	cmp	r3, #100	; 0x64
 8003212:	d902      	bls.n	800321a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	f000 bf43 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 800321a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800321e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003222:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800322e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f043 0301 	orr.w	r3, r3, #1
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <HAL_RCC_OscConfig+0x218>
 8003246:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	e015      	b.n	8003278 <HAL_RCC_OscConfig+0x244>
 800324c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003250:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003254:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003260:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003264:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003268:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800326c:	fa93 f3a3 	rbit	r3, r3
 8003270:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003274:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800327c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003280:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003284:	fa92 f2a2 	rbit	r2, r2
 8003288:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800328c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f002 021f 	and.w	r2, r2, #31
 80032a0:	2101      	movs	r1, #1
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	4013      	ands	r3, r2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ab      	beq.n	8003204 <HAL_RCC_OscConfig+0x1d0>
 80032ac:	e05d      	b.n	800336a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe fc19 	bl	8001ae4 <HAL_GetTick>
 80032b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fe fc14 	bl	8001ae4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b64      	cmp	r3, #100	; 0x64
 80032c6:	d902      	bls.n	80032ce <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	f000 bee9 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80032ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80032e2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d102      	bne.n	8003300 <HAL_RCC_OscConfig+0x2cc>
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e015      	b.n	800332c <HAL_RCC_OscConfig+0x2f8>
 8003300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003304:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003318:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800331c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <HAL_RCC_OscConfig+0x330>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003330:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003334:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003338:	fa92 f2a2 	rbit	r2, r2
 800333c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003340:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003344:	fab2 f282 	clz	r2, r2
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	f042 0220 	orr.w	r2, r2, #32
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f002 021f 	and.w	r2, r2, #31
 8003354:	2101      	movs	r1, #1
 8003356:	fa01 f202 	lsl.w	r2, r1, r2
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ab      	bne.n	80032b8 <HAL_RCC_OscConfig+0x284>
 8003360:	e003      	b.n	800336a <HAL_RCC_OscConfig+0x336>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 817d 	beq.w	800367a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003380:	4ba6      	ldr	r3, [pc, #664]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800338c:	4ba3      	ldr	r3, [pc, #652]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 030c 	and.w	r3, r3, #12
 8003394:	2b08      	cmp	r3, #8
 8003396:	d172      	bne.n	800347e <HAL_RCC_OscConfig+0x44a>
 8003398:	4ba0      	ldr	r3, [pc, #640]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d16c      	bne.n	800347e <HAL_RCC_OscConfig+0x44a>
 80033a4:	2302      	movs	r3, #2
 80033a6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80033ae:	fa93 f3a3 	rbit	r3, r3
 80033b2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80033b6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d102      	bne.n	80033d4 <HAL_RCC_OscConfig+0x3a0>
 80033ce:	4b93      	ldr	r3, [pc, #588]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	e013      	b.n	80033fc <HAL_RCC_OscConfig+0x3c8>
 80033d4:	2302      	movs	r3, #2
 80033d6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80033e6:	2302      	movs	r3, #2
 80033e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80033ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033f0:	fa93 f3a3 	rbit	r3, r3
 80033f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80033f8:	4b88      	ldr	r3, [pc, #544]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2202      	movs	r2, #2
 80033fe:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003402:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003406:	fa92 f2a2 	rbit	r2, r2
 800340a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800340e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003412:	fab2 f282 	clz	r2, r2
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	f042 0220 	orr.w	r2, r2, #32
 800341c:	b2d2      	uxtb	r2, r2
 800341e:	f002 021f 	and.w	r2, r2, #31
 8003422:	2101      	movs	r1, #1
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	4013      	ands	r3, r2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00a      	beq.n	8003444 <HAL_RCC_OscConfig+0x410>
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	2b01      	cmp	r3, #1
 800343c:	d002      	beq.n	8003444 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f000 be2e 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b75      	ldr	r3, [pc, #468]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003450:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	21f8      	movs	r1, #248	; 0xf8
 800345a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003462:	fa91 f1a1 	rbit	r1, r1
 8003466:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800346a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800346e:	fab1 f181 	clz	r1, r1
 8003472:	b2c9      	uxtb	r1, r1
 8003474:	408b      	lsls	r3, r1
 8003476:	4969      	ldr	r1, [pc, #420]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347c:	e0fd      	b.n	800367a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800347e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003482:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8088 	beq.w	80035a0 <HAL_RCC_OscConfig+0x56c>
 8003490:	2301      	movs	r3, #1
 8003492:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003496:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800349a:	fa93 f3a3 	rbit	r3, r3
 800349e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80034a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a6:	fab3 f383 	clz	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	461a      	mov	r2, r3
 80034b8:	2301      	movs	r3, #1
 80034ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fb12 	bl	8001ae4 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c6:	f7fe fb0d 	bl	8001ae4 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d902      	bls.n	80034dc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	f000 bde2 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80034dc:	2302      	movs	r3, #2
 80034de:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80034e6:	fa93 f3a3 	rbit	r3, r3
 80034ea:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80034ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	fab3 f383 	clz	r3, r3
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b01      	cmp	r3, #1
 8003504:	d102      	bne.n	800350c <HAL_RCC_OscConfig+0x4d8>
 8003506:	4b45      	ldr	r3, [pc, #276]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	e013      	b.n	8003534 <HAL_RCC_OscConfig+0x500>
 800350c:	2302      	movs	r3, #2
 800350e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800351e:	2302      	movs	r3, #2
 8003520:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003524:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003530:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2202      	movs	r2, #2
 8003536:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800353a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800353e:	fa92 f2a2 	rbit	r2, r2
 8003542:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003546:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800354a:	fab2 f282 	clz	r2, r2
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	f042 0220 	orr.w	r2, r2, #32
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f002 021f 	and.w	r2, r2, #31
 800355a:	2101      	movs	r1, #1
 800355c:	fa01 f202 	lsl.w	r2, r1, r2
 8003560:	4013      	ands	r3, r2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0af      	beq.n	80034c6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	21f8      	movs	r1, #248	; 0xf8
 800357c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003584:	fa91 f1a1 	rbit	r1, r1
 8003588:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800358c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003590:	fab1 f181 	clz	r1, r1
 8003594:	b2c9      	uxtb	r1, r1
 8003596:	408b      	lsls	r3, r1
 8003598:	4920      	ldr	r1, [pc, #128]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
 800359e:	e06c      	b.n	800367a <HAL_RCC_OscConfig+0x646>
 80035a0:	2301      	movs	r3, #1
 80035a2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80035aa:	fa93 f3a3 	rbit	r3, r3
 80035ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80035b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	461a      	mov	r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe fa8a 	bl	8001ae4 <HAL_GetTick>
 80035d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d6:	f7fe fa85 	bl	8001ae4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	f000 bd5a 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80035ec:	2302      	movs	r3, #2
 80035ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80035fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <HAL_RCC_OscConfig+0x5ec>
 8003616:	4b01      	ldr	r3, [pc, #4]	; (800361c <HAL_RCC_OscConfig+0x5e8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	e015      	b.n	8003648 <HAL_RCC_OscConfig+0x614>
 800361c:	40021000 	.word	0x40021000
 8003620:	2302      	movs	r3, #2
 8003622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003632:	2302      	movs	r3, #2
 8003634:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003638:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003644:	4bc8      	ldr	r3, [pc, #800]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2202      	movs	r2, #2
 800364a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800364e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003652:	fa92 f2a2 	rbit	r2, r2
 8003656:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800365a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800365e:	fab2 f282 	clz	r2, r2
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	f042 0220 	orr.w	r2, r2, #32
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f002 021f 	and.w	r2, r2, #31
 800366e:	2101      	movs	r1, #1
 8003670:	fa01 f202 	lsl.w	r2, r1, r2
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1ad      	bne.n	80035d6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8110 	beq.w	80038b0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d079      	beq.n	8003794 <HAL_RCC_OscConfig+0x760>
 80036a0:	2301      	movs	r3, #1
 80036a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80036b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	4bab      	ldr	r3, [pc, #684]	; (800396c <HAL_RCC_OscConfig+0x938>)
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	461a      	mov	r2, r3
 80036c6:	2301      	movs	r3, #1
 80036c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fa0b 	bl	8001ae4 <HAL_GetTick>
 80036ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe fa06 	bl	8001ae4 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d902      	bls.n	80036ea <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	f000 bcdb 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80036ea:	2302      	movs	r3, #2
 80036ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036f4:	fa93 f3a3 	rbit	r3, r3
 80036f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003700:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003704:	2202      	movs	r2, #2
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003728:	2202      	movs	r2, #2
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	fa93 f2a3 	rbit	r2, r3
 800373a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800373e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003742:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 8003746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003750:	2102      	movs	r1, #2
 8003752:	6019      	str	r1, [r3, #0]
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f1a3 	rbit	r1, r3
 8003762:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003766:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800376a:	6019      	str	r1, [r3, #0]
  return result;
 800376c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003770:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003780:	b2db      	uxtb	r3, r3
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0a0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x6a0>
 8003792:	e08d      	b.n	80038b0 <HAL_RCC_OscConfig+0x87c>
 8003794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003798:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800379c:	2201      	movs	r2, #1
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80037c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b68      	ldr	r3, [pc, #416]	; (800396c <HAL_RCC_OscConfig+0x938>)
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	461a      	mov	r2, r3
 80037d2:	2300      	movs	r3, #0
 80037d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fe f985 	bl	8001ae4 <HAL_GetTick>
 80037da:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe f980 	bl	8001ae4 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d902      	bls.n	80037f6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	f000 bc55 	b.w	80040a0 <HAL_RCC_OscConfig+0x106c>
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037fe:	2202      	movs	r2, #2
 8003800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003806:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003814:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800381e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003822:	2202      	movs	r2, #2
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800382a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	fa93 f2a3 	rbit	r2, r3
 8003834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003838:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003846:	2202      	movs	r2, #2
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	fa93 f2a3 	rbit	r2, r3
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003860:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 8003864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800386a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800386e:	2102      	movs	r1, #2
 8003870:	6019      	str	r1, [r3, #0]
 8003872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003876:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	fa93 f1a3 	rbit	r1, r3
 8003880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003884:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003888:	6019      	str	r1, [r3, #0]
  return result;
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	2101      	movs	r1, #1
 80038a6:	fa01 f303 	lsl.w	r3, r1, r3
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d197      	bne.n	80037e0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 81a1 	beq.w	8003c08 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038cc:	4b26      	ldr	r3, [pc, #152]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d8:	4b23      	ldr	r3, [pc, #140]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e2:	61d3      	str	r3, [r2, #28]
 80038e4:	4b20      	ldr	r3, [pc, #128]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80038ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fa:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11a      	bne.n	8003948 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003912:	4b17      	ldr	r3, [pc, #92]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800391e:	f7fe f8e1 	bl	8001ae4 <HAL_GetTick>
 8003922:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	e009      	b.n	800393c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003928:	f7fe f8dc 	bl	8001ae4 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b64      	cmp	r3, #100	; 0x64
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e3b1      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <HAL_RCC_OscConfig+0x93c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ef      	beq.n	8003928 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d10d      	bne.n	8003974 <HAL_RCC_OscConfig+0x940>
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a02      	ldr	r2, [pc, #8]	; (8003968 <HAL_RCC_OscConfig+0x934>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6213      	str	r3, [r2, #32]
 8003964:	e03c      	b.n	80039e0 <HAL_RCC_OscConfig+0x9ac>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
 800396c:	10908120 	.word	0x10908120
 8003970:	40007000 	.word	0x40007000
 8003974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003978:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10c      	bne.n	800399e <HAL_RCC_OscConfig+0x96a>
 8003984:	4bc1      	ldr	r3, [pc, #772]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4ac0      	ldr	r2, [pc, #768]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 800398a:	f023 0301 	bic.w	r3, r3, #1
 800398e:	6213      	str	r3, [r2, #32]
 8003990:	4bbe      	ldr	r3, [pc, #760]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4abd      	ldr	r2, [pc, #756]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003996:	f023 0304 	bic.w	r3, r3, #4
 800399a:	6213      	str	r3, [r2, #32]
 800399c:	e020      	b.n	80039e0 <HAL_RCC_OscConfig+0x9ac>
 800399e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x994>
 80039ae:	4bb7      	ldr	r3, [pc, #732]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4ab6      	ldr	r2, [pc, #728]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	6213      	str	r3, [r2, #32]
 80039ba:	4bb4      	ldr	r3, [pc, #720]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4ab3      	ldr	r2, [pc, #716]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	e00b      	b.n	80039e0 <HAL_RCC_OscConfig+0x9ac>
 80039c8:	4bb0      	ldr	r3, [pc, #704]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4aaf      	ldr	r2, [pc, #700]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039ce:	f023 0301 	bic.w	r3, r3, #1
 80039d2:	6213      	str	r3, [r2, #32]
 80039d4:	4bad      	ldr	r3, [pc, #692]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4aac      	ldr	r2, [pc, #688]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8081 	beq.w	8003af4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f2:	f7fe f877 	bl	8001ae4 <HAL_GetTick>
 80039f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	e00b      	b.n	8003a14 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe f872 	bl	8001ae4 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e345      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003a14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a18:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	fa93 f2a3 	rbit	r2, r3
 8003a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a32:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a40:	2202      	movs	r2, #2
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a48:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	fa93 f2a3 	rbit	r2, r3
 8003a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a56:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a5a:	601a      	str	r2, [r3, #0]
  return result;
 8003a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a60:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a64:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f043 0302 	orr.w	r3, r3, #2
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_OscConfig+0xa4c>
 8003a7a:	4b84      	ldr	r3, [pc, #528]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	e013      	b.n	8003aa8 <HAL_RCC_OscConfig+0xa74>
 8003a80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a84:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a88:	2202      	movs	r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a9e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003aac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	6011      	str	r1, [r2, #0]
 8003ab4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ab8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	fa92 f1a2 	rbit	r1, r2
 8003ac2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ac6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003aca:	6011      	str	r1, [r2, #0]
  return result;
 8003acc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ad0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	fab2 f282 	clz	r2, r2
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	f002 021f 	and.w	r2, r2, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d084      	beq.n	80039fc <HAL_RCC_OscConfig+0x9c8>
 8003af2:	e07f      	b.n	8003bf4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af4:	f7fd fff6 	bl	8001ae4 <HAL_GetTick>
 8003af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	e00b      	b.n	8003b16 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd fff1 	bl	8001ae4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e2c4      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b1e:	2202      	movs	r2, #2
 8003b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	fa93 f2a3 	rbit	r2, r3
 8003b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b34:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b42:	2202      	movs	r2, #2
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	fa93 f2a3 	rbit	r2, r3
 8003b54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b58:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b5c:	601a      	str	r2, [r3, #0]
  return result;
 8003b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b62:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_OscConfig+0xb4e>
 8003b7c:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	e013      	b.n	8003baa <HAL_RCC_OscConfig+0xb76>
 8003b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b86:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	fa93 f2a3 	rbit	r2, r3
 8003b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	4b39      	ldr	r3, [pc, #228]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	6011      	str	r1, [r2, #0]
 8003bb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bba:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	fa92 f1a2 	rbit	r1, r2
 8003bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bcc:	6011      	str	r1, [r2, #0]
  return result;
 8003bce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	fab2 f282 	clz	r2, r2
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	f002 021f 	and.w	r2, r2, #31
 8003be8:	2101      	movs	r1, #1
 8003bea:	fa01 f202 	lsl.w	r2, r1, r2
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d184      	bne.n	8003afe <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003bf4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a22      	ldr	r2, [pc, #136]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8242 	beq.w	800409e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_RCC_OscConfig+0xc58>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	f000 8213 	beq.w	800404e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	f040 8162 	bne.w	8003efe <HAL_RCC_OscConfig+0xeca>
 8003c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c5a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c5e:	601a      	str	r2, [r3, #0]
  return result;
 8003c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c64:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c68:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	fab3 f383 	clz	r3, r3
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fd ff30 	bl	8001ae4 <HAL_GetTick>
 8003c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCC_OscConfig+0xc70>
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c90:	f7fd ff28 	bl	8001ae4 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e1fd      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cc8:	601a      	str	r2, [r3, #0]
  return result;
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003cd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	095b      	lsrs	r3, r3, #5
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d102      	bne.n	8003cee <HAL_RCC_OscConfig+0xcba>
 8003ce8:	4bb0      	ldr	r3, [pc, #704]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	e027      	b.n	8003d3e <HAL_RCC_OscConfig+0xd0a>
 8003cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	fa93 f2a3 	rbit	r2, r3
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fa93 f2a3 	rbit	r2, r3
 8003d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d34:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	4b9c      	ldr	r3, [pc, #624]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d42:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d4a:	6011      	str	r1, [r2, #0]
 8003d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d50:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	fa92 f1a2 	rbit	r1, r2
 8003d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d5e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d62:	6011      	str	r1, [r2, #0]
  return result;
 8003d64:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d68:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	fab2 f282 	clz	r2, r2
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f042 0220 	orr.w	r2, r2, #32
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	f002 021f 	and.w	r2, r2, #31
 8003d7e:	2101      	movs	r1, #1
 8003d80:	fa01 f202 	lsl.w	r2, r1, r2
 8003d84:	4013      	ands	r3, r2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d182      	bne.n	8003c90 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d8a:	4b88      	ldr	r3, [pc, #544]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	430b      	orrs	r3, r1
 8003dac:	497f      	ldr	r1, [pc, #508]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	604b      	str	r3, [r1, #4]
 8003db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	fa93 f2a3 	rbit	r2, r3
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003dd6:	601a      	str	r2, [r3, #0]
  return result;
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003de0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de2:	fab3 f383 	clz	r3, r3
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	461a      	mov	r2, r3
 8003df4:	2301      	movs	r3, #1
 8003df6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df8:	f7fd fe74 	bl	8001ae4 <HAL_GetTick>
 8003dfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e00:	e009      	b.n	8003e16 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e02:	f7fd fe6f 	bl	8001ae4 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e144      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e28:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e3a:	601a      	str	r2, [r3, #0]
  return result;
 8003e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e40:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003e44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d102      	bne.n	8003e60 <HAL_RCC_OscConfig+0xe2c>
 8003e5a:	4b54      	ldr	r3, [pc, #336]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	e027      	b.n	8003eb0 <HAL_RCC_OscConfig+0xe7c>
 8003e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e64:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e72:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	fa93 f2a3 	rbit	r2, r3
 8003e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e8a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e98:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	fa93 f2a3 	rbit	r2, r3
 8003ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eb4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003eb8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ebc:	6011      	str	r1, [r2, #0]
 8003ebe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ec2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003ec6:	6812      	ldr	r2, [r2, #0]
 8003ec8:	fa92 f1a2 	rbit	r1, r2
 8003ecc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ed4:	6011      	str	r1, [r2, #0]
  return result;
 8003ed6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eda:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	fab2 f282 	clz	r2, r2
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	f042 0220 	orr.w	r2, r2, #32
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	f002 021f 	and.w	r2, r2, #31
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d082      	beq.n	8003e02 <HAL_RCC_OscConfig+0xdce>
 8003efc:	e0cf      	b.n	800409e <HAL_RCC_OscConfig+0x106a>
 8003efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f02:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f10:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	fa93 f2a3 	rbit	r2, r3
 8003f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f22:	601a      	str	r2, [r3, #0]
  return result;
 8003f24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f28:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003f2c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f2e:	fab3 f383 	clz	r3, r3
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2300      	movs	r3, #0
 8003f42:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd fdce 	bl	8001ae4 <HAL_GetTick>
 8003f48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f4c:	e009      	b.n	8003f62 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fdc9 	bl	8001ae4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e09e      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
 8003f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f66:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f74:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	fa93 f2a3 	rbit	r2, r3
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f86:	601a      	str	r2, [r3, #0]
  return result;
 8003f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f8c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f90:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f92:	fab3 f383 	clz	r3, r3
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	095b      	lsrs	r3, r3, #5
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d104      	bne.n	8003fb0 <HAL_RCC_OscConfig+0xf7c>
 8003fa6:	4b01      	ldr	r3, [pc, #4]	; (8003fac <HAL_RCC_OscConfig+0xf78>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	e029      	b.n	8004000 <HAL_RCC_OscConfig+0xfcc>
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	fa93 f2a3 	rbit	r2, r3
 8003fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fda:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	fa93 f2a3 	rbit	r2, r3
 8003ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <HAL_RCC_OscConfig+0x1078>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004004:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004008:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800400c:	6011      	str	r1, [r2, #0]
 800400e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004012:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	fa92 f1a2 	rbit	r1, r2
 800401c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004020:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004024:	6011      	str	r1, [r2, #0]
  return result;
 8004026:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800402a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800402e:	6812      	ldr	r2, [r2, #0]
 8004030:	fab2 f282 	clz	r2, r2
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	f042 0220 	orr.w	r2, r2, #32
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	f002 021f 	and.w	r2, r2, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	4013      	ands	r3, r2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d180      	bne.n	8003f4e <HAL_RCC_OscConfig+0xf1a>
 800404c:	e027      	b.n	800409e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800404e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004052:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e01e      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004062:	4b12      	ldr	r3, [pc, #72]	; (80040ac <HAL_RCC_OscConfig+0x1078>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800406a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800406e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	429a      	cmp	r2, r3
 8004080:	d10b      	bne.n	800409a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004082:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004086:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800408a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800408e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004096:	429a      	cmp	r2, r3
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000

080040b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b09e      	sub	sp, #120	; 0x78
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80040ba:	2300      	movs	r3, #0
 80040bc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e162      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b90      	ldr	r3, [pc, #576]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b8d      	ldr	r3, [pc, #564]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 0207 	bic.w	r2, r3, #7
 80040de:	498b      	ldr	r1, [pc, #556]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b89      	ldr	r3, [pc, #548]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e14a      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004104:	4b82      	ldr	r3, [pc, #520]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	497f      	ldr	r1, [pc, #508]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004112:	4313      	orrs	r3, r2
 8004114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 80dc 	beq.w	80042dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d13c      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xf6>
 800412c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004130:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004134:	fa93 f3a3 	rbit	r3, r3
 8004138:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413c:	fab3 f383 	clz	r3, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f043 0301 	orr.w	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	d102      	bne.n	8004156 <HAL_RCC_ClockConfig+0xa6>
 8004150:	4b6f      	ldr	r3, [pc, #444]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	e00f      	b.n	8004176 <HAL_RCC_ClockConfig+0xc6>
 8004156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800415a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	667b      	str	r3, [r7, #100]	; 0x64
 8004164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004168:	663b      	str	r3, [r7, #96]	; 0x60
 800416a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800416c:	fa93 f3a3 	rbit	r3, r3
 8004170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004172:	4b67      	ldr	r3, [pc, #412]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800417a:	65ba      	str	r2, [r7, #88]	; 0x58
 800417c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800417e:	fa92 f2a2 	rbit	r2, r2
 8004182:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004184:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004186:	fab2 f282 	clz	r2, r2
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	f042 0220 	orr.w	r2, r2, #32
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	f002 021f 	and.w	r2, r2, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f202 	lsl.w	r2, r1, r2
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d17b      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e0f3      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d13c      	bne.n	8004228 <HAL_RCC_ClockConfig+0x178>
 80041ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b6:	fa93 f3a3 	rbit	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	fab3 f383 	clz	r3, r3
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	095b      	lsrs	r3, r3, #5
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d102      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x128>
 80041d2:	4b4f      	ldr	r3, [pc, #316]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	e00f      	b.n	80041f8 <HAL_RCC_ClockConfig+0x148>
 80041d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	fa93 f3a3 	rbit	r3, r3
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
 80041e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041f4:	4b46      	ldr	r3, [pc, #280]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fc:	63ba      	str	r2, [r7, #56]	; 0x38
 80041fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004200:	fa92 f2a2 	rbit	r2, r2
 8004204:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004208:	fab2 f282 	clz	r2, r2
 800420c:	b2d2      	uxtb	r2, r2
 800420e:	f042 0220 	orr.w	r2, r2, #32
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	f002 021f 	and.w	r2, r2, #31
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d13a      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0b2      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
 8004228:	2302      	movs	r3, #2
 800422a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422e:	fa93 f3a3 	rbit	r3, r3
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	fab3 f383 	clz	r3, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_RCC_ClockConfig+0x1a0>
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	e00d      	b.n	800426c <HAL_RCC_ClockConfig+0x1bc>
 8004250:	2302      	movs	r3, #2
 8004252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
 800425c:	2302      	movs	r3, #2
 800425e:	623b      	str	r3, [r7, #32]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	4b29      	ldr	r3, [pc, #164]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	2202      	movs	r2, #2
 800426e:	61ba      	str	r2, [r7, #24]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	fa92 f2a2 	rbit	r2, r2
 8004276:	617a      	str	r2, [r7, #20]
  return result;
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	fab2 f282 	clz	r2, r2
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f042 0220 	orr.w	r2, r2, #32
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	f002 021f 	and.w	r2, r2, #31
 800428a:	2101      	movs	r1, #1
 800428c:	fa01 f202 	lsl.w	r2, r1, r2
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e079      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	491a      	ldr	r1, [pc, #104]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fc1a 	bl	8001ae4 <HAL_GetTick>
 80042b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fd fc16 	bl	8001ae4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e061      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_RCC_ClockConfig+0x260>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d214      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b08      	ldr	r3, [pc, #32]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 0207 	bic.w	r2, r3, #7
 80042f2:	4906      	ldr	r1, [pc, #24]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_RCC_ClockConfig+0x25c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d005      	beq.n	8004314 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e040      	b.n	800438e <HAL_RCC_ClockConfig+0x2de>
 800430c:	40022000 	.word	0x40022000
 8004310:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b1d      	ldr	r3, [pc, #116]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	491a      	ldr	r1, [pc, #104]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b16      	ldr	r3, [pc, #88]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4912      	ldr	r1, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004352:	f000 f829 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004356:	4601      	mov	r1, r0
 8004358:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <HAL_RCC_ClockConfig+0x2e8>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004360:	22f0      	movs	r2, #240	; 0xf0
 8004362:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	fa92 f2a2 	rbit	r2, r2
 800436a:	60fa      	str	r2, [r7, #12]
  return result;
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	fab2 f282 	clz	r2, r2
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	40d3      	lsrs	r3, r2
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x2ec>)
 8004378:	5cd3      	ldrb	r3, [r2, r3]
 800437a:	fa21 f303 	lsr.w	r3, r1, r3
 800437e:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <HAL_RCC_ClockConfig+0x2f0>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004382:	4b08      	ldr	r3, [pc, #32]	; (80043a4 <HAL_RCC_ClockConfig+0x2f4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fd fb68 	bl	8001a5c <HAL_InitTick>
  
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3778      	adds	r7, #120	; 0x78
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000
 800439c:	080095f4 	.word	0x080095f4
 80043a0:	20000040 	.word	0x20000040
 80043a4:	20000048 	.word	0x20000048

080043a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b08b      	sub	sp, #44	; 0x2c
 80043ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80043c2:	4b29      	ldr	r3, [pc, #164]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d002      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x30>
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d003      	beq.n	80043de <HAL_RCC_GetSysClockFreq+0x36>
 80043d6:	e03c      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043d8:	4b24      	ldr	r3, [pc, #144]	; (800446c <HAL_RCC_GetSysClockFreq+0xc4>)
 80043da:	623b      	str	r3, [r7, #32]
      break;
 80043dc:	e03c      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80043e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80043e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	fa92 f2a2 	rbit	r2, r2
 80043f0:	607a      	str	r2, [r7, #4]
  return result;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	fab2 f282 	clz	r2, r2
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	40d3      	lsrs	r3, r2
 80043fc:	4a1c      	ldr	r2, [pc, #112]	; (8004470 <HAL_RCC_GetSysClockFreq+0xc8>)
 80043fe:	5cd3      	ldrb	r3, [r2, r3]
 8004400:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004402:	4b19      	ldr	r3, [pc, #100]	; (8004468 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	220f      	movs	r2, #15
 800440c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	fa92 f2a2 	rbit	r2, r2
 8004414:	60fa      	str	r2, [r7, #12]
  return result;
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	fab2 f282 	clz	r2, r2
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	40d3      	lsrs	r3, r2
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004422:	5cd3      	ldrb	r3, [r2, r3]
 8004424:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004430:	4a0e      	ldr	r2, [pc, #56]	; (800446c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	fbb2 f2f3 	udiv	r2, r2, r3
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	fb02 f303 	mul.w	r3, r2, r3
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
 8004440:	e004      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004446:	fb02 f303 	mul.w	r3, r2, r3
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	623b      	str	r3, [r7, #32]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004454:	623b      	str	r3, [r7, #32]
      break;
 8004456:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004458:	6a3b      	ldr	r3, [r7, #32]
}
 800445a:	4618      	mov	r0, r3
 800445c:	372c      	adds	r7, #44	; 0x2c
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	40021000 	.word	0x40021000
 800446c:	007a1200 	.word	0x007a1200
 8004470:	08009604 	.word	0x08009604
 8004474:	08009614 	.word	0x08009614
 8004478:	003d0900 	.word	0x003d0900

0800447c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b092      	sub	sp, #72	; 0x48
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800448c:	2300      	movs	r3, #0
 800448e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80d4 	beq.w	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a0:	4b4e      	ldr	r3, [pc, #312]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10e      	bne.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ac:	4b4b      	ldr	r3, [pc, #300]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4a4a      	ldr	r2, [pc, #296]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b6:	61d3      	str	r3, [r2, #28]
 80044b8:	4b48      	ldr	r3, [pc, #288]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b45      	ldr	r3, [pc, #276]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d118      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d6:	4b42      	ldr	r3, [pc, #264]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a41      	ldr	r2, [pc, #260]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044e0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e2:	f7fd faff 	bl	8001ae4 <HAL_GetTick>
 80044e6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e8:	e008      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fd fafb 	bl	8001ae4 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e169      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	4b38      	ldr	r3, [pc, #224]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004508:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8084 	beq.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004524:	429a      	cmp	r2, r3
 8004526:	d07c      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004528:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	461a      	mov	r2, r3
 8004552:	2301      	movs	r3, #1
 8004554:	6013      	str	r3, [r2, #0]
 8004556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800455a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	fa93 f3a3 	rbit	r3, r3
 8004562:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	461a      	mov	r2, r3
 8004576:	2300      	movs	r3, #0
 8004578:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800457a:	4a18      	ldr	r2, [pc, #96]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04b      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fd faab 	bl	8001ae4 <HAL_GetTick>
 800458e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fd faa7 	bl	8001ae4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e113      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80045a8:	2302      	movs	r3, #2
 80045aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
 80045b4:	2302      	movs	r3, #2
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	61fb      	str	r3, [r7, #28]
  return result;
 80045c0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f043 0302 	orr.w	r3, r3, #2
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d108      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045d6:	4b01      	ldr	r3, [pc, #4]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	e00d      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40007000 	.word	0x40007000
 80045e4:	10908100 	.word	0x10908100
 80045e8:	2302      	movs	r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	fa93 f3a3 	rbit	r3, r3
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	4b78      	ldr	r3, [pc, #480]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	2202      	movs	r2, #2
 80045fa:	613a      	str	r2, [r7, #16]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	fa92 f2a2 	rbit	r2, r2
 8004602:	60fa      	str	r2, [r7, #12]
  return result;
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	fab2 f282 	clz	r2, r2
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f002 021f 	and.w	r2, r2, #31
 8004616:	2101      	movs	r1, #1
 8004618:	fa01 f202 	lsl.w	r2, r1, r2
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0b7      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004622:	4b6d      	ldr	r3, [pc, #436]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	496a      	ldr	r1, [pc, #424]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004630:	4313      	orrs	r3, r2
 8004632:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b66      	ldr	r3, [pc, #408]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	4a65      	ldr	r2, [pc, #404]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004654:	4b60      	ldr	r3, [pc, #384]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	f023 0203 	bic.w	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	495d      	ldr	r1, [pc, #372]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004672:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4956      	ldr	r1, [pc, #344]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004690:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	494e      	ldr	r1, [pc, #312]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ae:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	f023 0210 	bic.w	r2, r3, #16
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4947      	ldr	r1, [pc, #284]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d008      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046cc:	4b42      	ldr	r3, [pc, #264]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	493f      	ldr	r1, [pc, #252]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d008      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ea:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f023 0220 	bic.w	r2, r3, #32
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4938      	ldr	r1, [pc, #224]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b00      	cmp	r3, #0
 8004706:	d008      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004708:	4b33      	ldr	r3, [pc, #204]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	4930      	ldr	r1, [pc, #192]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0310 	and.w	r3, r3, #16
 8004722:	2b00      	cmp	r3, #0
 8004724:	d008      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	4929      	ldr	r1, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004734:	4313      	orrs	r3, r2
 8004736:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004750:	4921      	ldr	r1, [pc, #132]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d008      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004762:	4b1d      	ldr	r3, [pc, #116]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	491a      	ldr	r1, [pc, #104]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004770:	4313      	orrs	r3, r2
 8004772:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004780:	4b15      	ldr	r3, [pc, #84]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004784:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	4912      	ldr	r1, [pc, #72]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478e:	4313      	orrs	r3, r2
 8004790:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	490b      	ldr	r1, [pc, #44]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3748      	adds	r7, #72	; 0x48
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	40021000 	.word	0x40021000

080047dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e09d      	b.n	800492a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fe:	d009      	beq.n	8004814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]
 8004806:	e005      	b.n	8004814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc fe48 	bl	80014c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004854:	d902      	bls.n	800485c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e002      	b.n	8004862 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800485c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004860:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800486a:	d007      	beq.n	800487c <HAL_SPI_Init+0xa0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004874:	d002      	beq.n	800487c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800488c:	431a      	orrs	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0301 	and.w	r3, r3, #1
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
 80048b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048be:	ea42 0103 	orr.w	r1, r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 0204 	and.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	f003 0310 	and.w	r3, r3, #16
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048f8:	ea42 0103 	orr.w	r1, r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004918:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e01a      	b.n	800497a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800495a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f7fc fdf3 	bl	8001548 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08a      	sub	sp, #40	; 0x28
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x26>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e20a      	b.n	8004dbe <HAL_SPI_TransmitReceive+0x43c>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b0:	f7fd f898 	bl	8001ae4 <HAL_GetTick>
 80049b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049cc:	7efb      	ldrb	r3, [r7, #27]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d00e      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x6e>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d8:	d106      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x66>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d003      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049ee:	e1e0      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x80>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x80>
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a08:	e1d3      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d003      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2205      	movs	r2, #5
 8004a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	887a      	ldrh	r2, [r7, #2]
 8004a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	887a      	ldrh	r2, [r7, #2]
 8004a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d802      	bhi.n	8004a68 <HAL_SPI_TransmitReceive+0xe6>
 8004a62:	8a3b      	ldrh	r3, [r7, #16]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d908      	bls.n	8004a7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	e007      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab0:	f240 8081 	bls.w	8004bb6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_SPI_TransmitReceive+0x140>
 8004abc:	8a7b      	ldrh	r3, [r7, #18]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d16d      	bne.n	8004b9e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	881a      	ldrh	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad2:	1c9a      	adds	r2, r3, #2
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae6:	e05a      	b.n	8004b9e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d11b      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x1ac>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d016      	beq.n	8004b2e <HAL_SPI_TransmitReceive+0x1ac>
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d113      	bne.n	8004b2e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d11c      	bne.n	8004b76 <HAL_SPI_TransmitReceive+0x1f4>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d016      	beq.n	8004b76 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	b292      	uxth	r2, r2
 8004b54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b72:	2301      	movs	r3, #1
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b76:	f7fc ffb5 	bl	8001ae4 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d80b      	bhi.n	8004b9e <HAL_SPI_TransmitReceive+0x21c>
 8004b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8c:	d007      	beq.n	8004b9e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004b9c:	e109      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d19f      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x166>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d199      	bne.n	8004ae8 <HAL_SPI_TransmitReceive+0x166>
 8004bb4:	e0e3      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_SPI_TransmitReceive+0x244>
 8004bbe:	8a7b      	ldrh	r3, [r7, #18]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 80cf 	bne.w	8004d64 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d912      	bls.n	8004bf6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd4:	881a      	ldrh	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	1c9a      	adds	r2, r3, #2
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b02      	subs	r3, #2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bf4:	e0b6      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	330c      	adds	r3, #12
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c1c:	e0a2      	b.n	8004d64 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d134      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x314>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d02f      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x314>
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d12c      	bne.n	8004c96 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d912      	bls.n	8004c6c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	1c9a      	adds	r2, r3, #2
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b02      	subs	r3, #2
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c6a:	e012      	b.n	8004c92 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d148      	bne.n	8004d36 <HAL_SPI_TransmitReceive+0x3b4>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d042      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d923      	bls.n	8004d04 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	1c9a      	adds	r2, r3, #2
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b02      	subs	r3, #2
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d81f      	bhi.n	8004d32 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	e016      	b.n	8004d32 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f103 020c 	add.w	r2, r3, #12
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	7812      	ldrb	r2, [r2, #0]
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d32:	2301      	movs	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d36:	f7fc fed5 	bl	8001ae4 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d803      	bhi.n	8004d4e <HAL_SPI_TransmitReceive+0x3cc>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d102      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x3d2>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d107      	bne.n	8004d64 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004d62:	e026      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f47f af57 	bne.w	8004c1e <HAL_SPI_TransmitReceive+0x29c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f47f af50 	bne.w	8004c1e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f94c 	bl	8005020 <SPI_EndRxTxTransaction>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2220      	movs	r2, #32
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da8:	e003      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004dba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3728      	adds	r7, #40	; 0x28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd4:	b2db      	uxtb	r3, r3
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004df4:	f7fc fe76 	bl	8001ae4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	4413      	add	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e04:	f7fc fe6e 	bl	8001ae4 <HAL_GetTick>
 8004e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e0a:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	015b      	lsls	r3, r3, #5
 8004e10:	0d1b      	lsrs	r3, r3, #20
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	fb02 f303 	mul.w	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1a:	e054      	b.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e22:	d050      	beq.n	8004ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e24:	f7fc fe5e 	bl	8001ae4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d902      	bls.n	8004e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d13d      	bne.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e52:	d111      	bne.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d004      	beq.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e66:	d107      	bne.n	8004e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e80:	d10f      	bne.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e017      	b.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	461a      	mov	r2, r3
 8004ede:	79fb      	ldrb	r3, [r7, #7]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d19b      	bne.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3720      	adds	r7, #32
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000040 	.word	0x20000040

08004ef4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f06:	f7fc fded 	bl	8001ae4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	4413      	add	r3, r2
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f16:	f7fc fde5 	bl	8001ae4 <HAL_GetTick>
 8004f1a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f24:	4b3d      	ldr	r3, [pc, #244]	; (800501c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	00da      	lsls	r2, r3, #3
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	0d1b      	lsrs	r3, r3, #20
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f3c:	e060      	b.n	8005000 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f44:	d107      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5c:	d050      	beq.n	8005000 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f5e:	f7fc fdc1 	bl	8001ae4 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d902      	bls.n	8004f74 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d13d      	bne.n	8004ff0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8c:	d111      	bne.n	8004fb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f96:	d004      	beq.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa0:	d107      	bne.n	8004fb2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fba:	d10f      	bne.n	8004fdc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e010      	b.n	8005012 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4013      	ands	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	429a      	cmp	r2, r3
 800500e:	d196      	bne.n	8004f3e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3728      	adds	r7, #40	; 0x28
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20000040 	.word	0x20000040

08005020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ff5b 	bl	8004ef4 <SPI_WaitFifoStateUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005048:	f043 0220 	orr.w	r2, r3, #32
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e027      	b.n	80050a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2200      	movs	r2, #0
 800505c:	2180      	movs	r1, #128	; 0x80
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fec0 	bl	8004de4 <SPI_WaitFlagStateUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e014      	b.n	80050a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	9300      	str	r3, [sp, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2200      	movs	r2, #0
 8005082:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f7ff ff34 	bl	8004ef4 <SPI_WaitFifoStateUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e000      	b.n	80050a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050b4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4013      	ands	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050e2:	b084      	sub	sp, #16
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	f107 0014 	add.w	r0, r7, #20
 80050f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	b004      	add	sp, #16
 8005122:	4770      	bx	lr

08005124 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 800512e:	2300      	movs	r3, #0
 8005130:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8005132:	1d3b      	adds	r3, r7, #4
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 800513a:	4b58      	ldr	r3, [pc, #352]	; (800529c <BSP_ACCELERO_Init+0x178>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	4798      	blx	r3
 8005140:	4603      	mov	r3, r0
 8005142:	2b33      	cmp	r3, #51	; 0x33
 8005144:	d14f      	bne.n	80051e6 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8005146:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <BSP_ACCELERO_Init+0x17c>)
 8005148:	4a54      	ldr	r2, [pc, #336]	; (800529c <BSP_ACCELERO_Init+0x178>)
 800514a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 800514c:	2300      	movs	r3, #0
 800514e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8005154:	2307      	movs	r3, #7
 8005156:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8005158:	2300      	movs	r3, #0
 800515a:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 800515c:	2300      	movs	r3, #0
 800515e:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8005160:	2300      	movs	r3, #0
 8005162:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8005164:	2308      	movs	r3, #8
 8005166:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8005168:	7b3a      	ldrb	r2, [r7, #12]
 800516a:	7b7b      	ldrb	r3, [r7, #13]
 800516c:	4313      	orrs	r3, r2
 800516e:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8005170:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8005172:	4313      	orrs	r3, r2
 8005174:	b2db      	uxtb	r3, r3
 8005176:	b29a      	uxth	r2, r3
 8005178:	8abb      	ldrh	r3, [r7, #20]
 800517a:	4313      	orrs	r3, r2
 800517c:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800517e:	7c3a      	ldrb	r2, [r7, #16]
 8005180:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8005182:	4313      	orrs	r3, r2
 8005184:	b2da      	uxtb	r2, r3
 8005186:	7cbb      	ldrb	r3, [r7, #18]
 8005188:	4313      	orrs	r3, r2
 800518a:	b2da      	uxtb	r2, r3
 800518c:	7bfb      	ldrb	r3, [r7, #15]
 800518e:	4313      	orrs	r3, r2
 8005190:	b2db      	uxtb	r3, r3
 8005192:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8005194:	b21a      	sxth	r2, r3
 8005196:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	b21b      	sxth	r3, r3
 800519e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80051a0:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <BSP_ACCELERO_Init+0x17c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	8aba      	ldrh	r2, [r7, #20]
 80051a8:	4610      	mov	r0, r2
 80051aa:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 80051b0:	2310      	movs	r3, #16
 80051b2:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80051bc:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80051be:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80051c0:	4313      	orrs	r3, r2
 80051c2:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80051c4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80051ca:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80051cc:	4313      	orrs	r3, r2
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80051d2:	4b33      	ldr	r3, [pc, #204]	; (80052a0 <BSP_ACCELERO_Init+0x17c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	8aba      	ldrh	r2, [r7, #20]
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3

    ret = ACCELERO_OK;
 80051e0:	2300      	movs	r3, #0
 80051e2:	75fb      	strb	r3, [r7, #23]
 80051e4:	e054      	b.n	8005290 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 80051e6:	4b2f      	ldr	r3, [pc, #188]	; (80052a4 <BSP_ACCELERO_Init+0x180>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	4798      	blx	r3
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b33      	cmp	r3, #51	; 0x33
 80051f0:	d14e      	bne.n	8005290 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 80051f2:	4b2b      	ldr	r3, [pc, #172]	; (80052a0 <BSP_ACCELERO_Init+0x17c>)
 80051f4:	4a2b      	ldr	r2, [pc, #172]	; (80052a4 <BSP_ACCELERO_Init+0x180>)
 80051f6:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 80051f8:	2300      	movs	r3, #0
 80051fa:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 80051fc:	2340      	movs	r3, #64	; 0x40
 80051fe:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8005200:	2307      	movs	r3, #7
 8005202:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8005204:	2300      	movs	r3, #0
 8005206:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8005208:	2300      	movs	r3, #0
 800520a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 800520c:	2300      	movs	r3, #0
 800520e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8005210:	2308      	movs	r3, #8
 8005212:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8005214:	7b3a      	ldrb	r2, [r7, #12]
 8005216:	7b7b      	ldrb	r3, [r7, #13]
 8005218:	4313      	orrs	r3, r2
 800521a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800521c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800521e:	4313      	orrs	r3, r2
 8005220:	b2db      	uxtb	r3, r3
 8005222:	b29a      	uxth	r2, r3
 8005224:	8abb      	ldrh	r3, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 800522a:	7c3a      	ldrb	r2, [r7, #16]
 800522c:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 800522e:	4313      	orrs	r3, r2
 8005230:	b2da      	uxtb	r2, r3
 8005232:	7cbb      	ldrb	r3, [r7, #18]
 8005234:	4313      	orrs	r3, r2
 8005236:	b2da      	uxtb	r2, r3
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	4313      	orrs	r3, r2
 800523c:	b2db      	uxtb	r3, r3
 800523e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8005240:	b21a      	sxth	r2, r3
 8005242:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	b21b      	sxth	r3, r3
 800524a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <BSP_ACCELERO_Init+0x17c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	8aba      	ldrh	r2, [r7, #20]
 8005254:	4610      	mov	r0, r2
 8005256:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8005258:	2380      	movs	r3, #128	; 0x80
 800525a:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 800525c:	2310      	movs	r3, #16
 800525e:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8005260:	2300      	movs	r3, #0
 8005262:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8005264:	2300      	movs	r3, #0
 8005266:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8005268:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800526a:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800526c:	4313      	orrs	r3, r2
 800526e:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8005270:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8005272:	4313      	orrs	r3, r2
 8005274:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8005276:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8005278:	4313      	orrs	r3, r2
 800527a:	b2db      	uxtb	r3, r3
 800527c:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <BSP_ACCELERO_Init+0x17c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	8aba      	ldrh	r2, [r7, #20]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	4610      	mov	r0, r2
 800528a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005290:	7dfb      	ldrb	r3, [r7, #23]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200000ec 	.word	0x200000ec
 80052a0:	200006cc 	.word	0x200006cc
 80052a4:	200000b8 	.word	0x200000b8

080052a8 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80052b2:	2300      	movs	r3, #0
 80052b4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80052b6:	2300      	movs	r3, #0
 80052b8:	703b      	strb	r3, [r7, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80052be:	4b52      	ldr	r3, [pc, #328]	; (8005408 <BSP_GYRO_Init+0x160>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	4798      	blx	r3
 80052c4:	4603      	mov	r3, r0
 80052c6:	2bd4      	cmp	r3, #212	; 0xd4
 80052c8:	d005      	beq.n	80052d6 <BSP_GYRO_Init+0x2e>
 80052ca:	4b4f      	ldr	r3, [pc, #316]	; (8005408 <BSP_GYRO_Init+0x160>)
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	4798      	blx	r3
 80052d0:	4603      	mov	r3, r0
 80052d2:	2bd5      	cmp	r3, #213	; 0xd5
 80052d4:	d146      	bne.n	8005364 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80052d6:	4b4d      	ldr	r3, [pc, #308]	; (800540c <BSP_GYRO_Init+0x164>)
 80052d8:	4a4b      	ldr	r2, [pc, #300]	; (8005408 <BSP_GYRO_Init+0x160>)
 80052da:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80052dc:	2308      	movs	r3, #8
 80052de:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80052e0:	2300      	movs	r3, #0
 80052e2:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80052e4:	2307      	movs	r3, #7
 80052e6:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80052e8:	2330      	movs	r3, #48	; 0x30
 80052ea:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80052ec:	2300      	movs	r3, #0
 80052ee:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80052f0:	2300      	movs	r3, #0
 80052f2:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 80052f4:	2310      	movs	r3, #16
 80052f6:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80052f8:	793a      	ldrb	r2, [r7, #4]
 80052fa:	797b      	ldrb	r3, [r7, #5]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005300:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005302:	4313      	orrs	r3, r2
 8005304:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005306:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005308:	4313      	orrs	r3, r2
 800530a:	b2db      	uxtb	r3, r3
 800530c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800530e:	7a3a      	ldrb	r2, [r7, #8]
 8005310:	7a7b      	ldrb	r3, [r7, #9]
 8005312:	4313      	orrs	r3, r2
 8005314:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005316:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005318:	4313      	orrs	r3, r2
 800531a:	b2db      	uxtb	r3, r3
 800531c:	b29b      	uxth	r3, r3
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	b29a      	uxth	r2, r3
 8005322:	89bb      	ldrh	r3, [r7, #12]
 8005324:	4313      	orrs	r3, r2
 8005326:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8005328:	4b38      	ldr	r3, [pc, #224]	; (800540c <BSP_GYRO_Init+0x164>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	89ba      	ldrh	r2, [r7, #12]
 8005330:	4610      	mov	r0, r2
 8005332:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8005334:	2300      	movs	r3, #0
 8005336:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8005338:	2300      	movs	r3, #0
 800533a:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800533c:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800533e:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005340:	4313      	orrs	r3, r2
 8005342:	b2db      	uxtb	r3, r3
 8005344:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8005346:	4b31      	ldr	r3, [pc, #196]	; (800540c <BSP_GYRO_Init+0x164>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	89ba      	ldrh	r2, [r7, #12]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	4610      	mov	r0, r2
 8005352:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8005354:	4b2d      	ldr	r3, [pc, #180]	; (800540c <BSP_GYRO_Init+0x164>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535a:	2010      	movs	r0, #16
 800535c:	4798      	blx	r3

    ret = GYRO_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
 8005362:	e04b      	b.n	80053fc <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8005364:	4b2a      	ldr	r3, [pc, #168]	; (8005410 <BSP_GYRO_Init+0x168>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4798      	blx	r3
 800536a:	4603      	mov	r3, r0
 800536c:	2bd3      	cmp	r3, #211	; 0xd3
 800536e:	d145      	bne.n	80053fc <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8005370:	4b26      	ldr	r3, [pc, #152]	; (800540c <BSP_GYRO_Init+0x164>)
 8005372:	4a27      	ldr	r2, [pc, #156]	; (8005410 <BSP_GYRO_Init+0x168>)
 8005374:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8005376:	2308      	movs	r3, #8
 8005378:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 800537a:	2300      	movs	r3, #0
 800537c:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 800537e:	2307      	movs	r3, #7
 8005380:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8005382:	2330      	movs	r3, #48	; 0x30
 8005384:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8005386:	2300      	movs	r3, #0
 8005388:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 800538a:	2300      	movs	r3, #0
 800538c:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800538e:	2310      	movs	r3, #16
 8005390:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005392:	793a      	ldrb	r2, [r7, #4]
 8005394:	797b      	ldrb	r3, [r7, #5]
 8005396:	4313      	orrs	r3, r2
 8005398:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800539a:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800539c:	4313      	orrs	r3, r2
 800539e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80053a0:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80053a2:	4313      	orrs	r3, r2
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80053a8:	7a3a      	ldrb	r2, [r7, #8]
 80053aa:	7a7b      	ldrb	r3, [r7, #9]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80053b0:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	021b      	lsls	r3, r3, #8
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	89bb      	ldrh	r3, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <BSP_GYRO_Init+0x164>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	89ba      	ldrh	r2, [r7, #12]
 80053ca:	4610      	mov	r0, r2
 80053cc:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 80053ce:	2300      	movs	r3, #0
 80053d0:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80053d6:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80053d8:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80053da:	4313      	orrs	r3, r2
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <BSP_GYRO_Init+0x164>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e6:	89ba      	ldrh	r2, [r7, #12]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	4610      	mov	r0, r2
 80053ec:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <BSP_GYRO_Init+0x164>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	2010      	movs	r0, #16
 80053f6:	4798      	blx	r3

    ret = GYRO_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000084 	.word	0x20000084
 800540c:	200006d0 	.word	0x200006d0
 8005410:	20000050 	.word	0x20000050

08005414 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <BSP_GYRO_GetXYZ+0x24>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8005426:	4b04      	ldr	r3, [pc, #16]	; (8005438 <BSP_GYRO_GetXYZ+0x24>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	4798      	blx	r3
  }
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	200006d0 	.word	0x200006d0

0800543c <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005446:	2300      	movs	r3, #0
 8005448:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 800544a:	f001 f8df 	bl	800660c <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8005454:	f107 030f 	add.w	r3, r7, #15
 8005458:	2201      	movs	r2, #1
 800545a:	2120      	movs	r1, #32
 800545c:	4618      	mov	r0, r3
 800545e:	f001 f91b 	bl	8006698 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	b29b      	uxth	r3, r3
 8005468:	b2db      	uxtb	r3, r3
 800546a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 800546c:	f107 030f 	add.w	r3, r7, #15
 8005470:	2201      	movs	r2, #1
 8005472:	2123      	movs	r1, #35	; 0x23
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f90f 	bl	8006698 <GYRO_IO_Write>
}
 800547a:	bf00      	nop
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8005482:	b480      	push	{r7}
 8005484:	af00      	add	r7, sp, #0
}
 8005486:	bf00      	nop
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8005496:	f001 f8b9 	bl	800660c <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800549a:	1dfb      	adds	r3, r7, #7
 800549c:	2201      	movs	r2, #1
 800549e:	210f      	movs	r1, #15
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 f92b 	bl	80066fc <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 80054a6:	79fb      	ldrb	r3, [r7, #7]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80054b6:	1dfb      	adds	r3, r7, #7
 80054b8:	2201      	movs	r2, #1
 80054ba:	2124      	movs	r1, #36	; 0x24
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 f91d 	bl	80066fc <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80054cc:	1dfb      	adds	r3, r7, #7
 80054ce:	2201      	movs	r2, #1
 80054d0:	2124      	movs	r1, #36	; 0x24
 80054d2:	4618      	mov	r0, r3
 80054d4:	f001 f8e0 	bl	8006698 <GYRO_IO_Write>
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80054f4:	f107 030f 	add.w	r3, r7, #15
 80054f8:	2201      	movs	r2, #1
 80054fa:	2120      	movs	r1, #32
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 f8cb 	bl	8006698 <GYRO_IO_Write>
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	4603      	mov	r3, r0
 8005512:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005514:	2300      	movs	r3, #0
 8005516:	73fb      	strb	r3, [r7, #15]
 8005518:	2300      	movs	r3, #0
 800551a:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800551c:	f107 030f 	add.w	r3, r7, #15
 8005520:	2201      	movs	r2, #1
 8005522:	2130      	movs	r1, #48	; 0x30
 8005524:	4618      	mov	r0, r3
 8005526:	f001 f8e9 	bl	80066fc <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800552a:	f107 030e 	add.w	r3, r7, #14
 800552e:	2201      	movs	r2, #1
 8005530:	2122      	movs	r1, #34	; 0x22
 8005532:	4618      	mov	r0, r3
 8005534:	f001 f8e2 	bl	80066fc <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800553e:	b2db      	uxtb	r3, r3
 8005540:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	b2db      	uxtb	r3, r3
 8005546:	121b      	asrs	r3, r3, #8
 8005548:	b25a      	sxtb	r2, r3
 800554a:	7bfb      	ldrb	r3, [r7, #15]
 800554c:	b25b      	sxtb	r3, r3
 800554e:	4313      	orrs	r3, r2
 8005550:	b25b      	sxtb	r3, r3
 8005552:	b2db      	uxtb	r3, r3
 8005554:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 8005556:	7bbb      	ldrb	r3, [r7, #14]
 8005558:	f023 0320 	bic.w	r3, r3, #32
 800555c:	b2db      	uxtb	r3, r3
 800555e:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	4313      	orrs	r3, r2
 8005568:	b2db      	uxtb	r3, r3
 800556a:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800556c:	f107 030f 	add.w	r3, r7, #15
 8005570:	2201      	movs	r2, #1
 8005572:	2130      	movs	r1, #48	; 0x30
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f88f 	bl	8006698 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 800557a:	f107 030e 	add.w	r3, r7, #14
 800557e:	2201      	movs	r2, #1
 8005580:	2122      	movs	r1, #34	; 0x22
 8005582:	4618      	mov	r0, r3
 8005584:	f001 f888 	bl	8006698 <GYRO_IO_Write>
}
 8005588:	bf00      	nop
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	4603      	mov	r3, r0
 8005598:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800559a:	f107 030f 	add.w	r3, r7, #15
 800559e:	2201      	movs	r2, #1
 80055a0:	2122      	movs	r1, #34	; 0x22
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f8aa 	bl	80066fc <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	73fb      	strb	r3, [r7, #15]
 80055c2:	e00c      	b.n	80055de <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d109      	bne.n	80055de <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	f023 0308 	bic.w	r3, r3, #8
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	f043 0308 	orr.w	r3, r3, #8
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80055de:	f107 030f 	add.w	r3, r7, #15
 80055e2:	2201      	movs	r2, #1
 80055e4:	2122      	movs	r1, #34	; 0x22
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f856 	bl	8006698 <GYRO_IO_Write>
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80055fe:	f107 030f 	add.w	r3, r7, #15
 8005602:	2201      	movs	r2, #1
 8005604:	2122      	movs	r1, #34	; 0x22
 8005606:	4618      	mov	r0, r3
 8005608:	f001 f878 	bl	80066fc <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005618:	b2db      	uxtb	r3, r3
 800561a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e009      	b.n	8005636 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 8005622:	79fb      	ldrb	r3, [r7, #7]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d106      	bne.n	8005636 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	f023 0308 	bic.w	r3, r3, #8
 800562e:	b2db      	uxtb	r3, r3
 8005630:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8005636:	f107 030f 	add.w	r3, r7, #15
 800563a:	2201      	movs	r2, #1
 800563c:	2122      	movs	r1, #34	; 0x22
 800563e:	4618      	mov	r0, r3
 8005640:	f001 f82a 	bl	8006698 <GYRO_IO_Write>
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8005656:	f107 030f 	add.w	r3, r7, #15
 800565a:	2201      	movs	r2, #1
 800565c:	2121      	movs	r1, #33	; 0x21
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f84c 	bl	80066fc <GYRO_IO_Read>

  tmpreg &= 0xC0;
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800566a:	b2db      	uxtb	r3, r3
 800566c:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800566e:	7bfa      	ldrb	r2, [r7, #15]
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	4313      	orrs	r3, r2
 8005674:	b2db      	uxtb	r3, r3
 8005676:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 8005678:	f107 030f 	add.w	r3, r7, #15
 800567c:	2201      	movs	r2, #1
 800567e:	2121      	movs	r1, #33	; 0x21
 8005680:	4618      	mov	r0, r3
 8005682:	f001 f809 	bl	8006698 <GYRO_IO_Write>
}
 8005686:	bf00      	nop
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	4603      	mov	r3, r0
 8005696:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005698:	f107 030f 	add.w	r3, r7, #15
 800569c:	2201      	movs	r2, #1
 800569e:	2124      	movs	r1, #36	; 0x24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 f82b 	bl	80066fc <GYRO_IO_Read>

  tmpreg &= 0xEF;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	f023 0310 	bic.w	r3, r3, #16
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 80056b0:	7bfa      	ldrb	r2, [r7, #15]
 80056b2:	79fb      	ldrb	r3, [r7, #7]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 80056ba:	f107 030f 	add.w	r3, r7, #15
 80056be:	2201      	movs	r2, #1
 80056c0:	2124      	movs	r1, #36	; 0x24
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 ffe8 	bl	8006698 <GYRO_IO_Write>
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	; 0x28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 80056d8:	2300      	movs	r3, #0
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	2300      	movs	r3, #0
 80056de:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80056e0:	f107 0310 	add.w	r3, r7, #16
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80056ea:	2300      	movs	r3, #0
 80056ec:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 80056f8:	f107 030f 	add.w	r3, r7, #15
 80056fc:	2201      	movs	r2, #1
 80056fe:	2123      	movs	r1, #35	; 0x23
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fffb 	bl	80066fc <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8005706:	f107 0318 	add.w	r3, r7, #24
 800570a:	2206      	movs	r2, #6
 800570c:	2128      	movs	r1, #40	; 0x28
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fff4 	bl	80066fc <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8005714:	7bfb      	ldrb	r3, [r7, #15]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d123      	bne.n	8005766 <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 800571e:	2300      	movs	r3, #0
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	e01c      	b.n	800575e <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	005b      	lsls	r3, r3, #1
 8005728:	3301      	adds	r3, #1
 800572a:	3328      	adds	r3, #40	; 0x28
 800572c:	443b      	add	r3, r7
 800572e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005732:	b29b      	uxth	r3, r3
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	b29a      	uxth	r2, r3
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	005b      	lsls	r3, r3, #1
 800573c:	3328      	adds	r3, #40	; 0x28
 800573e:	443b      	add	r3, r7
 8005740:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005744:	b29b      	uxth	r3, r3
 8005746:	4413      	add	r3, r2
 8005748:	b29b      	uxth	r3, r3
 800574a:	b21a      	sxth	r2, r3
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	3328      	adds	r3, #40	; 0x28
 8005752:	443b      	add	r3, r7
 8005754:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	3301      	adds	r3, #1
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	2b02      	cmp	r3, #2
 8005762:	dddf      	ble.n	8005724 <I3G4250D_ReadXYZAngRate+0x54>
 8005764:	e022      	b.n	80057ac <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	623b      	str	r3, [r7, #32]
 800576a:	e01c      	b.n	80057a6 <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	3328      	adds	r3, #40	; 0x28
 8005772:	443b      	add	r3, r7
 8005774:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005778:	b29b      	uxth	r3, r3
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	b29a      	uxth	r2, r3
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	3301      	adds	r3, #1
 8005784:	3328      	adds	r3, #40	; 0x28
 8005786:	443b      	add	r3, r7
 8005788:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800578c:	b29b      	uxth	r3, r3
 800578e:	4413      	add	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	b21a      	sxth	r2, r3
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	3328      	adds	r3, #40	; 0x28
 800579a:	443b      	add	r3, r7
 800579c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	3301      	adds	r3, #1
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	dddf      	ble.n	800576c <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
 80057ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d00c      	beq.n	80057d0 <I3G4250D_ReadXYZAngRate+0x100>
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	dc0d      	bgt.n	80057d6 <I3G4250D_ReadXYZAngRate+0x106>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <I3G4250D_ReadXYZAngRate+0xf4>
 80057be:	2b10      	cmp	r3, #16
 80057c0:	d003      	beq.n	80057ca <I3G4250D_ReadXYZAngRate+0xfa>
 80057c2:	e008      	b.n	80057d6 <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80057c4:	4b15      	ldr	r3, [pc, #84]	; (800581c <I3G4250D_ReadXYZAngRate+0x14c>)
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80057c8:	e005      	b.n	80057d6 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <I3G4250D_ReadXYZAngRate+0x150>)
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80057ce:	e002      	b.n	80057d6 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 80057d0:	4b14      	ldr	r3, [pc, #80]	; (8005824 <I3G4250D_ReadXYZAngRate+0x154>)
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80057d4:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	e016      	b.n	800580a <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	3328      	adds	r3, #40	; 0x28
 80057e2:	443b      	add	r3, r7
 80057e4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80057e8:	ee07 3a90 	vmov	s15, r3
 80057ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4413      	add	r3, r2
 80057f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005800:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	3301      	adds	r3, #1
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2b02      	cmp	r3, #2
 800580e:	dde5      	ble.n	80057dc <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8005810:	bf00      	nop
 8005812:	bf00      	nop
 8005814:	3728      	adds	r7, #40	; 0x28
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	410c0000 	.word	0x410c0000
 8005820:	418c0000 	.word	0x418c0000
 8005824:	428c0000 	.word	0x428c0000

08005828 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8005836:	f000 fee9 	bl	800660c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800583a:	88fb      	ldrh	r3, [r7, #6]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005840:	f107 030f 	add.w	r3, r7, #15
 8005844:	2201      	movs	r2, #1
 8005846:	2120      	movs	r1, #32
 8005848:	4618      	mov	r0, r3
 800584a:	f000 ff25 	bl	8006698 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 800584e:	88fb      	ldrh	r3, [r7, #6]
 8005850:	0a1b      	lsrs	r3, r3, #8
 8005852:	b29b      	uxth	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8005858:	f107 030f 	add.w	r3, r7, #15
 800585c:	2201      	movs	r2, #1
 800585e:	2123      	movs	r1, #35	; 0x23
 8005860:	4618      	mov	r0, r3
 8005862:	f000 ff19 	bl	8006698 <GYRO_IO_Write>
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8005882:	f000 fec3 	bl	800660c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8005886:	1dfb      	adds	r3, r7, #7
 8005888:	2201      	movs	r2, #1
 800588a:	210f      	movs	r1, #15
 800588c:	4618      	mov	r0, r3
 800588e:	f000 ff35 	bl	80066fc <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8005892:	79fb      	ldrb	r3, [r7, #7]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80058a2:	1dfb      	adds	r3, r7, #7
 80058a4:	2201      	movs	r2, #1
 80058a6:	2124      	movs	r1, #36	; 0x24
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 ff27 	bl	80066fc <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80058ae:	79fb      	ldrb	r3, [r7, #7]
 80058b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80058b8:	1dfb      	adds	r3, r7, #7
 80058ba:	2201      	movs	r2, #1
 80058bc:	2124      	movs	r1, #36	; 0x24
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 feea 	bl	8006698 <GYRO_IO_Write>
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	4603      	mov	r3, r0
 80058d4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80058e0:	f107 030f 	add.w	r3, r7, #15
 80058e4:	2201      	movs	r2, #1
 80058e6:	2120      	movs	r1, #32
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fed5 	bl	8006698 <GYRO_IO_Write>
}
 80058ee:	bf00      	nop
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
 8005904:	2300      	movs	r3, #0
 8005906:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005908:	f107 030f 	add.w	r3, r7, #15
 800590c:	2201      	movs	r2, #1
 800590e:	2130      	movs	r1, #48	; 0x30
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fef3 	bl	80066fc <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8005916:	f107 030e 	add.w	r3, r7, #14
 800591a:	2201      	movs	r2, #1
 800591c:	2122      	movs	r1, #34	; 0x22
 800591e:	4618      	mov	r0, r3
 8005920:	f000 feec 	bl	80066fc <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800592a:	b2db      	uxtb	r3, r3
 800592c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	121b      	asrs	r3, r3, #8
 8005934:	b25a      	sxtb	r2, r3
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	b25b      	sxtb	r3, r3
 800593a:	4313      	orrs	r3, r2
 800593c:	b25b      	sxtb	r3, r3
 800593e:	b2db      	uxtb	r3, r3
 8005940:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	f023 0320 	bic.w	r3, r3, #32
 8005948:	b2db      	uxtb	r3, r3
 800594a:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	b2da      	uxtb	r2, r3
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	4313      	orrs	r3, r2
 8005954:	b2db      	uxtb	r3, r3
 8005956:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005958:	f107 030f 	add.w	r3, r7, #15
 800595c:	2201      	movs	r2, #1
 800595e:	2130      	movs	r1, #48	; 0x30
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fe99 	bl	8006698 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8005966:	f107 030e 	add.w	r3, r7, #14
 800596a:	2201      	movs	r2, #1
 800596c:	2122      	movs	r1, #34	; 0x22
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fe92 	bl	8006698 <GYRO_IO_Write>
}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005986:	f107 030f 	add.w	r3, r7, #15
 800598a:	2201      	movs	r2, #1
 800598c:	2122      	movs	r1, #34	; 0x22
 800598e:	4618      	mov	r0, r3
 8005990:	f000 feb4 	bl	80066fc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	73fb      	strb	r3, [r7, #15]
 80059ae:	e00c      	b.n	80059ca <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d109      	bne.n	80059ca <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	f023 0308 	bic.w	r3, r3, #8
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	f043 0308 	orr.w	r3, r3, #8
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80059ca:	f107 030f 	add.w	r3, r7, #15
 80059ce:	2201      	movs	r2, #1
 80059d0:	2122      	movs	r1, #34	; 0x22
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fe60 	bl	8006698 <GYRO_IO_Write>
}
 80059d8:	bf00      	nop
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80059ea:	f107 030f 	add.w	r3, r7, #15
 80059ee:	2201      	movs	r2, #1
 80059f0:	2122      	movs	r1, #34	; 0x22
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fe82 	bl	80066fc <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d107      	bne.n	8005a0e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8005a08:	7bfb      	ldrb	r3, [r7, #15]
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e009      	b.n	8005a22 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	f023 0308 	bic.w	r3, r3, #8
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8005a1e:	7bfb      	ldrb	r3, [r7, #15]
 8005a20:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a22:	f107 030f 	add.w	r3, r7, #15
 8005a26:	2201      	movs	r2, #1
 8005a28:	2122      	movs	r1, #34	; 0x22
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fe34 	bl	8006698 <GYRO_IO_Write>
}
 8005a30:	bf00      	nop
 8005a32:	3710      	adds	r7, #16
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	4603      	mov	r3, r0
 8005a40:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005a42:	f107 030f 	add.w	r3, r7, #15
 8005a46:	2201      	movs	r2, #1
 8005a48:	2121      	movs	r1, #33	; 0x21
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fe56 	bl	80066fc <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
 8005a52:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005a64:	f107 030f 	add.w	r3, r7, #15
 8005a68:	2201      	movs	r2, #1
 8005a6a:	2121      	movs	r1, #33	; 0x21
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fe13 	bl	8006698 <GYRO_IO_Write>
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	4603      	mov	r3, r0
 8005a82:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005a84:	f107 030f 	add.w	r3, r7, #15
 8005a88:	2201      	movs	r2, #1
 8005a8a:	2124      	movs	r1, #36	; 0x24
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fe35 	bl	80066fc <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
 8005a94:	f023 0310 	bic.w	r3, r3, #16
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	79fb      	ldrb	r3, [r7, #7]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005aa6:	f107 030f 	add.w	r3, r7, #15
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2124      	movs	r1, #36	; 0x24
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fdf2 	bl	8006698 <GYRO_IO_Write>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005ae4:	f107 030f 	add.w	r3, r7, #15
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2123      	movs	r1, #35	; 0x23
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fe05 	bl	80066fc <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8005af2:	f107 0318 	add.w	r3, r7, #24
 8005af6:	2206      	movs	r2, #6
 8005af8:	2128      	movs	r1, #40	; 0x28
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fdfe 	bl	80066fc <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d123      	bne.n	8005b52 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	623b      	str	r3, [r7, #32]
 8005b0e:	e01c      	b.n	8005b4a <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	3301      	adds	r3, #1
 8005b16:	3328      	adds	r3, #40	; 0x28
 8005b18:	443b      	add	r3, r7
 8005b1a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	021b      	lsls	r3, r3, #8
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	3328      	adds	r3, #40	; 0x28
 8005b2a:	443b      	add	r3, r7
 8005b2c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	b21a      	sxth	r2, r3
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	005b      	lsls	r3, r3, #1
 8005b3c:	3328      	adds	r3, #40	; 0x28
 8005b3e:	443b      	add	r3, r7
 8005b40:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	3301      	adds	r3, #1
 8005b48:	623b      	str	r3, [r7, #32]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	dddf      	ble.n	8005b10 <L3GD20_ReadXYZAngRate+0x54>
 8005b50:	e022      	b.n	8005b98 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8005b52:	2300      	movs	r3, #0
 8005b54:	623b      	str	r3, [r7, #32]
 8005b56:	e01c      	b.n	8005b92 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	3328      	adds	r3, #40	; 0x28
 8005b5e:	443b      	add	r3, r7
 8005b60:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	3301      	adds	r3, #1
 8005b70:	3328      	adds	r3, #40	; 0x28
 8005b72:	443b      	add	r3, r7
 8005b74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	b21a      	sxth	r2, r3
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	3328      	adds	r3, #40	; 0x28
 8005b86:	443b      	add	r3, r7
 8005b88:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	623b      	str	r3, [r7, #32]
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	dddf      	ble.n	8005b58 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d00c      	beq.n	8005bbc <L3GD20_ReadXYZAngRate+0x100>
 8005ba2:	2b20      	cmp	r3, #32
 8005ba4:	dc0d      	bgt.n	8005bc2 <L3GD20_ReadXYZAngRate+0x106>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <L3GD20_ReadXYZAngRate+0xf4>
 8005baa:	2b10      	cmp	r3, #16
 8005bac:	d003      	beq.n	8005bb6 <L3GD20_ReadXYZAngRate+0xfa>
 8005bae:	e008      	b.n	8005bc2 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8005bb0:	4b15      	ldr	r3, [pc, #84]	; (8005c08 <L3GD20_ReadXYZAngRate+0x14c>)
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005bb4:	e005      	b.n	8005bc2 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8005bb6:	4b15      	ldr	r3, [pc, #84]	; (8005c0c <L3GD20_ReadXYZAngRate+0x150>)
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005bba:	e002      	b.n	8005bc2 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8005bbc:	4b14      	ldr	r3, [pc, #80]	; (8005c10 <L3GD20_ReadXYZAngRate+0x154>)
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005bc0:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	623b      	str	r3, [r7, #32]
 8005bc6:	e016      	b.n	8005bf6 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	3328      	adds	r3, #40	; 0x28
 8005bce:	443b      	add	r3, r7
 8005bd0:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bdc:	6a3b      	ldr	r3, [r7, #32]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bec:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	623b      	str	r3, [r7, #32]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	dde5      	ble.n	8005bc8 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	bf00      	nop
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	410c0000 	.word	0x410c0000
 8005c0c:	418c0000 	.word	0x418c0000
 8005c10:	428c0000 	.word	0x428c0000

08005c14 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005c22:	f000 fda5 	bl	8006770 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005c26:	88fb      	ldrh	r3, [r7, #6]
 8005c28:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	2120      	movs	r1, #32
 8005c30:	2032      	movs	r0, #50	; 0x32
 8005c32:	f000 fe15 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8005c36:	2300      	movs	r3, #0
 8005c38:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2123      	movs	r1, #35	; 0x23
 8005c40:	2032      	movs	r0, #50	; 0x32
 8005c42:	f000 fe0d 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8005c4e:	b480      	push	{r7}
 8005c50:	af00      	add	r7, sp, #0
}
 8005c52:	bf00      	nop
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005c62:	2300      	movs	r3, #0
 8005c64:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8005c66:	f000 fd83 	bl	8006770 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8005c6a:	210f      	movs	r1, #15
 8005c6c:	2032      	movs	r0, #50	; 0x32
 8005c6e:	f000 fe0a 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005c72:	4603      	mov	r3, r0
 8005c74:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8005c76:	79fb      	ldrb	r3, [r7, #7]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8005c86:	2124      	movs	r1, #36	; 0x24
 8005c88:	2032      	movs	r0, #50	; 0x32
 8005c8a:	f000 fdfc 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c98:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8005c9a:	79fb      	ldrb	r3, [r7, #7]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2124      	movs	r1, #36	; 0x24
 8005ca0:	2032      	movs	r0, #50	; 0x32
 8005ca2:	f000 fddd 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005cb8:	2121      	movs	r1, #33	; 0x21
 8005cba:	2032      	movs	r0, #50	; 0x32
 8005cbc:	f000 fde3 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
 8005cca:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8005ccc:	7bfa      	ldrb	r2, [r7, #15]
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005cd4:	7bfb      	ldrb	r3, [r7, #15]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	2121      	movs	r1, #33	; 0x21
 8005cda:	2032      	movs	r0, #50	; 0x32
 8005cdc:	f000 fdc0 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005ce0:	bf00      	nop
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	4603      	mov	r3, r0
 8005cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005cf2:	2121      	movs	r1, #33	; 0x21
 8005cf4:	2032      	movs	r0, #50	; 0x32
 8005cf6:	f000 fdc6 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8005cfe:	7bfb      	ldrb	r3, [r7, #15]
 8005d00:	f023 0308 	bic.w	r3, r3, #8
 8005d04:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	79fb      	ldrb	r3, [r7, #7]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	461a      	mov	r2, r3
 8005d12:	2121      	movs	r1, #33	; 0x21
 8005d14:	2032      	movs	r0, #50	; 0x32
 8005d16:	f000 fda3 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b088      	sub	sp, #32
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8005d32:	2301      	movs	r3, #1
 8005d34:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8005d36:	2123      	movs	r1, #35	; 0x23
 8005d38:	2032      	movs	r0, #50	; 0x32
 8005d3a:	f000 fda4 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8005d42:	2124      	movs	r1, #36	; 0x24
 8005d44:	2032      	movs	r0, #50	; 0x32
 8005d46:	f000 fd9e 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8005d4e:	2128      	movs	r1, #40	; 0x28
 8005d50:	2032      	movs	r0, #50	; 0x32
 8005d52:	f000 fd98 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d56:	4603      	mov	r3, r0
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8005d5c:	2129      	movs	r1, #41	; 0x29
 8005d5e:	2032      	movs	r0, #50	; 0x32
 8005d60:	f000 fd91 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d64:	4603      	mov	r3, r0
 8005d66:	b25b      	sxtb	r3, r3
 8005d68:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8005d6a:	212a      	movs	r1, #42	; 0x2a
 8005d6c:	2032      	movs	r0, #50	; 0x32
 8005d6e:	f000 fd8a 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d72:	4603      	mov	r3, r0
 8005d74:	b25b      	sxtb	r3, r3
 8005d76:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8005d78:	212b      	movs	r1, #43	; 0x2b
 8005d7a:	2032      	movs	r0, #50	; 0x32
 8005d7c:	f000 fd83 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d80:	4603      	mov	r3, r0
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8005d86:	212c      	movs	r1, #44	; 0x2c
 8005d88:	2032      	movs	r0, #50	; 0x32
 8005d8a:	f000 fd7c 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8005d94:	212d      	movs	r1, #45	; 0x2d
 8005d96:	2032      	movs	r0, #50	; 0x32
 8005d98:	f000 fd75 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	b25b      	sxtb	r3, r3
 8005da0:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8005da2:	7d3b      	ldrb	r3, [r7, #20]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d123      	bne.n	8005df4 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	77fb      	strb	r3, [r7, #31]
 8005db0:	e01c      	b.n	8005dec <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8005db2:	7ffb      	ldrb	r3, [r7, #31]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	3301      	adds	r3, #1
 8005db8:	3320      	adds	r3, #32
 8005dba:	443b      	add	r3, r7
 8005dbc:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	7ffb      	ldrb	r3, [r7, #31]
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	3320      	adds	r3, #32
 8005dcc:	443b      	add	r3, r7
 8005dce:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	4413      	add	r3, r2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	7ffb      	ldrb	r3, [r7, #31]
 8005dda:	b212      	sxth	r2, r2
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	3320      	adds	r3, #32
 8005de0:	443b      	add	r3, r7
 8005de2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005de6:	7ffb      	ldrb	r3, [r7, #31]
 8005de8:	3301      	adds	r3, #1
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	7ffb      	ldrb	r3, [r7, #31]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d9df      	bls.n	8005db2 <LSM303AGR_AccReadXYZ+0x90>
 8005df2:	e022      	b.n	8005e3a <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8005df4:	2300      	movs	r3, #0
 8005df6:	77fb      	strb	r3, [r7, #31]
 8005df8:	e01c      	b.n	8005e34 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8005dfa:	7ffb      	ldrb	r3, [r7, #31]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	3320      	adds	r3, #32
 8005e00:	443b      	add	r3, r7
 8005e02:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	7ffb      	ldrb	r3, [r7, #31]
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	3301      	adds	r3, #1
 8005e12:	3320      	adds	r3, #32
 8005e14:	443b      	add	r3, r7
 8005e16:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	7ffb      	ldrb	r3, [r7, #31]
 8005e22:	b212      	sxth	r2, r2
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	3320      	adds	r3, #32
 8005e28:	443b      	add	r3, r7
 8005e2a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005e2e:	7ffb      	ldrb	r3, [r7, #31]
 8005e30:	3301      	adds	r3, #1
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	7ffb      	ldrb	r3, [r7, #31]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d9df      	bls.n	8005dfa <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8005e3a:	7d3b      	ldrb	r3, [r7, #20]
 8005e3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e40:	2b30      	cmp	r3, #48	; 0x30
 8005e42:	d013      	beq.n	8005e6c <LSM303AGR_AccReadXYZ+0x14a>
 8005e44:	2b30      	cmp	r3, #48	; 0x30
 8005e46:	dc14      	bgt.n	8005e72 <LSM303AGR_AccReadXYZ+0x150>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d00c      	beq.n	8005e66 <LSM303AGR_AccReadXYZ+0x144>
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	dc10      	bgt.n	8005e72 <LSM303AGR_AccReadXYZ+0x150>
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <LSM303AGR_AccReadXYZ+0x138>
 8005e54:	2b10      	cmp	r3, #16
 8005e56:	d003      	beq.n	8005e60 <LSM303AGR_AccReadXYZ+0x13e>
 8005e58:	e00b      	b.n	8005e72 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	77bb      	strb	r3, [r7, #30]
    break;
 8005e5e:	e008      	b.n	8005e72 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8005e60:	2302      	movs	r3, #2
 8005e62:	77bb      	strb	r3, [r7, #30]
    break;
 8005e64:	e005      	b.n	8005e72 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8005e66:	2304      	movs	r3, #4
 8005e68:	77bb      	strb	r3, [r7, #30]
    break;
 8005e6a:	e002      	b.n	8005e72 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	77bb      	strb	r3, [r7, #30]
    break;
 8005e70:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e014      	b.n	8005ea2 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8005e78:	7ffb      	ldrb	r3, [r7, #31]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	3320      	adds	r3, #32
 8005e7e:	443b      	add	r3, r7
 8005e80:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8005e84:	b29a      	uxth	r2, r3
 8005e86:	7fbb      	ldrb	r3, [r7, #30]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	fb12 f303 	smulbb	r3, r2, r3
 8005e8e:	b299      	uxth	r1, r3
 8005e90:	7ffb      	ldrb	r3, [r7, #31]
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	b20a      	sxth	r2, r1
 8005e9a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005e9c:	7ffb      	ldrb	r3, [r7, #31]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	77fb      	strb	r3, [r7, #31]
 8005ea2:	7ffb      	ldrb	r3, [r7, #31]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d9e7      	bls.n	8005e78 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005ec0:	2121      	movs	r1, #33	; 0x21
 8005ec2:	2032      	movs	r0, #50	; 0x32
 8005ec4:	f000 fcdf 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	f023 0304 	bic.w	r3, r3, #4
 8005ed2:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8005ed4:	7bfa      	ldrb	r2, [r7, #15]
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	2121      	movs	r1, #33	; 0x21
 8005ee2:	2032      	movs	r0, #50	; 0x32
 8005ee4:	f000 fcbc 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005efa:	2300      	movs	r3, #0
 8005efc:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8005efe:	2122      	movs	r1, #34	; 0x22
 8005f00:	2032      	movs	r0, #50	; 0x32
 8005f02:	f000 fcc0 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005f06:	4603      	mov	r3, r0
 8005f08:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8005f0a:	7bfa      	ldrb	r2, [r7, #15]
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	461a      	mov	r2, r3
 8005f16:	2122      	movs	r1, #34	; 0x22
 8005f18:	2032      	movs	r0, #50	; 0x32
 8005f1a:	f000 fca1 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8005f34:	2138      	movs	r1, #56	; 0x38
 8005f36:	2032      	movs	r0, #50	; 0x32
 8005f38:	f000 fca5 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8005f40:	7bfa      	ldrb	r2, [r7, #15]
 8005f42:	79fb      	ldrb	r3, [r7, #7]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2138      	movs	r1, #56	; 0x38
 8005f4e:	2032      	movs	r0, #50	; 0x32
 8005f50:	f000 fc86 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8005f54:	230a      	movs	r3, #10
 8005f56:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	213a      	movs	r1, #58	; 0x3a
 8005f5e:	2032      	movs	r0, #50	; 0x32
 8005f60:	f000 fc7e 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8005f64:	2305      	movs	r3, #5
 8005f66:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	213b      	movs	r1, #59	; 0x3b
 8005f6e:	2032      	movs	r0, #50	; 0x32
 8005f70:	f000 fc76 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	461a      	mov	r2, r3
 8005f78:	213c      	movs	r1, #60	; 0x3c
 8005f7a:	2032      	movs	r0, #50	; 0x32
 8005f7c:	f000 fc70 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8005f80:	2332      	movs	r3, #50	; 0x32
 8005f82:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	461a      	mov	r2, r3
 8005f88:	213d      	movs	r1, #61	; 0x3d
 8005f8a:	2032      	movs	r0, #50	; 0x32
 8005f8c:	f000 fc68 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8005f9c:	f000 fc32 	bl	8006804 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8005fa0:	2080      	movs	r0, #128	; 0x80
 8005fa2:	f7ff ffa5 	bl	8005ef0 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8005fa6:	2004      	movs	r0, #4
 8005fa8:	f7ff ff83 	bl	8005eb2 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8005fac:	2010      	movs	r0, #16
 8005fae:	f7ff ffba 	bl	8005f26 <LSM303AGR_AccClickITEnable>
}
 8005fb2:	bf00      	nop
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005fc4:	f000 fbd4 	bl	8006770 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005fc8:	88fb      	ldrh	r3, [r7, #6]
 8005fca:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8005fcc:	7bfb      	ldrb	r3, [r7, #15]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2120      	movs	r1, #32
 8005fd2:	2032      	movs	r0, #50	; 0x32
 8005fd4:	f000 fc44 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	461a      	mov	r2, r3
 8005fe0:	2123      	movs	r1, #35	; 0x23
 8005fe2:	2032      	movs	r0, #50	; 0x32
 8005fe4:	f000 fc3c 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
}
 8005ff4:	bf00      	nop
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8006004:	2300      	movs	r3, #0
 8006006:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8006008:	f000 fbb2 	bl	8006770 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800600c:	210f      	movs	r1, #15
 800600e:	2032      	movs	r0, #50	; 0x32
 8006010:	f000 fc39 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006014:	4603      	mov	r3, r0
 8006016:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8006018:	79fb      	ldrb	r3, [r7, #7]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8006028:	2124      	movs	r1, #36	; 0x24
 800602a:	2032      	movs	r0, #50	; 0x32
 800602c:	f000 fc2b 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006030:	4603      	mov	r3, r0
 8006032:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8006034:	79fb      	ldrb	r3, [r7, #7]
 8006036:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800603a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	461a      	mov	r2, r3
 8006040:	2124      	movs	r1, #36	; 0x24
 8006042:	2032      	movs	r0, #50	; 0x32
 8006044:	f000 fc0c 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 800605a:	2121      	movs	r1, #33	; 0x21
 800605c:	2032      	movs	r0, #50	; 0x32
 800605e:	f000 fc12 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006062:	4603      	mov	r3, r0
 8006064:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800606e:	7bfa      	ldrb	r2, [r7, #15]
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	4313      	orrs	r3, r2
 8006074:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	461a      	mov	r2, r3
 800607a:	2121      	movs	r1, #33	; 0x21
 800607c:	2032      	movs	r0, #50	; 0x32
 800607e:	f000 fbef 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8006082:	bf00      	nop
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	4603      	mov	r3, r0
 8006092:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8006094:	2121      	movs	r1, #33	; 0x21
 8006096:	2032      	movs	r0, #50	; 0x32
 8006098:	f000 fbf5 	bl	8006886 <COMPASSACCELERO_IO_Read>
 800609c:	4603      	mov	r3, r0
 800609e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	f023 0308 	bic.w	r3, r3, #8
 80060a6:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80060a8:	7bfa      	ldrb	r2, [r7, #15]
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	461a      	mov	r2, r3
 80060b4:	2121      	movs	r1, #33	; 0x21
 80060b6:	2032      	movs	r0, #50	; 0x32
 80060b8:	f000 fbd2 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b088      	sub	sp, #32
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80060cc:	2300      	movs	r3, #0
 80060ce:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80060d4:	2301      	movs	r3, #1
 80060d6:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80060d8:	2123      	movs	r1, #35	; 0x23
 80060da:	2032      	movs	r0, #50	; 0x32
 80060dc:	f000 fbd3 	bl	8006886 <COMPASSACCELERO_IO_Read>
 80060e0:	4603      	mov	r3, r0
 80060e2:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80060e4:	2124      	movs	r1, #36	; 0x24
 80060e6:	2032      	movs	r0, #50	; 0x32
 80060e8:	f000 fbcd 	bl	8006886 <COMPASSACCELERO_IO_Read>
 80060ec:	4603      	mov	r3, r0
 80060ee:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80060f0:	2128      	movs	r1, #40	; 0x28
 80060f2:	2032      	movs	r0, #50	; 0x32
 80060f4:	f000 fbc7 	bl	8006886 <COMPASSACCELERO_IO_Read>
 80060f8:	4603      	mov	r3, r0
 80060fa:	b25b      	sxtb	r3, r3
 80060fc:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80060fe:	2129      	movs	r1, #41	; 0x29
 8006100:	2032      	movs	r0, #50	; 0x32
 8006102:	f000 fbc0 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006106:	4603      	mov	r3, r0
 8006108:	b25b      	sxtb	r3, r3
 800610a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800610c:	212a      	movs	r1, #42	; 0x2a
 800610e:	2032      	movs	r0, #50	; 0x32
 8006110:	f000 fbb9 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006114:	4603      	mov	r3, r0
 8006116:	b25b      	sxtb	r3, r3
 8006118:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800611a:	212b      	movs	r1, #43	; 0x2b
 800611c:	2032      	movs	r0, #50	; 0x32
 800611e:	f000 fbb2 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006122:	4603      	mov	r3, r0
 8006124:	b25b      	sxtb	r3, r3
 8006126:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8006128:	212c      	movs	r1, #44	; 0x2c
 800612a:	2032      	movs	r0, #50	; 0x32
 800612c:	f000 fbab 	bl	8006886 <COMPASSACCELERO_IO_Read>
 8006130:	4603      	mov	r3, r0
 8006132:	b25b      	sxtb	r3, r3
 8006134:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8006136:	212d      	movs	r1, #45	; 0x2d
 8006138:	2032      	movs	r0, #50	; 0x32
 800613a:	f000 fba4 	bl	8006886 <COMPASSACCELERO_IO_Read>
 800613e:	4603      	mov	r3, r0
 8006140:	b25b      	sxtb	r3, r3
 8006142:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8006144:	7d3b      	ldrb	r3, [r7, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d123      	bne.n	8006196 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]
 8006152:	e01c      	b.n	800618e <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8006154:	7ffb      	ldrb	r3, [r7, #31]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	3301      	adds	r3, #1
 800615a:	3320      	adds	r3, #32
 800615c:	443b      	add	r3, r7
 800615e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8006162:	b29b      	uxth	r3, r3
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	b29a      	uxth	r2, r3
 8006168:	7ffb      	ldrb	r3, [r7, #31]
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	3320      	adds	r3, #32
 800616e:	443b      	add	r3, r7
 8006170:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8006174:	b29b      	uxth	r3, r3
 8006176:	4413      	add	r3, r2
 8006178:	b29a      	uxth	r2, r3
 800617a:	7ffb      	ldrb	r3, [r7, #31]
 800617c:	b212      	sxth	r2, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	3320      	adds	r3, #32
 8006182:	443b      	add	r3, r7
 8006184:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8006188:	7ffb      	ldrb	r3, [r7, #31]
 800618a:	3301      	adds	r3, #1
 800618c:	77fb      	strb	r3, [r7, #31]
 800618e:	7ffb      	ldrb	r3, [r7, #31]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d9df      	bls.n	8006154 <LSM303DLHC_AccReadXYZ+0x90>
 8006194:	e022      	b.n	80061dc <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8006196:	2300      	movs	r3, #0
 8006198:	77fb      	strb	r3, [r7, #31]
 800619a:	e01c      	b.n	80061d6 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800619c:	7ffb      	ldrb	r3, [r7, #31]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	3320      	adds	r3, #32
 80061a2:	443b      	add	r3, r7
 80061a4:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	021b      	lsls	r3, r3, #8
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	3301      	adds	r3, #1
 80061b4:	3320      	adds	r3, #32
 80061b6:	443b      	add	r3, r7
 80061b8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4413      	add	r3, r2
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	7ffb      	ldrb	r3, [r7, #31]
 80061c4:	b212      	sxth	r2, r2
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	3320      	adds	r3, #32
 80061ca:	443b      	add	r3, r7
 80061cc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 80061d0:	7ffb      	ldrb	r3, [r7, #31]
 80061d2:	3301      	adds	r3, #1
 80061d4:	77fb      	strb	r3, [r7, #31]
 80061d6:	7ffb      	ldrb	r3, [r7, #31]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d9df      	bls.n	800619c <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 80061dc:	7d3b      	ldrb	r3, [r7, #20]
 80061de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061e2:	2b30      	cmp	r3, #48	; 0x30
 80061e4:	d013      	beq.n	800620e <LSM303DLHC_AccReadXYZ+0x14a>
 80061e6:	2b30      	cmp	r3, #48	; 0x30
 80061e8:	dc14      	bgt.n	8006214 <LSM303DLHC_AccReadXYZ+0x150>
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d00c      	beq.n	8006208 <LSM303DLHC_AccReadXYZ+0x144>
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	dc10      	bgt.n	8006214 <LSM303DLHC_AccReadXYZ+0x150>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d002      	beq.n	80061fc <LSM303DLHC_AccReadXYZ+0x138>
 80061f6:	2b10      	cmp	r3, #16
 80061f8:	d003      	beq.n	8006202 <LSM303DLHC_AccReadXYZ+0x13e>
 80061fa:	e00b      	b.n	8006214 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77bb      	strb	r3, [r7, #30]
    break;
 8006200:	e008      	b.n	8006214 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8006202:	2302      	movs	r3, #2
 8006204:	77bb      	strb	r3, [r7, #30]
    break;
 8006206:	e005      	b.n	8006214 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8006208:	2304      	movs	r3, #4
 800620a:	77bb      	strb	r3, [r7, #30]
    break;
 800620c:	e002      	b.n	8006214 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800620e:	230c      	movs	r3, #12
 8006210:	77bb      	strb	r3, [r7, #30]
    break;
 8006212:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8006214:	2300      	movs	r3, #0
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e014      	b.n	8006244 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800621a:	7ffb      	ldrb	r3, [r7, #31]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	3320      	adds	r3, #32
 8006220:	443b      	add	r3, r7
 8006222:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8006226:	b29a      	uxth	r2, r3
 8006228:	7fbb      	ldrb	r3, [r7, #30]
 800622a:	b29b      	uxth	r3, r3
 800622c:	fb12 f303 	smulbb	r3, r2, r3
 8006230:	b299      	uxth	r1, r3
 8006232:	7ffb      	ldrb	r3, [r7, #31]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	b20a      	sxth	r2, r1
 800623c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800623e:	7ffb      	ldrb	r3, [r7, #31]
 8006240:	3301      	adds	r3, #1
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	7ffb      	ldrb	r3, [r7, #31]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d9e7      	bls.n	800621a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 800624a:	bf00      	nop
 800624c:	bf00      	nop
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	4603      	mov	r3, r0
 800625c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8006262:	2121      	movs	r1, #33	; 0x21
 8006264:	2032      	movs	r0, #50	; 0x32
 8006266:	f000 fb0e 	bl	8006886 <COMPASSACCELERO_IO_Read>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	f023 0304 	bic.w	r3, r3, #4
 8006274:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8006276:	7bfa      	ldrb	r2, [r7, #15]
 8006278:	79fb      	ldrb	r3, [r7, #7]
 800627a:	4313      	orrs	r3, r2
 800627c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	461a      	mov	r2, r3
 8006282:	2121      	movs	r1, #33	; 0x21
 8006284:	2032      	movs	r0, #50	; 0x32
 8006286:	f000 faeb 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 800628a:	bf00      	nop
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	4603      	mov	r3, r0
 800629a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800629c:	2300      	movs	r3, #0
 800629e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 80062a0:	2122      	movs	r1, #34	; 0x22
 80062a2:	2032      	movs	r0, #50	; 0x32
 80062a4:	f000 faef 	bl	8006886 <COMPASSACCELERO_IO_Read>
 80062a8:	4603      	mov	r3, r0
 80062aa:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 80062ac:	7bfa      	ldrb	r2, [r7, #15]
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 80062b4:	7bfb      	ldrb	r3, [r7, #15]
 80062b6:	461a      	mov	r2, r3
 80062b8:	2122      	movs	r1, #34	; 0x22
 80062ba:	2032      	movs	r0, #50	; 0x32
 80062bc:	f000 fad0 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 80062d6:	2138      	movs	r1, #56	; 0x38
 80062d8:	2032      	movs	r0, #50	; 0x32
 80062da:	f000 fad4 	bl	8006886 <COMPASSACCELERO_IO_Read>
 80062de:	4603      	mov	r3, r0
 80062e0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 80062e2:	7bfa      	ldrb	r2, [r7, #15]
 80062e4:	79fb      	ldrb	r3, [r7, #7]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	461a      	mov	r2, r3
 80062ee:	2138      	movs	r1, #56	; 0x38
 80062f0:	2032      	movs	r0, #50	; 0x32
 80062f2:	f000 fab5 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 80062f6:	230a      	movs	r3, #10
 80062f8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	461a      	mov	r2, r3
 80062fe:	213a      	movs	r1, #58	; 0x3a
 8006300:	2032      	movs	r0, #50	; 0x32
 8006302:	f000 faad 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8006306:	2305      	movs	r3, #5
 8006308:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	461a      	mov	r2, r3
 800630e:	213b      	movs	r1, #59	; 0x3b
 8006310:	2032      	movs	r0, #50	; 0x32
 8006312:	f000 faa5 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	461a      	mov	r2, r3
 800631a:	213c      	movs	r1, #60	; 0x3c
 800631c:	2032      	movs	r0, #50	; 0x32
 800631e:	f000 fa9f 	bl	8006860 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8006322:	2332      	movs	r3, #50	; 0x32
 8006324:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8006326:	7bfb      	ldrb	r3, [r7, #15]
 8006328:	461a      	mov	r2, r3
 800632a:	213d      	movs	r1, #61	; 0x3d
 800632c:	2032      	movs	r0, #50	; 0x32
 800632e:	f000 fa97 	bl	8006860 <COMPASSACCELERO_IO_Write>
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 800633a:	b580      	push	{r7, lr}
 800633c:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800633e:	f000 fa61 	bl	8006804 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8006342:	2080      	movs	r0, #128	; 0x80
 8006344:	f7ff ffa5 	bl	8006292 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8006348:	2004      	movs	r0, #4
 800634a:	f7ff ff83 	bl	8006254 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800634e:	2010      	movs	r0, #16
 8006350:	f7ff ffba 	bl	80062c8 <LSM303DLHC_AccClickITEnable>
}
 8006354:	bf00      	nop
 8006356:	bd80      	pop	{r7, pc}

08006358 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	; 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8006360:	4b15      	ldr	r3, [pc, #84]	; (80063b8 <I2Cx_MspInit+0x60>)
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <I2Cx_MspInit+0x60>)
 8006366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800636a:	6153      	str	r3, [r2, #20]
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <I2Cx_MspInit+0x60>)
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8006378:	23c0      	movs	r3, #192	; 0xc0
 800637a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800637c:	2302      	movs	r3, #2
 800637e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8006380:	2302      	movs	r3, #2
 8006382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006384:	2303      	movs	r3, #3
 8006386:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8006388:	2304      	movs	r3, #4
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800638c:	f107 0314 	add.w	r3, r7, #20
 8006390:	4619      	mov	r1, r3
 8006392:	480a      	ldr	r0, [pc, #40]	; (80063bc <I2Cx_MspInit+0x64>)
 8006394:	f7fb fcc4 	bl	8001d20 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <I2Cx_MspInit+0x60>)
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	4a06      	ldr	r2, [pc, #24]	; (80063b8 <I2Cx_MspInit+0x60>)
 800639e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063a2:	61d3      	str	r3, [r2, #28]
 80063a4:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <I2Cx_MspInit+0x60>)
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	3728      	adds	r7, #40	; 0x28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	40021000 	.word	0x40021000
 80063bc:	48000400 	.word	0x48000400

080063c0 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80063c4:	4811      	ldr	r0, [pc, #68]	; (800640c <I2Cx_Init+0x4c>)
 80063c6:	f7fc fa05 	bl	80027d4 <HAL_I2C_GetState>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11a      	bne.n	8006406 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80063d0:	4b0e      	ldr	r3, [pc, #56]	; (800640c <I2Cx_Init+0x4c>)
 80063d2:	4a0f      	ldr	r2, [pc, #60]	; (8006410 <I2Cx_Init+0x50>)
 80063d4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <I2Cx_Init+0x4c>)
 80063d8:	2232      	movs	r2, #50	; 0x32
 80063da:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80063dc:	4b0b      	ldr	r3, [pc, #44]	; (800640c <I2Cx_Init+0x4c>)
 80063de:	2201      	movs	r2, #1
 80063e0:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80063e2:	4b0a      	ldr	r3, [pc, #40]	; (800640c <I2Cx_Init+0x4c>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 80063e8:	4b08      	ldr	r3, [pc, #32]	; (800640c <I2Cx_Init+0x4c>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80063ee:	4b07      	ldr	r3, [pc, #28]	; (800640c <I2Cx_Init+0x4c>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 80063f4:	4b05      	ldr	r3, [pc, #20]	; (800640c <I2Cx_Init+0x4c>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80063fa:	4804      	ldr	r0, [pc, #16]	; (800640c <I2Cx_Init+0x4c>)
 80063fc:	f7ff ffac 	bl	8006358 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8006400:	4802      	ldr	r0, [pc, #8]	; (800640c <I2Cx_Init+0x4c>)
 8006402:	f7fb fefb 	bl	80021fc <HAL_I2C_Init>
  }
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000738 	.word	0x20000738
 8006410:	40005400 	.word	0x40005400

08006414 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af04      	add	r7, sp, #16
 800641a:	4603      	mov	r3, r0
 800641c:	80fb      	strh	r3, [r7, #6]
 800641e:	460b      	mov	r3, r1
 8006420:	717b      	strb	r3, [r7, #5]
 8006422:	4613      	mov	r3, r2
 8006424:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 800642a:	797b      	ldrb	r3, [r7, #5]
 800642c:	b29a      	uxth	r2, r3
 800642e:	4b0b      	ldr	r3, [pc, #44]	; (800645c <I2Cx_WriteData+0x48>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	88f9      	ldrh	r1, [r7, #6]
 8006434:	9302      	str	r3, [sp, #8]
 8006436:	2301      	movs	r3, #1
 8006438:	9301      	str	r3, [sp, #4]
 800643a:	1d3b      	adds	r3, r7, #4
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	2301      	movs	r3, #1
 8006440:	4807      	ldr	r0, [pc, #28]	; (8006460 <I2Cx_WriteData+0x4c>)
 8006442:	f7fb ff99 	bl	8002378 <HAL_I2C_Mem_Write>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8006450:	f000 f834 	bl	80064bc <I2Cx_Error>
  }
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000124 	.word	0x20000124
 8006460:	20000738 	.word	0x20000738

08006464 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b088      	sub	sp, #32
 8006468:	af04      	add	r7, sp, #16
 800646a:	4603      	mov	r3, r0
 800646c:	460a      	mov	r2, r1
 800646e:	80fb      	strh	r3, [r7, #6]
 8006470:	4613      	mov	r3, r2
 8006472:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8006478:	2300      	movs	r3, #0
 800647a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800647c:	797b      	ldrb	r3, [r7, #5]
 800647e:	b29a      	uxth	r2, r3
 8006480:	4b0c      	ldr	r3, [pc, #48]	; (80064b4 <I2Cx_ReadData+0x50>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	88f9      	ldrh	r1, [r7, #6]
 8006486:	9302      	str	r3, [sp, #8]
 8006488:	2301      	movs	r3, #1
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	f107 030e 	add.w	r3, r7, #14
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	2301      	movs	r3, #1
 8006494:	4808      	ldr	r0, [pc, #32]	; (80064b8 <I2Cx_ReadData+0x54>)
 8006496:	f7fc f883 	bl	80025a0 <HAL_I2C_Mem_Read>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d001      	beq.n	80064a8 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80064a4:	f000 f80a 	bl	80064bc <I2Cx_Error>
  
  }
  return value;
 80064a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000124 	.word	0x20000124
 80064b8:	20000738 	.word	0x20000738

080064bc <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80064c0:	4803      	ldr	r0, [pc, #12]	; (80064d0 <I2Cx_Error+0x14>)
 80064c2:	f7fb ff2a 	bl	800231a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 80064c6:	f7ff ff7b 	bl	80063c0 <I2Cx_Init>
}
 80064ca:	bf00      	nop
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20000738 	.word	0x20000738

080064d4 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80064d8:	481a      	ldr	r0, [pc, #104]	; (8006544 <SPIx_Init+0x70>)
 80064da:	f7fe fc74 	bl	8004dc6 <HAL_SPI_GetState>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d12c      	bne.n	800653e <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 80064e4:	4b17      	ldr	r3, [pc, #92]	; (8006544 <SPIx_Init+0x70>)
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <SPIx_Init+0x74>)
 80064e8:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80064ea:	4b16      	ldr	r3, [pc, #88]	; (8006544 <SPIx_Init+0x70>)
 80064ec:	2218      	movs	r2, #24
 80064ee:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 80064f0:	4b14      	ldr	r3, [pc, #80]	; (8006544 <SPIx_Init+0x70>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80064f6:	4b13      	ldr	r3, [pc, #76]	; (8006544 <SPIx_Init+0x70>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80064fc:	4b11      	ldr	r3, [pc, #68]	; (8006544 <SPIx_Init+0x70>)
 80064fe:	2200      	movs	r2, #0
 8006500:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <SPIx_Init+0x70>)
 8006504:	2200      	movs	r2, #0
 8006506:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8006508:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <SPIx_Init+0x70>)
 800650a:	2207      	movs	r2, #7
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800650e:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <SPIx_Init+0x70>)
 8006510:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006514:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006516:	4b0b      	ldr	r3, [pc, #44]	; (8006544 <SPIx_Init+0x70>)
 8006518:	2200      	movs	r2, #0
 800651a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800651c:	4b09      	ldr	r3, [pc, #36]	; (8006544 <SPIx_Init+0x70>)
 800651e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006522:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8006524:	4b07      	ldr	r3, [pc, #28]	; (8006544 <SPIx_Init+0x70>)
 8006526:	2200      	movs	r2, #0
 8006528:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <SPIx_Init+0x70>)
 800652c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006530:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8006532:	4804      	ldr	r0, [pc, #16]	; (8006544 <SPIx_Init+0x70>)
 8006534:	f000 f836 	bl	80065a4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8006538:	4802      	ldr	r0, [pc, #8]	; (8006544 <SPIx_Init+0x70>)
 800653a:	f7fe f94f 	bl	80047dc <HAL_SPI_Init>
  }
}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200006d4 	.word	0x200006d4
 8006548:	40013000 	.word	0x40013000

0800654c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af02      	add	r7, sp, #8
 8006552:	4603      	mov	r3, r0
 8006554:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800655a:	4b0a      	ldr	r3, [pc, #40]	; (8006584 <SPIx_WriteRead+0x38>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f107 020f 	add.w	r2, r7, #15
 8006562:	1df9      	adds	r1, r7, #7
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	2301      	movs	r3, #1
 8006568:	4807      	ldr	r0, [pc, #28]	; (8006588 <SPIx_WriteRead+0x3c>)
 800656a:	f7fe fa0a 	bl	8004982 <HAL_SPI_TransmitReceive>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8006574:	f000 f80a 	bl	800658c <SPIx_Error>
  }
  
  return receivedbyte;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000120 	.word	0x20000120
 8006588:	200006d4 	.word	0x200006d4

0800658c <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006590:	4803      	ldr	r0, [pc, #12]	; (80065a0 <SPIx_Error+0x14>)
 8006592:	f7fe f9ce 	bl	8004932 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8006596:	f7ff ff9d 	bl	80064d4 <SPIx_Init>
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200006d4 	.word	0x200006d4

080065a4 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	; 0x28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 80065ac:	4b16      	ldr	r3, [pc, #88]	; (8006608 <SPIx_MspInit+0x64>)
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	4a15      	ldr	r2, [pc, #84]	; (8006608 <SPIx_MspInit+0x64>)
 80065b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065b6:	6193      	str	r3, [r2, #24]
 80065b8:	4b13      	ldr	r3, [pc, #76]	; (8006608 <SPIx_MspInit+0x64>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <SPIx_MspInit+0x64>)
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <SPIx_MspInit+0x64>)
 80065ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ce:	6153      	str	r3, [r2, #20]
 80065d0:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <SPIx_MspInit+0x64>)
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80065dc:	23e0      	movs	r3, #224	; 0xe0
 80065de:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80065e0:	2302      	movs	r3, #2
 80065e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 80065e4:	2300      	movs	r3, #0
 80065e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80065e8:	2303      	movs	r3, #3
 80065ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80065ec:	2305      	movs	r3, #5
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80065f0:	f107 0314 	add.w	r3, r7, #20
 80065f4:	4619      	mov	r1, r3
 80065f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065fa:	f7fb fb91 	bl	8001d20 <HAL_GPIO_Init>
}
 80065fe:	bf00      	nop
 8006600:	3728      	adds	r7, #40	; 0x28
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40021000 	.word	0x40021000

0800660c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8006612:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <GYRO_IO_Init+0x84>)
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	4a1e      	ldr	r2, [pc, #120]	; (8006690 <GYRO_IO_Init+0x84>)
 8006618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800661c:	6153      	str	r3, [r2, #20]
 800661e:	4b1c      	ldr	r3, [pc, #112]	; (8006690 <GYRO_IO_Init+0x84>)
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 800662a:	2308      	movs	r3, #8
 800662c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800662e:	2301      	movs	r3, #1
 8006630:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006636:	2303      	movs	r3, #3
 8006638:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800663a:	f107 030c 	add.w	r3, r7, #12
 800663e:	4619      	mov	r1, r3
 8006640:	4814      	ldr	r0, [pc, #80]	; (8006694 <GYRO_IO_Init+0x88>)
 8006642:	f7fb fb6d 	bl	8001d20 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8006646:	2201      	movs	r2, #1
 8006648:	2108      	movs	r1, #8
 800664a:	4812      	ldr	r0, [pc, #72]	; (8006694 <GYRO_IO_Init+0x88>)
 800664c:	f7fb fdbe 	bl	80021cc <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8006650:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <GYRO_IO_Init+0x84>)
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <GYRO_IO_Init+0x84>)
 8006656:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800665a:	6153      	str	r3, [r2, #20]
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <GYRO_IO_Init+0x84>)
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006664:	607b      	str	r3, [r7, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8006668:	2303      	movs	r3, #3
 800666a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006670:	2303      	movs	r3, #3
 8006672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8006678:	f107 030c 	add.w	r3, r7, #12
 800667c:	4619      	mov	r1, r3
 800667e:	4805      	ldr	r0, [pc, #20]	; (8006694 <GYRO_IO_Init+0x88>)
 8006680:	f7fb fb4e 	bl	8001d20 <HAL_GPIO_Init>
  
  SPIx_Init();
 8006684:	f7ff ff26 	bl	80064d4 <SPIx_Init>
}
 8006688:	bf00      	nop
 800668a:	3720      	adds	r7, #32
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	40021000 	.word	0x40021000
 8006694:	48001000 	.word	0x48001000

08006698 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
 80066a4:	4613      	mov	r3, r2
 80066a6:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80066a8:	883b      	ldrh	r3, [r7, #0]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d903      	bls.n	80066b6 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80066b6:	2200      	movs	r2, #0
 80066b8:	2108      	movs	r1, #8
 80066ba:	480f      	ldr	r0, [pc, #60]	; (80066f8 <GYRO_IO_Write+0x60>)
 80066bc:	f7fb fd86 	bl	80021cc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ff42 	bl	800654c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80066c8:	e00a      	b.n	80066e0 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f7ff ff3c 	bl	800654c <SPIx_WriteRead>
    NumByteToWrite--;
 80066d4:	883b      	ldrh	r3, [r7, #0]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3301      	adds	r3, #1
 80066de:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80066e0:	883b      	ldrh	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f1      	bne.n	80066ca <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80066e6:	2201      	movs	r2, #1
 80066e8:	2108      	movs	r1, #8
 80066ea:	4803      	ldr	r0, [pc, #12]	; (80066f8 <GYRO_IO_Write+0x60>)
 80066ec:	f7fb fd6e 	bl	80021cc <HAL_GPIO_WritePin>
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	48001000 	.word	0x48001000

080066fc <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
 8006708:	4613      	mov	r3, r2
 800670a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800670c:	883b      	ldrh	r3, [r7, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d904      	bls.n	800671c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8006712:	78fb      	ldrb	r3, [r7, #3]
 8006714:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006718:	70fb      	strb	r3, [r7, #3]
 800671a:	e003      	b.n	8006724 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006722:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8006724:	2200      	movs	r2, #0
 8006726:	2108      	movs	r1, #8
 8006728:	4810      	ldr	r0, [pc, #64]	; (800676c <GYRO_IO_Read+0x70>)
 800672a:	f7fb fd4f 	bl	80021cc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ff0b 	bl	800654c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8006736:	e00c      	b.n	8006752 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8006738:	2000      	movs	r0, #0
 800673a:	f7ff ff07 	bl	800654c <SPIx_WriteRead>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8006746:	883b      	ldrh	r3, [r7, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3301      	adds	r3, #1
 8006750:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8006752:	883b      	ldrh	r3, [r7, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1ef      	bne.n	8006738 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8006758:	2201      	movs	r2, #1
 800675a:	2108      	movs	r1, #8
 800675c:	4803      	ldr	r0, [pc, #12]	; (800676c <GYRO_IO_Read+0x70>)
 800675e:	f7fb fd35 	bl	80021cc <HAL_GPIO_WritePin>
}  
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	48001000 	.word	0x48001000

08006770 <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8006776:	4b21      	ldr	r3, [pc, #132]	; (80067fc <COMPASSACCELERO_IO_Init+0x8c>)
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	4a20      	ldr	r2, [pc, #128]	; (80067fc <COMPASSACCELERO_IO_Init+0x8c>)
 800677c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006780:	6153      	str	r3, [r2, #20]
 8006782:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <COMPASSACCELERO_IO_Init+0x8c>)
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800678a:	60bb      	str	r3, [r7, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800678e:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <COMPASSACCELERO_IO_Init+0x8c>)
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	4a1a      	ldr	r2, [pc, #104]	; (80067fc <COMPASSACCELERO_IO_Init+0x8c>)
 8006794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006798:	6153      	str	r3, [r2, #20]
 800679a:	4b18      	ldr	r3, [pc, #96]	; (80067fc <COMPASSACCELERO_IO_Init+0x8c>)
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 80067a6:	2304      	movs	r3, #4
 80067a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80067aa:	2300      	movs	r3, #0
 80067ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80067b2:	2303      	movs	r3, #3
 80067b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80067b6:	f107 030c 	add.w	r3, r7, #12
 80067ba:	4619      	mov	r1, r3
 80067bc:	4810      	ldr	r0, [pc, #64]	; (8006800 <COMPASSACCELERO_IO_Init+0x90>)
 80067be:	f7fb faaf 	bl	8001d20 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 80067c2:	2200      	movs	r2, #0
 80067c4:	210f      	movs	r1, #15
 80067c6:	2008      	movs	r0, #8
 80067c8:	f7fb fa73 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80067cc:	2008      	movs	r0, #8
 80067ce:	f7fb fa8c 	bl	8001cea <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80067d2:	2330      	movs	r3, #48	; 0x30
 80067d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80067da:	2303      	movs	r3, #3
 80067dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80067e2:	f107 030c 	add.w	r3, r7, #12
 80067e6:	4619      	mov	r1, r3
 80067e8:	4805      	ldr	r0, [pc, #20]	; (8006800 <COMPASSACCELERO_IO_Init+0x90>)
 80067ea:	f7fb fa99 	bl	8001d20 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80067ee:	f7ff fde7 	bl	80063c0 <I2Cx_Init>
}
 80067f2:	bf00      	nop
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40021000 	.word	0x40021000
 8006800:	48001000 	.word	0x48001000

08006804 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800680a:	4b13      	ldr	r3, [pc, #76]	; (8006858 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	4a12      	ldr	r2, [pc, #72]	; (8006858 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006810:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006814:	6153      	str	r3, [r2, #20]
 8006816:	4b10      	ldr	r3, [pc, #64]	; (8006858 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8006822:	2330      	movs	r3, #48	; 0x30
 8006824:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8006826:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800682a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800682c:	2303      	movs	r3, #3
 800682e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4808      	ldr	r0, [pc, #32]	; (800685c <COMPASSACCELERO_IO_ITConfig+0x58>)
 800683a:	f7fb fa71 	bl	8001d20 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800683e:	2200      	movs	r2, #0
 8006840:	210f      	movs	r1, #15
 8006842:	200a      	movs	r0, #10
 8006844:	f7fb fa35 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8006848:	200a      	movs	r0, #10
 800684a:	f7fb fa4e 	bl	8001cea <HAL_NVIC_EnableIRQ>
  
}
 800684e:	bf00      	nop
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40021000 	.word	0x40021000
 800685c:	48001000 	.word	0x48001000

08006860 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	80fb      	strh	r3, [r7, #6]
 800686a:	460b      	mov	r3, r1
 800686c:	717b      	strb	r3, [r7, #5]
 800686e:	4613      	mov	r3, r2
 8006870:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8006872:	793a      	ldrb	r2, [r7, #4]
 8006874:	7979      	ldrb	r1, [r7, #5]
 8006876:	88fb      	ldrh	r3, [r7, #6]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fdcb 	bl	8006414 <I2Cx_WriteData>
}
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b082      	sub	sp, #8
 800688a:	af00      	add	r7, sp, #0
 800688c:	4603      	mov	r3, r0
 800688e:	460a      	mov	r2, r1
 8006890:	80fb      	strh	r3, [r7, #6]
 8006892:	4613      	mov	r3, r2
 8006894:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8006896:	797a      	ldrb	r2, [r7, #5]
 8006898:	88fb      	ldrh	r3, [r7, #6]
 800689a:	4611      	mov	r1, r2
 800689c:	4618      	mov	r0, r3
 800689e:	f7ff fde1 	bl	8006464 <I2Cx_ReadData>
 80068a2:	4603      	mov	r3, r0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <__cvt>:
 80068ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	ec55 4b10 	vmov	r4, r5, d0
 80068b4:	2d00      	cmp	r5, #0
 80068b6:	460e      	mov	r6, r1
 80068b8:	4619      	mov	r1, r3
 80068ba:	462b      	mov	r3, r5
 80068bc:	bfbb      	ittet	lt
 80068be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80068c2:	461d      	movlt	r5, r3
 80068c4:	2300      	movge	r3, #0
 80068c6:	232d      	movlt	r3, #45	; 0x2d
 80068c8:	700b      	strb	r3, [r1, #0]
 80068ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80068d0:	4691      	mov	r9, r2
 80068d2:	f023 0820 	bic.w	r8, r3, #32
 80068d6:	bfbc      	itt	lt
 80068d8:	4622      	movlt	r2, r4
 80068da:	4614      	movlt	r4, r2
 80068dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068e0:	d005      	beq.n	80068ee <__cvt+0x42>
 80068e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80068e6:	d100      	bne.n	80068ea <__cvt+0x3e>
 80068e8:	3601      	adds	r6, #1
 80068ea:	2102      	movs	r1, #2
 80068ec:	e000      	b.n	80068f0 <__cvt+0x44>
 80068ee:	2103      	movs	r1, #3
 80068f0:	ab03      	add	r3, sp, #12
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	ab02      	add	r3, sp, #8
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	ec45 4b10 	vmov	d0, r4, r5
 80068fc:	4653      	mov	r3, sl
 80068fe:	4632      	mov	r2, r6
 8006900:	f000 fe76 	bl	80075f0 <_dtoa_r>
 8006904:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006908:	4607      	mov	r7, r0
 800690a:	d102      	bne.n	8006912 <__cvt+0x66>
 800690c:	f019 0f01 	tst.w	r9, #1
 8006910:	d022      	beq.n	8006958 <__cvt+0xac>
 8006912:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006916:	eb07 0906 	add.w	r9, r7, r6
 800691a:	d110      	bne.n	800693e <__cvt+0x92>
 800691c:	783b      	ldrb	r3, [r7, #0]
 800691e:	2b30      	cmp	r3, #48	; 0x30
 8006920:	d10a      	bne.n	8006938 <__cvt+0x8c>
 8006922:	2200      	movs	r2, #0
 8006924:	2300      	movs	r3, #0
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7fa f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800692e:	b918      	cbnz	r0, 8006938 <__cvt+0x8c>
 8006930:	f1c6 0601 	rsb	r6, r6, #1
 8006934:	f8ca 6000 	str.w	r6, [sl]
 8006938:	f8da 3000 	ldr.w	r3, [sl]
 800693c:	4499      	add	r9, r3
 800693e:	2200      	movs	r2, #0
 8006940:	2300      	movs	r3, #0
 8006942:	4620      	mov	r0, r4
 8006944:	4629      	mov	r1, r5
 8006946:	f7fa f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800694a:	b108      	cbz	r0, 8006950 <__cvt+0xa4>
 800694c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006950:	2230      	movs	r2, #48	; 0x30
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	454b      	cmp	r3, r9
 8006956:	d307      	bcc.n	8006968 <__cvt+0xbc>
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800695c:	1bdb      	subs	r3, r3, r7
 800695e:	4638      	mov	r0, r7
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	b004      	add	sp, #16
 8006964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006968:	1c59      	adds	r1, r3, #1
 800696a:	9103      	str	r1, [sp, #12]
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	e7f0      	b.n	8006952 <__cvt+0xa6>

08006970 <__exponent>:
 8006970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006972:	4603      	mov	r3, r0
 8006974:	2900      	cmp	r1, #0
 8006976:	bfb8      	it	lt
 8006978:	4249      	neglt	r1, r1
 800697a:	f803 2b02 	strb.w	r2, [r3], #2
 800697e:	bfb4      	ite	lt
 8006980:	222d      	movlt	r2, #45	; 0x2d
 8006982:	222b      	movge	r2, #43	; 0x2b
 8006984:	2909      	cmp	r1, #9
 8006986:	7042      	strb	r2, [r0, #1]
 8006988:	dd2a      	ble.n	80069e0 <__exponent+0x70>
 800698a:	f10d 0207 	add.w	r2, sp, #7
 800698e:	4617      	mov	r7, r2
 8006990:	260a      	movs	r6, #10
 8006992:	4694      	mov	ip, r2
 8006994:	fb91 f5f6 	sdiv	r5, r1, r6
 8006998:	fb06 1415 	mls	r4, r6, r5, r1
 800699c:	3430      	adds	r4, #48	; 0x30
 800699e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80069a2:	460c      	mov	r4, r1
 80069a4:	2c63      	cmp	r4, #99	; 0x63
 80069a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80069aa:	4629      	mov	r1, r5
 80069ac:	dcf1      	bgt.n	8006992 <__exponent+0x22>
 80069ae:	3130      	adds	r1, #48	; 0x30
 80069b0:	f1ac 0402 	sub.w	r4, ip, #2
 80069b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80069b8:	1c41      	adds	r1, r0, #1
 80069ba:	4622      	mov	r2, r4
 80069bc:	42ba      	cmp	r2, r7
 80069be:	d30a      	bcc.n	80069d6 <__exponent+0x66>
 80069c0:	f10d 0209 	add.w	r2, sp, #9
 80069c4:	eba2 020c 	sub.w	r2, r2, ip
 80069c8:	42bc      	cmp	r4, r7
 80069ca:	bf88      	it	hi
 80069cc:	2200      	movhi	r2, #0
 80069ce:	4413      	add	r3, r2
 80069d0:	1a18      	subs	r0, r3, r0
 80069d2:	b003      	add	sp, #12
 80069d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80069da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80069de:	e7ed      	b.n	80069bc <__exponent+0x4c>
 80069e0:	2330      	movs	r3, #48	; 0x30
 80069e2:	3130      	adds	r1, #48	; 0x30
 80069e4:	7083      	strb	r3, [r0, #2]
 80069e6:	70c1      	strb	r1, [r0, #3]
 80069e8:	1d03      	adds	r3, r0, #4
 80069ea:	e7f1      	b.n	80069d0 <__exponent+0x60>

080069ec <_printf_float>:
 80069ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f0:	ed2d 8b02 	vpush	{d8}
 80069f4:	b08d      	sub	sp, #52	; 0x34
 80069f6:	460c      	mov	r4, r1
 80069f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80069fc:	4616      	mov	r6, r2
 80069fe:	461f      	mov	r7, r3
 8006a00:	4605      	mov	r5, r0
 8006a02:	f000 fce7 	bl	80073d4 <_localeconv_r>
 8006a06:	f8d0 a000 	ldr.w	sl, [r0]
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	f7f9 fc30 	bl	8000270 <strlen>
 8006a10:	2300      	movs	r3, #0
 8006a12:	930a      	str	r3, [sp, #40]	; 0x28
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	9305      	str	r3, [sp, #20]
 8006a18:	f8d8 3000 	ldr.w	r3, [r8]
 8006a1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006a20:	3307      	adds	r3, #7
 8006a22:	f023 0307 	bic.w	r3, r3, #7
 8006a26:	f103 0208 	add.w	r2, r3, #8
 8006a2a:	f8c8 2000 	str.w	r2, [r8]
 8006a2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a36:	9307      	str	r3, [sp, #28]
 8006a38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006a3c:	ee08 0a10 	vmov	s16, r0
 8006a40:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a48:	4b9e      	ldr	r3, [pc, #632]	; (8006cc4 <_printf_float+0x2d8>)
 8006a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a4e:	f7fa f86d 	bl	8000b2c <__aeabi_dcmpun>
 8006a52:	bb88      	cbnz	r0, 8006ab8 <_printf_float+0xcc>
 8006a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a58:	4b9a      	ldr	r3, [pc, #616]	; (8006cc4 <_printf_float+0x2d8>)
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5e:	f7fa f847 	bl	8000af0 <__aeabi_dcmple>
 8006a62:	bb48      	cbnz	r0, 8006ab8 <_printf_float+0xcc>
 8006a64:	2200      	movs	r2, #0
 8006a66:	2300      	movs	r3, #0
 8006a68:	4640      	mov	r0, r8
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	f7fa f836 	bl	8000adc <__aeabi_dcmplt>
 8006a70:	b110      	cbz	r0, 8006a78 <_printf_float+0x8c>
 8006a72:	232d      	movs	r3, #45	; 0x2d
 8006a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a78:	4a93      	ldr	r2, [pc, #588]	; (8006cc8 <_printf_float+0x2dc>)
 8006a7a:	4b94      	ldr	r3, [pc, #592]	; (8006ccc <_printf_float+0x2e0>)
 8006a7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a80:	bf94      	ite	ls
 8006a82:	4690      	movls	r8, r2
 8006a84:	4698      	movhi	r8, r3
 8006a86:	2303      	movs	r3, #3
 8006a88:	6123      	str	r3, [r4, #16]
 8006a8a:	9b05      	ldr	r3, [sp, #20]
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	f04f 0900 	mov.w	r9, #0
 8006a96:	9700      	str	r7, [sp, #0]
 8006a98:	4633      	mov	r3, r6
 8006a9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f9da 	bl	8006e58 <_printf_common>
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f040 8090 	bne.w	8006bca <_printf_float+0x1de>
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	b00d      	add	sp, #52	; 0x34
 8006ab0:	ecbd 8b02 	vpop	{d8}
 8006ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	4640      	mov	r0, r8
 8006abe:	4649      	mov	r1, r9
 8006ac0:	f7fa f834 	bl	8000b2c <__aeabi_dcmpun>
 8006ac4:	b140      	cbz	r0, 8006ad8 <_printf_float+0xec>
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfbc      	itt	lt
 8006acc:	232d      	movlt	r3, #45	; 0x2d
 8006ace:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ad2:	4a7f      	ldr	r2, [pc, #508]	; (8006cd0 <_printf_float+0x2e4>)
 8006ad4:	4b7f      	ldr	r3, [pc, #508]	; (8006cd4 <_printf_float+0x2e8>)
 8006ad6:	e7d1      	b.n	8006a7c <_printf_float+0x90>
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006ade:	9206      	str	r2, [sp, #24]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	d13f      	bne.n	8006b64 <_printf_float+0x178>
 8006ae4:	2306      	movs	r3, #6
 8006ae6:	6063      	str	r3, [r4, #4]
 8006ae8:	9b05      	ldr	r3, [sp, #20]
 8006aea:	6861      	ldr	r1, [r4, #4]
 8006aec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006af0:	2300      	movs	r3, #0
 8006af2:	9303      	str	r3, [sp, #12]
 8006af4:	ab0a      	add	r3, sp, #40	; 0x28
 8006af6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006afa:	ab09      	add	r3, sp, #36	; 0x24
 8006afc:	ec49 8b10 	vmov	d0, r8, r9
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	6022      	str	r2, [r4, #0]
 8006b04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f7ff fecf 	bl	80068ac <__cvt>
 8006b0e:	9b06      	ldr	r3, [sp, #24]
 8006b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b12:	2b47      	cmp	r3, #71	; 0x47
 8006b14:	4680      	mov	r8, r0
 8006b16:	d108      	bne.n	8006b2a <_printf_float+0x13e>
 8006b18:	1cc8      	adds	r0, r1, #3
 8006b1a:	db02      	blt.n	8006b22 <_printf_float+0x136>
 8006b1c:	6863      	ldr	r3, [r4, #4]
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	dd41      	ble.n	8006ba6 <_printf_float+0x1ba>
 8006b22:	f1ab 0302 	sub.w	r3, fp, #2
 8006b26:	fa5f fb83 	uxtb.w	fp, r3
 8006b2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b2e:	d820      	bhi.n	8006b72 <_printf_float+0x186>
 8006b30:	3901      	subs	r1, #1
 8006b32:	465a      	mov	r2, fp
 8006b34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b38:	9109      	str	r1, [sp, #36]	; 0x24
 8006b3a:	f7ff ff19 	bl	8006970 <__exponent>
 8006b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b40:	1813      	adds	r3, r2, r0
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	4681      	mov	r9, r0
 8006b46:	6123      	str	r3, [r4, #16]
 8006b48:	dc02      	bgt.n	8006b50 <_printf_float+0x164>
 8006b4a:	6822      	ldr	r2, [r4, #0]
 8006b4c:	07d2      	lsls	r2, r2, #31
 8006b4e:	d501      	bpl.n	8006b54 <_printf_float+0x168>
 8006b50:	3301      	adds	r3, #1
 8006b52:	6123      	str	r3, [r4, #16]
 8006b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d09c      	beq.n	8006a96 <_printf_float+0xaa>
 8006b5c:	232d      	movs	r3, #45	; 0x2d
 8006b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b62:	e798      	b.n	8006a96 <_printf_float+0xaa>
 8006b64:	9a06      	ldr	r2, [sp, #24]
 8006b66:	2a47      	cmp	r2, #71	; 0x47
 8006b68:	d1be      	bne.n	8006ae8 <_printf_float+0xfc>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1bc      	bne.n	8006ae8 <_printf_float+0xfc>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e7b9      	b.n	8006ae6 <_printf_float+0xfa>
 8006b72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b76:	d118      	bne.n	8006baa <_printf_float+0x1be>
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	6863      	ldr	r3, [r4, #4]
 8006b7c:	dd0b      	ble.n	8006b96 <_printf_float+0x1aa>
 8006b7e:	6121      	str	r1, [r4, #16]
 8006b80:	b913      	cbnz	r3, 8006b88 <_printf_float+0x19c>
 8006b82:	6822      	ldr	r2, [r4, #0]
 8006b84:	07d0      	lsls	r0, r2, #31
 8006b86:	d502      	bpl.n	8006b8e <_printf_float+0x1a2>
 8006b88:	3301      	adds	r3, #1
 8006b8a:	440b      	add	r3, r1
 8006b8c:	6123      	str	r3, [r4, #16]
 8006b8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b90:	f04f 0900 	mov.w	r9, #0
 8006b94:	e7de      	b.n	8006b54 <_printf_float+0x168>
 8006b96:	b913      	cbnz	r3, 8006b9e <_printf_float+0x1b2>
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	07d2      	lsls	r2, r2, #31
 8006b9c:	d501      	bpl.n	8006ba2 <_printf_float+0x1b6>
 8006b9e:	3302      	adds	r3, #2
 8006ba0:	e7f4      	b.n	8006b8c <_printf_float+0x1a0>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e7f2      	b.n	8006b8c <_printf_float+0x1a0>
 8006ba6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bac:	4299      	cmp	r1, r3
 8006bae:	db05      	blt.n	8006bbc <_printf_float+0x1d0>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	6121      	str	r1, [r4, #16]
 8006bb4:	07d8      	lsls	r0, r3, #31
 8006bb6:	d5ea      	bpl.n	8006b8e <_printf_float+0x1a2>
 8006bb8:	1c4b      	adds	r3, r1, #1
 8006bba:	e7e7      	b.n	8006b8c <_printf_float+0x1a0>
 8006bbc:	2900      	cmp	r1, #0
 8006bbe:	bfd4      	ite	le
 8006bc0:	f1c1 0202 	rsble	r2, r1, #2
 8006bc4:	2201      	movgt	r2, #1
 8006bc6:	4413      	add	r3, r2
 8006bc8:	e7e0      	b.n	8006b8c <_printf_float+0x1a0>
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	055a      	lsls	r2, r3, #21
 8006bce:	d407      	bmi.n	8006be0 <_printf_float+0x1f4>
 8006bd0:	6923      	ldr	r3, [r4, #16]
 8006bd2:	4642      	mov	r2, r8
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4628      	mov	r0, r5
 8006bd8:	47b8      	blx	r7
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d12c      	bne.n	8006c38 <_printf_float+0x24c>
 8006bde:	e764      	b.n	8006aaa <_printf_float+0xbe>
 8006be0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006be4:	f240 80e0 	bls.w	8006da8 <_printf_float+0x3bc>
 8006be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006bec:	2200      	movs	r2, #0
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f7f9 ff6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d034      	beq.n	8006c62 <_printf_float+0x276>
 8006bf8:	4a37      	ldr	r2, [pc, #220]	; (8006cd8 <_printf_float+0x2ec>)
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4628      	mov	r0, r5
 8006c00:	47b8      	blx	r7
 8006c02:	3001      	adds	r0, #1
 8006c04:	f43f af51 	beq.w	8006aaa <_printf_float+0xbe>
 8006c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	db02      	blt.n	8006c16 <_printf_float+0x22a>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	07d8      	lsls	r0, r3, #31
 8006c14:	d510      	bpl.n	8006c38 <_printf_float+0x24c>
 8006c16:	ee18 3a10 	vmov	r3, s16
 8006c1a:	4652      	mov	r2, sl
 8006c1c:	4631      	mov	r1, r6
 8006c1e:	4628      	mov	r0, r5
 8006c20:	47b8      	blx	r7
 8006c22:	3001      	adds	r0, #1
 8006c24:	f43f af41 	beq.w	8006aaa <_printf_float+0xbe>
 8006c28:	f04f 0800 	mov.w	r8, #0
 8006c2c:	f104 091a 	add.w	r9, r4, #26
 8006c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c32:	3b01      	subs	r3, #1
 8006c34:	4543      	cmp	r3, r8
 8006c36:	dc09      	bgt.n	8006c4c <_printf_float+0x260>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	079b      	lsls	r3, r3, #30
 8006c3c:	f100 8107 	bmi.w	8006e4e <_printf_float+0x462>
 8006c40:	68e0      	ldr	r0, [r4, #12]
 8006c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c44:	4298      	cmp	r0, r3
 8006c46:	bfb8      	it	lt
 8006c48:	4618      	movlt	r0, r3
 8006c4a:	e730      	b.n	8006aae <_printf_float+0xc2>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	464a      	mov	r2, r9
 8006c50:	4631      	mov	r1, r6
 8006c52:	4628      	mov	r0, r5
 8006c54:	47b8      	blx	r7
 8006c56:	3001      	adds	r0, #1
 8006c58:	f43f af27 	beq.w	8006aaa <_printf_float+0xbe>
 8006c5c:	f108 0801 	add.w	r8, r8, #1
 8006c60:	e7e6      	b.n	8006c30 <_printf_float+0x244>
 8006c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dc39      	bgt.n	8006cdc <_printf_float+0x2f0>
 8006c68:	4a1b      	ldr	r2, [pc, #108]	; (8006cd8 <_printf_float+0x2ec>)
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	4631      	mov	r1, r6
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b8      	blx	r7
 8006c72:	3001      	adds	r0, #1
 8006c74:	f43f af19 	beq.w	8006aaa <_printf_float+0xbe>
 8006c78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	d102      	bne.n	8006c86 <_printf_float+0x29a>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	07d9      	lsls	r1, r3, #31
 8006c84:	d5d8      	bpl.n	8006c38 <_printf_float+0x24c>
 8006c86:	ee18 3a10 	vmov	r3, s16
 8006c8a:	4652      	mov	r2, sl
 8006c8c:	4631      	mov	r1, r6
 8006c8e:	4628      	mov	r0, r5
 8006c90:	47b8      	blx	r7
 8006c92:	3001      	adds	r0, #1
 8006c94:	f43f af09 	beq.w	8006aaa <_printf_float+0xbe>
 8006c98:	f04f 0900 	mov.w	r9, #0
 8006c9c:	f104 0a1a 	add.w	sl, r4, #26
 8006ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca2:	425b      	negs	r3, r3
 8006ca4:	454b      	cmp	r3, r9
 8006ca6:	dc01      	bgt.n	8006cac <_printf_float+0x2c0>
 8006ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006caa:	e792      	b.n	8006bd2 <_printf_float+0x1e6>
 8006cac:	2301      	movs	r3, #1
 8006cae:	4652      	mov	r2, sl
 8006cb0:	4631      	mov	r1, r6
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f43f aef7 	beq.w	8006aaa <_printf_float+0xbe>
 8006cbc:	f109 0901 	add.w	r9, r9, #1
 8006cc0:	e7ee      	b.n	8006ca0 <_printf_float+0x2b4>
 8006cc2:	bf00      	nop
 8006cc4:	7fefffff 	.word	0x7fefffff
 8006cc8:	08009624 	.word	0x08009624
 8006ccc:	08009628 	.word	0x08009628
 8006cd0:	0800962c 	.word	0x0800962c
 8006cd4:	08009630 	.word	0x08009630
 8006cd8:	08009634 	.word	0x08009634
 8006cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	bfa8      	it	ge
 8006ce4:	461a      	movge	r2, r3
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	4691      	mov	r9, r2
 8006cea:	dc37      	bgt.n	8006d5c <_printf_float+0x370>
 8006cec:	f04f 0b00 	mov.w	fp, #0
 8006cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cf4:	f104 021a 	add.w	r2, r4, #26
 8006cf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	eba3 0309 	sub.w	r3, r3, r9
 8006d00:	455b      	cmp	r3, fp
 8006d02:	dc33      	bgt.n	8006d6c <_printf_float+0x380>
 8006d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	db3b      	blt.n	8006d84 <_printf_float+0x398>
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	07da      	lsls	r2, r3, #31
 8006d10:	d438      	bmi.n	8006d84 <_printf_float+0x398>
 8006d12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d16:	eba2 0903 	sub.w	r9, r2, r3
 8006d1a:	9b05      	ldr	r3, [sp, #20]
 8006d1c:	1ad2      	subs	r2, r2, r3
 8006d1e:	4591      	cmp	r9, r2
 8006d20:	bfa8      	it	ge
 8006d22:	4691      	movge	r9, r2
 8006d24:	f1b9 0f00 	cmp.w	r9, #0
 8006d28:	dc35      	bgt.n	8006d96 <_printf_float+0x3aa>
 8006d2a:	f04f 0800 	mov.w	r8, #0
 8006d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d32:	f104 0a1a 	add.w	sl, r4, #26
 8006d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	eba3 0309 	sub.w	r3, r3, r9
 8006d40:	4543      	cmp	r3, r8
 8006d42:	f77f af79 	ble.w	8006c38 <_printf_float+0x24c>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4652      	mov	r2, sl
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f aeaa 	beq.w	8006aaa <_printf_float+0xbe>
 8006d56:	f108 0801 	add.w	r8, r8, #1
 8006d5a:	e7ec      	b.n	8006d36 <_printf_float+0x34a>
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4642      	mov	r2, r8
 8006d62:	4628      	mov	r0, r5
 8006d64:	47b8      	blx	r7
 8006d66:	3001      	adds	r0, #1
 8006d68:	d1c0      	bne.n	8006cec <_printf_float+0x300>
 8006d6a:	e69e      	b.n	8006aaa <_printf_float+0xbe>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	9205      	str	r2, [sp, #20]
 8006d74:	47b8      	blx	r7
 8006d76:	3001      	adds	r0, #1
 8006d78:	f43f ae97 	beq.w	8006aaa <_printf_float+0xbe>
 8006d7c:	9a05      	ldr	r2, [sp, #20]
 8006d7e:	f10b 0b01 	add.w	fp, fp, #1
 8006d82:	e7b9      	b.n	8006cf8 <_printf_float+0x30c>
 8006d84:	ee18 3a10 	vmov	r3, s16
 8006d88:	4652      	mov	r2, sl
 8006d8a:	4631      	mov	r1, r6
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	47b8      	blx	r7
 8006d90:	3001      	adds	r0, #1
 8006d92:	d1be      	bne.n	8006d12 <_printf_float+0x326>
 8006d94:	e689      	b.n	8006aaa <_printf_float+0xbe>
 8006d96:	9a05      	ldr	r2, [sp, #20]
 8006d98:	464b      	mov	r3, r9
 8006d9a:	4442      	add	r2, r8
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	d1c1      	bne.n	8006d2a <_printf_float+0x33e>
 8006da6:	e680      	b.n	8006aaa <_printf_float+0xbe>
 8006da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006daa:	2a01      	cmp	r2, #1
 8006dac:	dc01      	bgt.n	8006db2 <_printf_float+0x3c6>
 8006dae:	07db      	lsls	r3, r3, #31
 8006db0:	d53a      	bpl.n	8006e28 <_printf_float+0x43c>
 8006db2:	2301      	movs	r3, #1
 8006db4:	4642      	mov	r2, r8
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	f43f ae74 	beq.w	8006aaa <_printf_float+0xbe>
 8006dc2:	ee18 3a10 	vmov	r3, s16
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f ae6b 	beq.w	8006aaa <_printf_float+0xbe>
 8006dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006de0:	f7f9 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 8006de4:	b9d8      	cbnz	r0, 8006e1e <_printf_float+0x432>
 8006de6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006dea:	f108 0201 	add.w	r2, r8, #1
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	47b8      	blx	r7
 8006df4:	3001      	adds	r0, #1
 8006df6:	d10e      	bne.n	8006e16 <_printf_float+0x42a>
 8006df8:	e657      	b.n	8006aaa <_printf_float+0xbe>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	f43f ae50 	beq.w	8006aaa <_printf_float+0xbe>
 8006e0a:	f108 0801 	add.w	r8, r8, #1
 8006e0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e10:	3b01      	subs	r3, #1
 8006e12:	4543      	cmp	r3, r8
 8006e14:	dcf1      	bgt.n	8006dfa <_printf_float+0x40e>
 8006e16:	464b      	mov	r3, r9
 8006e18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e1c:	e6da      	b.n	8006bd4 <_printf_float+0x1e8>
 8006e1e:	f04f 0800 	mov.w	r8, #0
 8006e22:	f104 0a1a 	add.w	sl, r4, #26
 8006e26:	e7f2      	b.n	8006e0e <_printf_float+0x422>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	e7df      	b.n	8006dee <_printf_float+0x402>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	464a      	mov	r2, r9
 8006e32:	4631      	mov	r1, r6
 8006e34:	4628      	mov	r0, r5
 8006e36:	47b8      	blx	r7
 8006e38:	3001      	adds	r0, #1
 8006e3a:	f43f ae36 	beq.w	8006aaa <_printf_float+0xbe>
 8006e3e:	f108 0801 	add.w	r8, r8, #1
 8006e42:	68e3      	ldr	r3, [r4, #12]
 8006e44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e46:	1a5b      	subs	r3, r3, r1
 8006e48:	4543      	cmp	r3, r8
 8006e4a:	dcf0      	bgt.n	8006e2e <_printf_float+0x442>
 8006e4c:	e6f8      	b.n	8006c40 <_printf_float+0x254>
 8006e4e:	f04f 0800 	mov.w	r8, #0
 8006e52:	f104 0919 	add.w	r9, r4, #25
 8006e56:	e7f4      	b.n	8006e42 <_printf_float+0x456>

08006e58 <_printf_common>:
 8006e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	4699      	mov	r9, r3
 8006e60:	688a      	ldr	r2, [r1, #8]
 8006e62:	690b      	ldr	r3, [r1, #16]
 8006e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	bfb8      	it	lt
 8006e6c:	4613      	movlt	r3, r2
 8006e6e:	6033      	str	r3, [r6, #0]
 8006e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e74:	4607      	mov	r7, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	b10a      	cbz	r2, 8006e7e <_printf_common+0x26>
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	6033      	str	r3, [r6, #0]
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	0699      	lsls	r1, r3, #26
 8006e82:	bf42      	ittt	mi
 8006e84:	6833      	ldrmi	r3, [r6, #0]
 8006e86:	3302      	addmi	r3, #2
 8006e88:	6033      	strmi	r3, [r6, #0]
 8006e8a:	6825      	ldr	r5, [r4, #0]
 8006e8c:	f015 0506 	ands.w	r5, r5, #6
 8006e90:	d106      	bne.n	8006ea0 <_printf_common+0x48>
 8006e92:	f104 0a19 	add.w	sl, r4, #25
 8006e96:	68e3      	ldr	r3, [r4, #12]
 8006e98:	6832      	ldr	r2, [r6, #0]
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	42ab      	cmp	r3, r5
 8006e9e:	dc26      	bgt.n	8006eee <_printf_common+0x96>
 8006ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ea4:	1e13      	subs	r3, r2, #0
 8006ea6:	6822      	ldr	r2, [r4, #0]
 8006ea8:	bf18      	it	ne
 8006eaa:	2301      	movne	r3, #1
 8006eac:	0692      	lsls	r2, r2, #26
 8006eae:	d42b      	bmi.n	8006f08 <_printf_common+0xb0>
 8006eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d01e      	beq.n	8006efc <_printf_common+0xa4>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	6922      	ldr	r2, [r4, #16]
 8006ec2:	f003 0306 	and.w	r3, r3, #6
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	bf02      	ittt	eq
 8006eca:	68e5      	ldreq	r5, [r4, #12]
 8006ecc:	6833      	ldreq	r3, [r6, #0]
 8006ece:	1aed      	subeq	r5, r5, r3
 8006ed0:	68a3      	ldr	r3, [r4, #8]
 8006ed2:	bf0c      	ite	eq
 8006ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed8:	2500      	movne	r5, #0
 8006eda:	4293      	cmp	r3, r2
 8006edc:	bfc4      	itt	gt
 8006ede:	1a9b      	subgt	r3, r3, r2
 8006ee0:	18ed      	addgt	r5, r5, r3
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	341a      	adds	r4, #26
 8006ee6:	42b5      	cmp	r5, r6
 8006ee8:	d11a      	bne.n	8006f20 <_printf_common+0xc8>
 8006eea:	2000      	movs	r0, #0
 8006eec:	e008      	b.n	8006f00 <_printf_common+0xa8>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4652      	mov	r2, sl
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	47c0      	blx	r8
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d103      	bne.n	8006f04 <_printf_common+0xac>
 8006efc:	f04f 30ff 	mov.w	r0, #4294967295
 8006f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f04:	3501      	adds	r5, #1
 8006f06:	e7c6      	b.n	8006e96 <_printf_common+0x3e>
 8006f08:	18e1      	adds	r1, r4, r3
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	2030      	movs	r0, #48	; 0x30
 8006f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f12:	4422      	add	r2, r4
 8006f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f1c:	3302      	adds	r3, #2
 8006f1e:	e7c7      	b.n	8006eb0 <_printf_common+0x58>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4622      	mov	r2, r4
 8006f24:	4649      	mov	r1, r9
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c0      	blx	r8
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d0e6      	beq.n	8006efc <_printf_common+0xa4>
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7d9      	b.n	8006ee6 <_printf_common+0x8e>
	...

08006f34 <_printf_i>:
 8006f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f38:	7e0f      	ldrb	r7, [r1, #24]
 8006f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f3c:	2f78      	cmp	r7, #120	; 0x78
 8006f3e:	4691      	mov	r9, r2
 8006f40:	4680      	mov	r8, r0
 8006f42:	460c      	mov	r4, r1
 8006f44:	469a      	mov	sl, r3
 8006f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f4a:	d807      	bhi.n	8006f5c <_printf_i+0x28>
 8006f4c:	2f62      	cmp	r7, #98	; 0x62
 8006f4e:	d80a      	bhi.n	8006f66 <_printf_i+0x32>
 8006f50:	2f00      	cmp	r7, #0
 8006f52:	f000 80d4 	beq.w	80070fe <_printf_i+0x1ca>
 8006f56:	2f58      	cmp	r7, #88	; 0x58
 8006f58:	f000 80c0 	beq.w	80070dc <_printf_i+0x1a8>
 8006f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f64:	e03a      	b.n	8006fdc <_printf_i+0xa8>
 8006f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f6a:	2b15      	cmp	r3, #21
 8006f6c:	d8f6      	bhi.n	8006f5c <_printf_i+0x28>
 8006f6e:	a101      	add	r1, pc, #4	; (adr r1, 8006f74 <_printf_i+0x40>)
 8006f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f74:	08006fcd 	.word	0x08006fcd
 8006f78:	08006fe1 	.word	0x08006fe1
 8006f7c:	08006f5d 	.word	0x08006f5d
 8006f80:	08006f5d 	.word	0x08006f5d
 8006f84:	08006f5d 	.word	0x08006f5d
 8006f88:	08006f5d 	.word	0x08006f5d
 8006f8c:	08006fe1 	.word	0x08006fe1
 8006f90:	08006f5d 	.word	0x08006f5d
 8006f94:	08006f5d 	.word	0x08006f5d
 8006f98:	08006f5d 	.word	0x08006f5d
 8006f9c:	08006f5d 	.word	0x08006f5d
 8006fa0:	080070e5 	.word	0x080070e5
 8006fa4:	0800700d 	.word	0x0800700d
 8006fa8:	0800709f 	.word	0x0800709f
 8006fac:	08006f5d 	.word	0x08006f5d
 8006fb0:	08006f5d 	.word	0x08006f5d
 8006fb4:	08007107 	.word	0x08007107
 8006fb8:	08006f5d 	.word	0x08006f5d
 8006fbc:	0800700d 	.word	0x0800700d
 8006fc0:	08006f5d 	.word	0x08006f5d
 8006fc4:	08006f5d 	.word	0x08006f5d
 8006fc8:	080070a7 	.word	0x080070a7
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	1d1a      	adds	r2, r3, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	602a      	str	r2, [r5, #0]
 8006fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e09f      	b.n	8007120 <_printf_i+0x1ec>
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	0607      	lsls	r7, r0, #24
 8006fe6:	f103 0104 	add.w	r1, r3, #4
 8006fea:	6029      	str	r1, [r5, #0]
 8006fec:	d501      	bpl.n	8006ff2 <_printf_i+0xbe>
 8006fee:	681e      	ldr	r6, [r3, #0]
 8006ff0:	e003      	b.n	8006ffa <_printf_i+0xc6>
 8006ff2:	0646      	lsls	r6, r0, #25
 8006ff4:	d5fb      	bpl.n	8006fee <_printf_i+0xba>
 8006ff6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	da03      	bge.n	8007006 <_printf_i+0xd2>
 8006ffe:	232d      	movs	r3, #45	; 0x2d
 8007000:	4276      	negs	r6, r6
 8007002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007006:	485a      	ldr	r0, [pc, #360]	; (8007170 <_printf_i+0x23c>)
 8007008:	230a      	movs	r3, #10
 800700a:	e012      	b.n	8007032 <_printf_i+0xfe>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	1d19      	adds	r1, r3, #4
 8007012:	6029      	str	r1, [r5, #0]
 8007014:	0605      	lsls	r5, r0, #24
 8007016:	d501      	bpl.n	800701c <_printf_i+0xe8>
 8007018:	681e      	ldr	r6, [r3, #0]
 800701a:	e002      	b.n	8007022 <_printf_i+0xee>
 800701c:	0641      	lsls	r1, r0, #25
 800701e:	d5fb      	bpl.n	8007018 <_printf_i+0xe4>
 8007020:	881e      	ldrh	r6, [r3, #0]
 8007022:	4853      	ldr	r0, [pc, #332]	; (8007170 <_printf_i+0x23c>)
 8007024:	2f6f      	cmp	r7, #111	; 0x6f
 8007026:	bf0c      	ite	eq
 8007028:	2308      	moveq	r3, #8
 800702a:	230a      	movne	r3, #10
 800702c:	2100      	movs	r1, #0
 800702e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007032:	6865      	ldr	r5, [r4, #4]
 8007034:	60a5      	str	r5, [r4, #8]
 8007036:	2d00      	cmp	r5, #0
 8007038:	bfa2      	ittt	ge
 800703a:	6821      	ldrge	r1, [r4, #0]
 800703c:	f021 0104 	bicge.w	r1, r1, #4
 8007040:	6021      	strge	r1, [r4, #0]
 8007042:	b90e      	cbnz	r6, 8007048 <_printf_i+0x114>
 8007044:	2d00      	cmp	r5, #0
 8007046:	d04b      	beq.n	80070e0 <_printf_i+0x1ac>
 8007048:	4615      	mov	r5, r2
 800704a:	fbb6 f1f3 	udiv	r1, r6, r3
 800704e:	fb03 6711 	mls	r7, r3, r1, r6
 8007052:	5dc7      	ldrb	r7, [r0, r7]
 8007054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007058:	4637      	mov	r7, r6
 800705a:	42bb      	cmp	r3, r7
 800705c:	460e      	mov	r6, r1
 800705e:	d9f4      	bls.n	800704a <_printf_i+0x116>
 8007060:	2b08      	cmp	r3, #8
 8007062:	d10b      	bne.n	800707c <_printf_i+0x148>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	07de      	lsls	r6, r3, #31
 8007068:	d508      	bpl.n	800707c <_printf_i+0x148>
 800706a:	6923      	ldr	r3, [r4, #16]
 800706c:	6861      	ldr	r1, [r4, #4]
 800706e:	4299      	cmp	r1, r3
 8007070:	bfde      	ittt	le
 8007072:	2330      	movle	r3, #48	; 0x30
 8007074:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800707c:	1b52      	subs	r2, r2, r5
 800707e:	6122      	str	r2, [r4, #16]
 8007080:	f8cd a000 	str.w	sl, [sp]
 8007084:	464b      	mov	r3, r9
 8007086:	aa03      	add	r2, sp, #12
 8007088:	4621      	mov	r1, r4
 800708a:	4640      	mov	r0, r8
 800708c:	f7ff fee4 	bl	8006e58 <_printf_common>
 8007090:	3001      	adds	r0, #1
 8007092:	d14a      	bne.n	800712a <_printf_i+0x1f6>
 8007094:	f04f 30ff 	mov.w	r0, #4294967295
 8007098:	b004      	add	sp, #16
 800709a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800709e:	6823      	ldr	r3, [r4, #0]
 80070a0:	f043 0320 	orr.w	r3, r3, #32
 80070a4:	6023      	str	r3, [r4, #0]
 80070a6:	4833      	ldr	r0, [pc, #204]	; (8007174 <_printf_i+0x240>)
 80070a8:	2778      	movs	r7, #120	; 0x78
 80070aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	6829      	ldr	r1, [r5, #0]
 80070b2:	061f      	lsls	r7, r3, #24
 80070b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80070b8:	d402      	bmi.n	80070c0 <_printf_i+0x18c>
 80070ba:	065f      	lsls	r7, r3, #25
 80070bc:	bf48      	it	mi
 80070be:	b2b6      	uxthmi	r6, r6
 80070c0:	07df      	lsls	r7, r3, #31
 80070c2:	bf48      	it	mi
 80070c4:	f043 0320 	orrmi.w	r3, r3, #32
 80070c8:	6029      	str	r1, [r5, #0]
 80070ca:	bf48      	it	mi
 80070cc:	6023      	strmi	r3, [r4, #0]
 80070ce:	b91e      	cbnz	r6, 80070d8 <_printf_i+0x1a4>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	f023 0320 	bic.w	r3, r3, #32
 80070d6:	6023      	str	r3, [r4, #0]
 80070d8:	2310      	movs	r3, #16
 80070da:	e7a7      	b.n	800702c <_printf_i+0xf8>
 80070dc:	4824      	ldr	r0, [pc, #144]	; (8007170 <_printf_i+0x23c>)
 80070de:	e7e4      	b.n	80070aa <_printf_i+0x176>
 80070e0:	4615      	mov	r5, r2
 80070e2:	e7bd      	b.n	8007060 <_printf_i+0x12c>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	6826      	ldr	r6, [r4, #0]
 80070e8:	6961      	ldr	r1, [r4, #20]
 80070ea:	1d18      	adds	r0, r3, #4
 80070ec:	6028      	str	r0, [r5, #0]
 80070ee:	0635      	lsls	r5, r6, #24
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	d501      	bpl.n	80070f8 <_printf_i+0x1c4>
 80070f4:	6019      	str	r1, [r3, #0]
 80070f6:	e002      	b.n	80070fe <_printf_i+0x1ca>
 80070f8:	0670      	lsls	r0, r6, #25
 80070fa:	d5fb      	bpl.n	80070f4 <_printf_i+0x1c0>
 80070fc:	8019      	strh	r1, [r3, #0]
 80070fe:	2300      	movs	r3, #0
 8007100:	6123      	str	r3, [r4, #16]
 8007102:	4615      	mov	r5, r2
 8007104:	e7bc      	b.n	8007080 <_printf_i+0x14c>
 8007106:	682b      	ldr	r3, [r5, #0]
 8007108:	1d1a      	adds	r2, r3, #4
 800710a:	602a      	str	r2, [r5, #0]
 800710c:	681d      	ldr	r5, [r3, #0]
 800710e:	6862      	ldr	r2, [r4, #4]
 8007110:	2100      	movs	r1, #0
 8007112:	4628      	mov	r0, r5
 8007114:	f7f9 f85c 	bl	80001d0 <memchr>
 8007118:	b108      	cbz	r0, 800711e <_printf_i+0x1ea>
 800711a:	1b40      	subs	r0, r0, r5
 800711c:	6060      	str	r0, [r4, #4]
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	6123      	str	r3, [r4, #16]
 8007122:	2300      	movs	r3, #0
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007128:	e7aa      	b.n	8007080 <_printf_i+0x14c>
 800712a:	6923      	ldr	r3, [r4, #16]
 800712c:	462a      	mov	r2, r5
 800712e:	4649      	mov	r1, r9
 8007130:	4640      	mov	r0, r8
 8007132:	47d0      	blx	sl
 8007134:	3001      	adds	r0, #1
 8007136:	d0ad      	beq.n	8007094 <_printf_i+0x160>
 8007138:	6823      	ldr	r3, [r4, #0]
 800713a:	079b      	lsls	r3, r3, #30
 800713c:	d413      	bmi.n	8007166 <_printf_i+0x232>
 800713e:	68e0      	ldr	r0, [r4, #12]
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	4298      	cmp	r0, r3
 8007144:	bfb8      	it	lt
 8007146:	4618      	movlt	r0, r3
 8007148:	e7a6      	b.n	8007098 <_printf_i+0x164>
 800714a:	2301      	movs	r3, #1
 800714c:	4632      	mov	r2, r6
 800714e:	4649      	mov	r1, r9
 8007150:	4640      	mov	r0, r8
 8007152:	47d0      	blx	sl
 8007154:	3001      	adds	r0, #1
 8007156:	d09d      	beq.n	8007094 <_printf_i+0x160>
 8007158:	3501      	adds	r5, #1
 800715a:	68e3      	ldr	r3, [r4, #12]
 800715c:	9903      	ldr	r1, [sp, #12]
 800715e:	1a5b      	subs	r3, r3, r1
 8007160:	42ab      	cmp	r3, r5
 8007162:	dcf2      	bgt.n	800714a <_printf_i+0x216>
 8007164:	e7eb      	b.n	800713e <_printf_i+0x20a>
 8007166:	2500      	movs	r5, #0
 8007168:	f104 0619 	add.w	r6, r4, #25
 800716c:	e7f5      	b.n	800715a <_printf_i+0x226>
 800716e:	bf00      	nop
 8007170:	08009636 	.word	0x08009636
 8007174:	08009647 	.word	0x08009647

08007178 <std>:
 8007178:	2300      	movs	r3, #0
 800717a:	b510      	push	{r4, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	e9c0 3300 	strd	r3, r3, [r0]
 8007182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007186:	6083      	str	r3, [r0, #8]
 8007188:	8181      	strh	r1, [r0, #12]
 800718a:	6643      	str	r3, [r0, #100]	; 0x64
 800718c:	81c2      	strh	r2, [r0, #14]
 800718e:	6183      	str	r3, [r0, #24]
 8007190:	4619      	mov	r1, r3
 8007192:	2208      	movs	r2, #8
 8007194:	305c      	adds	r0, #92	; 0x5c
 8007196:	f000 f914 	bl	80073c2 <memset>
 800719a:	4b0d      	ldr	r3, [pc, #52]	; (80071d0 <std+0x58>)
 800719c:	6263      	str	r3, [r4, #36]	; 0x24
 800719e:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <std+0x5c>)
 80071a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071a2:	4b0d      	ldr	r3, [pc, #52]	; (80071d8 <std+0x60>)
 80071a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071a6:	4b0d      	ldr	r3, [pc, #52]	; (80071dc <std+0x64>)
 80071a8:	6323      	str	r3, [r4, #48]	; 0x30
 80071aa:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <std+0x68>)
 80071ac:	6224      	str	r4, [r4, #32]
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d006      	beq.n	80071c0 <std+0x48>
 80071b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80071b6:	4294      	cmp	r4, r2
 80071b8:	d002      	beq.n	80071c0 <std+0x48>
 80071ba:	33d0      	adds	r3, #208	; 0xd0
 80071bc:	429c      	cmp	r4, r3
 80071be:	d105      	bne.n	80071cc <std+0x54>
 80071c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071c8:	f000 b978 	b.w	80074bc <__retarget_lock_init_recursive>
 80071cc:	bd10      	pop	{r4, pc}
 80071ce:	bf00      	nop
 80071d0:	0800733d 	.word	0x0800733d
 80071d4:	0800735f 	.word	0x0800735f
 80071d8:	08007397 	.word	0x08007397
 80071dc:	080073bb 	.word	0x080073bb
 80071e0:	20000784 	.word	0x20000784

080071e4 <stdio_exit_handler>:
 80071e4:	4a02      	ldr	r2, [pc, #8]	; (80071f0 <stdio_exit_handler+0xc>)
 80071e6:	4903      	ldr	r1, [pc, #12]	; (80071f4 <stdio_exit_handler+0x10>)
 80071e8:	4803      	ldr	r0, [pc, #12]	; (80071f8 <stdio_exit_handler+0x14>)
 80071ea:	f000 b869 	b.w	80072c0 <_fwalk_sglue>
 80071ee:	bf00      	nop
 80071f0:	20000128 	.word	0x20000128
 80071f4:	08008e89 	.word	0x08008e89
 80071f8:	20000134 	.word	0x20000134

080071fc <cleanup_stdio>:
 80071fc:	6841      	ldr	r1, [r0, #4]
 80071fe:	4b0c      	ldr	r3, [pc, #48]	; (8007230 <cleanup_stdio+0x34>)
 8007200:	4299      	cmp	r1, r3
 8007202:	b510      	push	{r4, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	d001      	beq.n	800720c <cleanup_stdio+0x10>
 8007208:	f001 fe3e 	bl	8008e88 <_fflush_r>
 800720c:	68a1      	ldr	r1, [r4, #8]
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <cleanup_stdio+0x38>)
 8007210:	4299      	cmp	r1, r3
 8007212:	d002      	beq.n	800721a <cleanup_stdio+0x1e>
 8007214:	4620      	mov	r0, r4
 8007216:	f001 fe37 	bl	8008e88 <_fflush_r>
 800721a:	68e1      	ldr	r1, [r4, #12]
 800721c:	4b06      	ldr	r3, [pc, #24]	; (8007238 <cleanup_stdio+0x3c>)
 800721e:	4299      	cmp	r1, r3
 8007220:	d004      	beq.n	800722c <cleanup_stdio+0x30>
 8007222:	4620      	mov	r0, r4
 8007224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007228:	f001 be2e 	b.w	8008e88 <_fflush_r>
 800722c:	bd10      	pop	{r4, pc}
 800722e:	bf00      	nop
 8007230:	20000784 	.word	0x20000784
 8007234:	200007ec 	.word	0x200007ec
 8007238:	20000854 	.word	0x20000854

0800723c <global_stdio_init.part.0>:
 800723c:	b510      	push	{r4, lr}
 800723e:	4b0b      	ldr	r3, [pc, #44]	; (800726c <global_stdio_init.part.0+0x30>)
 8007240:	4c0b      	ldr	r4, [pc, #44]	; (8007270 <global_stdio_init.part.0+0x34>)
 8007242:	4a0c      	ldr	r2, [pc, #48]	; (8007274 <global_stdio_init.part.0+0x38>)
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	4620      	mov	r0, r4
 8007248:	2200      	movs	r2, #0
 800724a:	2104      	movs	r1, #4
 800724c:	f7ff ff94 	bl	8007178 <std>
 8007250:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007254:	2201      	movs	r2, #1
 8007256:	2109      	movs	r1, #9
 8007258:	f7ff ff8e 	bl	8007178 <std>
 800725c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007260:	2202      	movs	r2, #2
 8007262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007266:	2112      	movs	r1, #18
 8007268:	f7ff bf86 	b.w	8007178 <std>
 800726c:	200008bc 	.word	0x200008bc
 8007270:	20000784 	.word	0x20000784
 8007274:	080071e5 	.word	0x080071e5

08007278 <__sfp_lock_acquire>:
 8007278:	4801      	ldr	r0, [pc, #4]	; (8007280 <__sfp_lock_acquire+0x8>)
 800727a:	f000 b920 	b.w	80074be <__retarget_lock_acquire_recursive>
 800727e:	bf00      	nop
 8007280:	200008c5 	.word	0x200008c5

08007284 <__sfp_lock_release>:
 8007284:	4801      	ldr	r0, [pc, #4]	; (800728c <__sfp_lock_release+0x8>)
 8007286:	f000 b91b 	b.w	80074c0 <__retarget_lock_release_recursive>
 800728a:	bf00      	nop
 800728c:	200008c5 	.word	0x200008c5

08007290 <__sinit>:
 8007290:	b510      	push	{r4, lr}
 8007292:	4604      	mov	r4, r0
 8007294:	f7ff fff0 	bl	8007278 <__sfp_lock_acquire>
 8007298:	6a23      	ldr	r3, [r4, #32]
 800729a:	b11b      	cbz	r3, 80072a4 <__sinit+0x14>
 800729c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a0:	f7ff bff0 	b.w	8007284 <__sfp_lock_release>
 80072a4:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <__sinit+0x28>)
 80072a6:	6223      	str	r3, [r4, #32]
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <__sinit+0x2c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f5      	bne.n	800729c <__sinit+0xc>
 80072b0:	f7ff ffc4 	bl	800723c <global_stdio_init.part.0>
 80072b4:	e7f2      	b.n	800729c <__sinit+0xc>
 80072b6:	bf00      	nop
 80072b8:	080071fd 	.word	0x080071fd
 80072bc:	200008bc 	.word	0x200008bc

080072c0 <_fwalk_sglue>:
 80072c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4607      	mov	r7, r0
 80072c6:	4688      	mov	r8, r1
 80072c8:	4614      	mov	r4, r2
 80072ca:	2600      	movs	r6, #0
 80072cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072d0:	f1b9 0901 	subs.w	r9, r9, #1
 80072d4:	d505      	bpl.n	80072e2 <_fwalk_sglue+0x22>
 80072d6:	6824      	ldr	r4, [r4, #0]
 80072d8:	2c00      	cmp	r4, #0
 80072da:	d1f7      	bne.n	80072cc <_fwalk_sglue+0xc>
 80072dc:	4630      	mov	r0, r6
 80072de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072e2:	89ab      	ldrh	r3, [r5, #12]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d907      	bls.n	80072f8 <_fwalk_sglue+0x38>
 80072e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072ec:	3301      	adds	r3, #1
 80072ee:	d003      	beq.n	80072f8 <_fwalk_sglue+0x38>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	4306      	orrs	r6, r0
 80072f8:	3568      	adds	r5, #104	; 0x68
 80072fa:	e7e9      	b.n	80072d0 <_fwalk_sglue+0x10>

080072fc <siprintf>:
 80072fc:	b40e      	push	{r1, r2, r3}
 80072fe:	b500      	push	{lr}
 8007300:	b09c      	sub	sp, #112	; 0x70
 8007302:	ab1d      	add	r3, sp, #116	; 0x74
 8007304:	9002      	str	r0, [sp, #8]
 8007306:	9006      	str	r0, [sp, #24]
 8007308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800730c:	4809      	ldr	r0, [pc, #36]	; (8007334 <siprintf+0x38>)
 800730e:	9107      	str	r1, [sp, #28]
 8007310:	9104      	str	r1, [sp, #16]
 8007312:	4909      	ldr	r1, [pc, #36]	; (8007338 <siprintf+0x3c>)
 8007314:	f853 2b04 	ldr.w	r2, [r3], #4
 8007318:	9105      	str	r1, [sp, #20]
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	9301      	str	r3, [sp, #4]
 800731e:	a902      	add	r1, sp, #8
 8007320:	f001 fc2e 	bl	8008b80 <_svfiprintf_r>
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	2200      	movs	r2, #0
 8007328:	701a      	strb	r2, [r3, #0]
 800732a:	b01c      	add	sp, #112	; 0x70
 800732c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007330:	b003      	add	sp, #12
 8007332:	4770      	bx	lr
 8007334:	20000180 	.word	0x20000180
 8007338:	ffff0208 	.word	0xffff0208

0800733c <__sread>:
 800733c:	b510      	push	{r4, lr}
 800733e:	460c      	mov	r4, r1
 8007340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007344:	f000 f86c 	bl	8007420 <_read_r>
 8007348:	2800      	cmp	r0, #0
 800734a:	bfab      	itete	ge
 800734c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800734e:	89a3      	ldrhlt	r3, [r4, #12]
 8007350:	181b      	addge	r3, r3, r0
 8007352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007356:	bfac      	ite	ge
 8007358:	6563      	strge	r3, [r4, #84]	; 0x54
 800735a:	81a3      	strhlt	r3, [r4, #12]
 800735c:	bd10      	pop	{r4, pc}

0800735e <__swrite>:
 800735e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007362:	461f      	mov	r7, r3
 8007364:	898b      	ldrh	r3, [r1, #12]
 8007366:	05db      	lsls	r3, r3, #23
 8007368:	4605      	mov	r5, r0
 800736a:	460c      	mov	r4, r1
 800736c:	4616      	mov	r6, r2
 800736e:	d505      	bpl.n	800737c <__swrite+0x1e>
 8007370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007374:	2302      	movs	r3, #2
 8007376:	2200      	movs	r2, #0
 8007378:	f000 f840 	bl	80073fc <_lseek_r>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007386:	81a3      	strh	r3, [r4, #12]
 8007388:	4632      	mov	r2, r6
 800738a:	463b      	mov	r3, r7
 800738c:	4628      	mov	r0, r5
 800738e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007392:	f000 b857 	b.w	8007444 <_write_r>

08007396 <__sseek>:
 8007396:	b510      	push	{r4, lr}
 8007398:	460c      	mov	r4, r1
 800739a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800739e:	f000 f82d 	bl	80073fc <_lseek_r>
 80073a2:	1c43      	adds	r3, r0, #1
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	bf15      	itete	ne
 80073a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80073aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073b2:	81a3      	strheq	r3, [r4, #12]
 80073b4:	bf18      	it	ne
 80073b6:	81a3      	strhne	r3, [r4, #12]
 80073b8:	bd10      	pop	{r4, pc}

080073ba <__sclose>:
 80073ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073be:	f000 b80d 	b.w	80073dc <_close_r>

080073c2 <memset>:
 80073c2:	4402      	add	r2, r0
 80073c4:	4603      	mov	r3, r0
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d100      	bne.n	80073cc <memset+0xa>
 80073ca:	4770      	bx	lr
 80073cc:	f803 1b01 	strb.w	r1, [r3], #1
 80073d0:	e7f9      	b.n	80073c6 <memset+0x4>
	...

080073d4 <_localeconv_r>:
 80073d4:	4800      	ldr	r0, [pc, #0]	; (80073d8 <_localeconv_r+0x4>)
 80073d6:	4770      	bx	lr
 80073d8:	20000274 	.word	0x20000274

080073dc <_close_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d06      	ldr	r5, [pc, #24]	; (80073f8 <_close_r+0x1c>)
 80073e0:	2300      	movs	r3, #0
 80073e2:	4604      	mov	r4, r0
 80073e4:	4608      	mov	r0, r1
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	f7fa f993 	bl	8001712 <_close>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d102      	bne.n	80073f6 <_close_r+0x1a>
 80073f0:	682b      	ldr	r3, [r5, #0]
 80073f2:	b103      	cbz	r3, 80073f6 <_close_r+0x1a>
 80073f4:	6023      	str	r3, [r4, #0]
 80073f6:	bd38      	pop	{r3, r4, r5, pc}
 80073f8:	200008c0 	.word	0x200008c0

080073fc <_lseek_r>:
 80073fc:	b538      	push	{r3, r4, r5, lr}
 80073fe:	4d07      	ldr	r5, [pc, #28]	; (800741c <_lseek_r+0x20>)
 8007400:	4604      	mov	r4, r0
 8007402:	4608      	mov	r0, r1
 8007404:	4611      	mov	r1, r2
 8007406:	2200      	movs	r2, #0
 8007408:	602a      	str	r2, [r5, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	f7fa f9a8 	bl	8001760 <_lseek>
 8007410:	1c43      	adds	r3, r0, #1
 8007412:	d102      	bne.n	800741a <_lseek_r+0x1e>
 8007414:	682b      	ldr	r3, [r5, #0]
 8007416:	b103      	cbz	r3, 800741a <_lseek_r+0x1e>
 8007418:	6023      	str	r3, [r4, #0]
 800741a:	bd38      	pop	{r3, r4, r5, pc}
 800741c:	200008c0 	.word	0x200008c0

08007420 <_read_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4d07      	ldr	r5, [pc, #28]	; (8007440 <_read_r+0x20>)
 8007424:	4604      	mov	r4, r0
 8007426:	4608      	mov	r0, r1
 8007428:	4611      	mov	r1, r2
 800742a:	2200      	movs	r2, #0
 800742c:	602a      	str	r2, [r5, #0]
 800742e:	461a      	mov	r2, r3
 8007430:	f7fa f936 	bl	80016a0 <_read>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_read_r+0x1e>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_read_r+0x1e>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	200008c0 	.word	0x200008c0

08007444 <_write_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d07      	ldr	r5, [pc, #28]	; (8007464 <_write_r+0x20>)
 8007448:	4604      	mov	r4, r0
 800744a:	4608      	mov	r0, r1
 800744c:	4611      	mov	r1, r2
 800744e:	2200      	movs	r2, #0
 8007450:	602a      	str	r2, [r5, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	f7fa f941 	bl	80016da <_write>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_write_r+0x1e>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_write_r+0x1e>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	200008c0 	.word	0x200008c0

08007468 <__errno>:
 8007468:	4b01      	ldr	r3, [pc, #4]	; (8007470 <__errno+0x8>)
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	20000180 	.word	0x20000180

08007474 <__libc_init_array>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4d0d      	ldr	r5, [pc, #52]	; (80074ac <__libc_init_array+0x38>)
 8007478:	4c0d      	ldr	r4, [pc, #52]	; (80074b0 <__libc_init_array+0x3c>)
 800747a:	1b64      	subs	r4, r4, r5
 800747c:	10a4      	asrs	r4, r4, #2
 800747e:	2600      	movs	r6, #0
 8007480:	42a6      	cmp	r6, r4
 8007482:	d109      	bne.n	8007498 <__libc_init_array+0x24>
 8007484:	4d0b      	ldr	r5, [pc, #44]	; (80074b4 <__libc_init_array+0x40>)
 8007486:	4c0c      	ldr	r4, [pc, #48]	; (80074b8 <__libc_init_array+0x44>)
 8007488:	f002 f894 	bl	80095b4 <_init>
 800748c:	1b64      	subs	r4, r4, r5
 800748e:	10a4      	asrs	r4, r4, #2
 8007490:	2600      	movs	r6, #0
 8007492:	42a6      	cmp	r6, r4
 8007494:	d105      	bne.n	80074a2 <__libc_init_array+0x2e>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	f855 3b04 	ldr.w	r3, [r5], #4
 800749c:	4798      	blx	r3
 800749e:	3601      	adds	r6, #1
 80074a0:	e7ee      	b.n	8007480 <__libc_init_array+0xc>
 80074a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a6:	4798      	blx	r3
 80074a8:	3601      	adds	r6, #1
 80074aa:	e7f2      	b.n	8007492 <__libc_init_array+0x1e>
 80074ac:	08009994 	.word	0x08009994
 80074b0:	08009994 	.word	0x08009994
 80074b4:	08009994 	.word	0x08009994
 80074b8:	08009998 	.word	0x08009998

080074bc <__retarget_lock_init_recursive>:
 80074bc:	4770      	bx	lr

080074be <__retarget_lock_acquire_recursive>:
 80074be:	4770      	bx	lr

080074c0 <__retarget_lock_release_recursive>:
 80074c0:	4770      	bx	lr

080074c2 <memcpy>:
 80074c2:	440a      	add	r2, r1
 80074c4:	4291      	cmp	r1, r2
 80074c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ca:	d100      	bne.n	80074ce <memcpy+0xc>
 80074cc:	4770      	bx	lr
 80074ce:	b510      	push	{r4, lr}
 80074d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d8:	4291      	cmp	r1, r2
 80074da:	d1f9      	bne.n	80074d0 <memcpy+0xe>
 80074dc:	bd10      	pop	{r4, pc}

080074de <quorem>:
 80074de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e2:	6903      	ldr	r3, [r0, #16]
 80074e4:	690c      	ldr	r4, [r1, #16]
 80074e6:	42a3      	cmp	r3, r4
 80074e8:	4607      	mov	r7, r0
 80074ea:	db7e      	blt.n	80075ea <quorem+0x10c>
 80074ec:	3c01      	subs	r4, #1
 80074ee:	f101 0814 	add.w	r8, r1, #20
 80074f2:	f100 0514 	add.w	r5, r0, #20
 80074f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074fa:	9301      	str	r3, [sp, #4]
 80074fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007504:	3301      	adds	r3, #1
 8007506:	429a      	cmp	r2, r3
 8007508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800750c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007510:	fbb2 f6f3 	udiv	r6, r2, r3
 8007514:	d331      	bcc.n	800757a <quorem+0x9c>
 8007516:	f04f 0e00 	mov.w	lr, #0
 800751a:	4640      	mov	r0, r8
 800751c:	46ac      	mov	ip, r5
 800751e:	46f2      	mov	sl, lr
 8007520:	f850 2b04 	ldr.w	r2, [r0], #4
 8007524:	b293      	uxth	r3, r2
 8007526:	fb06 e303 	mla	r3, r6, r3, lr
 800752a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800752e:	0c1a      	lsrs	r2, r3, #16
 8007530:	b29b      	uxth	r3, r3
 8007532:	ebaa 0303 	sub.w	r3, sl, r3
 8007536:	f8dc a000 	ldr.w	sl, [ip]
 800753a:	fa13 f38a 	uxtah	r3, r3, sl
 800753e:	fb06 220e 	mla	r2, r6, lr, r2
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	9b00      	ldr	r3, [sp, #0]
 8007546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800754a:	b292      	uxth	r2, r2
 800754c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007554:	f8bd 3000 	ldrh.w	r3, [sp]
 8007558:	4581      	cmp	r9, r0
 800755a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800755e:	f84c 3b04 	str.w	r3, [ip], #4
 8007562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007566:	d2db      	bcs.n	8007520 <quorem+0x42>
 8007568:	f855 300b 	ldr.w	r3, [r5, fp]
 800756c:	b92b      	cbnz	r3, 800757a <quorem+0x9c>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	3b04      	subs	r3, #4
 8007572:	429d      	cmp	r5, r3
 8007574:	461a      	mov	r2, r3
 8007576:	d32c      	bcc.n	80075d2 <quorem+0xf4>
 8007578:	613c      	str	r4, [r7, #16]
 800757a:	4638      	mov	r0, r7
 800757c:	f001 f9a6 	bl	80088cc <__mcmp>
 8007580:	2800      	cmp	r0, #0
 8007582:	db22      	blt.n	80075ca <quorem+0xec>
 8007584:	3601      	adds	r6, #1
 8007586:	4629      	mov	r1, r5
 8007588:	2000      	movs	r0, #0
 800758a:	f858 2b04 	ldr.w	r2, [r8], #4
 800758e:	f8d1 c000 	ldr.w	ip, [r1]
 8007592:	b293      	uxth	r3, r2
 8007594:	1ac3      	subs	r3, r0, r3
 8007596:	0c12      	lsrs	r2, r2, #16
 8007598:	fa13 f38c 	uxtah	r3, r3, ip
 800759c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80075a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075aa:	45c1      	cmp	r9, r8
 80075ac:	f841 3b04 	str.w	r3, [r1], #4
 80075b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075b4:	d2e9      	bcs.n	800758a <quorem+0xac>
 80075b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075be:	b922      	cbnz	r2, 80075ca <quorem+0xec>
 80075c0:	3b04      	subs	r3, #4
 80075c2:	429d      	cmp	r5, r3
 80075c4:	461a      	mov	r2, r3
 80075c6:	d30a      	bcc.n	80075de <quorem+0x100>
 80075c8:	613c      	str	r4, [r7, #16]
 80075ca:	4630      	mov	r0, r6
 80075cc:	b003      	add	sp, #12
 80075ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d2:	6812      	ldr	r2, [r2, #0]
 80075d4:	3b04      	subs	r3, #4
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d1ce      	bne.n	8007578 <quorem+0x9a>
 80075da:	3c01      	subs	r4, #1
 80075dc:	e7c9      	b.n	8007572 <quorem+0x94>
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	3b04      	subs	r3, #4
 80075e2:	2a00      	cmp	r2, #0
 80075e4:	d1f0      	bne.n	80075c8 <quorem+0xea>
 80075e6:	3c01      	subs	r4, #1
 80075e8:	e7eb      	b.n	80075c2 <quorem+0xe4>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e7ee      	b.n	80075cc <quorem+0xee>
	...

080075f0 <_dtoa_r>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	ed2d 8b04 	vpush	{d8-d9}
 80075f8:	69c5      	ldr	r5, [r0, #28]
 80075fa:	b093      	sub	sp, #76	; 0x4c
 80075fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007600:	ec57 6b10 	vmov	r6, r7, d0
 8007604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007608:	9107      	str	r1, [sp, #28]
 800760a:	4604      	mov	r4, r0
 800760c:	920a      	str	r2, [sp, #40]	; 0x28
 800760e:	930d      	str	r3, [sp, #52]	; 0x34
 8007610:	b975      	cbnz	r5, 8007630 <_dtoa_r+0x40>
 8007612:	2010      	movs	r0, #16
 8007614:	f000 fe2a 	bl	800826c <malloc>
 8007618:	4602      	mov	r2, r0
 800761a:	61e0      	str	r0, [r4, #28]
 800761c:	b920      	cbnz	r0, 8007628 <_dtoa_r+0x38>
 800761e:	4bae      	ldr	r3, [pc, #696]	; (80078d8 <_dtoa_r+0x2e8>)
 8007620:	21ef      	movs	r1, #239	; 0xef
 8007622:	48ae      	ldr	r0, [pc, #696]	; (80078dc <_dtoa_r+0x2ec>)
 8007624:	f001 fc82 	bl	8008f2c <__assert_func>
 8007628:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800762c:	6005      	str	r5, [r0, #0]
 800762e:	60c5      	str	r5, [r0, #12]
 8007630:	69e3      	ldr	r3, [r4, #28]
 8007632:	6819      	ldr	r1, [r3, #0]
 8007634:	b151      	cbz	r1, 800764c <_dtoa_r+0x5c>
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	604a      	str	r2, [r1, #4]
 800763a:	2301      	movs	r3, #1
 800763c:	4093      	lsls	r3, r2
 800763e:	608b      	str	r3, [r1, #8]
 8007640:	4620      	mov	r0, r4
 8007642:	f000 ff07 	bl	8008454 <_Bfree>
 8007646:	69e3      	ldr	r3, [r4, #28]
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]
 800764c:	1e3b      	subs	r3, r7, #0
 800764e:	bfbb      	ittet	lt
 8007650:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007654:	9303      	strlt	r3, [sp, #12]
 8007656:	2300      	movge	r3, #0
 8007658:	2201      	movlt	r2, #1
 800765a:	bfac      	ite	ge
 800765c:	f8c8 3000 	strge.w	r3, [r8]
 8007660:	f8c8 2000 	strlt.w	r2, [r8]
 8007664:	4b9e      	ldr	r3, [pc, #632]	; (80078e0 <_dtoa_r+0x2f0>)
 8007666:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800766a:	ea33 0308 	bics.w	r3, r3, r8
 800766e:	d11b      	bne.n	80076a8 <_dtoa_r+0xb8>
 8007670:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007672:	f242 730f 	movw	r3, #9999	; 0x270f
 8007676:	6013      	str	r3, [r2, #0]
 8007678:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800767c:	4333      	orrs	r3, r6
 800767e:	f000 8593 	beq.w	80081a8 <_dtoa_r+0xbb8>
 8007682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007684:	b963      	cbnz	r3, 80076a0 <_dtoa_r+0xb0>
 8007686:	4b97      	ldr	r3, [pc, #604]	; (80078e4 <_dtoa_r+0x2f4>)
 8007688:	e027      	b.n	80076da <_dtoa_r+0xea>
 800768a:	4b97      	ldr	r3, [pc, #604]	; (80078e8 <_dtoa_r+0x2f8>)
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	3308      	adds	r3, #8
 8007690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	9800      	ldr	r0, [sp, #0]
 8007696:	b013      	add	sp, #76	; 0x4c
 8007698:	ecbd 8b04 	vpop	{d8-d9}
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	4b90      	ldr	r3, [pc, #576]	; (80078e4 <_dtoa_r+0x2f4>)
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	3303      	adds	r3, #3
 80076a6:	e7f3      	b.n	8007690 <_dtoa_r+0xa0>
 80076a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	ec51 0b17 	vmov	r0, r1, d7
 80076b2:	eeb0 8a47 	vmov.f32	s16, s14
 80076b6:	eef0 8a67 	vmov.f32	s17, s15
 80076ba:	2300      	movs	r3, #0
 80076bc:	f7f9 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c0:	4681      	mov	r9, r0
 80076c2:	b160      	cbz	r0, 80076de <_dtoa_r+0xee>
 80076c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076c6:	2301      	movs	r3, #1
 80076c8:	6013      	str	r3, [r2, #0]
 80076ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 8568 	beq.w	80081a2 <_dtoa_r+0xbb2>
 80076d2:	4b86      	ldr	r3, [pc, #536]	; (80078ec <_dtoa_r+0x2fc>)
 80076d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076d6:	6013      	str	r3, [r2, #0]
 80076d8:	3b01      	subs	r3, #1
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	e7da      	b.n	8007694 <_dtoa_r+0xa4>
 80076de:	aa10      	add	r2, sp, #64	; 0x40
 80076e0:	a911      	add	r1, sp, #68	; 0x44
 80076e2:	4620      	mov	r0, r4
 80076e4:	eeb0 0a48 	vmov.f32	s0, s16
 80076e8:	eef0 0a68 	vmov.f32	s1, s17
 80076ec:	f001 f994 	bl	8008a18 <__d2b>
 80076f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076f4:	4682      	mov	sl, r0
 80076f6:	2d00      	cmp	r5, #0
 80076f8:	d07f      	beq.n	80077fa <_dtoa_r+0x20a>
 80076fa:	ee18 3a90 	vmov	r3, s17
 80076fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007702:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007706:	ec51 0b18 	vmov	r0, r1, d8
 800770a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800770e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007712:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007716:	4619      	mov	r1, r3
 8007718:	2200      	movs	r2, #0
 800771a:	4b75      	ldr	r3, [pc, #468]	; (80078f0 <_dtoa_r+0x300>)
 800771c:	f7f8 fdb4 	bl	8000288 <__aeabi_dsub>
 8007720:	a367      	add	r3, pc, #412	; (adr r3, 80078c0 <_dtoa_r+0x2d0>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f7f8 ff67 	bl	80005f8 <__aeabi_dmul>
 800772a:	a367      	add	r3, pc, #412	; (adr r3, 80078c8 <_dtoa_r+0x2d8>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	f7f8 fdac 	bl	800028c <__adddf3>
 8007734:	4606      	mov	r6, r0
 8007736:	4628      	mov	r0, r5
 8007738:	460f      	mov	r7, r1
 800773a:	f7f8 fef3 	bl	8000524 <__aeabi_i2d>
 800773e:	a364      	add	r3, pc, #400	; (adr r3, 80078d0 <_dtoa_r+0x2e0>)
 8007740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007744:	f7f8 ff58 	bl	80005f8 <__aeabi_dmul>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f8 fd9c 	bl	800028c <__adddf3>
 8007754:	4606      	mov	r6, r0
 8007756:	460f      	mov	r7, r1
 8007758:	f7f9 f9fe 	bl	8000b58 <__aeabi_d2iz>
 800775c:	2200      	movs	r2, #0
 800775e:	4683      	mov	fp, r0
 8007760:	2300      	movs	r3, #0
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f9 f9b9 	bl	8000adc <__aeabi_dcmplt>
 800776a:	b148      	cbz	r0, 8007780 <_dtoa_r+0x190>
 800776c:	4658      	mov	r0, fp
 800776e:	f7f8 fed9 	bl	8000524 <__aeabi_i2d>
 8007772:	4632      	mov	r2, r6
 8007774:	463b      	mov	r3, r7
 8007776:	f7f9 f9a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800777a:	b908      	cbnz	r0, 8007780 <_dtoa_r+0x190>
 800777c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007780:	f1bb 0f16 	cmp.w	fp, #22
 8007784:	d857      	bhi.n	8007836 <_dtoa_r+0x246>
 8007786:	4b5b      	ldr	r3, [pc, #364]	; (80078f4 <_dtoa_r+0x304>)
 8007788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	ec51 0b18 	vmov	r0, r1, d8
 8007794:	f7f9 f9a2 	bl	8000adc <__aeabi_dcmplt>
 8007798:	2800      	cmp	r0, #0
 800779a:	d04e      	beq.n	800783a <_dtoa_r+0x24a>
 800779c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077a0:	2300      	movs	r3, #0
 80077a2:	930c      	str	r3, [sp, #48]	; 0x30
 80077a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80077a6:	1b5b      	subs	r3, r3, r5
 80077a8:	1e5a      	subs	r2, r3, #1
 80077aa:	bf45      	ittet	mi
 80077ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80077b0:	9305      	strmi	r3, [sp, #20]
 80077b2:	2300      	movpl	r3, #0
 80077b4:	2300      	movmi	r3, #0
 80077b6:	9206      	str	r2, [sp, #24]
 80077b8:	bf54      	ite	pl
 80077ba:	9305      	strpl	r3, [sp, #20]
 80077bc:	9306      	strmi	r3, [sp, #24]
 80077be:	f1bb 0f00 	cmp.w	fp, #0
 80077c2:	db3c      	blt.n	800783e <_dtoa_r+0x24e>
 80077c4:	9b06      	ldr	r3, [sp, #24]
 80077c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80077ca:	445b      	add	r3, fp
 80077cc:	9306      	str	r3, [sp, #24]
 80077ce:	2300      	movs	r3, #0
 80077d0:	9308      	str	r3, [sp, #32]
 80077d2:	9b07      	ldr	r3, [sp, #28]
 80077d4:	2b09      	cmp	r3, #9
 80077d6:	d868      	bhi.n	80078aa <_dtoa_r+0x2ba>
 80077d8:	2b05      	cmp	r3, #5
 80077da:	bfc4      	itt	gt
 80077dc:	3b04      	subgt	r3, #4
 80077de:	9307      	strgt	r3, [sp, #28]
 80077e0:	9b07      	ldr	r3, [sp, #28]
 80077e2:	f1a3 0302 	sub.w	r3, r3, #2
 80077e6:	bfcc      	ite	gt
 80077e8:	2500      	movgt	r5, #0
 80077ea:	2501      	movle	r5, #1
 80077ec:	2b03      	cmp	r3, #3
 80077ee:	f200 8085 	bhi.w	80078fc <_dtoa_r+0x30c>
 80077f2:	e8df f003 	tbb	[pc, r3]
 80077f6:	3b2e      	.short	0x3b2e
 80077f8:	5839      	.short	0x5839
 80077fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077fe:	441d      	add	r5, r3
 8007800:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007804:	2b20      	cmp	r3, #32
 8007806:	bfc1      	itttt	gt
 8007808:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800780c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007810:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007814:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007818:	bfd6      	itet	le
 800781a:	f1c3 0320 	rsble	r3, r3, #32
 800781e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007822:	fa06 f003 	lslle.w	r0, r6, r3
 8007826:	f7f8 fe6d 	bl	8000504 <__aeabi_ui2d>
 800782a:	2201      	movs	r2, #1
 800782c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007830:	3d01      	subs	r5, #1
 8007832:	920e      	str	r2, [sp, #56]	; 0x38
 8007834:	e76f      	b.n	8007716 <_dtoa_r+0x126>
 8007836:	2301      	movs	r3, #1
 8007838:	e7b3      	b.n	80077a2 <_dtoa_r+0x1b2>
 800783a:	900c      	str	r0, [sp, #48]	; 0x30
 800783c:	e7b2      	b.n	80077a4 <_dtoa_r+0x1b4>
 800783e:	9b05      	ldr	r3, [sp, #20]
 8007840:	eba3 030b 	sub.w	r3, r3, fp
 8007844:	9305      	str	r3, [sp, #20]
 8007846:	f1cb 0300 	rsb	r3, fp, #0
 800784a:	9308      	str	r3, [sp, #32]
 800784c:	2300      	movs	r3, #0
 800784e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007850:	e7bf      	b.n	80077d2 <_dtoa_r+0x1e2>
 8007852:	2300      	movs	r3, #0
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007858:	2b00      	cmp	r3, #0
 800785a:	dc52      	bgt.n	8007902 <_dtoa_r+0x312>
 800785c:	2301      	movs	r3, #1
 800785e:	9301      	str	r3, [sp, #4]
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	461a      	mov	r2, r3
 8007864:	920a      	str	r2, [sp, #40]	; 0x28
 8007866:	e00b      	b.n	8007880 <_dtoa_r+0x290>
 8007868:	2301      	movs	r3, #1
 800786a:	e7f3      	b.n	8007854 <_dtoa_r+0x264>
 800786c:	2300      	movs	r3, #0
 800786e:	9309      	str	r3, [sp, #36]	; 0x24
 8007870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007872:	445b      	add	r3, fp
 8007874:	9301      	str	r3, [sp, #4]
 8007876:	3301      	adds	r3, #1
 8007878:	2b01      	cmp	r3, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	bfb8      	it	lt
 800787e:	2301      	movlt	r3, #1
 8007880:	69e0      	ldr	r0, [r4, #28]
 8007882:	2100      	movs	r1, #0
 8007884:	2204      	movs	r2, #4
 8007886:	f102 0614 	add.w	r6, r2, #20
 800788a:	429e      	cmp	r6, r3
 800788c:	d93d      	bls.n	800790a <_dtoa_r+0x31a>
 800788e:	6041      	str	r1, [r0, #4]
 8007890:	4620      	mov	r0, r4
 8007892:	f000 fd9f 	bl	80083d4 <_Balloc>
 8007896:	9000      	str	r0, [sp, #0]
 8007898:	2800      	cmp	r0, #0
 800789a:	d139      	bne.n	8007910 <_dtoa_r+0x320>
 800789c:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <_dtoa_r+0x308>)
 800789e:	4602      	mov	r2, r0
 80078a0:	f240 11af 	movw	r1, #431	; 0x1af
 80078a4:	e6bd      	b.n	8007622 <_dtoa_r+0x32>
 80078a6:	2301      	movs	r3, #1
 80078a8:	e7e1      	b.n	800786e <_dtoa_r+0x27e>
 80078aa:	2501      	movs	r5, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	9307      	str	r3, [sp, #28]
 80078b0:	9509      	str	r5, [sp, #36]	; 0x24
 80078b2:	f04f 33ff 	mov.w	r3, #4294967295
 80078b6:	9301      	str	r3, [sp, #4]
 80078b8:	9304      	str	r3, [sp, #16]
 80078ba:	2200      	movs	r2, #0
 80078bc:	2312      	movs	r3, #18
 80078be:	e7d1      	b.n	8007864 <_dtoa_r+0x274>
 80078c0:	636f4361 	.word	0x636f4361
 80078c4:	3fd287a7 	.word	0x3fd287a7
 80078c8:	8b60c8b3 	.word	0x8b60c8b3
 80078cc:	3fc68a28 	.word	0x3fc68a28
 80078d0:	509f79fb 	.word	0x509f79fb
 80078d4:	3fd34413 	.word	0x3fd34413
 80078d8:	08009665 	.word	0x08009665
 80078dc:	0800967c 	.word	0x0800967c
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	08009661 	.word	0x08009661
 80078e8:	08009658 	.word	0x08009658
 80078ec:	08009635 	.word	0x08009635
 80078f0:	3ff80000 	.word	0x3ff80000
 80078f4:	08009768 	.word	0x08009768
 80078f8:	080096d4 	.word	0x080096d4
 80078fc:	2301      	movs	r3, #1
 80078fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007900:	e7d7      	b.n	80078b2 <_dtoa_r+0x2c2>
 8007902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	9304      	str	r3, [sp, #16]
 8007908:	e7ba      	b.n	8007880 <_dtoa_r+0x290>
 800790a:	3101      	adds	r1, #1
 800790c:	0052      	lsls	r2, r2, #1
 800790e:	e7ba      	b.n	8007886 <_dtoa_r+0x296>
 8007910:	69e3      	ldr	r3, [r4, #28]
 8007912:	9a00      	ldr	r2, [sp, #0]
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	9b04      	ldr	r3, [sp, #16]
 8007918:	2b0e      	cmp	r3, #14
 800791a:	f200 80a8 	bhi.w	8007a6e <_dtoa_r+0x47e>
 800791e:	2d00      	cmp	r5, #0
 8007920:	f000 80a5 	beq.w	8007a6e <_dtoa_r+0x47e>
 8007924:	f1bb 0f00 	cmp.w	fp, #0
 8007928:	dd38      	ble.n	800799c <_dtoa_r+0x3ac>
 800792a:	4bc0      	ldr	r3, [pc, #768]	; (8007c2c <_dtoa_r+0x63c>)
 800792c:	f00b 020f 	and.w	r2, fp, #15
 8007930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007934:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007938:	e9d3 6700 	ldrd	r6, r7, [r3]
 800793c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007940:	d019      	beq.n	8007976 <_dtoa_r+0x386>
 8007942:	4bbb      	ldr	r3, [pc, #748]	; (8007c30 <_dtoa_r+0x640>)
 8007944:	ec51 0b18 	vmov	r0, r1, d8
 8007948:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800794c:	f7f8 ff7e 	bl	800084c <__aeabi_ddiv>
 8007950:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007954:	f008 080f 	and.w	r8, r8, #15
 8007958:	2503      	movs	r5, #3
 800795a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007c30 <_dtoa_r+0x640>
 800795e:	f1b8 0f00 	cmp.w	r8, #0
 8007962:	d10a      	bne.n	800797a <_dtoa_r+0x38a>
 8007964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007968:	4632      	mov	r2, r6
 800796a:	463b      	mov	r3, r7
 800796c:	f7f8 ff6e 	bl	800084c <__aeabi_ddiv>
 8007970:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007974:	e02b      	b.n	80079ce <_dtoa_r+0x3de>
 8007976:	2502      	movs	r5, #2
 8007978:	e7ef      	b.n	800795a <_dtoa_r+0x36a>
 800797a:	f018 0f01 	tst.w	r8, #1
 800797e:	d008      	beq.n	8007992 <_dtoa_r+0x3a2>
 8007980:	4630      	mov	r0, r6
 8007982:	4639      	mov	r1, r7
 8007984:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007988:	f7f8 fe36 	bl	80005f8 <__aeabi_dmul>
 800798c:	3501      	adds	r5, #1
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007996:	f109 0908 	add.w	r9, r9, #8
 800799a:	e7e0      	b.n	800795e <_dtoa_r+0x36e>
 800799c:	f000 809f 	beq.w	8007ade <_dtoa_r+0x4ee>
 80079a0:	f1cb 0600 	rsb	r6, fp, #0
 80079a4:	4ba1      	ldr	r3, [pc, #644]	; (8007c2c <_dtoa_r+0x63c>)
 80079a6:	4fa2      	ldr	r7, [pc, #648]	; (8007c30 <_dtoa_r+0x640>)
 80079a8:	f006 020f 	and.w	r2, r6, #15
 80079ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	ec51 0b18 	vmov	r0, r1, d8
 80079b8:	f7f8 fe1e 	bl	80005f8 <__aeabi_dmul>
 80079bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079c0:	1136      	asrs	r6, r6, #4
 80079c2:	2300      	movs	r3, #0
 80079c4:	2502      	movs	r5, #2
 80079c6:	2e00      	cmp	r6, #0
 80079c8:	d17e      	bne.n	8007ac8 <_dtoa_r+0x4d8>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1d0      	bne.n	8007970 <_dtoa_r+0x380>
 80079ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8084 	beq.w	8007ae2 <_dtoa_r+0x4f2>
 80079da:	4b96      	ldr	r3, [pc, #600]	; (8007c34 <_dtoa_r+0x644>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f9 f87b 	bl	8000adc <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d07b      	beq.n	8007ae2 <_dtoa_r+0x4f2>
 80079ea:	9b04      	ldr	r3, [sp, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d078      	beq.n	8007ae2 <_dtoa_r+0x4f2>
 80079f0:	9b01      	ldr	r3, [sp, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dd39      	ble.n	8007a6a <_dtoa_r+0x47a>
 80079f6:	4b90      	ldr	r3, [pc, #576]	; (8007c38 <_dtoa_r+0x648>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	4640      	mov	r0, r8
 80079fc:	4649      	mov	r1, r9
 80079fe:	f7f8 fdfb 	bl	80005f8 <__aeabi_dmul>
 8007a02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a06:	9e01      	ldr	r6, [sp, #4]
 8007a08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7f8 fd86 	bl	8000524 <__aeabi_i2d>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	464b      	mov	r3, r9
 8007a1c:	f7f8 fdec 	bl	80005f8 <__aeabi_dmul>
 8007a20:	4b86      	ldr	r3, [pc, #536]	; (8007c3c <_dtoa_r+0x64c>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	f7f8 fc32 	bl	800028c <__adddf3>
 8007a28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007a2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a30:	9303      	str	r3, [sp, #12]
 8007a32:	2e00      	cmp	r6, #0
 8007a34:	d158      	bne.n	8007ae8 <_dtoa_r+0x4f8>
 8007a36:	4b82      	ldr	r3, [pc, #520]	; (8007c40 <_dtoa_r+0x650>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	4649      	mov	r1, r9
 8007a3e:	f7f8 fc23 	bl	8000288 <__aeabi_dsub>
 8007a42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a46:	4680      	mov	r8, r0
 8007a48:	4689      	mov	r9, r1
 8007a4a:	f7f9 f865 	bl	8000b18 <__aeabi_dcmpgt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f040 8296 	bne.w	8007f80 <_dtoa_r+0x990>
 8007a54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a58:	4640      	mov	r0, r8
 8007a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a5e:	4649      	mov	r1, r9
 8007a60:	f7f9 f83c 	bl	8000adc <__aeabi_dcmplt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f040 8289 	bne.w	8007f7c <_dtoa_r+0x98c>
 8007a6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f2c0 814e 	blt.w	8007d12 <_dtoa_r+0x722>
 8007a76:	f1bb 0f0e 	cmp.w	fp, #14
 8007a7a:	f300 814a 	bgt.w	8007d12 <_dtoa_r+0x722>
 8007a7e:	4b6b      	ldr	r3, [pc, #428]	; (8007c2c <_dtoa_r+0x63c>)
 8007a80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f280 80dc 	bge.w	8007c48 <_dtoa_r+0x658>
 8007a90:	9b04      	ldr	r3, [sp, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f300 80d8 	bgt.w	8007c48 <_dtoa_r+0x658>
 8007a98:	f040 826f 	bne.w	8007f7a <_dtoa_r+0x98a>
 8007a9c:	4b68      	ldr	r3, [pc, #416]	; (8007c40 <_dtoa_r+0x650>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4640      	mov	r0, r8
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f8 fda8 	bl	80005f8 <__aeabi_dmul>
 8007aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aac:	f7f9 f82a 	bl	8000b04 <__aeabi_dcmpge>
 8007ab0:	9e04      	ldr	r6, [sp, #16]
 8007ab2:	4637      	mov	r7, r6
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f040 8245 	bne.w	8007f44 <_dtoa_r+0x954>
 8007aba:	9d00      	ldr	r5, [sp, #0]
 8007abc:	2331      	movs	r3, #49	; 0x31
 8007abe:	f805 3b01 	strb.w	r3, [r5], #1
 8007ac2:	f10b 0b01 	add.w	fp, fp, #1
 8007ac6:	e241      	b.n	8007f4c <_dtoa_r+0x95c>
 8007ac8:	07f2      	lsls	r2, r6, #31
 8007aca:	d505      	bpl.n	8007ad8 <_dtoa_r+0x4e8>
 8007acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ad0:	f7f8 fd92 	bl	80005f8 <__aeabi_dmul>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	1076      	asrs	r6, r6, #1
 8007ada:	3708      	adds	r7, #8
 8007adc:	e773      	b.n	80079c6 <_dtoa_r+0x3d6>
 8007ade:	2502      	movs	r5, #2
 8007ae0:	e775      	b.n	80079ce <_dtoa_r+0x3de>
 8007ae2:	9e04      	ldr	r6, [sp, #16]
 8007ae4:	465f      	mov	r7, fp
 8007ae6:	e792      	b.n	8007a0e <_dtoa_r+0x41e>
 8007ae8:	9900      	ldr	r1, [sp, #0]
 8007aea:	4b50      	ldr	r3, [pc, #320]	; (8007c2c <_dtoa_r+0x63c>)
 8007aec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007af0:	4431      	add	r1, r6
 8007af2:	9102      	str	r1, [sp, #8]
 8007af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007af6:	eeb0 9a47 	vmov.f32	s18, s14
 8007afa:	eef0 9a67 	vmov.f32	s19, s15
 8007afe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b06:	2900      	cmp	r1, #0
 8007b08:	d044      	beq.n	8007b94 <_dtoa_r+0x5a4>
 8007b0a:	494e      	ldr	r1, [pc, #312]	; (8007c44 <_dtoa_r+0x654>)
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	f7f8 fe9d 	bl	800084c <__aeabi_ddiv>
 8007b12:	ec53 2b19 	vmov	r2, r3, d9
 8007b16:	f7f8 fbb7 	bl	8000288 <__aeabi_dsub>
 8007b1a:	9d00      	ldr	r5, [sp, #0]
 8007b1c:	ec41 0b19 	vmov	d9, r0, r1
 8007b20:	4649      	mov	r1, r9
 8007b22:	4640      	mov	r0, r8
 8007b24:	f7f9 f818 	bl	8000b58 <__aeabi_d2iz>
 8007b28:	4606      	mov	r6, r0
 8007b2a:	f7f8 fcfb 	bl	8000524 <__aeabi_i2d>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	4640      	mov	r0, r8
 8007b34:	4649      	mov	r1, r9
 8007b36:	f7f8 fba7 	bl	8000288 <__aeabi_dsub>
 8007b3a:	3630      	adds	r6, #48	; 0x30
 8007b3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007b40:	ec53 2b19 	vmov	r2, r3, d9
 8007b44:	4680      	mov	r8, r0
 8007b46:	4689      	mov	r9, r1
 8007b48:	f7f8 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d164      	bne.n	8007c1a <_dtoa_r+0x62a>
 8007b50:	4642      	mov	r2, r8
 8007b52:	464b      	mov	r3, r9
 8007b54:	4937      	ldr	r1, [pc, #220]	; (8007c34 <_dtoa_r+0x644>)
 8007b56:	2000      	movs	r0, #0
 8007b58:	f7f8 fb96 	bl	8000288 <__aeabi_dsub>
 8007b5c:	ec53 2b19 	vmov	r2, r3, d9
 8007b60:	f7f8 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	f040 80b6 	bne.w	8007cd6 <_dtoa_r+0x6e6>
 8007b6a:	9b02      	ldr	r3, [sp, #8]
 8007b6c:	429d      	cmp	r5, r3
 8007b6e:	f43f af7c 	beq.w	8007a6a <_dtoa_r+0x47a>
 8007b72:	4b31      	ldr	r3, [pc, #196]	; (8007c38 <_dtoa_r+0x648>)
 8007b74:	ec51 0b19 	vmov	r0, r1, d9
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f7f8 fd3d 	bl	80005f8 <__aeabi_dmul>
 8007b7e:	4b2e      	ldr	r3, [pc, #184]	; (8007c38 <_dtoa_r+0x648>)
 8007b80:	ec41 0b19 	vmov	d9, r0, r1
 8007b84:	2200      	movs	r2, #0
 8007b86:	4640      	mov	r0, r8
 8007b88:	4649      	mov	r1, r9
 8007b8a:	f7f8 fd35 	bl	80005f8 <__aeabi_dmul>
 8007b8e:	4680      	mov	r8, r0
 8007b90:	4689      	mov	r9, r1
 8007b92:	e7c5      	b.n	8007b20 <_dtoa_r+0x530>
 8007b94:	ec51 0b17 	vmov	r0, r1, d7
 8007b98:	f7f8 fd2e 	bl	80005f8 <__aeabi_dmul>
 8007b9c:	9b02      	ldr	r3, [sp, #8]
 8007b9e:	9d00      	ldr	r5, [sp, #0]
 8007ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ba2:	ec41 0b19 	vmov	d9, r0, r1
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	4640      	mov	r0, r8
 8007baa:	f7f8 ffd5 	bl	8000b58 <__aeabi_d2iz>
 8007bae:	4606      	mov	r6, r0
 8007bb0:	f7f8 fcb8 	bl	8000524 <__aeabi_i2d>
 8007bb4:	3630      	adds	r6, #48	; 0x30
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	460b      	mov	r3, r1
 8007bba:	4640      	mov	r0, r8
 8007bbc:	4649      	mov	r1, r9
 8007bbe:	f7f8 fb63 	bl	8000288 <__aeabi_dsub>
 8007bc2:	f805 6b01 	strb.w	r6, [r5], #1
 8007bc6:	9b02      	ldr	r3, [sp, #8]
 8007bc8:	429d      	cmp	r5, r3
 8007bca:	4680      	mov	r8, r0
 8007bcc:	4689      	mov	r9, r1
 8007bce:	f04f 0200 	mov.w	r2, #0
 8007bd2:	d124      	bne.n	8007c1e <_dtoa_r+0x62e>
 8007bd4:	4b1b      	ldr	r3, [pc, #108]	; (8007c44 <_dtoa_r+0x654>)
 8007bd6:	ec51 0b19 	vmov	r0, r1, d9
 8007bda:	f7f8 fb57 	bl	800028c <__adddf3>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f8 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d173      	bne.n	8007cd6 <_dtoa_r+0x6e6>
 8007bee:	ec53 2b19 	vmov	r2, r3, d9
 8007bf2:	4914      	ldr	r1, [pc, #80]	; (8007c44 <_dtoa_r+0x654>)
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f7f8 fb47 	bl	8000288 <__aeabi_dsub>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4640      	mov	r0, r8
 8007c00:	4649      	mov	r1, r9
 8007c02:	f7f8 ff6b 	bl	8000adc <__aeabi_dcmplt>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f af2f 	beq.w	8007a6a <_dtoa_r+0x47a>
 8007c0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c0e:	1e6b      	subs	r3, r5, #1
 8007c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c16:	2b30      	cmp	r3, #48	; 0x30
 8007c18:	d0f8      	beq.n	8007c0c <_dtoa_r+0x61c>
 8007c1a:	46bb      	mov	fp, r7
 8007c1c:	e04a      	b.n	8007cb4 <_dtoa_r+0x6c4>
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <_dtoa_r+0x648>)
 8007c20:	f7f8 fcea 	bl	80005f8 <__aeabi_dmul>
 8007c24:	4680      	mov	r8, r0
 8007c26:	4689      	mov	r9, r1
 8007c28:	e7bd      	b.n	8007ba6 <_dtoa_r+0x5b6>
 8007c2a:	bf00      	nop
 8007c2c:	08009768 	.word	0x08009768
 8007c30:	08009740 	.word	0x08009740
 8007c34:	3ff00000 	.word	0x3ff00000
 8007c38:	40240000 	.word	0x40240000
 8007c3c:	401c0000 	.word	0x401c0000
 8007c40:	40140000 	.word	0x40140000
 8007c44:	3fe00000 	.word	0x3fe00000
 8007c48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c4c:	9d00      	ldr	r5, [sp, #0]
 8007c4e:	4642      	mov	r2, r8
 8007c50:	464b      	mov	r3, r9
 8007c52:	4630      	mov	r0, r6
 8007c54:	4639      	mov	r1, r7
 8007c56:	f7f8 fdf9 	bl	800084c <__aeabi_ddiv>
 8007c5a:	f7f8 ff7d 	bl	8000b58 <__aeabi_d2iz>
 8007c5e:	9001      	str	r0, [sp, #4]
 8007c60:	f7f8 fc60 	bl	8000524 <__aeabi_i2d>
 8007c64:	4642      	mov	r2, r8
 8007c66:	464b      	mov	r3, r9
 8007c68:	f7f8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	f7f8 fb08 	bl	8000288 <__aeabi_dsub>
 8007c78:	9e01      	ldr	r6, [sp, #4]
 8007c7a:	9f04      	ldr	r7, [sp, #16]
 8007c7c:	3630      	adds	r6, #48	; 0x30
 8007c7e:	f805 6b01 	strb.w	r6, [r5], #1
 8007c82:	9e00      	ldr	r6, [sp, #0]
 8007c84:	1bae      	subs	r6, r5, r6
 8007c86:	42b7      	cmp	r7, r6
 8007c88:	4602      	mov	r2, r0
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	d134      	bne.n	8007cf8 <_dtoa_r+0x708>
 8007c8e:	f7f8 fafd 	bl	800028c <__adddf3>
 8007c92:	4642      	mov	r2, r8
 8007c94:	464b      	mov	r3, r9
 8007c96:	4606      	mov	r6, r0
 8007c98:	460f      	mov	r7, r1
 8007c9a:	f7f8 ff3d 	bl	8000b18 <__aeabi_dcmpgt>
 8007c9e:	b9c8      	cbnz	r0, 8007cd4 <_dtoa_r+0x6e4>
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	f7f8 ff0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cac:	b110      	cbz	r0, 8007cb4 <_dtoa_r+0x6c4>
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	07db      	lsls	r3, r3, #31
 8007cb2:	d40f      	bmi.n	8007cd4 <_dtoa_r+0x6e4>
 8007cb4:	4651      	mov	r1, sl
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f000 fbcc 	bl	8008454 <_Bfree>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007cc0:	702b      	strb	r3, [r5, #0]
 8007cc2:	f10b 0301 	add.w	r3, fp, #1
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	f43f ace2 	beq.w	8007694 <_dtoa_r+0xa4>
 8007cd0:	601d      	str	r5, [r3, #0]
 8007cd2:	e4df      	b.n	8007694 <_dtoa_r+0xa4>
 8007cd4:	465f      	mov	r7, fp
 8007cd6:	462b      	mov	r3, r5
 8007cd8:	461d      	mov	r5, r3
 8007cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cde:	2a39      	cmp	r2, #57	; 0x39
 8007ce0:	d106      	bne.n	8007cf0 <_dtoa_r+0x700>
 8007ce2:	9a00      	ldr	r2, [sp, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d1f7      	bne.n	8007cd8 <_dtoa_r+0x6e8>
 8007ce8:	9900      	ldr	r1, [sp, #0]
 8007cea:	2230      	movs	r2, #48	; 0x30
 8007cec:	3701      	adds	r7, #1
 8007cee:	700a      	strb	r2, [r1, #0]
 8007cf0:	781a      	ldrb	r2, [r3, #0]
 8007cf2:	3201      	adds	r2, #1
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	e790      	b.n	8007c1a <_dtoa_r+0x62a>
 8007cf8:	4ba3      	ldr	r3, [pc, #652]	; (8007f88 <_dtoa_r+0x998>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f7f8 fc7c 	bl	80005f8 <__aeabi_dmul>
 8007d00:	2200      	movs	r2, #0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4606      	mov	r6, r0
 8007d06:	460f      	mov	r7, r1
 8007d08:	f7f8 fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d09e      	beq.n	8007c4e <_dtoa_r+0x65e>
 8007d10:	e7d0      	b.n	8007cb4 <_dtoa_r+0x6c4>
 8007d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	f000 80ca 	beq.w	8007eae <_dtoa_r+0x8be>
 8007d1a:	9a07      	ldr	r2, [sp, #28]
 8007d1c:	2a01      	cmp	r2, #1
 8007d1e:	f300 80ad 	bgt.w	8007e7c <_dtoa_r+0x88c>
 8007d22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	f000 80a5 	beq.w	8007e74 <_dtoa_r+0x884>
 8007d2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d2e:	9e08      	ldr	r6, [sp, #32]
 8007d30:	9d05      	ldr	r5, [sp, #20]
 8007d32:	9a05      	ldr	r2, [sp, #20]
 8007d34:	441a      	add	r2, r3
 8007d36:	9205      	str	r2, [sp, #20]
 8007d38:	9a06      	ldr	r2, [sp, #24]
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	4620      	mov	r0, r4
 8007d40:	9206      	str	r2, [sp, #24]
 8007d42:	f000 fc3d 	bl	80085c0 <__i2b>
 8007d46:	4607      	mov	r7, r0
 8007d48:	b165      	cbz	r5, 8007d64 <_dtoa_r+0x774>
 8007d4a:	9b06      	ldr	r3, [sp, #24]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	dd09      	ble.n	8007d64 <_dtoa_r+0x774>
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	9a05      	ldr	r2, [sp, #20]
 8007d54:	bfa8      	it	ge
 8007d56:	462b      	movge	r3, r5
 8007d58:	1ad2      	subs	r2, r2, r3
 8007d5a:	9205      	str	r2, [sp, #20]
 8007d5c:	9a06      	ldr	r2, [sp, #24]
 8007d5e:	1aed      	subs	r5, r5, r3
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	9306      	str	r3, [sp, #24]
 8007d64:	9b08      	ldr	r3, [sp, #32]
 8007d66:	b1f3      	cbz	r3, 8007da6 <_dtoa_r+0x7b6>
 8007d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80a3 	beq.w	8007eb6 <_dtoa_r+0x8c6>
 8007d70:	2e00      	cmp	r6, #0
 8007d72:	dd10      	ble.n	8007d96 <_dtoa_r+0x7a6>
 8007d74:	4639      	mov	r1, r7
 8007d76:	4632      	mov	r2, r6
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fce1 	bl	8008740 <__pow5mult>
 8007d7e:	4652      	mov	r2, sl
 8007d80:	4601      	mov	r1, r0
 8007d82:	4607      	mov	r7, r0
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 fc31 	bl	80085ec <__multiply>
 8007d8a:	4651      	mov	r1, sl
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fb60 	bl	8008454 <_Bfree>
 8007d94:	46c2      	mov	sl, r8
 8007d96:	9b08      	ldr	r3, [sp, #32]
 8007d98:	1b9a      	subs	r2, r3, r6
 8007d9a:	d004      	beq.n	8007da6 <_dtoa_r+0x7b6>
 8007d9c:	4651      	mov	r1, sl
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 fcce 	bl	8008740 <__pow5mult>
 8007da4:	4682      	mov	sl, r0
 8007da6:	2101      	movs	r1, #1
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 fc09 	bl	80085c0 <__i2b>
 8007dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	4606      	mov	r6, r0
 8007db4:	f340 8081 	ble.w	8007eba <_dtoa_r+0x8ca>
 8007db8:	461a      	mov	r2, r3
 8007dba:	4601      	mov	r1, r0
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 fcbf 	bl	8008740 <__pow5mult>
 8007dc2:	9b07      	ldr	r3, [sp, #28]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	dd7a      	ble.n	8007ec0 <_dtoa_r+0x8d0>
 8007dca:	f04f 0800 	mov.w	r8, #0
 8007dce:	6933      	ldr	r3, [r6, #16]
 8007dd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007dd4:	6918      	ldr	r0, [r3, #16]
 8007dd6:	f000 fba5 	bl	8008524 <__hi0bits>
 8007dda:	f1c0 0020 	rsb	r0, r0, #32
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	4418      	add	r0, r3
 8007de2:	f010 001f 	ands.w	r0, r0, #31
 8007de6:	f000 8094 	beq.w	8007f12 <_dtoa_r+0x922>
 8007dea:	f1c0 0320 	rsb	r3, r0, #32
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	f340 8085 	ble.w	8007efe <_dtoa_r+0x90e>
 8007df4:	9b05      	ldr	r3, [sp, #20]
 8007df6:	f1c0 001c 	rsb	r0, r0, #28
 8007dfa:	4403      	add	r3, r0
 8007dfc:	9305      	str	r3, [sp, #20]
 8007dfe:	9b06      	ldr	r3, [sp, #24]
 8007e00:	4403      	add	r3, r0
 8007e02:	4405      	add	r5, r0
 8007e04:	9306      	str	r3, [sp, #24]
 8007e06:	9b05      	ldr	r3, [sp, #20]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dd05      	ble.n	8007e18 <_dtoa_r+0x828>
 8007e0c:	4651      	mov	r1, sl
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fcef 	bl	80087f4 <__lshift>
 8007e16:	4682      	mov	sl, r0
 8007e18:	9b06      	ldr	r3, [sp, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dd05      	ble.n	8007e2a <_dtoa_r+0x83a>
 8007e1e:	4631      	mov	r1, r6
 8007e20:	461a      	mov	r2, r3
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 fce6 	bl	80087f4 <__lshift>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d072      	beq.n	8007f16 <_dtoa_r+0x926>
 8007e30:	4631      	mov	r1, r6
 8007e32:	4650      	mov	r0, sl
 8007e34:	f000 fd4a 	bl	80088cc <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	da6c      	bge.n	8007f16 <_dtoa_r+0x926>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	4651      	mov	r1, sl
 8007e40:	220a      	movs	r2, #10
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fb28 	bl	8008498 <__multadd>
 8007e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e4e:	4682      	mov	sl, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 81b0 	beq.w	80081b6 <_dtoa_r+0xbc6>
 8007e56:	2300      	movs	r3, #0
 8007e58:	4639      	mov	r1, r7
 8007e5a:	220a      	movs	r2, #10
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 fb1b 	bl	8008498 <__multadd>
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	4607      	mov	r7, r0
 8007e68:	f300 8096 	bgt.w	8007f98 <_dtoa_r+0x9a8>
 8007e6c:	9b07      	ldr	r3, [sp, #28]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	dc59      	bgt.n	8007f26 <_dtoa_r+0x936>
 8007e72:	e091      	b.n	8007f98 <_dtoa_r+0x9a8>
 8007e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e7a:	e758      	b.n	8007d2e <_dtoa_r+0x73e>
 8007e7c:	9b04      	ldr	r3, [sp, #16]
 8007e7e:	1e5e      	subs	r6, r3, #1
 8007e80:	9b08      	ldr	r3, [sp, #32]
 8007e82:	42b3      	cmp	r3, r6
 8007e84:	bfbf      	itttt	lt
 8007e86:	9b08      	ldrlt	r3, [sp, #32]
 8007e88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007e8a:	9608      	strlt	r6, [sp, #32]
 8007e8c:	1af3      	sublt	r3, r6, r3
 8007e8e:	bfb4      	ite	lt
 8007e90:	18d2      	addlt	r2, r2, r3
 8007e92:	1b9e      	subge	r6, r3, r6
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	bfbc      	itt	lt
 8007e98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007e9a:	2600      	movlt	r6, #0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	bfb7      	itett	lt
 8007ea0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007ea4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007ea8:	1a9d      	sublt	r5, r3, r2
 8007eaa:	2300      	movlt	r3, #0
 8007eac:	e741      	b.n	8007d32 <_dtoa_r+0x742>
 8007eae:	9e08      	ldr	r6, [sp, #32]
 8007eb0:	9d05      	ldr	r5, [sp, #20]
 8007eb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007eb4:	e748      	b.n	8007d48 <_dtoa_r+0x758>
 8007eb6:	9a08      	ldr	r2, [sp, #32]
 8007eb8:	e770      	b.n	8007d9c <_dtoa_r+0x7ac>
 8007eba:	9b07      	ldr	r3, [sp, #28]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	dc19      	bgt.n	8007ef4 <_dtoa_r+0x904>
 8007ec0:	9b02      	ldr	r3, [sp, #8]
 8007ec2:	b9bb      	cbnz	r3, 8007ef4 <_dtoa_r+0x904>
 8007ec4:	9b03      	ldr	r3, [sp, #12]
 8007ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007eca:	b99b      	cbnz	r3, 8007ef4 <_dtoa_r+0x904>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ed2:	0d1b      	lsrs	r3, r3, #20
 8007ed4:	051b      	lsls	r3, r3, #20
 8007ed6:	b183      	cbz	r3, 8007efa <_dtoa_r+0x90a>
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	3301      	adds	r3, #1
 8007edc:	9305      	str	r3, [sp, #20]
 8007ede:	9b06      	ldr	r3, [sp, #24]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	9306      	str	r3, [sp, #24]
 8007ee4:	f04f 0801 	mov.w	r8, #1
 8007ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f47f af6f 	bne.w	8007dce <_dtoa_r+0x7de>
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	e774      	b.n	8007dde <_dtoa_r+0x7ee>
 8007ef4:	f04f 0800 	mov.w	r8, #0
 8007ef8:	e7f6      	b.n	8007ee8 <_dtoa_r+0x8f8>
 8007efa:	4698      	mov	r8, r3
 8007efc:	e7f4      	b.n	8007ee8 <_dtoa_r+0x8f8>
 8007efe:	d082      	beq.n	8007e06 <_dtoa_r+0x816>
 8007f00:	9a05      	ldr	r2, [sp, #20]
 8007f02:	331c      	adds	r3, #28
 8007f04:	441a      	add	r2, r3
 8007f06:	9205      	str	r2, [sp, #20]
 8007f08:	9a06      	ldr	r2, [sp, #24]
 8007f0a:	441a      	add	r2, r3
 8007f0c:	441d      	add	r5, r3
 8007f0e:	9206      	str	r2, [sp, #24]
 8007f10:	e779      	b.n	8007e06 <_dtoa_r+0x816>
 8007f12:	4603      	mov	r3, r0
 8007f14:	e7f4      	b.n	8007f00 <_dtoa_r+0x910>
 8007f16:	9b04      	ldr	r3, [sp, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	dc37      	bgt.n	8007f8c <_dtoa_r+0x99c>
 8007f1c:	9b07      	ldr	r3, [sp, #28]
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	dd34      	ble.n	8007f8c <_dtoa_r+0x99c>
 8007f22:	9b04      	ldr	r3, [sp, #16]
 8007f24:	9301      	str	r3, [sp, #4]
 8007f26:	9b01      	ldr	r3, [sp, #4]
 8007f28:	b963      	cbnz	r3, 8007f44 <_dtoa_r+0x954>
 8007f2a:	4631      	mov	r1, r6
 8007f2c:	2205      	movs	r2, #5
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f000 fab2 	bl	8008498 <__multadd>
 8007f34:	4601      	mov	r1, r0
 8007f36:	4606      	mov	r6, r0
 8007f38:	4650      	mov	r0, sl
 8007f3a:	f000 fcc7 	bl	80088cc <__mcmp>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	f73f adbb 	bgt.w	8007aba <_dtoa_r+0x4ca>
 8007f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f46:	9d00      	ldr	r5, [sp, #0]
 8007f48:	ea6f 0b03 	mvn.w	fp, r3
 8007f4c:	f04f 0800 	mov.w	r8, #0
 8007f50:	4631      	mov	r1, r6
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 fa7e 	bl	8008454 <_Bfree>
 8007f58:	2f00      	cmp	r7, #0
 8007f5a:	f43f aeab 	beq.w	8007cb4 <_dtoa_r+0x6c4>
 8007f5e:	f1b8 0f00 	cmp.w	r8, #0
 8007f62:	d005      	beq.n	8007f70 <_dtoa_r+0x980>
 8007f64:	45b8      	cmp	r8, r7
 8007f66:	d003      	beq.n	8007f70 <_dtoa_r+0x980>
 8007f68:	4641      	mov	r1, r8
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fa72 	bl	8008454 <_Bfree>
 8007f70:	4639      	mov	r1, r7
 8007f72:	4620      	mov	r0, r4
 8007f74:	f000 fa6e 	bl	8008454 <_Bfree>
 8007f78:	e69c      	b.n	8007cb4 <_dtoa_r+0x6c4>
 8007f7a:	2600      	movs	r6, #0
 8007f7c:	4637      	mov	r7, r6
 8007f7e:	e7e1      	b.n	8007f44 <_dtoa_r+0x954>
 8007f80:	46bb      	mov	fp, r7
 8007f82:	4637      	mov	r7, r6
 8007f84:	e599      	b.n	8007aba <_dtoa_r+0x4ca>
 8007f86:	bf00      	nop
 8007f88:	40240000 	.word	0x40240000
 8007f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80c8 	beq.w	8008124 <_dtoa_r+0xb34>
 8007f94:	9b04      	ldr	r3, [sp, #16]
 8007f96:	9301      	str	r3, [sp, #4]
 8007f98:	2d00      	cmp	r5, #0
 8007f9a:	dd05      	ble.n	8007fa8 <_dtoa_r+0x9b8>
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	462a      	mov	r2, r5
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 fc27 	bl	80087f4 <__lshift>
 8007fa6:	4607      	mov	r7, r0
 8007fa8:	f1b8 0f00 	cmp.w	r8, #0
 8007fac:	d05b      	beq.n	8008066 <_dtoa_r+0xa76>
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f000 fa0f 	bl	80083d4 <_Balloc>
 8007fb6:	4605      	mov	r5, r0
 8007fb8:	b928      	cbnz	r0, 8007fc6 <_dtoa_r+0x9d6>
 8007fba:	4b83      	ldr	r3, [pc, #524]	; (80081c8 <_dtoa_r+0xbd8>)
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007fc2:	f7ff bb2e 	b.w	8007622 <_dtoa_r+0x32>
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	3202      	adds	r2, #2
 8007fca:	0092      	lsls	r2, r2, #2
 8007fcc:	f107 010c 	add.w	r1, r7, #12
 8007fd0:	300c      	adds	r0, #12
 8007fd2:	f7ff fa76 	bl	80074c2 <memcpy>
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f000 fc0a 	bl	80087f4 <__lshift>
 8007fe0:	9b00      	ldr	r3, [sp, #0]
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fea:	4413      	add	r3, r2
 8007fec:	9308      	str	r3, [sp, #32]
 8007fee:	9b02      	ldr	r3, [sp, #8]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	46b8      	mov	r8, r7
 8007ff6:	9306      	str	r3, [sp, #24]
 8007ff8:	4607      	mov	r7, r0
 8007ffa:	9b04      	ldr	r3, [sp, #16]
 8007ffc:	4631      	mov	r1, r6
 8007ffe:	3b01      	subs	r3, #1
 8008000:	4650      	mov	r0, sl
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	f7ff fa6b 	bl	80074de <quorem>
 8008008:	4641      	mov	r1, r8
 800800a:	9002      	str	r0, [sp, #8]
 800800c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008010:	4650      	mov	r0, sl
 8008012:	f000 fc5b 	bl	80088cc <__mcmp>
 8008016:	463a      	mov	r2, r7
 8008018:	9005      	str	r0, [sp, #20]
 800801a:	4631      	mov	r1, r6
 800801c:	4620      	mov	r0, r4
 800801e:	f000 fc71 	bl	8008904 <__mdiff>
 8008022:	68c2      	ldr	r2, [r0, #12]
 8008024:	4605      	mov	r5, r0
 8008026:	bb02      	cbnz	r2, 800806a <_dtoa_r+0xa7a>
 8008028:	4601      	mov	r1, r0
 800802a:	4650      	mov	r0, sl
 800802c:	f000 fc4e 	bl	80088cc <__mcmp>
 8008030:	4602      	mov	r2, r0
 8008032:	4629      	mov	r1, r5
 8008034:	4620      	mov	r0, r4
 8008036:	9209      	str	r2, [sp, #36]	; 0x24
 8008038:	f000 fa0c 	bl	8008454 <_Bfree>
 800803c:	9b07      	ldr	r3, [sp, #28]
 800803e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008040:	9d04      	ldr	r5, [sp, #16]
 8008042:	ea43 0102 	orr.w	r1, r3, r2
 8008046:	9b06      	ldr	r3, [sp, #24]
 8008048:	4319      	orrs	r1, r3
 800804a:	d110      	bne.n	800806e <_dtoa_r+0xa7e>
 800804c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008050:	d029      	beq.n	80080a6 <_dtoa_r+0xab6>
 8008052:	9b05      	ldr	r3, [sp, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	dd02      	ble.n	800805e <_dtoa_r+0xa6e>
 8008058:	9b02      	ldr	r3, [sp, #8]
 800805a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800805e:	9b01      	ldr	r3, [sp, #4]
 8008060:	f883 9000 	strb.w	r9, [r3]
 8008064:	e774      	b.n	8007f50 <_dtoa_r+0x960>
 8008066:	4638      	mov	r0, r7
 8008068:	e7ba      	b.n	8007fe0 <_dtoa_r+0x9f0>
 800806a:	2201      	movs	r2, #1
 800806c:	e7e1      	b.n	8008032 <_dtoa_r+0xa42>
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	2b00      	cmp	r3, #0
 8008072:	db04      	blt.n	800807e <_dtoa_r+0xa8e>
 8008074:	9907      	ldr	r1, [sp, #28]
 8008076:	430b      	orrs	r3, r1
 8008078:	9906      	ldr	r1, [sp, #24]
 800807a:	430b      	orrs	r3, r1
 800807c:	d120      	bne.n	80080c0 <_dtoa_r+0xad0>
 800807e:	2a00      	cmp	r2, #0
 8008080:	dded      	ble.n	800805e <_dtoa_r+0xa6e>
 8008082:	4651      	mov	r1, sl
 8008084:	2201      	movs	r2, #1
 8008086:	4620      	mov	r0, r4
 8008088:	f000 fbb4 	bl	80087f4 <__lshift>
 800808c:	4631      	mov	r1, r6
 800808e:	4682      	mov	sl, r0
 8008090:	f000 fc1c 	bl	80088cc <__mcmp>
 8008094:	2800      	cmp	r0, #0
 8008096:	dc03      	bgt.n	80080a0 <_dtoa_r+0xab0>
 8008098:	d1e1      	bne.n	800805e <_dtoa_r+0xa6e>
 800809a:	f019 0f01 	tst.w	r9, #1
 800809e:	d0de      	beq.n	800805e <_dtoa_r+0xa6e>
 80080a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080a4:	d1d8      	bne.n	8008058 <_dtoa_r+0xa68>
 80080a6:	9a01      	ldr	r2, [sp, #4]
 80080a8:	2339      	movs	r3, #57	; 0x39
 80080aa:	7013      	strb	r3, [r2, #0]
 80080ac:	462b      	mov	r3, r5
 80080ae:	461d      	mov	r5, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80080b6:	2a39      	cmp	r2, #57	; 0x39
 80080b8:	d06c      	beq.n	8008194 <_dtoa_r+0xba4>
 80080ba:	3201      	adds	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]
 80080be:	e747      	b.n	8007f50 <_dtoa_r+0x960>
 80080c0:	2a00      	cmp	r2, #0
 80080c2:	dd07      	ble.n	80080d4 <_dtoa_r+0xae4>
 80080c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080c8:	d0ed      	beq.n	80080a6 <_dtoa_r+0xab6>
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	f109 0301 	add.w	r3, r9, #1
 80080d0:	7013      	strb	r3, [r2, #0]
 80080d2:	e73d      	b.n	8007f50 <_dtoa_r+0x960>
 80080d4:	9b04      	ldr	r3, [sp, #16]
 80080d6:	9a08      	ldr	r2, [sp, #32]
 80080d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80080dc:	4293      	cmp	r3, r2
 80080de:	d043      	beq.n	8008168 <_dtoa_r+0xb78>
 80080e0:	4651      	mov	r1, sl
 80080e2:	2300      	movs	r3, #0
 80080e4:	220a      	movs	r2, #10
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f9d6 	bl	8008498 <__multadd>
 80080ec:	45b8      	cmp	r8, r7
 80080ee:	4682      	mov	sl, r0
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	f04f 020a 	mov.w	r2, #10
 80080f8:	4641      	mov	r1, r8
 80080fa:	4620      	mov	r0, r4
 80080fc:	d107      	bne.n	800810e <_dtoa_r+0xb1e>
 80080fe:	f000 f9cb 	bl	8008498 <__multadd>
 8008102:	4680      	mov	r8, r0
 8008104:	4607      	mov	r7, r0
 8008106:	9b04      	ldr	r3, [sp, #16]
 8008108:	3301      	adds	r3, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	e775      	b.n	8007ffa <_dtoa_r+0xa0a>
 800810e:	f000 f9c3 	bl	8008498 <__multadd>
 8008112:	4639      	mov	r1, r7
 8008114:	4680      	mov	r8, r0
 8008116:	2300      	movs	r3, #0
 8008118:	220a      	movs	r2, #10
 800811a:	4620      	mov	r0, r4
 800811c:	f000 f9bc 	bl	8008498 <__multadd>
 8008120:	4607      	mov	r7, r0
 8008122:	e7f0      	b.n	8008106 <_dtoa_r+0xb16>
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	9d00      	ldr	r5, [sp, #0]
 800812a:	4631      	mov	r1, r6
 800812c:	4650      	mov	r0, sl
 800812e:	f7ff f9d6 	bl	80074de <quorem>
 8008132:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008136:	9b00      	ldr	r3, [sp, #0]
 8008138:	f805 9b01 	strb.w	r9, [r5], #1
 800813c:	1aea      	subs	r2, r5, r3
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	4293      	cmp	r3, r2
 8008142:	dd07      	ble.n	8008154 <_dtoa_r+0xb64>
 8008144:	4651      	mov	r1, sl
 8008146:	2300      	movs	r3, #0
 8008148:	220a      	movs	r2, #10
 800814a:	4620      	mov	r0, r4
 800814c:	f000 f9a4 	bl	8008498 <__multadd>
 8008150:	4682      	mov	sl, r0
 8008152:	e7ea      	b.n	800812a <_dtoa_r+0xb3a>
 8008154:	9b01      	ldr	r3, [sp, #4]
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfc8      	it	gt
 800815a:	461d      	movgt	r5, r3
 800815c:	9b00      	ldr	r3, [sp, #0]
 800815e:	bfd8      	it	le
 8008160:	2501      	movle	r5, #1
 8008162:	441d      	add	r5, r3
 8008164:	f04f 0800 	mov.w	r8, #0
 8008168:	4651      	mov	r1, sl
 800816a:	2201      	movs	r2, #1
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fb41 	bl	80087f4 <__lshift>
 8008172:	4631      	mov	r1, r6
 8008174:	4682      	mov	sl, r0
 8008176:	f000 fba9 	bl	80088cc <__mcmp>
 800817a:	2800      	cmp	r0, #0
 800817c:	dc96      	bgt.n	80080ac <_dtoa_r+0xabc>
 800817e:	d102      	bne.n	8008186 <_dtoa_r+0xb96>
 8008180:	f019 0f01 	tst.w	r9, #1
 8008184:	d192      	bne.n	80080ac <_dtoa_r+0xabc>
 8008186:	462b      	mov	r3, r5
 8008188:	461d      	mov	r5, r3
 800818a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800818e:	2a30      	cmp	r2, #48	; 0x30
 8008190:	d0fa      	beq.n	8008188 <_dtoa_r+0xb98>
 8008192:	e6dd      	b.n	8007f50 <_dtoa_r+0x960>
 8008194:	9a00      	ldr	r2, [sp, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d189      	bne.n	80080ae <_dtoa_r+0xabe>
 800819a:	f10b 0b01 	add.w	fp, fp, #1
 800819e:	2331      	movs	r3, #49	; 0x31
 80081a0:	e796      	b.n	80080d0 <_dtoa_r+0xae0>
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <_dtoa_r+0xbdc>)
 80081a4:	f7ff ba99 	b.w	80076da <_dtoa_r+0xea>
 80081a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f47f aa6d 	bne.w	800768a <_dtoa_r+0x9a>
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <_dtoa_r+0xbe0>)
 80081b2:	f7ff ba92 	b.w	80076da <_dtoa_r+0xea>
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dcb5      	bgt.n	8008128 <_dtoa_r+0xb38>
 80081bc:	9b07      	ldr	r3, [sp, #28]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	f73f aeb1 	bgt.w	8007f26 <_dtoa_r+0x936>
 80081c4:	e7b0      	b.n	8008128 <_dtoa_r+0xb38>
 80081c6:	bf00      	nop
 80081c8:	080096d4 	.word	0x080096d4
 80081cc:	08009634 	.word	0x08009634
 80081d0:	08009658 	.word	0x08009658

080081d4 <_free_r>:
 80081d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081d6:	2900      	cmp	r1, #0
 80081d8:	d044      	beq.n	8008264 <_free_r+0x90>
 80081da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081de:	9001      	str	r0, [sp, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f1a1 0404 	sub.w	r4, r1, #4
 80081e6:	bfb8      	it	lt
 80081e8:	18e4      	addlt	r4, r4, r3
 80081ea:	f000 f8e7 	bl	80083bc <__malloc_lock>
 80081ee:	4a1e      	ldr	r2, [pc, #120]	; (8008268 <_free_r+0x94>)
 80081f0:	9801      	ldr	r0, [sp, #4]
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	b933      	cbnz	r3, 8008204 <_free_r+0x30>
 80081f6:	6063      	str	r3, [r4, #4]
 80081f8:	6014      	str	r4, [r2, #0]
 80081fa:	b003      	add	sp, #12
 80081fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008200:	f000 b8e2 	b.w	80083c8 <__malloc_unlock>
 8008204:	42a3      	cmp	r3, r4
 8008206:	d908      	bls.n	800821a <_free_r+0x46>
 8008208:	6825      	ldr	r5, [r4, #0]
 800820a:	1961      	adds	r1, r4, r5
 800820c:	428b      	cmp	r3, r1
 800820e:	bf01      	itttt	eq
 8008210:	6819      	ldreq	r1, [r3, #0]
 8008212:	685b      	ldreq	r3, [r3, #4]
 8008214:	1949      	addeq	r1, r1, r5
 8008216:	6021      	streq	r1, [r4, #0]
 8008218:	e7ed      	b.n	80081f6 <_free_r+0x22>
 800821a:	461a      	mov	r2, r3
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	b10b      	cbz	r3, 8008224 <_free_r+0x50>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d9fa      	bls.n	800821a <_free_r+0x46>
 8008224:	6811      	ldr	r1, [r2, #0]
 8008226:	1855      	adds	r5, r2, r1
 8008228:	42a5      	cmp	r5, r4
 800822a:	d10b      	bne.n	8008244 <_free_r+0x70>
 800822c:	6824      	ldr	r4, [r4, #0]
 800822e:	4421      	add	r1, r4
 8008230:	1854      	adds	r4, r2, r1
 8008232:	42a3      	cmp	r3, r4
 8008234:	6011      	str	r1, [r2, #0]
 8008236:	d1e0      	bne.n	80081fa <_free_r+0x26>
 8008238:	681c      	ldr	r4, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	6053      	str	r3, [r2, #4]
 800823e:	440c      	add	r4, r1
 8008240:	6014      	str	r4, [r2, #0]
 8008242:	e7da      	b.n	80081fa <_free_r+0x26>
 8008244:	d902      	bls.n	800824c <_free_r+0x78>
 8008246:	230c      	movs	r3, #12
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	e7d6      	b.n	80081fa <_free_r+0x26>
 800824c:	6825      	ldr	r5, [r4, #0]
 800824e:	1961      	adds	r1, r4, r5
 8008250:	428b      	cmp	r3, r1
 8008252:	bf04      	itt	eq
 8008254:	6819      	ldreq	r1, [r3, #0]
 8008256:	685b      	ldreq	r3, [r3, #4]
 8008258:	6063      	str	r3, [r4, #4]
 800825a:	bf04      	itt	eq
 800825c:	1949      	addeq	r1, r1, r5
 800825e:	6021      	streq	r1, [r4, #0]
 8008260:	6054      	str	r4, [r2, #4]
 8008262:	e7ca      	b.n	80081fa <_free_r+0x26>
 8008264:	b003      	add	sp, #12
 8008266:	bd30      	pop	{r4, r5, pc}
 8008268:	200008c8 	.word	0x200008c8

0800826c <malloc>:
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <malloc+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f000 b823 	b.w	80082bc <_malloc_r>
 8008276:	bf00      	nop
 8008278:	20000180 	.word	0x20000180

0800827c <sbrk_aligned>:
 800827c:	b570      	push	{r4, r5, r6, lr}
 800827e:	4e0e      	ldr	r6, [pc, #56]	; (80082b8 <sbrk_aligned+0x3c>)
 8008280:	460c      	mov	r4, r1
 8008282:	6831      	ldr	r1, [r6, #0]
 8008284:	4605      	mov	r5, r0
 8008286:	b911      	cbnz	r1, 800828e <sbrk_aligned+0x12>
 8008288:	f000 fe40 	bl	8008f0c <_sbrk_r>
 800828c:	6030      	str	r0, [r6, #0]
 800828e:	4621      	mov	r1, r4
 8008290:	4628      	mov	r0, r5
 8008292:	f000 fe3b 	bl	8008f0c <_sbrk_r>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d00a      	beq.n	80082b0 <sbrk_aligned+0x34>
 800829a:	1cc4      	adds	r4, r0, #3
 800829c:	f024 0403 	bic.w	r4, r4, #3
 80082a0:	42a0      	cmp	r0, r4
 80082a2:	d007      	beq.n	80082b4 <sbrk_aligned+0x38>
 80082a4:	1a21      	subs	r1, r4, r0
 80082a6:	4628      	mov	r0, r5
 80082a8:	f000 fe30 	bl	8008f0c <_sbrk_r>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d101      	bne.n	80082b4 <sbrk_aligned+0x38>
 80082b0:	f04f 34ff 	mov.w	r4, #4294967295
 80082b4:	4620      	mov	r0, r4
 80082b6:	bd70      	pop	{r4, r5, r6, pc}
 80082b8:	200008cc 	.word	0x200008cc

080082bc <_malloc_r>:
 80082bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082c0:	1ccd      	adds	r5, r1, #3
 80082c2:	f025 0503 	bic.w	r5, r5, #3
 80082c6:	3508      	adds	r5, #8
 80082c8:	2d0c      	cmp	r5, #12
 80082ca:	bf38      	it	cc
 80082cc:	250c      	movcc	r5, #12
 80082ce:	2d00      	cmp	r5, #0
 80082d0:	4607      	mov	r7, r0
 80082d2:	db01      	blt.n	80082d8 <_malloc_r+0x1c>
 80082d4:	42a9      	cmp	r1, r5
 80082d6:	d905      	bls.n	80082e4 <_malloc_r+0x28>
 80082d8:	230c      	movs	r3, #12
 80082da:	603b      	str	r3, [r7, #0]
 80082dc:	2600      	movs	r6, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80083b8 <_malloc_r+0xfc>
 80082e8:	f000 f868 	bl	80083bc <__malloc_lock>
 80082ec:	f8d8 3000 	ldr.w	r3, [r8]
 80082f0:	461c      	mov	r4, r3
 80082f2:	bb5c      	cbnz	r4, 800834c <_malloc_r+0x90>
 80082f4:	4629      	mov	r1, r5
 80082f6:	4638      	mov	r0, r7
 80082f8:	f7ff ffc0 	bl	800827c <sbrk_aligned>
 80082fc:	1c43      	adds	r3, r0, #1
 80082fe:	4604      	mov	r4, r0
 8008300:	d155      	bne.n	80083ae <_malloc_r+0xf2>
 8008302:	f8d8 4000 	ldr.w	r4, [r8]
 8008306:	4626      	mov	r6, r4
 8008308:	2e00      	cmp	r6, #0
 800830a:	d145      	bne.n	8008398 <_malloc_r+0xdc>
 800830c:	2c00      	cmp	r4, #0
 800830e:	d048      	beq.n	80083a2 <_malloc_r+0xe6>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	4631      	mov	r1, r6
 8008314:	4638      	mov	r0, r7
 8008316:	eb04 0903 	add.w	r9, r4, r3
 800831a:	f000 fdf7 	bl	8008f0c <_sbrk_r>
 800831e:	4581      	cmp	r9, r0
 8008320:	d13f      	bne.n	80083a2 <_malloc_r+0xe6>
 8008322:	6821      	ldr	r1, [r4, #0]
 8008324:	1a6d      	subs	r5, r5, r1
 8008326:	4629      	mov	r1, r5
 8008328:	4638      	mov	r0, r7
 800832a:	f7ff ffa7 	bl	800827c <sbrk_aligned>
 800832e:	3001      	adds	r0, #1
 8008330:	d037      	beq.n	80083a2 <_malloc_r+0xe6>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	442b      	add	r3, r5
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	f8d8 3000 	ldr.w	r3, [r8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d038      	beq.n	80083b2 <_malloc_r+0xf6>
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	42a2      	cmp	r2, r4
 8008344:	d12b      	bne.n	800839e <_malloc_r+0xe2>
 8008346:	2200      	movs	r2, #0
 8008348:	605a      	str	r2, [r3, #4]
 800834a:	e00f      	b.n	800836c <_malloc_r+0xb0>
 800834c:	6822      	ldr	r2, [r4, #0]
 800834e:	1b52      	subs	r2, r2, r5
 8008350:	d41f      	bmi.n	8008392 <_malloc_r+0xd6>
 8008352:	2a0b      	cmp	r2, #11
 8008354:	d917      	bls.n	8008386 <_malloc_r+0xca>
 8008356:	1961      	adds	r1, r4, r5
 8008358:	42a3      	cmp	r3, r4
 800835a:	6025      	str	r5, [r4, #0]
 800835c:	bf18      	it	ne
 800835e:	6059      	strne	r1, [r3, #4]
 8008360:	6863      	ldr	r3, [r4, #4]
 8008362:	bf08      	it	eq
 8008364:	f8c8 1000 	streq.w	r1, [r8]
 8008368:	5162      	str	r2, [r4, r5]
 800836a:	604b      	str	r3, [r1, #4]
 800836c:	4638      	mov	r0, r7
 800836e:	f104 060b 	add.w	r6, r4, #11
 8008372:	f000 f829 	bl	80083c8 <__malloc_unlock>
 8008376:	f026 0607 	bic.w	r6, r6, #7
 800837a:	1d23      	adds	r3, r4, #4
 800837c:	1af2      	subs	r2, r6, r3
 800837e:	d0ae      	beq.n	80082de <_malloc_r+0x22>
 8008380:	1b9b      	subs	r3, r3, r6
 8008382:	50a3      	str	r3, [r4, r2]
 8008384:	e7ab      	b.n	80082de <_malloc_r+0x22>
 8008386:	42a3      	cmp	r3, r4
 8008388:	6862      	ldr	r2, [r4, #4]
 800838a:	d1dd      	bne.n	8008348 <_malloc_r+0x8c>
 800838c:	f8c8 2000 	str.w	r2, [r8]
 8008390:	e7ec      	b.n	800836c <_malloc_r+0xb0>
 8008392:	4623      	mov	r3, r4
 8008394:	6864      	ldr	r4, [r4, #4]
 8008396:	e7ac      	b.n	80082f2 <_malloc_r+0x36>
 8008398:	4634      	mov	r4, r6
 800839a:	6876      	ldr	r6, [r6, #4]
 800839c:	e7b4      	b.n	8008308 <_malloc_r+0x4c>
 800839e:	4613      	mov	r3, r2
 80083a0:	e7cc      	b.n	800833c <_malloc_r+0x80>
 80083a2:	230c      	movs	r3, #12
 80083a4:	603b      	str	r3, [r7, #0]
 80083a6:	4638      	mov	r0, r7
 80083a8:	f000 f80e 	bl	80083c8 <__malloc_unlock>
 80083ac:	e797      	b.n	80082de <_malloc_r+0x22>
 80083ae:	6025      	str	r5, [r4, #0]
 80083b0:	e7dc      	b.n	800836c <_malloc_r+0xb0>
 80083b2:	605b      	str	r3, [r3, #4]
 80083b4:	deff      	udf	#255	; 0xff
 80083b6:	bf00      	nop
 80083b8:	200008c8 	.word	0x200008c8

080083bc <__malloc_lock>:
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <__malloc_lock+0x8>)
 80083be:	f7ff b87e 	b.w	80074be <__retarget_lock_acquire_recursive>
 80083c2:	bf00      	nop
 80083c4:	200008c4 	.word	0x200008c4

080083c8 <__malloc_unlock>:
 80083c8:	4801      	ldr	r0, [pc, #4]	; (80083d0 <__malloc_unlock+0x8>)
 80083ca:	f7ff b879 	b.w	80074c0 <__retarget_lock_release_recursive>
 80083ce:	bf00      	nop
 80083d0:	200008c4 	.word	0x200008c4

080083d4 <_Balloc>:
 80083d4:	b570      	push	{r4, r5, r6, lr}
 80083d6:	69c6      	ldr	r6, [r0, #28]
 80083d8:	4604      	mov	r4, r0
 80083da:	460d      	mov	r5, r1
 80083dc:	b976      	cbnz	r6, 80083fc <_Balloc+0x28>
 80083de:	2010      	movs	r0, #16
 80083e0:	f7ff ff44 	bl	800826c <malloc>
 80083e4:	4602      	mov	r2, r0
 80083e6:	61e0      	str	r0, [r4, #28]
 80083e8:	b920      	cbnz	r0, 80083f4 <_Balloc+0x20>
 80083ea:	4b18      	ldr	r3, [pc, #96]	; (800844c <_Balloc+0x78>)
 80083ec:	4818      	ldr	r0, [pc, #96]	; (8008450 <_Balloc+0x7c>)
 80083ee:	216b      	movs	r1, #107	; 0x6b
 80083f0:	f000 fd9c 	bl	8008f2c <__assert_func>
 80083f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083f8:	6006      	str	r6, [r0, #0]
 80083fa:	60c6      	str	r6, [r0, #12]
 80083fc:	69e6      	ldr	r6, [r4, #28]
 80083fe:	68f3      	ldr	r3, [r6, #12]
 8008400:	b183      	cbz	r3, 8008424 <_Balloc+0x50>
 8008402:	69e3      	ldr	r3, [r4, #28]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800840a:	b9b8      	cbnz	r0, 800843c <_Balloc+0x68>
 800840c:	2101      	movs	r1, #1
 800840e:	fa01 f605 	lsl.w	r6, r1, r5
 8008412:	1d72      	adds	r2, r6, #5
 8008414:	0092      	lsls	r2, r2, #2
 8008416:	4620      	mov	r0, r4
 8008418:	f000 fda6 	bl	8008f68 <_calloc_r>
 800841c:	b160      	cbz	r0, 8008438 <_Balloc+0x64>
 800841e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008422:	e00e      	b.n	8008442 <_Balloc+0x6e>
 8008424:	2221      	movs	r2, #33	; 0x21
 8008426:	2104      	movs	r1, #4
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fd9d 	bl	8008f68 <_calloc_r>
 800842e:	69e3      	ldr	r3, [r4, #28]
 8008430:	60f0      	str	r0, [r6, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e4      	bne.n	8008402 <_Balloc+0x2e>
 8008438:	2000      	movs	r0, #0
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	6802      	ldr	r2, [r0, #0]
 800843e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008442:	2300      	movs	r3, #0
 8008444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008448:	e7f7      	b.n	800843a <_Balloc+0x66>
 800844a:	bf00      	nop
 800844c:	08009665 	.word	0x08009665
 8008450:	080096e5 	.word	0x080096e5

08008454 <_Bfree>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	69c6      	ldr	r6, [r0, #28]
 8008458:	4605      	mov	r5, r0
 800845a:	460c      	mov	r4, r1
 800845c:	b976      	cbnz	r6, 800847c <_Bfree+0x28>
 800845e:	2010      	movs	r0, #16
 8008460:	f7ff ff04 	bl	800826c <malloc>
 8008464:	4602      	mov	r2, r0
 8008466:	61e8      	str	r0, [r5, #28]
 8008468:	b920      	cbnz	r0, 8008474 <_Bfree+0x20>
 800846a:	4b09      	ldr	r3, [pc, #36]	; (8008490 <_Bfree+0x3c>)
 800846c:	4809      	ldr	r0, [pc, #36]	; (8008494 <_Bfree+0x40>)
 800846e:	218f      	movs	r1, #143	; 0x8f
 8008470:	f000 fd5c 	bl	8008f2c <__assert_func>
 8008474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008478:	6006      	str	r6, [r0, #0]
 800847a:	60c6      	str	r6, [r0, #12]
 800847c:	b13c      	cbz	r4, 800848e <_Bfree+0x3a>
 800847e:	69eb      	ldr	r3, [r5, #28]
 8008480:	6862      	ldr	r2, [r4, #4]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008488:	6021      	str	r1, [r4, #0]
 800848a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800848e:	bd70      	pop	{r4, r5, r6, pc}
 8008490:	08009665 	.word	0x08009665
 8008494:	080096e5 	.word	0x080096e5

08008498 <__multadd>:
 8008498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800849c:	690d      	ldr	r5, [r1, #16]
 800849e:	4607      	mov	r7, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	461e      	mov	r6, r3
 80084a4:	f101 0c14 	add.w	ip, r1, #20
 80084a8:	2000      	movs	r0, #0
 80084aa:	f8dc 3000 	ldr.w	r3, [ip]
 80084ae:	b299      	uxth	r1, r3
 80084b0:	fb02 6101 	mla	r1, r2, r1, r6
 80084b4:	0c1e      	lsrs	r6, r3, #16
 80084b6:	0c0b      	lsrs	r3, r1, #16
 80084b8:	fb02 3306 	mla	r3, r2, r6, r3
 80084bc:	b289      	uxth	r1, r1
 80084be:	3001      	adds	r0, #1
 80084c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80084c4:	4285      	cmp	r5, r0
 80084c6:	f84c 1b04 	str.w	r1, [ip], #4
 80084ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80084ce:	dcec      	bgt.n	80084aa <__multadd+0x12>
 80084d0:	b30e      	cbz	r6, 8008516 <__multadd+0x7e>
 80084d2:	68a3      	ldr	r3, [r4, #8]
 80084d4:	42ab      	cmp	r3, r5
 80084d6:	dc19      	bgt.n	800850c <__multadd+0x74>
 80084d8:	6861      	ldr	r1, [r4, #4]
 80084da:	4638      	mov	r0, r7
 80084dc:	3101      	adds	r1, #1
 80084de:	f7ff ff79 	bl	80083d4 <_Balloc>
 80084e2:	4680      	mov	r8, r0
 80084e4:	b928      	cbnz	r0, 80084f2 <__multadd+0x5a>
 80084e6:	4602      	mov	r2, r0
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <__multadd+0x84>)
 80084ea:	480d      	ldr	r0, [pc, #52]	; (8008520 <__multadd+0x88>)
 80084ec:	21ba      	movs	r1, #186	; 0xba
 80084ee:	f000 fd1d 	bl	8008f2c <__assert_func>
 80084f2:	6922      	ldr	r2, [r4, #16]
 80084f4:	3202      	adds	r2, #2
 80084f6:	f104 010c 	add.w	r1, r4, #12
 80084fa:	0092      	lsls	r2, r2, #2
 80084fc:	300c      	adds	r0, #12
 80084fe:	f7fe ffe0 	bl	80074c2 <memcpy>
 8008502:	4621      	mov	r1, r4
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ffa5 	bl	8008454 <_Bfree>
 800850a:	4644      	mov	r4, r8
 800850c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008510:	3501      	adds	r5, #1
 8008512:	615e      	str	r6, [r3, #20]
 8008514:	6125      	str	r5, [r4, #16]
 8008516:	4620      	mov	r0, r4
 8008518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800851c:	080096d4 	.word	0x080096d4
 8008520:	080096e5 	.word	0x080096e5

08008524 <__hi0bits>:
 8008524:	0c03      	lsrs	r3, r0, #16
 8008526:	041b      	lsls	r3, r3, #16
 8008528:	b9d3      	cbnz	r3, 8008560 <__hi0bits+0x3c>
 800852a:	0400      	lsls	r0, r0, #16
 800852c:	2310      	movs	r3, #16
 800852e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008532:	bf04      	itt	eq
 8008534:	0200      	lsleq	r0, r0, #8
 8008536:	3308      	addeq	r3, #8
 8008538:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800853c:	bf04      	itt	eq
 800853e:	0100      	lsleq	r0, r0, #4
 8008540:	3304      	addeq	r3, #4
 8008542:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008546:	bf04      	itt	eq
 8008548:	0080      	lsleq	r0, r0, #2
 800854a:	3302      	addeq	r3, #2
 800854c:	2800      	cmp	r0, #0
 800854e:	db05      	blt.n	800855c <__hi0bits+0x38>
 8008550:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008554:	f103 0301 	add.w	r3, r3, #1
 8008558:	bf08      	it	eq
 800855a:	2320      	moveq	r3, #32
 800855c:	4618      	mov	r0, r3
 800855e:	4770      	bx	lr
 8008560:	2300      	movs	r3, #0
 8008562:	e7e4      	b.n	800852e <__hi0bits+0xa>

08008564 <__lo0bits>:
 8008564:	6803      	ldr	r3, [r0, #0]
 8008566:	f013 0207 	ands.w	r2, r3, #7
 800856a:	d00c      	beq.n	8008586 <__lo0bits+0x22>
 800856c:	07d9      	lsls	r1, r3, #31
 800856e:	d422      	bmi.n	80085b6 <__lo0bits+0x52>
 8008570:	079a      	lsls	r2, r3, #30
 8008572:	bf49      	itett	mi
 8008574:	085b      	lsrmi	r3, r3, #1
 8008576:	089b      	lsrpl	r3, r3, #2
 8008578:	6003      	strmi	r3, [r0, #0]
 800857a:	2201      	movmi	r2, #1
 800857c:	bf5c      	itt	pl
 800857e:	6003      	strpl	r3, [r0, #0]
 8008580:	2202      	movpl	r2, #2
 8008582:	4610      	mov	r0, r2
 8008584:	4770      	bx	lr
 8008586:	b299      	uxth	r1, r3
 8008588:	b909      	cbnz	r1, 800858e <__lo0bits+0x2a>
 800858a:	0c1b      	lsrs	r3, r3, #16
 800858c:	2210      	movs	r2, #16
 800858e:	b2d9      	uxtb	r1, r3
 8008590:	b909      	cbnz	r1, 8008596 <__lo0bits+0x32>
 8008592:	3208      	adds	r2, #8
 8008594:	0a1b      	lsrs	r3, r3, #8
 8008596:	0719      	lsls	r1, r3, #28
 8008598:	bf04      	itt	eq
 800859a:	091b      	lsreq	r3, r3, #4
 800859c:	3204      	addeq	r2, #4
 800859e:	0799      	lsls	r1, r3, #30
 80085a0:	bf04      	itt	eq
 80085a2:	089b      	lsreq	r3, r3, #2
 80085a4:	3202      	addeq	r2, #2
 80085a6:	07d9      	lsls	r1, r3, #31
 80085a8:	d403      	bmi.n	80085b2 <__lo0bits+0x4e>
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	f102 0201 	add.w	r2, r2, #1
 80085b0:	d003      	beq.n	80085ba <__lo0bits+0x56>
 80085b2:	6003      	str	r3, [r0, #0]
 80085b4:	e7e5      	b.n	8008582 <__lo0bits+0x1e>
 80085b6:	2200      	movs	r2, #0
 80085b8:	e7e3      	b.n	8008582 <__lo0bits+0x1e>
 80085ba:	2220      	movs	r2, #32
 80085bc:	e7e1      	b.n	8008582 <__lo0bits+0x1e>
	...

080085c0 <__i2b>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	460c      	mov	r4, r1
 80085c4:	2101      	movs	r1, #1
 80085c6:	f7ff ff05 	bl	80083d4 <_Balloc>
 80085ca:	4602      	mov	r2, r0
 80085cc:	b928      	cbnz	r0, 80085da <__i2b+0x1a>
 80085ce:	4b05      	ldr	r3, [pc, #20]	; (80085e4 <__i2b+0x24>)
 80085d0:	4805      	ldr	r0, [pc, #20]	; (80085e8 <__i2b+0x28>)
 80085d2:	f240 1145 	movw	r1, #325	; 0x145
 80085d6:	f000 fca9 	bl	8008f2c <__assert_func>
 80085da:	2301      	movs	r3, #1
 80085dc:	6144      	str	r4, [r0, #20]
 80085de:	6103      	str	r3, [r0, #16]
 80085e0:	bd10      	pop	{r4, pc}
 80085e2:	bf00      	nop
 80085e4:	080096d4 	.word	0x080096d4
 80085e8:	080096e5 	.word	0x080096e5

080085ec <__multiply>:
 80085ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f0:	4691      	mov	r9, r2
 80085f2:	690a      	ldr	r2, [r1, #16]
 80085f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	bfb8      	it	lt
 80085fc:	460b      	movlt	r3, r1
 80085fe:	460c      	mov	r4, r1
 8008600:	bfbc      	itt	lt
 8008602:	464c      	movlt	r4, r9
 8008604:	4699      	movlt	r9, r3
 8008606:	6927      	ldr	r7, [r4, #16]
 8008608:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	6861      	ldr	r1, [r4, #4]
 8008610:	eb07 060a 	add.w	r6, r7, sl
 8008614:	42b3      	cmp	r3, r6
 8008616:	b085      	sub	sp, #20
 8008618:	bfb8      	it	lt
 800861a:	3101      	addlt	r1, #1
 800861c:	f7ff feda 	bl	80083d4 <_Balloc>
 8008620:	b930      	cbnz	r0, 8008630 <__multiply+0x44>
 8008622:	4602      	mov	r2, r0
 8008624:	4b44      	ldr	r3, [pc, #272]	; (8008738 <__multiply+0x14c>)
 8008626:	4845      	ldr	r0, [pc, #276]	; (800873c <__multiply+0x150>)
 8008628:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800862c:	f000 fc7e 	bl	8008f2c <__assert_func>
 8008630:	f100 0514 	add.w	r5, r0, #20
 8008634:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008638:	462b      	mov	r3, r5
 800863a:	2200      	movs	r2, #0
 800863c:	4543      	cmp	r3, r8
 800863e:	d321      	bcc.n	8008684 <__multiply+0x98>
 8008640:	f104 0314 	add.w	r3, r4, #20
 8008644:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008648:	f109 0314 	add.w	r3, r9, #20
 800864c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008650:	9202      	str	r2, [sp, #8]
 8008652:	1b3a      	subs	r2, r7, r4
 8008654:	3a15      	subs	r2, #21
 8008656:	f022 0203 	bic.w	r2, r2, #3
 800865a:	3204      	adds	r2, #4
 800865c:	f104 0115 	add.w	r1, r4, #21
 8008660:	428f      	cmp	r7, r1
 8008662:	bf38      	it	cc
 8008664:	2204      	movcc	r2, #4
 8008666:	9201      	str	r2, [sp, #4]
 8008668:	9a02      	ldr	r2, [sp, #8]
 800866a:	9303      	str	r3, [sp, #12]
 800866c:	429a      	cmp	r2, r3
 800866e:	d80c      	bhi.n	800868a <__multiply+0x9e>
 8008670:	2e00      	cmp	r6, #0
 8008672:	dd03      	ble.n	800867c <__multiply+0x90>
 8008674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008678:	2b00      	cmp	r3, #0
 800867a:	d05b      	beq.n	8008734 <__multiply+0x148>
 800867c:	6106      	str	r6, [r0, #16]
 800867e:	b005      	add	sp, #20
 8008680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008684:	f843 2b04 	str.w	r2, [r3], #4
 8008688:	e7d8      	b.n	800863c <__multiply+0x50>
 800868a:	f8b3 a000 	ldrh.w	sl, [r3]
 800868e:	f1ba 0f00 	cmp.w	sl, #0
 8008692:	d024      	beq.n	80086de <__multiply+0xf2>
 8008694:	f104 0e14 	add.w	lr, r4, #20
 8008698:	46a9      	mov	r9, r5
 800869a:	f04f 0c00 	mov.w	ip, #0
 800869e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80086a2:	f8d9 1000 	ldr.w	r1, [r9]
 80086a6:	fa1f fb82 	uxth.w	fp, r2
 80086aa:	b289      	uxth	r1, r1
 80086ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80086b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80086b4:	f8d9 2000 	ldr.w	r2, [r9]
 80086b8:	4461      	add	r1, ip
 80086ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086be:	fb0a c20b 	mla	r2, sl, fp, ip
 80086c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086c6:	b289      	uxth	r1, r1
 80086c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80086cc:	4577      	cmp	r7, lr
 80086ce:	f849 1b04 	str.w	r1, [r9], #4
 80086d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80086d6:	d8e2      	bhi.n	800869e <__multiply+0xb2>
 80086d8:	9a01      	ldr	r2, [sp, #4]
 80086da:	f845 c002 	str.w	ip, [r5, r2]
 80086de:	9a03      	ldr	r2, [sp, #12]
 80086e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80086e4:	3304      	adds	r3, #4
 80086e6:	f1b9 0f00 	cmp.w	r9, #0
 80086ea:	d021      	beq.n	8008730 <__multiply+0x144>
 80086ec:	6829      	ldr	r1, [r5, #0]
 80086ee:	f104 0c14 	add.w	ip, r4, #20
 80086f2:	46ae      	mov	lr, r5
 80086f4:	f04f 0a00 	mov.w	sl, #0
 80086f8:	f8bc b000 	ldrh.w	fp, [ip]
 80086fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008700:	fb09 220b 	mla	r2, r9, fp, r2
 8008704:	4452      	add	r2, sl
 8008706:	b289      	uxth	r1, r1
 8008708:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800870c:	f84e 1b04 	str.w	r1, [lr], #4
 8008710:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008714:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008718:	f8be 1000 	ldrh.w	r1, [lr]
 800871c:	fb09 110a 	mla	r1, r9, sl, r1
 8008720:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008724:	4567      	cmp	r7, ip
 8008726:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800872a:	d8e5      	bhi.n	80086f8 <__multiply+0x10c>
 800872c:	9a01      	ldr	r2, [sp, #4]
 800872e:	50a9      	str	r1, [r5, r2]
 8008730:	3504      	adds	r5, #4
 8008732:	e799      	b.n	8008668 <__multiply+0x7c>
 8008734:	3e01      	subs	r6, #1
 8008736:	e79b      	b.n	8008670 <__multiply+0x84>
 8008738:	080096d4 	.word	0x080096d4
 800873c:	080096e5 	.word	0x080096e5

08008740 <__pow5mult>:
 8008740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008744:	4615      	mov	r5, r2
 8008746:	f012 0203 	ands.w	r2, r2, #3
 800874a:	4606      	mov	r6, r0
 800874c:	460f      	mov	r7, r1
 800874e:	d007      	beq.n	8008760 <__pow5mult+0x20>
 8008750:	4c25      	ldr	r4, [pc, #148]	; (80087e8 <__pow5mult+0xa8>)
 8008752:	3a01      	subs	r2, #1
 8008754:	2300      	movs	r3, #0
 8008756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800875a:	f7ff fe9d 	bl	8008498 <__multadd>
 800875e:	4607      	mov	r7, r0
 8008760:	10ad      	asrs	r5, r5, #2
 8008762:	d03d      	beq.n	80087e0 <__pow5mult+0xa0>
 8008764:	69f4      	ldr	r4, [r6, #28]
 8008766:	b97c      	cbnz	r4, 8008788 <__pow5mult+0x48>
 8008768:	2010      	movs	r0, #16
 800876a:	f7ff fd7f 	bl	800826c <malloc>
 800876e:	4602      	mov	r2, r0
 8008770:	61f0      	str	r0, [r6, #28]
 8008772:	b928      	cbnz	r0, 8008780 <__pow5mult+0x40>
 8008774:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <__pow5mult+0xac>)
 8008776:	481e      	ldr	r0, [pc, #120]	; (80087f0 <__pow5mult+0xb0>)
 8008778:	f240 11b3 	movw	r1, #435	; 0x1b3
 800877c:	f000 fbd6 	bl	8008f2c <__assert_func>
 8008780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008784:	6004      	str	r4, [r0, #0]
 8008786:	60c4      	str	r4, [r0, #12]
 8008788:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800878c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008790:	b94c      	cbnz	r4, 80087a6 <__pow5mult+0x66>
 8008792:	f240 2171 	movw	r1, #625	; 0x271
 8008796:	4630      	mov	r0, r6
 8008798:	f7ff ff12 	bl	80085c0 <__i2b>
 800879c:	2300      	movs	r3, #0
 800879e:	f8c8 0008 	str.w	r0, [r8, #8]
 80087a2:	4604      	mov	r4, r0
 80087a4:	6003      	str	r3, [r0, #0]
 80087a6:	f04f 0900 	mov.w	r9, #0
 80087aa:	07eb      	lsls	r3, r5, #31
 80087ac:	d50a      	bpl.n	80087c4 <__pow5mult+0x84>
 80087ae:	4639      	mov	r1, r7
 80087b0:	4622      	mov	r2, r4
 80087b2:	4630      	mov	r0, r6
 80087b4:	f7ff ff1a 	bl	80085ec <__multiply>
 80087b8:	4639      	mov	r1, r7
 80087ba:	4680      	mov	r8, r0
 80087bc:	4630      	mov	r0, r6
 80087be:	f7ff fe49 	bl	8008454 <_Bfree>
 80087c2:	4647      	mov	r7, r8
 80087c4:	106d      	asrs	r5, r5, #1
 80087c6:	d00b      	beq.n	80087e0 <__pow5mult+0xa0>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	b938      	cbnz	r0, 80087dc <__pow5mult+0x9c>
 80087cc:	4622      	mov	r2, r4
 80087ce:	4621      	mov	r1, r4
 80087d0:	4630      	mov	r0, r6
 80087d2:	f7ff ff0b 	bl	80085ec <__multiply>
 80087d6:	6020      	str	r0, [r4, #0]
 80087d8:	f8c0 9000 	str.w	r9, [r0]
 80087dc:	4604      	mov	r4, r0
 80087de:	e7e4      	b.n	80087aa <__pow5mult+0x6a>
 80087e0:	4638      	mov	r0, r7
 80087e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087e6:	bf00      	nop
 80087e8:	08009830 	.word	0x08009830
 80087ec:	08009665 	.word	0x08009665
 80087f0:	080096e5 	.word	0x080096e5

080087f4 <__lshift>:
 80087f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	460c      	mov	r4, r1
 80087fa:	6849      	ldr	r1, [r1, #4]
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008802:	68a3      	ldr	r3, [r4, #8]
 8008804:	4607      	mov	r7, r0
 8008806:	4691      	mov	r9, r2
 8008808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800880c:	f108 0601 	add.w	r6, r8, #1
 8008810:	42b3      	cmp	r3, r6
 8008812:	db0b      	blt.n	800882c <__lshift+0x38>
 8008814:	4638      	mov	r0, r7
 8008816:	f7ff fddd 	bl	80083d4 <_Balloc>
 800881a:	4605      	mov	r5, r0
 800881c:	b948      	cbnz	r0, 8008832 <__lshift+0x3e>
 800881e:	4602      	mov	r2, r0
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <__lshift+0xd0>)
 8008822:	4829      	ldr	r0, [pc, #164]	; (80088c8 <__lshift+0xd4>)
 8008824:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008828:	f000 fb80 	bl	8008f2c <__assert_func>
 800882c:	3101      	adds	r1, #1
 800882e:	005b      	lsls	r3, r3, #1
 8008830:	e7ee      	b.n	8008810 <__lshift+0x1c>
 8008832:	2300      	movs	r3, #0
 8008834:	f100 0114 	add.w	r1, r0, #20
 8008838:	f100 0210 	add.w	r2, r0, #16
 800883c:	4618      	mov	r0, r3
 800883e:	4553      	cmp	r3, sl
 8008840:	db33      	blt.n	80088aa <__lshift+0xb6>
 8008842:	6920      	ldr	r0, [r4, #16]
 8008844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008848:	f104 0314 	add.w	r3, r4, #20
 800884c:	f019 091f 	ands.w	r9, r9, #31
 8008850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008858:	d02b      	beq.n	80088b2 <__lshift+0xbe>
 800885a:	f1c9 0e20 	rsb	lr, r9, #32
 800885e:	468a      	mov	sl, r1
 8008860:	2200      	movs	r2, #0
 8008862:	6818      	ldr	r0, [r3, #0]
 8008864:	fa00 f009 	lsl.w	r0, r0, r9
 8008868:	4310      	orrs	r0, r2
 800886a:	f84a 0b04 	str.w	r0, [sl], #4
 800886e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008872:	459c      	cmp	ip, r3
 8008874:	fa22 f20e 	lsr.w	r2, r2, lr
 8008878:	d8f3      	bhi.n	8008862 <__lshift+0x6e>
 800887a:	ebac 0304 	sub.w	r3, ip, r4
 800887e:	3b15      	subs	r3, #21
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	3304      	adds	r3, #4
 8008886:	f104 0015 	add.w	r0, r4, #21
 800888a:	4584      	cmp	ip, r0
 800888c:	bf38      	it	cc
 800888e:	2304      	movcc	r3, #4
 8008890:	50ca      	str	r2, [r1, r3]
 8008892:	b10a      	cbz	r2, 8008898 <__lshift+0xa4>
 8008894:	f108 0602 	add.w	r6, r8, #2
 8008898:	3e01      	subs	r6, #1
 800889a:	4638      	mov	r0, r7
 800889c:	612e      	str	r6, [r5, #16]
 800889e:	4621      	mov	r1, r4
 80088a0:	f7ff fdd8 	bl	8008454 <_Bfree>
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80088ae:	3301      	adds	r3, #1
 80088b0:	e7c5      	b.n	800883e <__lshift+0x4a>
 80088b2:	3904      	subs	r1, #4
 80088b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80088bc:	459c      	cmp	ip, r3
 80088be:	d8f9      	bhi.n	80088b4 <__lshift+0xc0>
 80088c0:	e7ea      	b.n	8008898 <__lshift+0xa4>
 80088c2:	bf00      	nop
 80088c4:	080096d4 	.word	0x080096d4
 80088c8:	080096e5 	.word	0x080096e5

080088cc <__mcmp>:
 80088cc:	b530      	push	{r4, r5, lr}
 80088ce:	6902      	ldr	r2, [r0, #16]
 80088d0:	690c      	ldr	r4, [r1, #16]
 80088d2:	1b12      	subs	r2, r2, r4
 80088d4:	d10e      	bne.n	80088f4 <__mcmp+0x28>
 80088d6:	f100 0314 	add.w	r3, r0, #20
 80088da:	3114      	adds	r1, #20
 80088dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80088e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80088e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80088e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80088ec:	42a5      	cmp	r5, r4
 80088ee:	d003      	beq.n	80088f8 <__mcmp+0x2c>
 80088f0:	d305      	bcc.n	80088fe <__mcmp+0x32>
 80088f2:	2201      	movs	r2, #1
 80088f4:	4610      	mov	r0, r2
 80088f6:	bd30      	pop	{r4, r5, pc}
 80088f8:	4283      	cmp	r3, r0
 80088fa:	d3f3      	bcc.n	80088e4 <__mcmp+0x18>
 80088fc:	e7fa      	b.n	80088f4 <__mcmp+0x28>
 80088fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008902:	e7f7      	b.n	80088f4 <__mcmp+0x28>

08008904 <__mdiff>:
 8008904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008908:	460c      	mov	r4, r1
 800890a:	4606      	mov	r6, r0
 800890c:	4611      	mov	r1, r2
 800890e:	4620      	mov	r0, r4
 8008910:	4690      	mov	r8, r2
 8008912:	f7ff ffdb 	bl	80088cc <__mcmp>
 8008916:	1e05      	subs	r5, r0, #0
 8008918:	d110      	bne.n	800893c <__mdiff+0x38>
 800891a:	4629      	mov	r1, r5
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff fd59 	bl	80083d4 <_Balloc>
 8008922:	b930      	cbnz	r0, 8008932 <__mdiff+0x2e>
 8008924:	4b3a      	ldr	r3, [pc, #232]	; (8008a10 <__mdiff+0x10c>)
 8008926:	4602      	mov	r2, r0
 8008928:	f240 2137 	movw	r1, #567	; 0x237
 800892c:	4839      	ldr	r0, [pc, #228]	; (8008a14 <__mdiff+0x110>)
 800892e:	f000 fafd 	bl	8008f2c <__assert_func>
 8008932:	2301      	movs	r3, #1
 8008934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008938:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893c:	bfa4      	itt	ge
 800893e:	4643      	movge	r3, r8
 8008940:	46a0      	movge	r8, r4
 8008942:	4630      	mov	r0, r6
 8008944:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008948:	bfa6      	itte	ge
 800894a:	461c      	movge	r4, r3
 800894c:	2500      	movge	r5, #0
 800894e:	2501      	movlt	r5, #1
 8008950:	f7ff fd40 	bl	80083d4 <_Balloc>
 8008954:	b920      	cbnz	r0, 8008960 <__mdiff+0x5c>
 8008956:	4b2e      	ldr	r3, [pc, #184]	; (8008a10 <__mdiff+0x10c>)
 8008958:	4602      	mov	r2, r0
 800895a:	f240 2145 	movw	r1, #581	; 0x245
 800895e:	e7e5      	b.n	800892c <__mdiff+0x28>
 8008960:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008964:	6926      	ldr	r6, [r4, #16]
 8008966:	60c5      	str	r5, [r0, #12]
 8008968:	f104 0914 	add.w	r9, r4, #20
 800896c:	f108 0514 	add.w	r5, r8, #20
 8008970:	f100 0e14 	add.w	lr, r0, #20
 8008974:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008978:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800897c:	f108 0210 	add.w	r2, r8, #16
 8008980:	46f2      	mov	sl, lr
 8008982:	2100      	movs	r1, #0
 8008984:	f859 3b04 	ldr.w	r3, [r9], #4
 8008988:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800898c:	fa11 f88b 	uxtah	r8, r1, fp
 8008990:	b299      	uxth	r1, r3
 8008992:	0c1b      	lsrs	r3, r3, #16
 8008994:	eba8 0801 	sub.w	r8, r8, r1
 8008998:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800899c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80089a0:	fa1f f888 	uxth.w	r8, r8
 80089a4:	1419      	asrs	r1, r3, #16
 80089a6:	454e      	cmp	r6, r9
 80089a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80089ac:	f84a 3b04 	str.w	r3, [sl], #4
 80089b0:	d8e8      	bhi.n	8008984 <__mdiff+0x80>
 80089b2:	1b33      	subs	r3, r6, r4
 80089b4:	3b15      	subs	r3, #21
 80089b6:	f023 0303 	bic.w	r3, r3, #3
 80089ba:	3304      	adds	r3, #4
 80089bc:	3415      	adds	r4, #21
 80089be:	42a6      	cmp	r6, r4
 80089c0:	bf38      	it	cc
 80089c2:	2304      	movcc	r3, #4
 80089c4:	441d      	add	r5, r3
 80089c6:	4473      	add	r3, lr
 80089c8:	469e      	mov	lr, r3
 80089ca:	462e      	mov	r6, r5
 80089cc:	4566      	cmp	r6, ip
 80089ce:	d30e      	bcc.n	80089ee <__mdiff+0xea>
 80089d0:	f10c 0203 	add.w	r2, ip, #3
 80089d4:	1b52      	subs	r2, r2, r5
 80089d6:	f022 0203 	bic.w	r2, r2, #3
 80089da:	3d03      	subs	r5, #3
 80089dc:	45ac      	cmp	ip, r5
 80089de:	bf38      	it	cc
 80089e0:	2200      	movcc	r2, #0
 80089e2:	4413      	add	r3, r2
 80089e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80089e8:	b17a      	cbz	r2, 8008a0a <__mdiff+0x106>
 80089ea:	6107      	str	r7, [r0, #16]
 80089ec:	e7a4      	b.n	8008938 <__mdiff+0x34>
 80089ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80089f2:	fa11 f288 	uxtah	r2, r1, r8
 80089f6:	1414      	asrs	r4, r2, #16
 80089f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80089fc:	b292      	uxth	r2, r2
 80089fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a02:	f84e 2b04 	str.w	r2, [lr], #4
 8008a06:	1421      	asrs	r1, r4, #16
 8008a08:	e7e0      	b.n	80089cc <__mdiff+0xc8>
 8008a0a:	3f01      	subs	r7, #1
 8008a0c:	e7ea      	b.n	80089e4 <__mdiff+0xe0>
 8008a0e:	bf00      	nop
 8008a10:	080096d4 	.word	0x080096d4
 8008a14:	080096e5 	.word	0x080096e5

08008a18 <__d2b>:
 8008a18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	2101      	movs	r1, #1
 8008a20:	ec59 8b10 	vmov	r8, r9, d0
 8008a24:	4616      	mov	r6, r2
 8008a26:	f7ff fcd5 	bl	80083d4 <_Balloc>
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	b930      	cbnz	r0, 8008a3c <__d2b+0x24>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <__d2b+0xac>)
 8008a32:	4825      	ldr	r0, [pc, #148]	; (8008ac8 <__d2b+0xb0>)
 8008a34:	f240 310f 	movw	r1, #783	; 0x30f
 8008a38:	f000 fa78 	bl	8008f2c <__assert_func>
 8008a3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008a40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a44:	bb2d      	cbnz	r5, 8008a92 <__d2b+0x7a>
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	f1b8 0300 	subs.w	r3, r8, #0
 8008a4c:	d026      	beq.n	8008a9c <__d2b+0x84>
 8008a4e:	4668      	mov	r0, sp
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	f7ff fd87 	bl	8008564 <__lo0bits>
 8008a56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008a5a:	b1e8      	cbz	r0, 8008a98 <__d2b+0x80>
 8008a5c:	f1c0 0320 	rsb	r3, r0, #32
 8008a60:	fa02 f303 	lsl.w	r3, r2, r3
 8008a64:	430b      	orrs	r3, r1
 8008a66:	40c2      	lsrs	r2, r0
 8008a68:	6163      	str	r3, [r4, #20]
 8008a6a:	9201      	str	r2, [sp, #4]
 8008a6c:	9b01      	ldr	r3, [sp, #4]
 8008a6e:	61a3      	str	r3, [r4, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bf14      	ite	ne
 8008a74:	2202      	movne	r2, #2
 8008a76:	2201      	moveq	r2, #1
 8008a78:	6122      	str	r2, [r4, #16]
 8008a7a:	b1bd      	cbz	r5, 8008aac <__d2b+0x94>
 8008a7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008a80:	4405      	add	r5, r0
 8008a82:	603d      	str	r5, [r7, #0]
 8008a84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008a88:	6030      	str	r0, [r6, #0]
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	b003      	add	sp, #12
 8008a8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a96:	e7d6      	b.n	8008a46 <__d2b+0x2e>
 8008a98:	6161      	str	r1, [r4, #20]
 8008a9a:	e7e7      	b.n	8008a6c <__d2b+0x54>
 8008a9c:	a801      	add	r0, sp, #4
 8008a9e:	f7ff fd61 	bl	8008564 <__lo0bits>
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	6163      	str	r3, [r4, #20]
 8008aa6:	3020      	adds	r0, #32
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	e7e5      	b.n	8008a78 <__d2b+0x60>
 8008aac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ab0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008ab4:	6038      	str	r0, [r7, #0]
 8008ab6:	6918      	ldr	r0, [r3, #16]
 8008ab8:	f7ff fd34 	bl	8008524 <__hi0bits>
 8008abc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ac0:	e7e2      	b.n	8008a88 <__d2b+0x70>
 8008ac2:	bf00      	nop
 8008ac4:	080096d4 	.word	0x080096d4
 8008ac8:	080096e5 	.word	0x080096e5

08008acc <__ssputs_r>:
 8008acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad0:	688e      	ldr	r6, [r1, #8]
 8008ad2:	461f      	mov	r7, r3
 8008ad4:	42be      	cmp	r6, r7
 8008ad6:	680b      	ldr	r3, [r1, #0]
 8008ad8:	4682      	mov	sl, r0
 8008ada:	460c      	mov	r4, r1
 8008adc:	4690      	mov	r8, r2
 8008ade:	d82c      	bhi.n	8008b3a <__ssputs_r+0x6e>
 8008ae0:	898a      	ldrh	r2, [r1, #12]
 8008ae2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008ae6:	d026      	beq.n	8008b36 <__ssputs_r+0x6a>
 8008ae8:	6965      	ldr	r5, [r4, #20]
 8008aea:	6909      	ldr	r1, [r1, #16]
 8008aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008af0:	eba3 0901 	sub.w	r9, r3, r1
 8008af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008af8:	1c7b      	adds	r3, r7, #1
 8008afa:	444b      	add	r3, r9
 8008afc:	106d      	asrs	r5, r5, #1
 8008afe:	429d      	cmp	r5, r3
 8008b00:	bf38      	it	cc
 8008b02:	461d      	movcc	r5, r3
 8008b04:	0553      	lsls	r3, r2, #21
 8008b06:	d527      	bpl.n	8008b58 <__ssputs_r+0x8c>
 8008b08:	4629      	mov	r1, r5
 8008b0a:	f7ff fbd7 	bl	80082bc <_malloc_r>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	b360      	cbz	r0, 8008b6c <__ssputs_r+0xa0>
 8008b12:	6921      	ldr	r1, [r4, #16]
 8008b14:	464a      	mov	r2, r9
 8008b16:	f7fe fcd4 	bl	80074c2 <memcpy>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	6126      	str	r6, [r4, #16]
 8008b28:	6165      	str	r5, [r4, #20]
 8008b2a:	444e      	add	r6, r9
 8008b2c:	eba5 0509 	sub.w	r5, r5, r9
 8008b30:	6026      	str	r6, [r4, #0]
 8008b32:	60a5      	str	r5, [r4, #8]
 8008b34:	463e      	mov	r6, r7
 8008b36:	42be      	cmp	r6, r7
 8008b38:	d900      	bls.n	8008b3c <__ssputs_r+0x70>
 8008b3a:	463e      	mov	r6, r7
 8008b3c:	6820      	ldr	r0, [r4, #0]
 8008b3e:	4632      	mov	r2, r6
 8008b40:	4641      	mov	r1, r8
 8008b42:	f000 f9c9 	bl	8008ed8 <memmove>
 8008b46:	68a3      	ldr	r3, [r4, #8]
 8008b48:	1b9b      	subs	r3, r3, r6
 8008b4a:	60a3      	str	r3, [r4, #8]
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	4433      	add	r3, r6
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	2000      	movs	r0, #0
 8008b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b58:	462a      	mov	r2, r5
 8008b5a:	f000 fa2d 	bl	8008fb8 <_realloc_r>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d1e0      	bne.n	8008b26 <__ssputs_r+0x5a>
 8008b64:	6921      	ldr	r1, [r4, #16]
 8008b66:	4650      	mov	r0, sl
 8008b68:	f7ff fb34 	bl	80081d4 <_free_r>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	f8ca 3000 	str.w	r3, [sl]
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b78:	81a3      	strh	r3, [r4, #12]
 8008b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7e:	e7e9      	b.n	8008b54 <__ssputs_r+0x88>

08008b80 <_svfiprintf_r>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	4698      	mov	r8, r3
 8008b86:	898b      	ldrh	r3, [r1, #12]
 8008b88:	061b      	lsls	r3, r3, #24
 8008b8a:	b09d      	sub	sp, #116	; 0x74
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	460d      	mov	r5, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	d50e      	bpl.n	8008bb2 <_svfiprintf_r+0x32>
 8008b94:	690b      	ldr	r3, [r1, #16]
 8008b96:	b963      	cbnz	r3, 8008bb2 <_svfiprintf_r+0x32>
 8008b98:	2140      	movs	r1, #64	; 0x40
 8008b9a:	f7ff fb8f 	bl	80082bc <_malloc_r>
 8008b9e:	6028      	str	r0, [r5, #0]
 8008ba0:	6128      	str	r0, [r5, #16]
 8008ba2:	b920      	cbnz	r0, 8008bae <_svfiprintf_r+0x2e>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	e0d0      	b.n	8008d50 <_svfiprintf_r+0x1d0>
 8008bae:	2340      	movs	r3, #64	; 0x40
 8008bb0:	616b      	str	r3, [r5, #20]
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	2320      	movs	r3, #32
 8008bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bc0:	2330      	movs	r3, #48	; 0x30
 8008bc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008d68 <_svfiprintf_r+0x1e8>
 8008bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bca:	f04f 0901 	mov.w	r9, #1
 8008bce:	4623      	mov	r3, r4
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bd6:	b10a      	cbz	r2, 8008bdc <_svfiprintf_r+0x5c>
 8008bd8:	2a25      	cmp	r2, #37	; 0x25
 8008bda:	d1f9      	bne.n	8008bd0 <_svfiprintf_r+0x50>
 8008bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8008be0:	d00b      	beq.n	8008bfa <_svfiprintf_r+0x7a>
 8008be2:	465b      	mov	r3, fp
 8008be4:	4622      	mov	r2, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	4638      	mov	r0, r7
 8008bea:	f7ff ff6f 	bl	8008acc <__ssputs_r>
 8008bee:	3001      	adds	r0, #1
 8008bf0:	f000 80a9 	beq.w	8008d46 <_svfiprintf_r+0x1c6>
 8008bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bf6:	445a      	add	r2, fp
 8008bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8008bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f000 80a1 	beq.w	8008d46 <_svfiprintf_r+0x1c6>
 8008c04:	2300      	movs	r3, #0
 8008c06:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c0e:	f10a 0a01 	add.w	sl, sl, #1
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	9307      	str	r3, [sp, #28]
 8008c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c1c:	4654      	mov	r4, sl
 8008c1e:	2205      	movs	r2, #5
 8008c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c24:	4850      	ldr	r0, [pc, #320]	; (8008d68 <_svfiprintf_r+0x1e8>)
 8008c26:	f7f7 fad3 	bl	80001d0 <memchr>
 8008c2a:	9a04      	ldr	r2, [sp, #16]
 8008c2c:	b9d8      	cbnz	r0, 8008c66 <_svfiprintf_r+0xe6>
 8008c2e:	06d0      	lsls	r0, r2, #27
 8008c30:	bf44      	itt	mi
 8008c32:	2320      	movmi	r3, #32
 8008c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c38:	0711      	lsls	r1, r2, #28
 8008c3a:	bf44      	itt	mi
 8008c3c:	232b      	movmi	r3, #43	; 0x2b
 8008c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c42:	f89a 3000 	ldrb.w	r3, [sl]
 8008c46:	2b2a      	cmp	r3, #42	; 0x2a
 8008c48:	d015      	beq.n	8008c76 <_svfiprintf_r+0xf6>
 8008c4a:	9a07      	ldr	r2, [sp, #28]
 8008c4c:	4654      	mov	r4, sl
 8008c4e:	2000      	movs	r0, #0
 8008c50:	f04f 0c0a 	mov.w	ip, #10
 8008c54:	4621      	mov	r1, r4
 8008c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c5a:	3b30      	subs	r3, #48	; 0x30
 8008c5c:	2b09      	cmp	r3, #9
 8008c5e:	d94d      	bls.n	8008cfc <_svfiprintf_r+0x17c>
 8008c60:	b1b0      	cbz	r0, 8008c90 <_svfiprintf_r+0x110>
 8008c62:	9207      	str	r2, [sp, #28]
 8008c64:	e014      	b.n	8008c90 <_svfiprintf_r+0x110>
 8008c66:	eba0 0308 	sub.w	r3, r0, r8
 8008c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	9304      	str	r3, [sp, #16]
 8008c72:	46a2      	mov	sl, r4
 8008c74:	e7d2      	b.n	8008c1c <_svfiprintf_r+0x9c>
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	1d19      	adds	r1, r3, #4
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	9103      	str	r1, [sp, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfbb      	ittet	lt
 8008c82:	425b      	neglt	r3, r3
 8008c84:	f042 0202 	orrlt.w	r2, r2, #2
 8008c88:	9307      	strge	r3, [sp, #28]
 8008c8a:	9307      	strlt	r3, [sp, #28]
 8008c8c:	bfb8      	it	lt
 8008c8e:	9204      	strlt	r2, [sp, #16]
 8008c90:	7823      	ldrb	r3, [r4, #0]
 8008c92:	2b2e      	cmp	r3, #46	; 0x2e
 8008c94:	d10c      	bne.n	8008cb0 <_svfiprintf_r+0x130>
 8008c96:	7863      	ldrb	r3, [r4, #1]
 8008c98:	2b2a      	cmp	r3, #42	; 0x2a
 8008c9a:	d134      	bne.n	8008d06 <_svfiprintf_r+0x186>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	1d1a      	adds	r2, r3, #4
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	9203      	str	r2, [sp, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	bfb8      	it	lt
 8008ca8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cac:	3402      	adds	r4, #2
 8008cae:	9305      	str	r3, [sp, #20]
 8008cb0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008d78 <_svfiprintf_r+0x1f8>
 8008cb4:	7821      	ldrb	r1, [r4, #0]
 8008cb6:	2203      	movs	r2, #3
 8008cb8:	4650      	mov	r0, sl
 8008cba:	f7f7 fa89 	bl	80001d0 <memchr>
 8008cbe:	b138      	cbz	r0, 8008cd0 <_svfiprintf_r+0x150>
 8008cc0:	9b04      	ldr	r3, [sp, #16]
 8008cc2:	eba0 000a 	sub.w	r0, r0, sl
 8008cc6:	2240      	movs	r2, #64	; 0x40
 8008cc8:	4082      	lsls	r2, r0
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	3401      	adds	r4, #1
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd4:	4825      	ldr	r0, [pc, #148]	; (8008d6c <_svfiprintf_r+0x1ec>)
 8008cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cda:	2206      	movs	r2, #6
 8008cdc:	f7f7 fa78 	bl	80001d0 <memchr>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d038      	beq.n	8008d56 <_svfiprintf_r+0x1d6>
 8008ce4:	4b22      	ldr	r3, [pc, #136]	; (8008d70 <_svfiprintf_r+0x1f0>)
 8008ce6:	bb1b      	cbnz	r3, 8008d30 <_svfiprintf_r+0x1b0>
 8008ce8:	9b03      	ldr	r3, [sp, #12]
 8008cea:	3307      	adds	r3, #7
 8008cec:	f023 0307 	bic.w	r3, r3, #7
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	9303      	str	r3, [sp, #12]
 8008cf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cf6:	4433      	add	r3, r6
 8008cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cfa:	e768      	b.n	8008bce <_svfiprintf_r+0x4e>
 8008cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d00:	460c      	mov	r4, r1
 8008d02:	2001      	movs	r0, #1
 8008d04:	e7a6      	b.n	8008c54 <_svfiprintf_r+0xd4>
 8008d06:	2300      	movs	r3, #0
 8008d08:	3401      	adds	r4, #1
 8008d0a:	9305      	str	r3, [sp, #20]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f04f 0c0a 	mov.w	ip, #10
 8008d12:	4620      	mov	r0, r4
 8008d14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d18:	3a30      	subs	r2, #48	; 0x30
 8008d1a:	2a09      	cmp	r2, #9
 8008d1c:	d903      	bls.n	8008d26 <_svfiprintf_r+0x1a6>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0c6      	beq.n	8008cb0 <_svfiprintf_r+0x130>
 8008d22:	9105      	str	r1, [sp, #20]
 8008d24:	e7c4      	b.n	8008cb0 <_svfiprintf_r+0x130>
 8008d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	e7f0      	b.n	8008d12 <_svfiprintf_r+0x192>
 8008d30:	ab03      	add	r3, sp, #12
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	462a      	mov	r2, r5
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <_svfiprintf_r+0x1f4>)
 8008d38:	a904      	add	r1, sp, #16
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	f7fd fe56 	bl	80069ec <_printf_float>
 8008d40:	1c42      	adds	r2, r0, #1
 8008d42:	4606      	mov	r6, r0
 8008d44:	d1d6      	bne.n	8008cf4 <_svfiprintf_r+0x174>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	065b      	lsls	r3, r3, #25
 8008d4a:	f53f af2d 	bmi.w	8008ba8 <_svfiprintf_r+0x28>
 8008d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d50:	b01d      	add	sp, #116	; 0x74
 8008d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	462a      	mov	r2, r5
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <_svfiprintf_r+0x1f4>)
 8008d5e:	a904      	add	r1, sp, #16
 8008d60:	4638      	mov	r0, r7
 8008d62:	f7fe f8e7 	bl	8006f34 <_printf_i>
 8008d66:	e7eb      	b.n	8008d40 <_svfiprintf_r+0x1c0>
 8008d68:	0800983c 	.word	0x0800983c
 8008d6c:	08009846 	.word	0x08009846
 8008d70:	080069ed 	.word	0x080069ed
 8008d74:	08008acd 	.word	0x08008acd
 8008d78:	08009842 	.word	0x08009842

08008d7c <__sflush_r>:
 8008d7c:	898a      	ldrh	r2, [r1, #12]
 8008d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d82:	4605      	mov	r5, r0
 8008d84:	0710      	lsls	r0, r2, #28
 8008d86:	460c      	mov	r4, r1
 8008d88:	d458      	bmi.n	8008e3c <__sflush_r+0xc0>
 8008d8a:	684b      	ldr	r3, [r1, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	dc05      	bgt.n	8008d9c <__sflush_r+0x20>
 8008d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	dc02      	bgt.n	8008d9c <__sflush_r+0x20>
 8008d96:	2000      	movs	r0, #0
 8008d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d9e:	2e00      	cmp	r6, #0
 8008da0:	d0f9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008da2:	2300      	movs	r3, #0
 8008da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008da8:	682f      	ldr	r7, [r5, #0]
 8008daa:	6a21      	ldr	r1, [r4, #32]
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	d032      	beq.n	8008e16 <__sflush_r+0x9a>
 8008db0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	075a      	lsls	r2, r3, #29
 8008db6:	d505      	bpl.n	8008dc4 <__sflush_r+0x48>
 8008db8:	6863      	ldr	r3, [r4, #4]
 8008dba:	1ac0      	subs	r0, r0, r3
 8008dbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008dbe:	b10b      	cbz	r3, 8008dc4 <__sflush_r+0x48>
 8008dc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008dc2:	1ac0      	subs	r0, r0, r3
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008dca:	6a21      	ldr	r1, [r4, #32]
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b0      	blx	r6
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	d106      	bne.n	8008de4 <__sflush_r+0x68>
 8008dd6:	6829      	ldr	r1, [r5, #0]
 8008dd8:	291d      	cmp	r1, #29
 8008dda:	d82b      	bhi.n	8008e34 <__sflush_r+0xb8>
 8008ddc:	4a29      	ldr	r2, [pc, #164]	; (8008e84 <__sflush_r+0x108>)
 8008dde:	410a      	asrs	r2, r1
 8008de0:	07d6      	lsls	r6, r2, #31
 8008de2:	d427      	bmi.n	8008e34 <__sflush_r+0xb8>
 8008de4:	2200      	movs	r2, #0
 8008de6:	6062      	str	r2, [r4, #4]
 8008de8:	04d9      	lsls	r1, r3, #19
 8008dea:	6922      	ldr	r2, [r4, #16]
 8008dec:	6022      	str	r2, [r4, #0]
 8008dee:	d504      	bpl.n	8008dfa <__sflush_r+0x7e>
 8008df0:	1c42      	adds	r2, r0, #1
 8008df2:	d101      	bne.n	8008df8 <__sflush_r+0x7c>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b903      	cbnz	r3, 8008dfa <__sflush_r+0x7e>
 8008df8:	6560      	str	r0, [r4, #84]	; 0x54
 8008dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfc:	602f      	str	r7, [r5, #0]
 8008dfe:	2900      	cmp	r1, #0
 8008e00:	d0c9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008e02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e06:	4299      	cmp	r1, r3
 8008e08:	d002      	beq.n	8008e10 <__sflush_r+0x94>
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	f7ff f9e2 	bl	80081d4 <_free_r>
 8008e10:	2000      	movs	r0, #0
 8008e12:	6360      	str	r0, [r4, #52]	; 0x34
 8008e14:	e7c0      	b.n	8008d98 <__sflush_r+0x1c>
 8008e16:	2301      	movs	r3, #1
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b0      	blx	r6
 8008e1c:	1c41      	adds	r1, r0, #1
 8008e1e:	d1c8      	bne.n	8008db2 <__sflush_r+0x36>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0c5      	beq.n	8008db2 <__sflush_r+0x36>
 8008e26:	2b1d      	cmp	r3, #29
 8008e28:	d001      	beq.n	8008e2e <__sflush_r+0xb2>
 8008e2a:	2b16      	cmp	r3, #22
 8008e2c:	d101      	bne.n	8008e32 <__sflush_r+0xb6>
 8008e2e:	602f      	str	r7, [r5, #0]
 8008e30:	e7b1      	b.n	8008d96 <__sflush_r+0x1a>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	e7ad      	b.n	8008d98 <__sflush_r+0x1c>
 8008e3c:	690f      	ldr	r7, [r1, #16]
 8008e3e:	2f00      	cmp	r7, #0
 8008e40:	d0a9      	beq.n	8008d96 <__sflush_r+0x1a>
 8008e42:	0793      	lsls	r3, r2, #30
 8008e44:	680e      	ldr	r6, [r1, #0]
 8008e46:	bf08      	it	eq
 8008e48:	694b      	ldreq	r3, [r1, #20]
 8008e4a:	600f      	str	r7, [r1, #0]
 8008e4c:	bf18      	it	ne
 8008e4e:	2300      	movne	r3, #0
 8008e50:	eba6 0807 	sub.w	r8, r6, r7
 8008e54:	608b      	str	r3, [r1, #8]
 8008e56:	f1b8 0f00 	cmp.w	r8, #0
 8008e5a:	dd9c      	ble.n	8008d96 <__sflush_r+0x1a>
 8008e5c:	6a21      	ldr	r1, [r4, #32]
 8008e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e60:	4643      	mov	r3, r8
 8008e62:	463a      	mov	r2, r7
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b0      	blx	r6
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	dc06      	bgt.n	8008e7a <__sflush_r+0xfe>
 8008e6c:	89a3      	ldrh	r3, [r4, #12]
 8008e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e72:	81a3      	strh	r3, [r4, #12]
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	e78e      	b.n	8008d98 <__sflush_r+0x1c>
 8008e7a:	4407      	add	r7, r0
 8008e7c:	eba8 0800 	sub.w	r8, r8, r0
 8008e80:	e7e9      	b.n	8008e56 <__sflush_r+0xda>
 8008e82:	bf00      	nop
 8008e84:	dfbffffe 	.word	0xdfbffffe

08008e88 <_fflush_r>:
 8008e88:	b538      	push	{r3, r4, r5, lr}
 8008e8a:	690b      	ldr	r3, [r1, #16]
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	460c      	mov	r4, r1
 8008e90:	b913      	cbnz	r3, 8008e98 <_fflush_r+0x10>
 8008e92:	2500      	movs	r5, #0
 8008e94:	4628      	mov	r0, r5
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	b118      	cbz	r0, 8008ea2 <_fflush_r+0x1a>
 8008e9a:	6a03      	ldr	r3, [r0, #32]
 8008e9c:	b90b      	cbnz	r3, 8008ea2 <_fflush_r+0x1a>
 8008e9e:	f7fe f9f7 	bl	8007290 <__sinit>
 8008ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d0f3      	beq.n	8008e92 <_fflush_r+0xa>
 8008eaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008eac:	07d0      	lsls	r0, r2, #31
 8008eae:	d404      	bmi.n	8008eba <_fflush_r+0x32>
 8008eb0:	0599      	lsls	r1, r3, #22
 8008eb2:	d402      	bmi.n	8008eba <_fflush_r+0x32>
 8008eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008eb6:	f7fe fb02 	bl	80074be <__retarget_lock_acquire_recursive>
 8008eba:	4628      	mov	r0, r5
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	f7ff ff5d 	bl	8008d7c <__sflush_r>
 8008ec2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ec4:	07da      	lsls	r2, r3, #31
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	d4e4      	bmi.n	8008e94 <_fflush_r+0xc>
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	059b      	lsls	r3, r3, #22
 8008ece:	d4e1      	bmi.n	8008e94 <_fflush_r+0xc>
 8008ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ed2:	f7fe faf5 	bl	80074c0 <__retarget_lock_release_recursive>
 8008ed6:	e7dd      	b.n	8008e94 <_fflush_r+0xc>

08008ed8 <memmove>:
 8008ed8:	4288      	cmp	r0, r1
 8008eda:	b510      	push	{r4, lr}
 8008edc:	eb01 0402 	add.w	r4, r1, r2
 8008ee0:	d902      	bls.n	8008ee8 <memmove+0x10>
 8008ee2:	4284      	cmp	r4, r0
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	d807      	bhi.n	8008ef8 <memmove+0x20>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	42a1      	cmp	r1, r4
 8008eec:	d008      	beq.n	8008f00 <memmove+0x28>
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef6:	e7f8      	b.n	8008eea <memmove+0x12>
 8008ef8:	4402      	add	r2, r0
 8008efa:	4601      	mov	r1, r0
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d100      	bne.n	8008f02 <memmove+0x2a>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0a:	e7f7      	b.n	8008efc <memmove+0x24>

08008f0c <_sbrk_r>:
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	4d06      	ldr	r5, [pc, #24]	; (8008f28 <_sbrk_r+0x1c>)
 8008f10:	2300      	movs	r3, #0
 8008f12:	4604      	mov	r4, r0
 8008f14:	4608      	mov	r0, r1
 8008f16:	602b      	str	r3, [r5, #0]
 8008f18:	f7f8 fc30 	bl	800177c <_sbrk>
 8008f1c:	1c43      	adds	r3, r0, #1
 8008f1e:	d102      	bne.n	8008f26 <_sbrk_r+0x1a>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	b103      	cbz	r3, 8008f26 <_sbrk_r+0x1a>
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	bd38      	pop	{r3, r4, r5, pc}
 8008f28:	200008c0 	.word	0x200008c0

08008f2c <__assert_func>:
 8008f2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f2e:	4614      	mov	r4, r2
 8008f30:	461a      	mov	r2, r3
 8008f32:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <__assert_func+0x2c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4605      	mov	r5, r0
 8008f38:	68d8      	ldr	r0, [r3, #12]
 8008f3a:	b14c      	cbz	r4, 8008f50 <__assert_func+0x24>
 8008f3c:	4b07      	ldr	r3, [pc, #28]	; (8008f5c <__assert_func+0x30>)
 8008f3e:	9100      	str	r1, [sp, #0]
 8008f40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f44:	4906      	ldr	r1, [pc, #24]	; (8008f60 <__assert_func+0x34>)
 8008f46:	462b      	mov	r3, r5
 8008f48:	f000 f872 	bl	8009030 <fiprintf>
 8008f4c:	f000 f882 	bl	8009054 <abort>
 8008f50:	4b04      	ldr	r3, [pc, #16]	; (8008f64 <__assert_func+0x38>)
 8008f52:	461c      	mov	r4, r3
 8008f54:	e7f3      	b.n	8008f3e <__assert_func+0x12>
 8008f56:	bf00      	nop
 8008f58:	20000180 	.word	0x20000180
 8008f5c:	08009857 	.word	0x08009857
 8008f60:	08009864 	.word	0x08009864
 8008f64:	08009892 	.word	0x08009892

08008f68 <_calloc_r>:
 8008f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f6a:	fba1 2402 	umull	r2, r4, r1, r2
 8008f6e:	b94c      	cbnz	r4, 8008f84 <_calloc_r+0x1c>
 8008f70:	4611      	mov	r1, r2
 8008f72:	9201      	str	r2, [sp, #4]
 8008f74:	f7ff f9a2 	bl	80082bc <_malloc_r>
 8008f78:	9a01      	ldr	r2, [sp, #4]
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	b930      	cbnz	r0, 8008f8c <_calloc_r+0x24>
 8008f7e:	4628      	mov	r0, r5
 8008f80:	b003      	add	sp, #12
 8008f82:	bd30      	pop	{r4, r5, pc}
 8008f84:	220c      	movs	r2, #12
 8008f86:	6002      	str	r2, [r0, #0]
 8008f88:	2500      	movs	r5, #0
 8008f8a:	e7f8      	b.n	8008f7e <_calloc_r+0x16>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	f7fe fa18 	bl	80073c2 <memset>
 8008f92:	e7f4      	b.n	8008f7e <_calloc_r+0x16>

08008f94 <__ascii_mbtowc>:
 8008f94:	b082      	sub	sp, #8
 8008f96:	b901      	cbnz	r1, 8008f9a <__ascii_mbtowc+0x6>
 8008f98:	a901      	add	r1, sp, #4
 8008f9a:	b142      	cbz	r2, 8008fae <__ascii_mbtowc+0x1a>
 8008f9c:	b14b      	cbz	r3, 8008fb2 <__ascii_mbtowc+0x1e>
 8008f9e:	7813      	ldrb	r3, [r2, #0]
 8008fa0:	600b      	str	r3, [r1, #0]
 8008fa2:	7812      	ldrb	r2, [r2, #0]
 8008fa4:	1e10      	subs	r0, r2, #0
 8008fa6:	bf18      	it	ne
 8008fa8:	2001      	movne	r0, #1
 8008faa:	b002      	add	sp, #8
 8008fac:	4770      	bx	lr
 8008fae:	4610      	mov	r0, r2
 8008fb0:	e7fb      	b.n	8008faa <__ascii_mbtowc+0x16>
 8008fb2:	f06f 0001 	mvn.w	r0, #1
 8008fb6:	e7f8      	b.n	8008faa <__ascii_mbtowc+0x16>

08008fb8 <_realloc_r>:
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fbc:	4680      	mov	r8, r0
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	460e      	mov	r6, r1
 8008fc2:	b921      	cbnz	r1, 8008fce <_realloc_r+0x16>
 8008fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc8:	4611      	mov	r1, r2
 8008fca:	f7ff b977 	b.w	80082bc <_malloc_r>
 8008fce:	b92a      	cbnz	r2, 8008fdc <_realloc_r+0x24>
 8008fd0:	f7ff f900 	bl	80081d4 <_free_r>
 8008fd4:	4625      	mov	r5, r4
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	f000 f841 	bl	8009062 <_malloc_usable_size_r>
 8008fe0:	4284      	cmp	r4, r0
 8008fe2:	4607      	mov	r7, r0
 8008fe4:	d802      	bhi.n	8008fec <_realloc_r+0x34>
 8008fe6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008fea:	d812      	bhi.n	8009012 <_realloc_r+0x5a>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f7ff f964 	bl	80082bc <_malloc_r>
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d0ed      	beq.n	8008fd6 <_realloc_r+0x1e>
 8008ffa:	42bc      	cmp	r4, r7
 8008ffc:	4622      	mov	r2, r4
 8008ffe:	4631      	mov	r1, r6
 8009000:	bf28      	it	cs
 8009002:	463a      	movcs	r2, r7
 8009004:	f7fe fa5d 	bl	80074c2 <memcpy>
 8009008:	4631      	mov	r1, r6
 800900a:	4640      	mov	r0, r8
 800900c:	f7ff f8e2 	bl	80081d4 <_free_r>
 8009010:	e7e1      	b.n	8008fd6 <_realloc_r+0x1e>
 8009012:	4635      	mov	r5, r6
 8009014:	e7df      	b.n	8008fd6 <_realloc_r+0x1e>

08009016 <__ascii_wctomb>:
 8009016:	b149      	cbz	r1, 800902c <__ascii_wctomb+0x16>
 8009018:	2aff      	cmp	r2, #255	; 0xff
 800901a:	bf85      	ittet	hi
 800901c:	238a      	movhi	r3, #138	; 0x8a
 800901e:	6003      	strhi	r3, [r0, #0]
 8009020:	700a      	strbls	r2, [r1, #0]
 8009022:	f04f 30ff 	movhi.w	r0, #4294967295
 8009026:	bf98      	it	ls
 8009028:	2001      	movls	r0, #1
 800902a:	4770      	bx	lr
 800902c:	4608      	mov	r0, r1
 800902e:	4770      	bx	lr

08009030 <fiprintf>:
 8009030:	b40e      	push	{r1, r2, r3}
 8009032:	b503      	push	{r0, r1, lr}
 8009034:	4601      	mov	r1, r0
 8009036:	ab03      	add	r3, sp, #12
 8009038:	4805      	ldr	r0, [pc, #20]	; (8009050 <fiprintf+0x20>)
 800903a:	f853 2b04 	ldr.w	r2, [r3], #4
 800903e:	6800      	ldr	r0, [r0, #0]
 8009040:	9301      	str	r3, [sp, #4]
 8009042:	f000 f83f 	bl	80090c4 <_vfiprintf_r>
 8009046:	b002      	add	sp, #8
 8009048:	f85d eb04 	ldr.w	lr, [sp], #4
 800904c:	b003      	add	sp, #12
 800904e:	4770      	bx	lr
 8009050:	20000180 	.word	0x20000180

08009054 <abort>:
 8009054:	b508      	push	{r3, lr}
 8009056:	2006      	movs	r0, #6
 8009058:	f000 fa0c 	bl	8009474 <raise>
 800905c:	2001      	movs	r0, #1
 800905e:	f7f8 fb15 	bl	800168c <_exit>

08009062 <_malloc_usable_size_r>:
 8009062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009066:	1f18      	subs	r0, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfbc      	itt	lt
 800906c:	580b      	ldrlt	r3, [r1, r0]
 800906e:	18c0      	addlt	r0, r0, r3
 8009070:	4770      	bx	lr

08009072 <__sfputc_r>:
 8009072:	6893      	ldr	r3, [r2, #8]
 8009074:	3b01      	subs	r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	b410      	push	{r4}
 800907a:	6093      	str	r3, [r2, #8]
 800907c:	da08      	bge.n	8009090 <__sfputc_r+0x1e>
 800907e:	6994      	ldr	r4, [r2, #24]
 8009080:	42a3      	cmp	r3, r4
 8009082:	db01      	blt.n	8009088 <__sfputc_r+0x16>
 8009084:	290a      	cmp	r1, #10
 8009086:	d103      	bne.n	8009090 <__sfputc_r+0x1e>
 8009088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800908c:	f000 b934 	b.w	80092f8 <__swbuf_r>
 8009090:	6813      	ldr	r3, [r2, #0]
 8009092:	1c58      	adds	r0, r3, #1
 8009094:	6010      	str	r0, [r2, #0]
 8009096:	7019      	strb	r1, [r3, #0]
 8009098:	4608      	mov	r0, r1
 800909a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <__sfputs_r>:
 80090a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090a2:	4606      	mov	r6, r0
 80090a4:	460f      	mov	r7, r1
 80090a6:	4614      	mov	r4, r2
 80090a8:	18d5      	adds	r5, r2, r3
 80090aa:	42ac      	cmp	r4, r5
 80090ac:	d101      	bne.n	80090b2 <__sfputs_r+0x12>
 80090ae:	2000      	movs	r0, #0
 80090b0:	e007      	b.n	80090c2 <__sfputs_r+0x22>
 80090b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090b6:	463a      	mov	r2, r7
 80090b8:	4630      	mov	r0, r6
 80090ba:	f7ff ffda 	bl	8009072 <__sfputc_r>
 80090be:	1c43      	adds	r3, r0, #1
 80090c0:	d1f3      	bne.n	80090aa <__sfputs_r+0xa>
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090c4 <_vfiprintf_r>:
 80090c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c8:	460d      	mov	r5, r1
 80090ca:	b09d      	sub	sp, #116	; 0x74
 80090cc:	4614      	mov	r4, r2
 80090ce:	4698      	mov	r8, r3
 80090d0:	4606      	mov	r6, r0
 80090d2:	b118      	cbz	r0, 80090dc <_vfiprintf_r+0x18>
 80090d4:	6a03      	ldr	r3, [r0, #32]
 80090d6:	b90b      	cbnz	r3, 80090dc <_vfiprintf_r+0x18>
 80090d8:	f7fe f8da 	bl	8007290 <__sinit>
 80090dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090de:	07d9      	lsls	r1, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_vfiprintf_r+0x2a>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	059a      	lsls	r2, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_vfiprintf_r+0x2a>
 80090e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ea:	f7fe f9e8 	bl	80074be <__retarget_lock_acquire_recursive>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	071b      	lsls	r3, r3, #28
 80090f2:	d501      	bpl.n	80090f8 <_vfiprintf_r+0x34>
 80090f4:	692b      	ldr	r3, [r5, #16]
 80090f6:	b99b      	cbnz	r3, 8009120 <_vfiprintf_r+0x5c>
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 f93a 	bl	8009374 <__swsetup_r>
 8009100:	b170      	cbz	r0, 8009120 <_vfiprintf_r+0x5c>
 8009102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009104:	07dc      	lsls	r4, r3, #31
 8009106:	d504      	bpl.n	8009112 <_vfiprintf_r+0x4e>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	b01d      	add	sp, #116	; 0x74
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	0598      	lsls	r0, r3, #22
 8009116:	d4f7      	bmi.n	8009108 <_vfiprintf_r+0x44>
 8009118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800911a:	f7fe f9d1 	bl	80074c0 <__retarget_lock_release_recursive>
 800911e:	e7f3      	b.n	8009108 <_vfiprintf_r+0x44>
 8009120:	2300      	movs	r3, #0
 8009122:	9309      	str	r3, [sp, #36]	; 0x24
 8009124:	2320      	movs	r3, #32
 8009126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800912a:	f8cd 800c 	str.w	r8, [sp, #12]
 800912e:	2330      	movs	r3, #48	; 0x30
 8009130:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80092e4 <_vfiprintf_r+0x220>
 8009134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009138:	f04f 0901 	mov.w	r9, #1
 800913c:	4623      	mov	r3, r4
 800913e:	469a      	mov	sl, r3
 8009140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009144:	b10a      	cbz	r2, 800914a <_vfiprintf_r+0x86>
 8009146:	2a25      	cmp	r2, #37	; 0x25
 8009148:	d1f9      	bne.n	800913e <_vfiprintf_r+0x7a>
 800914a:	ebba 0b04 	subs.w	fp, sl, r4
 800914e:	d00b      	beq.n	8009168 <_vfiprintf_r+0xa4>
 8009150:	465b      	mov	r3, fp
 8009152:	4622      	mov	r2, r4
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ffa2 	bl	80090a0 <__sfputs_r>
 800915c:	3001      	adds	r0, #1
 800915e:	f000 80a9 	beq.w	80092b4 <_vfiprintf_r+0x1f0>
 8009162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009164:	445a      	add	r2, fp
 8009166:	9209      	str	r2, [sp, #36]	; 0x24
 8009168:	f89a 3000 	ldrb.w	r3, [sl]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80a1 	beq.w	80092b4 <_vfiprintf_r+0x1f0>
 8009172:	2300      	movs	r3, #0
 8009174:	f04f 32ff 	mov.w	r2, #4294967295
 8009178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800917c:	f10a 0a01 	add.w	sl, sl, #1
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	9307      	str	r3, [sp, #28]
 8009184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009188:	931a      	str	r3, [sp, #104]	; 0x68
 800918a:	4654      	mov	r4, sl
 800918c:	2205      	movs	r2, #5
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4854      	ldr	r0, [pc, #336]	; (80092e4 <_vfiprintf_r+0x220>)
 8009194:	f7f7 f81c 	bl	80001d0 <memchr>
 8009198:	9a04      	ldr	r2, [sp, #16]
 800919a:	b9d8      	cbnz	r0, 80091d4 <_vfiprintf_r+0x110>
 800919c:	06d1      	lsls	r1, r2, #27
 800919e:	bf44      	itt	mi
 80091a0:	2320      	movmi	r3, #32
 80091a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a6:	0713      	lsls	r3, r2, #28
 80091a8:	bf44      	itt	mi
 80091aa:	232b      	movmi	r3, #43	; 0x2b
 80091ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b0:	f89a 3000 	ldrb.w	r3, [sl]
 80091b4:	2b2a      	cmp	r3, #42	; 0x2a
 80091b6:	d015      	beq.n	80091e4 <_vfiprintf_r+0x120>
 80091b8:	9a07      	ldr	r2, [sp, #28]
 80091ba:	4654      	mov	r4, sl
 80091bc:	2000      	movs	r0, #0
 80091be:	f04f 0c0a 	mov.w	ip, #10
 80091c2:	4621      	mov	r1, r4
 80091c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c8:	3b30      	subs	r3, #48	; 0x30
 80091ca:	2b09      	cmp	r3, #9
 80091cc:	d94d      	bls.n	800926a <_vfiprintf_r+0x1a6>
 80091ce:	b1b0      	cbz	r0, 80091fe <_vfiprintf_r+0x13a>
 80091d0:	9207      	str	r2, [sp, #28]
 80091d2:	e014      	b.n	80091fe <_vfiprintf_r+0x13a>
 80091d4:	eba0 0308 	sub.w	r3, r0, r8
 80091d8:	fa09 f303 	lsl.w	r3, r9, r3
 80091dc:	4313      	orrs	r3, r2
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	46a2      	mov	sl, r4
 80091e2:	e7d2      	b.n	800918a <_vfiprintf_r+0xc6>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	1d19      	adds	r1, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	9103      	str	r1, [sp, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfbb      	ittet	lt
 80091f0:	425b      	neglt	r3, r3
 80091f2:	f042 0202 	orrlt.w	r2, r2, #2
 80091f6:	9307      	strge	r3, [sp, #28]
 80091f8:	9307      	strlt	r3, [sp, #28]
 80091fa:	bfb8      	it	lt
 80091fc:	9204      	strlt	r2, [sp, #16]
 80091fe:	7823      	ldrb	r3, [r4, #0]
 8009200:	2b2e      	cmp	r3, #46	; 0x2e
 8009202:	d10c      	bne.n	800921e <_vfiprintf_r+0x15a>
 8009204:	7863      	ldrb	r3, [r4, #1]
 8009206:	2b2a      	cmp	r3, #42	; 0x2a
 8009208:	d134      	bne.n	8009274 <_vfiprintf_r+0x1b0>
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	1d1a      	adds	r2, r3, #4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	9203      	str	r2, [sp, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfb8      	it	lt
 8009216:	f04f 33ff 	movlt.w	r3, #4294967295
 800921a:	3402      	adds	r4, #2
 800921c:	9305      	str	r3, [sp, #20]
 800921e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092f4 <_vfiprintf_r+0x230>
 8009222:	7821      	ldrb	r1, [r4, #0]
 8009224:	2203      	movs	r2, #3
 8009226:	4650      	mov	r0, sl
 8009228:	f7f6 ffd2 	bl	80001d0 <memchr>
 800922c:	b138      	cbz	r0, 800923e <_vfiprintf_r+0x17a>
 800922e:	9b04      	ldr	r3, [sp, #16]
 8009230:	eba0 000a 	sub.w	r0, r0, sl
 8009234:	2240      	movs	r2, #64	; 0x40
 8009236:	4082      	lsls	r2, r0
 8009238:	4313      	orrs	r3, r2
 800923a:	3401      	adds	r4, #1
 800923c:	9304      	str	r3, [sp, #16]
 800923e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009242:	4829      	ldr	r0, [pc, #164]	; (80092e8 <_vfiprintf_r+0x224>)
 8009244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009248:	2206      	movs	r2, #6
 800924a:	f7f6 ffc1 	bl	80001d0 <memchr>
 800924e:	2800      	cmp	r0, #0
 8009250:	d03f      	beq.n	80092d2 <_vfiprintf_r+0x20e>
 8009252:	4b26      	ldr	r3, [pc, #152]	; (80092ec <_vfiprintf_r+0x228>)
 8009254:	bb1b      	cbnz	r3, 800929e <_vfiprintf_r+0x1da>
 8009256:	9b03      	ldr	r3, [sp, #12]
 8009258:	3307      	adds	r3, #7
 800925a:	f023 0307 	bic.w	r3, r3, #7
 800925e:	3308      	adds	r3, #8
 8009260:	9303      	str	r3, [sp, #12]
 8009262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009264:	443b      	add	r3, r7
 8009266:	9309      	str	r3, [sp, #36]	; 0x24
 8009268:	e768      	b.n	800913c <_vfiprintf_r+0x78>
 800926a:	fb0c 3202 	mla	r2, ip, r2, r3
 800926e:	460c      	mov	r4, r1
 8009270:	2001      	movs	r0, #1
 8009272:	e7a6      	b.n	80091c2 <_vfiprintf_r+0xfe>
 8009274:	2300      	movs	r3, #0
 8009276:	3401      	adds	r4, #1
 8009278:	9305      	str	r3, [sp, #20]
 800927a:	4619      	mov	r1, r3
 800927c:	f04f 0c0a 	mov.w	ip, #10
 8009280:	4620      	mov	r0, r4
 8009282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009286:	3a30      	subs	r2, #48	; 0x30
 8009288:	2a09      	cmp	r2, #9
 800928a:	d903      	bls.n	8009294 <_vfiprintf_r+0x1d0>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0c6      	beq.n	800921e <_vfiprintf_r+0x15a>
 8009290:	9105      	str	r1, [sp, #20]
 8009292:	e7c4      	b.n	800921e <_vfiprintf_r+0x15a>
 8009294:	fb0c 2101 	mla	r1, ip, r1, r2
 8009298:	4604      	mov	r4, r0
 800929a:	2301      	movs	r3, #1
 800929c:	e7f0      	b.n	8009280 <_vfiprintf_r+0x1bc>
 800929e:	ab03      	add	r3, sp, #12
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	462a      	mov	r2, r5
 80092a4:	4b12      	ldr	r3, [pc, #72]	; (80092f0 <_vfiprintf_r+0x22c>)
 80092a6:	a904      	add	r1, sp, #16
 80092a8:	4630      	mov	r0, r6
 80092aa:	f7fd fb9f 	bl	80069ec <_printf_float>
 80092ae:	4607      	mov	r7, r0
 80092b0:	1c78      	adds	r0, r7, #1
 80092b2:	d1d6      	bne.n	8009262 <_vfiprintf_r+0x19e>
 80092b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b6:	07d9      	lsls	r1, r3, #31
 80092b8:	d405      	bmi.n	80092c6 <_vfiprintf_r+0x202>
 80092ba:	89ab      	ldrh	r3, [r5, #12]
 80092bc:	059a      	lsls	r2, r3, #22
 80092be:	d402      	bmi.n	80092c6 <_vfiprintf_r+0x202>
 80092c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c2:	f7fe f8fd 	bl	80074c0 <__retarget_lock_release_recursive>
 80092c6:	89ab      	ldrh	r3, [r5, #12]
 80092c8:	065b      	lsls	r3, r3, #25
 80092ca:	f53f af1d 	bmi.w	8009108 <_vfiprintf_r+0x44>
 80092ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d0:	e71c      	b.n	800910c <_vfiprintf_r+0x48>
 80092d2:	ab03      	add	r3, sp, #12
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	462a      	mov	r2, r5
 80092d8:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <_vfiprintf_r+0x22c>)
 80092da:	a904      	add	r1, sp, #16
 80092dc:	4630      	mov	r0, r6
 80092de:	f7fd fe29 	bl	8006f34 <_printf_i>
 80092e2:	e7e4      	b.n	80092ae <_vfiprintf_r+0x1ea>
 80092e4:	0800983c 	.word	0x0800983c
 80092e8:	08009846 	.word	0x08009846
 80092ec:	080069ed 	.word	0x080069ed
 80092f0:	080090a1 	.word	0x080090a1
 80092f4:	08009842 	.word	0x08009842

080092f8 <__swbuf_r>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	460e      	mov	r6, r1
 80092fc:	4614      	mov	r4, r2
 80092fe:	4605      	mov	r5, r0
 8009300:	b118      	cbz	r0, 800930a <__swbuf_r+0x12>
 8009302:	6a03      	ldr	r3, [r0, #32]
 8009304:	b90b      	cbnz	r3, 800930a <__swbuf_r+0x12>
 8009306:	f7fd ffc3 	bl	8007290 <__sinit>
 800930a:	69a3      	ldr	r3, [r4, #24]
 800930c:	60a3      	str	r3, [r4, #8]
 800930e:	89a3      	ldrh	r3, [r4, #12]
 8009310:	071a      	lsls	r2, r3, #28
 8009312:	d525      	bpl.n	8009360 <__swbuf_r+0x68>
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	b31b      	cbz	r3, 8009360 <__swbuf_r+0x68>
 8009318:	6823      	ldr	r3, [r4, #0]
 800931a:	6922      	ldr	r2, [r4, #16]
 800931c:	1a98      	subs	r0, r3, r2
 800931e:	6963      	ldr	r3, [r4, #20]
 8009320:	b2f6      	uxtb	r6, r6
 8009322:	4283      	cmp	r3, r0
 8009324:	4637      	mov	r7, r6
 8009326:	dc04      	bgt.n	8009332 <__swbuf_r+0x3a>
 8009328:	4621      	mov	r1, r4
 800932a:	4628      	mov	r0, r5
 800932c:	f7ff fdac 	bl	8008e88 <_fflush_r>
 8009330:	b9e0      	cbnz	r0, 800936c <__swbuf_r+0x74>
 8009332:	68a3      	ldr	r3, [r4, #8]
 8009334:	3b01      	subs	r3, #1
 8009336:	60a3      	str	r3, [r4, #8]
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	1c5a      	adds	r2, r3, #1
 800933c:	6022      	str	r2, [r4, #0]
 800933e:	701e      	strb	r6, [r3, #0]
 8009340:	6962      	ldr	r2, [r4, #20]
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	429a      	cmp	r2, r3
 8009346:	d004      	beq.n	8009352 <__swbuf_r+0x5a>
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	07db      	lsls	r3, r3, #31
 800934c:	d506      	bpl.n	800935c <__swbuf_r+0x64>
 800934e:	2e0a      	cmp	r6, #10
 8009350:	d104      	bne.n	800935c <__swbuf_r+0x64>
 8009352:	4621      	mov	r1, r4
 8009354:	4628      	mov	r0, r5
 8009356:	f7ff fd97 	bl	8008e88 <_fflush_r>
 800935a:	b938      	cbnz	r0, 800936c <__swbuf_r+0x74>
 800935c:	4638      	mov	r0, r7
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	4621      	mov	r1, r4
 8009362:	4628      	mov	r0, r5
 8009364:	f000 f806 	bl	8009374 <__swsetup_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	d0d5      	beq.n	8009318 <__swbuf_r+0x20>
 800936c:	f04f 37ff 	mov.w	r7, #4294967295
 8009370:	e7f4      	b.n	800935c <__swbuf_r+0x64>
	...

08009374 <__swsetup_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4b2a      	ldr	r3, [pc, #168]	; (8009420 <__swsetup_r+0xac>)
 8009378:	4605      	mov	r5, r0
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	460c      	mov	r4, r1
 800937e:	b118      	cbz	r0, 8009388 <__swsetup_r+0x14>
 8009380:	6a03      	ldr	r3, [r0, #32]
 8009382:	b90b      	cbnz	r3, 8009388 <__swsetup_r+0x14>
 8009384:	f7fd ff84 	bl	8007290 <__sinit>
 8009388:	89a3      	ldrh	r3, [r4, #12]
 800938a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800938e:	0718      	lsls	r0, r3, #28
 8009390:	d422      	bmi.n	80093d8 <__swsetup_r+0x64>
 8009392:	06d9      	lsls	r1, r3, #27
 8009394:	d407      	bmi.n	80093a6 <__swsetup_r+0x32>
 8009396:	2309      	movs	r3, #9
 8009398:	602b      	str	r3, [r5, #0]
 800939a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800939e:	81a3      	strh	r3, [r4, #12]
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	e034      	b.n	8009410 <__swsetup_r+0x9c>
 80093a6:	0758      	lsls	r0, r3, #29
 80093a8:	d512      	bpl.n	80093d0 <__swsetup_r+0x5c>
 80093aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ac:	b141      	cbz	r1, 80093c0 <__swsetup_r+0x4c>
 80093ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093b2:	4299      	cmp	r1, r3
 80093b4:	d002      	beq.n	80093bc <__swsetup_r+0x48>
 80093b6:	4628      	mov	r0, r5
 80093b8:	f7fe ff0c 	bl	80081d4 <_free_r>
 80093bc:	2300      	movs	r3, #0
 80093be:	6363      	str	r3, [r4, #52]	; 0x34
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093c6:	81a3      	strh	r3, [r4, #12]
 80093c8:	2300      	movs	r3, #0
 80093ca:	6063      	str	r3, [r4, #4]
 80093cc:	6923      	ldr	r3, [r4, #16]
 80093ce:	6023      	str	r3, [r4, #0]
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f043 0308 	orr.w	r3, r3, #8
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	b94b      	cbnz	r3, 80093f0 <__swsetup_r+0x7c>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80093e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093e6:	d003      	beq.n	80093f0 <__swsetup_r+0x7c>
 80093e8:	4621      	mov	r1, r4
 80093ea:	4628      	mov	r0, r5
 80093ec:	f000 f884 	bl	80094f8 <__smakebuf_r>
 80093f0:	89a0      	ldrh	r0, [r4, #12]
 80093f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093f6:	f010 0301 	ands.w	r3, r0, #1
 80093fa:	d00a      	beq.n	8009412 <__swsetup_r+0x9e>
 80093fc:	2300      	movs	r3, #0
 80093fe:	60a3      	str	r3, [r4, #8]
 8009400:	6963      	ldr	r3, [r4, #20]
 8009402:	425b      	negs	r3, r3
 8009404:	61a3      	str	r3, [r4, #24]
 8009406:	6923      	ldr	r3, [r4, #16]
 8009408:	b943      	cbnz	r3, 800941c <__swsetup_r+0xa8>
 800940a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800940e:	d1c4      	bne.n	800939a <__swsetup_r+0x26>
 8009410:	bd38      	pop	{r3, r4, r5, pc}
 8009412:	0781      	lsls	r1, r0, #30
 8009414:	bf58      	it	pl
 8009416:	6963      	ldrpl	r3, [r4, #20]
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	e7f4      	b.n	8009406 <__swsetup_r+0x92>
 800941c:	2000      	movs	r0, #0
 800941e:	e7f7      	b.n	8009410 <__swsetup_r+0x9c>
 8009420:	20000180 	.word	0x20000180

08009424 <_raise_r>:
 8009424:	291f      	cmp	r1, #31
 8009426:	b538      	push	{r3, r4, r5, lr}
 8009428:	4604      	mov	r4, r0
 800942a:	460d      	mov	r5, r1
 800942c:	d904      	bls.n	8009438 <_raise_r+0x14>
 800942e:	2316      	movs	r3, #22
 8009430:	6003      	str	r3, [r0, #0]
 8009432:	f04f 30ff 	mov.w	r0, #4294967295
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800943a:	b112      	cbz	r2, 8009442 <_raise_r+0x1e>
 800943c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009440:	b94b      	cbnz	r3, 8009456 <_raise_r+0x32>
 8009442:	4620      	mov	r0, r4
 8009444:	f000 f830 	bl	80094a8 <_getpid_r>
 8009448:	462a      	mov	r2, r5
 800944a:	4601      	mov	r1, r0
 800944c:	4620      	mov	r0, r4
 800944e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009452:	f000 b817 	b.w	8009484 <_kill_r>
 8009456:	2b01      	cmp	r3, #1
 8009458:	d00a      	beq.n	8009470 <_raise_r+0x4c>
 800945a:	1c59      	adds	r1, r3, #1
 800945c:	d103      	bne.n	8009466 <_raise_r+0x42>
 800945e:	2316      	movs	r3, #22
 8009460:	6003      	str	r3, [r0, #0]
 8009462:	2001      	movs	r0, #1
 8009464:	e7e7      	b.n	8009436 <_raise_r+0x12>
 8009466:	2400      	movs	r4, #0
 8009468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800946c:	4628      	mov	r0, r5
 800946e:	4798      	blx	r3
 8009470:	2000      	movs	r0, #0
 8009472:	e7e0      	b.n	8009436 <_raise_r+0x12>

08009474 <raise>:
 8009474:	4b02      	ldr	r3, [pc, #8]	; (8009480 <raise+0xc>)
 8009476:	4601      	mov	r1, r0
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f7ff bfd3 	b.w	8009424 <_raise_r>
 800947e:	bf00      	nop
 8009480:	20000180 	.word	0x20000180

08009484 <_kill_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d07      	ldr	r5, [pc, #28]	; (80094a4 <_kill_r+0x20>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	4611      	mov	r1, r2
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	f7f8 f8eb 	bl	800166c <_kill>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d102      	bne.n	80094a0 <_kill_r+0x1c>
 800949a:	682b      	ldr	r3, [r5, #0]
 800949c:	b103      	cbz	r3, 80094a0 <_kill_r+0x1c>
 800949e:	6023      	str	r3, [r4, #0]
 80094a0:	bd38      	pop	{r3, r4, r5, pc}
 80094a2:	bf00      	nop
 80094a4:	200008c0 	.word	0x200008c0

080094a8 <_getpid_r>:
 80094a8:	f7f8 b8d8 	b.w	800165c <_getpid>

080094ac <__swhatbuf_r>:
 80094ac:	b570      	push	{r4, r5, r6, lr}
 80094ae:	460c      	mov	r4, r1
 80094b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b4:	2900      	cmp	r1, #0
 80094b6:	b096      	sub	sp, #88	; 0x58
 80094b8:	4615      	mov	r5, r2
 80094ba:	461e      	mov	r6, r3
 80094bc:	da0d      	bge.n	80094da <__swhatbuf_r+0x2e>
 80094be:	89a3      	ldrh	r3, [r4, #12]
 80094c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094c4:	f04f 0100 	mov.w	r1, #0
 80094c8:	bf0c      	ite	eq
 80094ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094ce:	2340      	movne	r3, #64	; 0x40
 80094d0:	2000      	movs	r0, #0
 80094d2:	6031      	str	r1, [r6, #0]
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	b016      	add	sp, #88	; 0x58
 80094d8:	bd70      	pop	{r4, r5, r6, pc}
 80094da:	466a      	mov	r2, sp
 80094dc:	f000 f848 	bl	8009570 <_fstat_r>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	dbec      	blt.n	80094be <__swhatbuf_r+0x12>
 80094e4:	9901      	ldr	r1, [sp, #4]
 80094e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80094ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80094ee:	4259      	negs	r1, r3
 80094f0:	4159      	adcs	r1, r3
 80094f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094f6:	e7eb      	b.n	80094d0 <__swhatbuf_r+0x24>

080094f8 <__smakebuf_r>:
 80094f8:	898b      	ldrh	r3, [r1, #12]
 80094fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80094fc:	079d      	lsls	r5, r3, #30
 80094fe:	4606      	mov	r6, r0
 8009500:	460c      	mov	r4, r1
 8009502:	d507      	bpl.n	8009514 <__smakebuf_r+0x1c>
 8009504:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	2301      	movs	r3, #1
 800950e:	6163      	str	r3, [r4, #20]
 8009510:	b002      	add	sp, #8
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	ab01      	add	r3, sp, #4
 8009516:	466a      	mov	r2, sp
 8009518:	f7ff ffc8 	bl	80094ac <__swhatbuf_r>
 800951c:	9900      	ldr	r1, [sp, #0]
 800951e:	4605      	mov	r5, r0
 8009520:	4630      	mov	r0, r6
 8009522:	f7fe fecb 	bl	80082bc <_malloc_r>
 8009526:	b948      	cbnz	r0, 800953c <__smakebuf_r+0x44>
 8009528:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800952c:	059a      	lsls	r2, r3, #22
 800952e:	d4ef      	bmi.n	8009510 <__smakebuf_r+0x18>
 8009530:	f023 0303 	bic.w	r3, r3, #3
 8009534:	f043 0302 	orr.w	r3, r3, #2
 8009538:	81a3      	strh	r3, [r4, #12]
 800953a:	e7e3      	b.n	8009504 <__smakebuf_r+0xc>
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	6020      	str	r0, [r4, #0]
 8009540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009544:	81a3      	strh	r3, [r4, #12]
 8009546:	9b00      	ldr	r3, [sp, #0]
 8009548:	6163      	str	r3, [r4, #20]
 800954a:	9b01      	ldr	r3, [sp, #4]
 800954c:	6120      	str	r0, [r4, #16]
 800954e:	b15b      	cbz	r3, 8009568 <__smakebuf_r+0x70>
 8009550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009554:	4630      	mov	r0, r6
 8009556:	f000 f81d 	bl	8009594 <_isatty_r>
 800955a:	b128      	cbz	r0, 8009568 <__smakebuf_r+0x70>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f023 0303 	bic.w	r3, r3, #3
 8009562:	f043 0301 	orr.w	r3, r3, #1
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	431d      	orrs	r5, r3
 800956c:	81a5      	strh	r5, [r4, #12]
 800956e:	e7cf      	b.n	8009510 <__smakebuf_r+0x18>

08009570 <_fstat_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d07      	ldr	r5, [pc, #28]	; (8009590 <_fstat_r+0x20>)
 8009574:	2300      	movs	r3, #0
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	4611      	mov	r1, r2
 800957c:	602b      	str	r3, [r5, #0]
 800957e:	f7f8 f8d4 	bl	800172a <_fstat>
 8009582:	1c43      	adds	r3, r0, #1
 8009584:	d102      	bne.n	800958c <_fstat_r+0x1c>
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	b103      	cbz	r3, 800958c <_fstat_r+0x1c>
 800958a:	6023      	str	r3, [r4, #0]
 800958c:	bd38      	pop	{r3, r4, r5, pc}
 800958e:	bf00      	nop
 8009590:	200008c0 	.word	0x200008c0

08009594 <_isatty_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d06      	ldr	r5, [pc, #24]	; (80095b0 <_isatty_r+0x1c>)
 8009598:	2300      	movs	r3, #0
 800959a:	4604      	mov	r4, r0
 800959c:	4608      	mov	r0, r1
 800959e:	602b      	str	r3, [r5, #0]
 80095a0:	f7f8 f8d3 	bl	800174a <_isatty>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	d102      	bne.n	80095ae <_isatty_r+0x1a>
 80095a8:	682b      	ldr	r3, [r5, #0]
 80095aa:	b103      	cbz	r3, 80095ae <_isatty_r+0x1a>
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	bd38      	pop	{r3, r4, r5, pc}
 80095b0:	200008c0 	.word	0x200008c0

080095b4 <_init>:
 80095b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095b6:	bf00      	nop
 80095b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ba:	bc08      	pop	{r3}
 80095bc:	469e      	mov	lr, r3
 80095be:	4770      	bx	lr

080095c0 <_fini>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	bf00      	nop
 80095c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c6:	bc08      	pop	{r3}
 80095c8:	469e      	mov	lr, r3
 80095ca:	4770      	bx	lr
