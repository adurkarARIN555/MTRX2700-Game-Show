
Catapult.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08003b70  08003b70  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b70  08003b70  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b74  08003b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08003b78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          000001c4  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000270  20000270  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d29c  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002226  00000000  00000000  0002d3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000bc8  00000000  00000000  0002f5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000090b  00000000  00000000  000301b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ee47  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e11e  00000000  00000000  0004f902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b93c5  00000000  00000000  0005da20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000032d4  00000000  00000000  00116de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0011a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a10 	.word	0x08003a10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	08003a10 	.word	0x08003a10

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	; (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <enable_clocks>:
void (*on_button_press)() = 0x00;
uint32_t counter_flag = 0;

// enable the clocks for desired peripherals (GPIOA, C and E)
void enable_clocks()
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <enable_clocks+0x34>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	4a0a      	ldr	r2, [pc, #40]	; (800028c <enable_clocks+0x34>)
 8000262:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000266:	6153      	str	r3, [r2, #20]

	RCC->APB1ENR |=  RCC_APB1ENR_TIM2EN;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <enable_clocks+0x34>)
 800026a:	69db      	ldr	r3, [r3, #28]
 800026c:	4a07      	ldr	r2, [pc, #28]	; (800028c <enable_clocks+0x34>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	61d3      	str	r3, [r2, #28]
	RCC->APB1ENR |=  RCC_APB1ENR_TIM3EN;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <enable_clocks+0x34>)
 8000276:	69db      	ldr	r3, [r3, #28]
 8000278:	4a04      	ldr	r2, [pc, #16]	; (800028c <enable_clocks+0x34>)
 800027a:	f043 0302 	orr.w	r3, r3, #2
 800027e:	61d3      	str	r3, [r2, #28]

}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40021000 	.word	0x40021000

08000290 <initialise_board>:

// initialise the discovery board I/O
void initialise_board()
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0

	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <initialise_board+0x20>)
 8000298:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f245 5255 	movw	r2, #21845	; 0x5555
 80002a0:	801a      	strh	r2, [r3, #0]

}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	48001002 	.word	0x48001002

080002b4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	// run the button press handler (make sure it is not null first !)
	if (on_button_press != 0x00) {
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <EXTI0_IRQHandler+0x24>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <EXTI0_IRQHandler+0x12>
		on_button_press();
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI0_IRQHandler+0x24>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4798      	blx	r3
	}

	// reset the interrupt (so it doesn't keep firing until the next trigger)
	EXTI->PR |= EXTI_PR_PR0;
 80002c6:	4b05      	ldr	r3, [pc, #20]	; (80002dc <EXTI0_IRQHandler+0x28>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4a04      	ldr	r2, [pc, #16]	; (80002dc <EXTI0_IRQHandler+0x28>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6153      	str	r3, [r2, #20]
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	200000c8 	.word	0x200000c8
 80002dc:	40010400 	.word	0x40010400

080002e0 <enable_button_interrupt>:

void enable_button_interrupt(void (*func_ptr)(void))
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Enable the system configuration controller (SYSCFG in RCC)
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002ec:	4b12      	ldr	r3, [pc, #72]	; (8000338 <enable_button_interrupt+0x58>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a11      	ldr	r2, [pc, #68]	; (8000338 <enable_button_interrupt+0x58>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6193      	str	r3, [r2, #24]

	// External Interrupts details on large manual page 294)
	// PA0 is on interrupt EXTI0 large manual - page 250
	// EXTI0 in  SYSCFG_EXTICR1 needs to be 0x00 (SYSCFG_EXTICR1_EXTI0_PA)
	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI0_PA;
 80002f8:	4b10      	ldr	r3, [pc, #64]	; (800033c <enable_button_interrupt+0x5c>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	609a      	str	r2, [r3, #8]

	//  Select EXTI0 interrupt on rising edge
	EXTI->RTSR |= EXTI_RTSR_TR0; // rising edge of EXTI line 0 (includes PA0)
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <enable_button_interrupt+0x60>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	4a0f      	ldr	r2, [pc, #60]	; (8000340 <enable_button_interrupt+0x60>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6093      	str	r3, [r2, #8]

	// set the interrupt from EXTI line 0 as 'not masked' - as in, enable it.
	EXTI->IMR |= EXTI_IMR_MR0;
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <enable_button_interrupt+0x60>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <enable_button_interrupt+0x60>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6013      	str	r3, [r2, #0]

	// Tell the NVIC module that EXTI0 interrupts should be handled
	NVIC_SetPriority(EXTI0_IRQn, 1);  // Set Priority
 8000316:	2101      	movs	r1, #1
 8000318:	2006      	movs	r0, #6
 800031a:	f7ff ff73 	bl	8000204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800031e:	2006      	movs	r0, #6
 8000320:	f7ff ff52 	bl	80001c8 <__NVIC_EnableIRQ>

	on_button_press = func_ptr;
 8000324:	4a07      	ldr	r2, [pc, #28]	; (8000344 <enable_button_interrupt+0x64>)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800032a:	b662      	cpsie	i
}
 800032c:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 800032e:	bf00      	nop
 8000330:	3708      	adds	r7, #8
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40021000 	.word	0x40021000
 800033c:	40010000 	.word	0x40010000
 8000340:	40010400 	.word	0x40010400
 8000344:	200000c8 	.word	0x200000c8

08000348 <set_LED>:

//set function takes binary number and turns on LEDs
void set_LED(uint8_t binaryNumber)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	if (binaryNumber <= 255 && binaryNumber >= 0)
	{
		uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <set_LED+0x20>)
 8000354:	60fb      	str	r3, [r7, #12]
		*led_register = binaryNumber;
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	79fa      	ldrb	r2, [r7, #7]
 800035a:	701a      	strb	r2, [r3, #0]
	{
		uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
		*led_register = ERROR_LED;
	}

}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	48001015 	.word	0x48001015

0800036c <get_LED>:

//get function returns binary/decimal number from current LED state
uint8_t get_LED()
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
	uint8_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <get_LED+0x20>)
 8000374:	607b      	str	r3, [r7, #4]
	uint8_t binaryNumber = *led_register;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	70fb      	strb	r3, [r7, #3]
	return binaryNumber;
 800037c:	78fb      	ldrb	r3, [r7, #3]
}
 800037e:	4618      	mov	r0, r3
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	48001015 	.word	0x48001015

08000390 <led_increase>:

//increases the number of LEDs on and then decreases
void led_increase()
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	if (counter_flag == 0)
 8000394:	4b17      	ldr	r3, [pc, #92]	; (80003f4 <led_increase+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d114      	bne.n	80003c6 <led_increase+0x36>
	{
		//counter flag 0 means turning on LEDs in clockwise direction
		set_LED(0b00000001 | (get_LED() << 1));
 800039c:	f7ff ffe6 	bl	800036c <get_LED>
 80003a0:	4603      	mov	r3, r0
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	b25b      	sxtb	r3, r3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffca 	bl	8000348 <set_LED>
		if (get_LED() == ALL_ON)
 80003b4:	f7ff ffda 	bl	800036c <get_LED>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2bff      	cmp	r3, #255	; 0xff
 80003bc:	d117      	bne.n	80003ee <led_increase+0x5e>
		{
			counter_flag = 1;
 80003be:	4b0d      	ldr	r3, [pc, #52]	; (80003f4 <led_increase+0x64>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	601a      	str	r2, [r3, #0]
		{
			counter_flag = 0;
		}
	}

}
 80003c4:	e013      	b.n	80003ee <led_increase+0x5e>
	else if (counter_flag == 1)
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <led_increase+0x64>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d10f      	bne.n	80003ee <led_increase+0x5e>
		set_LED(get_LED() >> 1);
 80003ce:	f7ff ffcd 	bl	800036c <get_LED>
 80003d2:	4603      	mov	r3, r0
 80003d4:	085b      	lsrs	r3, r3, #1
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	4618      	mov	r0, r3
 80003da:	f7ff ffb5 	bl	8000348 <set_LED>
		if (get_LED() == ALL_OFF)
 80003de:	f7ff ffc5 	bl	800036c <get_LED>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d102      	bne.n	80003ee <led_increase+0x5e>
			counter_flag = 0;
 80003e8:	4b02      	ldr	r3, [pc, #8]	; (80003f4 <led_increase+0x64>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000cc 	.word	0x200000cc

080003f8 <countLED>:

uint32_t countLED(uint8_t N)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
    // Initialise count variables
    uint32_t count1 = 0;
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]

    // Iterate through all the bits
    while (N > 0)
 8000406:	e00a      	b.n	800041e <countLED+0x26>
    {
        // If current bit is 1
        if (N & 1)
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	2b00      	cmp	r3, #0
 8000410:	d002      	beq.n	8000418 <countLED+0x20>
        {
            count1++;
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	3301      	adds	r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
        }
        N = N >> 1;
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	085b      	lsrs	r3, r3, #1
 800041c:	71fb      	strb	r3, [r7, #7]
    while (N > 0)
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d1f1      	bne.n	8000408 <countLED+0x10>
    }
    return count1;
 8000424:	68fb      	ldr	r3, [r7, #12]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
	...

08000434 <__NVIC_DisableIRQ>:
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	2b00      	cmp	r3, #0
 8000444:	db12      	blt.n	800046c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	f003 021f 	and.w	r2, r3, #31
 800044c:	490a      	ldr	r1, [pc, #40]	; (8000478 <__NVIC_DisableIRQ+0x44>)
 800044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000452:	095b      	lsrs	r3, r3, #5
 8000454:	2001      	movs	r0, #1
 8000456:	fa00 f202 	lsl.w	r2, r0, r2
 800045a:	3320      	adds	r3, #32
 800045c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000460:	f3bf 8f4f 	dsb	sy
}
 8000464:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000466:	f3bf 8f6f 	isb	sy
}
 800046a:	bf00      	nop
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	e000e100 	.word	0xe000e100

0800047c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000480:	f3bf 8f4f 	dsb	sy
}
 8000484:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <__NVIC_SystemReset+0x24>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800048e:	4904      	ldr	r1, [pc, #16]	; (80004a0 <__NVIC_SystemReset+0x24>)
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <__NVIC_SystemReset+0x28>)
 8000492:	4313      	orrs	r3, r2
 8000494:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000496:	f3bf 8f4f 	dsb	sy
}
 800049a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <__NVIC_SystemReset+0x20>
 80004a0:	e000ed00 	.word	0xe000ed00
 80004a4:	05fa0004 	.word	0x05fa0004

080004a8 <run_tests>:
int add(int a, int b) {
    return a + b;
}

#ifdef TEST_CODE
void run_tests() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	SerialInitialise(BAUD_115200, &USART1_PORT, NULL);
 80004ac:	2200      	movs	r2, #0
 80004ae:	4942      	ldr	r1, [pc, #264]	; (80005b8 <run_tests+0x110>)
 80004b0:	2004      	movs	r0, #4
 80004b2:	f000 fa27 	bl	8000904 <SerialInitialise>

	// Run test cases
	//tests the countLED function
	TEST_ASSERT(countLED(0b11111000) == 5, "Test case 1 passed\r\n", "Test case 1 failed\r\n");
 80004b6:	20f8      	movs	r0, #248	; 0xf8
 80004b8:	f7ff ff9e 	bl	80003f8 <countLED>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b05      	cmp	r3, #5
 80004c0:	d104      	bne.n	80004cc <run_tests+0x24>
 80004c2:	493d      	ldr	r1, [pc, #244]	; (80005b8 <run_tests+0x110>)
 80004c4:	483d      	ldr	r0, [pc, #244]	; (80005bc <run_tests+0x114>)
 80004c6:	f000 fab6 	bl	8000a36 <SerialOutputString>
 80004ca:	e006      	b.n	80004da <run_tests+0x32>
 80004cc:	493a      	ldr	r1, [pc, #232]	; (80005b8 <run_tests+0x110>)
 80004ce:	483c      	ldr	r0, [pc, #240]	; (80005c0 <run_tests+0x118>)
 80004d0:	f000 fab1 	bl	8000a36 <SerialOutputString>
 80004d4:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <run_tests+0x11c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	601a      	str	r2, [r3, #0]
	TEST_ASSERT(countLED(0b00001111) == 4, "Test case 2 passed\r\n", "Test case 2 failed\r\n");
 80004da:	200f      	movs	r0, #15
 80004dc:	f7ff ff8c 	bl	80003f8 <countLED>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b04      	cmp	r3, #4
 80004e4:	d104      	bne.n	80004f0 <run_tests+0x48>
 80004e6:	4934      	ldr	r1, [pc, #208]	; (80005b8 <run_tests+0x110>)
 80004e8:	4837      	ldr	r0, [pc, #220]	; (80005c8 <run_tests+0x120>)
 80004ea:	f000 faa4 	bl	8000a36 <SerialOutputString>
 80004ee:	e006      	b.n	80004fe <run_tests+0x56>
 80004f0:	4931      	ldr	r1, [pc, #196]	; (80005b8 <run_tests+0x110>)
 80004f2:	4836      	ldr	r0, [pc, #216]	; (80005cc <run_tests+0x124>)
 80004f4:	f000 fa9f 	bl	8000a36 <SerialOutputString>
 80004f8:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <run_tests+0x11c>)
 80004fa:	2201      	movs	r2, #1
 80004fc:	601a      	str	r2, [r3, #0]
	//Integrated testing of the PWM value produced for LEDs on
	TEST_ASSERT(shoot_strength[countLED(0b11111100) == 2250], "Test case 3 passed\r\n", "Test case 3 failed\r\n");
 80004fe:	20fc      	movs	r0, #252	; 0xfc
 8000500:	f7ff ff7a 	bl	80003f8 <countLED>
 8000504:	4603      	mov	r3, r0
 8000506:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800050a:	4293      	cmp	r3, r2
 800050c:	bf0c      	ite	eq
 800050e:	2301      	moveq	r3, #1
 8000510:	2300      	movne	r3, #0
 8000512:	b2db      	uxtb	r3, r3
 8000514:	461a      	mov	r2, r3
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <run_tests+0x128>)
 8000518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d004      	beq.n	800052a <run_tests+0x82>
 8000520:	4925      	ldr	r1, [pc, #148]	; (80005b8 <run_tests+0x110>)
 8000522:	482c      	ldr	r0, [pc, #176]	; (80005d4 <run_tests+0x12c>)
 8000524:	f000 fa87 	bl	8000a36 <SerialOutputString>
 8000528:	e006      	b.n	8000538 <run_tests+0x90>
 800052a:	4923      	ldr	r1, [pc, #140]	; (80005b8 <run_tests+0x110>)
 800052c:	482a      	ldr	r0, [pc, #168]	; (80005d8 <run_tests+0x130>)
 800052e:	f000 fa82 	bl	8000a36 <SerialOutputString>
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <run_tests+0x11c>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	//tests the set_LED, get_LED and led_increase functions
	set_LED(0b00000000);
 8000538:	2000      	movs	r0, #0
 800053a:	f7ff ff05 	bl	8000348 <set_LED>
	led_increase();
 800053e:	f7ff ff27 	bl	8000390 <led_increase>
	TEST_ASSERT(get_LED() == 0b00000001, "Test case 4 passed\r\n", "Test case 4 failed\r\n");
 8000542:	f7ff ff13 	bl	800036c <get_LED>
 8000546:	4603      	mov	r3, r0
 8000548:	2b01      	cmp	r3, #1
 800054a:	d104      	bne.n	8000556 <run_tests+0xae>
 800054c:	491a      	ldr	r1, [pc, #104]	; (80005b8 <run_tests+0x110>)
 800054e:	4823      	ldr	r0, [pc, #140]	; (80005dc <run_tests+0x134>)
 8000550:	f000 fa71 	bl	8000a36 <SerialOutputString>
 8000554:	e006      	b.n	8000564 <run_tests+0xbc>
 8000556:	4918      	ldr	r1, [pc, #96]	; (80005b8 <run_tests+0x110>)
 8000558:	4821      	ldr	r0, [pc, #132]	; (80005e0 <run_tests+0x138>)
 800055a:	f000 fa6c 	bl	8000a36 <SerialOutputString>
 800055e:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <run_tests+0x11c>)
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
	set_LED(0b01111111);
 8000564:	207f      	movs	r0, #127	; 0x7f
 8000566:	f7ff feef 	bl	8000348 <set_LED>
	led_increase();
 800056a:	f7ff ff11 	bl	8000390 <led_increase>
	led_increase();
 800056e:	f7ff ff0f 	bl	8000390 <led_increase>
	led_increase();
 8000572:	f7ff ff0d 	bl	8000390 <led_increase>
	TEST_ASSERT(get_LED() == 0b00111111, "Test case 5 passed\r\n", "Test case 5 failed\r\n");
 8000576:	f7ff fef9 	bl	800036c <get_LED>
 800057a:	4603      	mov	r3, r0
 800057c:	2b3f      	cmp	r3, #63	; 0x3f
 800057e:	d104      	bne.n	800058a <run_tests+0xe2>
 8000580:	490d      	ldr	r1, [pc, #52]	; (80005b8 <run_tests+0x110>)
 8000582:	4818      	ldr	r0, [pc, #96]	; (80005e4 <run_tests+0x13c>)
 8000584:	f000 fa57 	bl	8000a36 <SerialOutputString>
 8000588:	e006      	b.n	8000598 <run_tests+0xf0>
 800058a:	490b      	ldr	r1, [pc, #44]	; (80005b8 <run_tests+0x110>)
 800058c:	4816      	ldr	r0, [pc, #88]	; (80005e8 <run_tests+0x140>)
 800058e:	f000 fa52 	bl	8000a36 <SerialOutputString>
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <run_tests+0x11c>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]


	//abort program if any test failed
	if (fail_flag == 1)
 8000598:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <run_tests+0x11c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d105      	bne.n	80005ac <run_tests+0x104>
	{
		SerialOutputString((uint8_t*)("Exit program\r\n"), &USART1_PORT);
 80005a0:	4905      	ldr	r1, [pc, #20]	; (80005b8 <run_tests+0x110>)
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <run_tests+0x144>)
 80005a4:	f000 fa47 	bl	8000a36 <SerialOutputString>
		abort();
 80005a8:	f003 f9b4 	bl	8003914 <abort>
	}
	SerialOutputString((uint8_t*)("All test cases passed\r\n"), &USART1_PORT);
 80005ac:	4902      	ldr	r1, [pc, #8]	; (80005b8 <run_tests+0x110>)
 80005ae:	4810      	ldr	r0, [pc, #64]	; (80005f0 <run_tests+0x148>)
 80005b0:	f000 fa41 	bl	8000a36 <SerialOutputString>
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000024 	.word	0x20000024
 80005bc:	08003a28 	.word	0x08003a28
 80005c0:	08003a40 	.word	0x08003a40
 80005c4:	20000124 	.word	0x20000124
 80005c8:	08003a58 	.word	0x08003a58
 80005cc:	08003a70 	.word	0x08003a70
 80005d0:	20000000 	.word	0x20000000
 80005d4:	08003a88 	.word	0x08003a88
 80005d8:	08003aa0 	.word	0x08003aa0
 80005dc:	08003ab8 	.word	0x08003ab8
 80005e0:	08003ad0 	.word	0x08003ad0
 80005e4:	08003ae8 	.word	0x08003ae8
 80005e8:	08003b00 	.word	0x08003b00
 80005ec:	08003b18 	.word	0x08003b18
 80005f0:	08003b28 	.word	0x08003b28

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  enable_clocks(); //enabling peripheral clocks
 80005fa:	f7ff fe2d 	bl	8000258 <enable_clocks>
  initialise_board(); //enable GPIO ports
 80005fe:	f7ff fe47 	bl	8000290 <initialise_board>
	#ifdef TEST_CODE
  	run_tests();
 8000602:	f7ff ff51 	bl	80004a8 <run_tests>
	#endif
  timer_initialise(5, &led_increase); //start the LED cycling
 8000606:	4942      	ldr	r1, [pc, #264]	; (8000710 <main+0x11c>)
 8000608:	2005      	movs	r0, #5
 800060a:	f000 fb81 	bl	8000d10 <timer_initialise>
  enable_button_interrupt(&disable_user); //enable the user button interrupt
 800060e:	4841      	ldr	r0, [pc, #260]	; (8000714 <main+0x120>)
 8000610:	f7ff fe66 	bl	80002e0 <enable_button_interrupt>

  //nothing to be done while button is not pushed
  while (user_flag == 0) {}
 8000614:	bf00      	nop
 8000616:	4b40      	ldr	r3, [pc, #256]	; (8000718 <main+0x124>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0fb      	beq.n	8000616 <main+0x22>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fc67 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f883 	bl	800072c <SystemClock_Config>
  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_I2C1_Init();
  //MX_SPI1_Init();
  //MX_USB_PCD_Init();
  MX_TIM2_Init();
 8000626:	f000 f8e3 	bl	80007f0 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //get the number of LEDs on after user has pushed button
  uint32_t count_led = countLED(get_LED());
 800062a:	f7ff fe9f 	bl	800036c <get_LED>
 800062e:	4603      	mov	r3, r0
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fee1 	bl	80003f8 <countLED>
 8000636:	6078      	str	r0, [r7, #4]

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4838      	ldr	r0, [pc, #224]	; (800071c <main+0x128>)
 800063c:	f002 fb4a 	bl	8002cd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000640:	2104      	movs	r1, #4
 8000642:	4836      	ldr	r0, [pc, #216]	; (800071c <main+0x128>)
 8000644:	f002 fb46 	bl	8002cd4 <HAL_TIM_PWM_Start>

  //CCR1 is for release mechanism //PA15
  //CCR2 is for spring //PA1

  TIM2->CCR1 = RELEASED; //release mechanism is open
 8000648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800064c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
  TIM2->CCR2 = SPRING_UNLOADED; //set to non loaded spring
 8000652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000656:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800065a:	639a      	str	r2, [r3, #56]	; 0x38

  //2s delay
  trigger_oneshot(2000, &oneshot_finished);
 800065c:	4930      	ldr	r1, [pc, #192]	; (8000720 <main+0x12c>)
 800065e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000662:	f000 fbd1 	bl	8000e08 <trigger_oneshot>
  while (tim3_flag == 0) {}
 8000666:	bf00      	nop
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <main+0x130>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d0fb      	beq.n	8000668 <main+0x74>
  tim3_flag = 0; //reset timer flag
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <main+0x130>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]

  TIM2->CCR1 = LOCKED; //release mechanism is closed
 8000676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800067a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800067e:	635a      	str	r2, [r3, #52]	; 0x34

  //2s delay
  trigger_oneshot(2000, &oneshot_finished);
 8000680:	4927      	ldr	r1, [pc, #156]	; (8000720 <main+0x12c>)
 8000682:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000686:	f000 fbbf 	bl	8000e08 <trigger_oneshot>
  while (tim3_flag == 0) {}
 800068a:	bf00      	nop
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <main+0x130>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0fb      	beq.n	800068c <main+0x98>
  tim3_flag = 0;
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <main+0x130>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]

  //load the spring
  TIM2->CCR2 = shoot_strength[count_led];
 800069a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069e:	4922      	ldr	r1, [pc, #136]	; (8000728 <main+0x134>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006a6:	6393      	str	r3, [r2, #56]	; 0x38

  //2.5s delay
  trigger_oneshot(2500, &oneshot_finished);
 80006a8:	491d      	ldr	r1, [pc, #116]	; (8000720 <main+0x12c>)
 80006aa:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80006ae:	f000 fbab 	bl	8000e08 <trigger_oneshot>
  while (tim3_flag == 0) {}
 80006b2:	bf00      	nop
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <main+0x130>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0fb      	beq.n	80006b4 <main+0xc0>
  tim3_flag = 0;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <main+0x130>)
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]

  TIM2->CCR1 = RELEASED; //release mechanism is opened
 80006c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80006ca:	635a      	str	r2, [r3, #52]	; 0x34

  //2s delay
  trigger_oneshot(2000, &oneshot_finished);
 80006cc:	4914      	ldr	r1, [pc, #80]	; (8000720 <main+0x12c>)
 80006ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d2:	f000 fb99 	bl	8000e08 <trigger_oneshot>
  while (tim3_flag == 0) {}
 80006d6:	bf00      	nop
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <main+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d0fb      	beq.n	80006d8 <main+0xe4>
  tim3_flag = 0;
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <main+0x130>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]

  TIM2->CCR2 = SPRING_UNLOADED; //set to non loaded spring
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ee:	639a      	str	r2, [r3, #56]	; 0x38

  //2s delay
  trigger_oneshot(2000, &oneshot_finished);
 80006f0:	490b      	ldr	r1, [pc, #44]	; (8000720 <main+0x12c>)
 80006f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f6:	f000 fb87 	bl	8000e08 <trigger_oneshot>
  while (tim3_flag == 0) {}
 80006fa:	bf00      	nop
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <main+0x130>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0fb      	beq.n	80006fc <main+0x108>
  tim3_flag = 0;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <main+0x130>)
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]

  NVIC_SystemReset(); //reset the system for new player
 800070a:	f7ff feb7 	bl	800047c <__NVIC_SystemReset>
 800070e:	bf00      	nop
 8000710:	08000391 	.word	0x08000391
 8000714:	080008bd 	.word	0x080008bd
 8000718:	2000011c 	.word	0x2000011c
 800071c:	200000d0 	.word	0x200000d0
 8000720:	080008dd 	.word	0x080008dd
 8000724:	20000120 	.word	0x20000120
 8000728:	20000000 	.word	0x20000000

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b09e      	sub	sp, #120	; 0x78
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000736:	2228      	movs	r2, #40	; 0x28
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 f8f1 	bl	8003922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000750:	463b      	mov	r3, r7
 8000752:	223c      	movs	r2, #60	; 0x3c
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 f8e3 	bl	8003922 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800075c:	2303      	movs	r3, #3
 800075e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000760:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000764:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076e:	2310      	movs	r3, #16
 8000770:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800077a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800077c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000780:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fe78 	bl	800147c <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000792:	f000 f8af 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000796:	230f      	movs	r3, #15
 8000798:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079a:	2302      	movs	r3, #2
 800079c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007b0:	2101      	movs	r1, #1
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fea0 	bl	80024f8 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007be:	f000 f899 	bl	80008f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80007c2:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <SystemClock_Config+0xc0>)
 80007c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80007ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 f876 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007de:	f000 f889 	bl	80008f4 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3778      	adds	r7, #120	; 0x78
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	00020020 	.word	0x00020020

080007f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]
 8000812:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800081a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800081e:	222f      	movs	r2, #47	; 0x2f
 8000820:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000828:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800082a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800082e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000836:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800083c:	481e      	ldr	r0, [pc, #120]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800083e:	f002 f9f1 	bl	8002c24 <HAL_TIM_PWM_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000848:	f000 f854 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4817      	ldr	r0, [pc, #92]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800085c:	f002 ffda 	bl	8003814 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000866:	f000 f845 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086a:	2360      	movs	r3, #96	; 0x60
 800086c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800086e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0xc8>)
 8000884:	f002 fb26 	bl	8002ed4 <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800088e:	f000 f831 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000892:	463b      	mov	r3, r7
 8000894:	2204      	movs	r2, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_TIM2_Init+0xc8>)
 800089a:	f002 fb1b 	bl	8002ed4 <HAL_TIM_PWM_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 80008a4:	f000 f826 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <MX_TIM2_Init+0xc8>)
 80008aa:	f000 f923 	bl	8000af4 <HAL_TIM_MspPostInit>

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200000d0 	.word	0x200000d0

080008bc <disable_user>:

}

/* USER CODE BEGIN 4 */
void disable_user()
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	//EXTI->IMR &= ~EXTI_IMR_MR0;
	NVIC_DisableIRQ(EXTI0_IRQn);
 80008c0:	2006      	movs	r0, #6
 80008c2:	f7ff fdb7 	bl	8000434 <__NVIC_DisableIRQ>
	NVIC_DisableIRQ(TIM2_IRQn);
 80008c6:	201c      	movs	r0, #28
 80008c8:	f7ff fdb4 	bl	8000434 <__NVIC_DisableIRQ>
	user_flag = 1;
 80008cc:	4b02      	ldr	r3, [pc, #8]	; (80008d8 <disable_user+0x1c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	601a      	str	r2, [r3, #0]
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000011c 	.word	0x2000011c

080008dc <oneshot_finished>:
void oneshot_finished()
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
	tim3_flag = 1;
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <oneshot_finished+0x14>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	601a      	str	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	20000120 	.word	0x20000120

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  set_LED(ERROR_LED);
 80008fc:	2002      	movs	r0, #2
 80008fe:	f7ff fd23 	bl	8000348 <set_LED>
 8000902:	e7fb      	b.n	80008fc <Error_Handler+0x8>

08000904 <SerialInitialise>:


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t, uint8_t*))
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <SerialInitialise+0xfc>)
 8000918:	69db      	ldr	r3, [r3, #28]
 800091a:	4a39      	ldr	r2, [pc, #228]	; (8000a00 <SerialInitialise+0xfc>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <SerialInitialise+0xfc>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <SerialInitialise+0xfc>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	691a      	ldr	r2, [r3, #16]
 8000932:	4b33      	ldr	r3, [pc, #204]	; (8000a00 <SerialInitialise+0xfc>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	4932      	ldr	r1, [pc, #200]	; (8000a00 <SerialInitialise+0xfc>)
 8000938:	4313      	orrs	r3, r2
 800093a:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	68ba      	ldr	r2, [r7, #8]
 8000942:	6952      	ldr	r2, [r2, #20]
 8000944:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	6992      	ldr	r2, [r2, #24]
 800094e:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	69d9      	ldr	r1, [r3, #28]
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	6a1a      	ldr	r2, [r3, #32]
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	430a      	orrs	r2, r1
 8000960:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	6a19      	ldr	r1, [r3, #32]
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	430a      	orrs	r2, r1
 8000972:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <SerialInitialise+0xfc>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4920      	ldr	r1, [pc, #128]	; (8000a00 <SerialInitialise+0xfc>)
 800097e:	4313      	orrs	r3, r2
 8000980:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <SerialInitialise+0xfc>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	491d      	ldr	r1, [pc, #116]	; (8000a00 <SerialInitialise+0xfc>)
 800098c:	4313      	orrs	r3, r2
 800098e:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	330c      	adds	r3, #12
 8000996:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate)
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d822      	bhi.n	80009e4 <SerialInitialise+0xe0>
 800099e:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <SerialInitialise+0xa0>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009b9 	.word	0x080009b9
 80009a8:	080009c3 	.word	0x080009c3
 80009ac:	080009cd 	.word	0x080009cd
 80009b0:	080009d5 	.word	0x080009d5
 80009b4:	080009dd 	.word	0x080009dd
	{

		case BAUD_9600:
			*baud_rate_config = 0x341;  // 9600 at 8MHz
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	f240 3241 	movw	r2, #833	; 0x341
 80009be:	801a      	strh	r2, [r3, #0]
			break;
 80009c0:	e010      	b.n	80009e4 <SerialInitialise+0xe0>
		case BAUD_19200:
			*baud_rate_config = 0x1A1;  // 19200 at 8MHz
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	f240 12a1 	movw	r2, #417	; 0x1a1
 80009c8:	801a      	strh	r2, [r3, #0]
			break;
 80009ca:	e00b      	b.n	80009e4 <SerialInitialise+0xe0>
		case BAUD_38400:
			*baud_rate_config = 0xD0;  // 38400 at 8MHz
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	22d0      	movs	r2, #208	; 0xd0
 80009d0:	801a      	strh	r2, [r3, #0]
			break;
 80009d2:	e007      	b.n	80009e4 <SerialInitialise+0xe0>
		case BAUD_57600:
			*baud_rate_config = 0x8B;  // 57600 at 8MHz
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	228b      	movs	r2, #139	; 0x8b
 80009d8:	801a      	strh	r2, [r3, #0]
			break;
 80009da:	e003      	b.n	80009e4 <SerialInitialise+0xe0>
		case BAUD_115200:
			*baud_rate_config = 0x46;  // 115200 at 8MHz
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	2246      	movs	r2, #70	; 0x46
 80009e0:	801a      	strh	r2, [r3, #0]
			break;
 80009e2:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE| USART_CR1_RXNEIE;
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000

08000a04 <SerialOutputChar>:
	NVIC_EnableIRQ(serial_port->USART_IRQn);
}


void SerialOutputChar(uint8_t data, SerialPort *serial_port)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	6039      	str	r1, [r7, #0]
 8000a0e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0)	{}
 8000a10:	bf00      	nop
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	69db      	ldr	r3, [r3, #28]
 8000a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f8      	beq.n	8000a12 <SerialOutputChar+0xe>
	serial_port->UART->TDR = data;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	79fa      	ldrb	r2, [r7, #7]
 8000a26:	b292      	uxth	r2, r2
 8000a28:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <SerialOutputString>:

void SerialOutputString(uint8_t *pt, SerialPort *serial_port)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	//each character is sent and count increased
	uint32_t counter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
	while(*pt)
 8000a44:	e00b      	b.n	8000a5e <SerialOutputString+0x28>
	{
		SerialOutputChar(*pt, serial_port);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffd9 	bl	8000a04 <SerialOutputChar>
		counter++;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
		pt++;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
	while(*pt)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1ef      	bne.n	8000a46 <SerialOutputString+0x10>
	}
}
 8000a66:	bf00      	nop
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa6:	2007      	movs	r0, #7
 8000aa8:	f000 fb3a 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac8:	d10b      	bne.n	8000ae2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <HAL_TIM_PWM_MspInit+0x38>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d11d      	bne.n	8000b52 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <HAL_TIM_MspPostInit+0x68>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <HAL_TIM_MspPostInit+0x68>)
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	6153      	str	r3, [r2, #20]
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <HAL_TIM_MspPostInit+0x68>)
 8000b24:	695b      	ldr	r3, [r3, #20]
 8000b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8000b2e:	f248 0302 	movw	r3, #32770	; 0x8002
 8000b32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fb1b 	bl	8001188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f9e6 	bl	8000f7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
	return 1;
 8000bb8:	2301      	movs	r3, #1
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_kill>:

int _kill(int pid, int sig)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bce:	f002 fef5 	bl	80039bc <__errno>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2216      	movs	r2, #22
 8000bd6:	601a      	str	r2, [r3, #0]
	return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <_exit>:

void _exit (int status)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f7ff ffe7 	bl	8000bc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bf6:	e7fe      	b.n	8000bf6 <_exit+0x12>

08000bf8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	; (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <enable_interrupt>:
// pointer to callback function for continuous timer
void (*continuous_callback_function)();
// pointer to callback function for oneshot timer
void (*oneshot_callback_function)();

void enable_interrupt(IRQn_Type NVIC_module, uint32_t priority) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
	// Disable the interrupts while messing around with the settings
	//  otherwise can lead to strange behaviour
	__disable_irq();

	// Tell the NVIC module that TIM2 interrupts should be handled
	NVIC_SetPriority(NVIC_module, priority);  // Set Priority
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	6839      	ldr	r1, [r7, #0]
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ffc8 	bl	8000c58 <__NVIC_SetPriority>
	NVIC_EnableIRQ(NVIC_module);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ffa5 	bl	8000c1c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000cd2:	b662      	cpsie	i
}
 8000cd4:	bf00      	nop

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	// run the continuous timer interrupt handler
	if (TIM2->SR & TIM_SR_UIF) {
 8000ce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00a      	beq.n	8000d08 <TIM2_IRQHandler+0x28>
		TIM2->SR &= ~TIM_SR_UIF; // clear continuous timer interrupt
 8000cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfc:	f023 0301 	bic.w	r3, r3, #1
 8000d00:	6113      	str	r3, [r2, #16]
		continuous_callback_function();
 8000d02:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <TIM2_IRQHandler+0x2c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4798      	blx	r3
	}

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000128 	.word	0x20000128

08000d10 <timer_initialise>:

void timer_initialise(uint16_t interval, void (*callback_function)()) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM2->CR1 = 0x00;
 8000d1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]

	// enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 8000d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

	TIM2->PSC = PRESCALER; // 125 microseconds = 0.125 milliseconds per count
 8000d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d38:	f241 726f 	movw	r2, #5999	; 0x176f
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28

	// set the auto reload according to the prescaler
	TIM2->ARR = MILLISECOND_SCALAR; // 8 - 1 millisecond
 8000d3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d42:	2208      	movs	r2, #8
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->ARR = TIM2->ARR * interval; // interval in millisecond
 8000d46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000d52:	fb02 f303 	mul.w	r3, r2, r3
 8000d56:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 8000d58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d66:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM2->CR1 |= TIM_CR1_URS;
 8000d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM2->EGR |= TIM_EGR_UG;
 8000d78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8000d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM2->SR &= ~TIM_SR_UIF;
 8000d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da2:	f023 0301 	bic.w	r3, r3, #1
 8000da6:	6113      	str	r3, [r2, #16]

	continuous_callback_function = callback_function;
 8000da8:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <timer_initialise+0xb0>)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM2_IRQn, 1);
 8000dae:	2101      	movs	r1, #1
 8000db0:	201c      	movs	r0, #28
 8000db2:	f7ff ff7b 	bl	8000cac <enable_interrupt>

}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000128 	.word	0x20000128

08000dc4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
// run the oneshot timer interrupt handler
	if (TIM3->SR & TIM_SR_UIF) {
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <TIM3_IRQHandler+0x3c>)
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d012      	beq.n	8000dfa <TIM3_IRQHandler+0x36>
		// clear oneshot timer interrupt
		TIM3->SR &= ~TIM_SR_UIF;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <TIM3_IRQHandler+0x3c>)
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <TIM3_IRQHandler+0x3c>)
 8000dda:	f023 0301 	bic.w	r3, r3, #1
 8000dde:	6113      	str	r3, [r2, #16]

		if (oneshot_callback_function != NULL)
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <TIM3_IRQHandler+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <TIM3_IRQHandler+0x2a>
		{
			oneshot_callback_function();
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <TIM3_IRQHandler+0x40>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4798      	blx	r3
		}

		// enable counter
		TIM3->CR1 &= TIM_CR1_CEN;
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <TIM3_IRQHandler+0x3c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a03      	ldr	r2, [pc, #12]	; (8000e00 <TIM3_IRQHandler+0x3c>)
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	6013      	str	r3, [r2, #0]

	}

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40000400 	.word	0x40000400
 8000e04:	2000012c 	.word	0x2000012c

08000e08 <trigger_oneshot>:

void trigger_oneshot(uint16_t delay, void (*callback_function)()) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	80fb      	strh	r3, [r7, #6]

	// reset CR1
	TIM3->CR1 = 0x00;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]

	// enable counter
	TIM3->CR1 |= TIM_CR1_CEN;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6013      	str	r3, [r2, #0]

	// set the prescaler to 5999, slower than the default clock 6000 times, clock speed 48MHz
	TIM3->PSC = PRESCALER; // 125 microseconds = 0.125 milliseconds per count
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e28:	f241 726f 	movw	r2, #5999	; 0x176f
 8000e2c:	629a      	str	r2, [r3, #40]	; 0x28

	// set the auto reload according to the prescaler
	TIM3->ARR = 0x08; // 8 - 1 millisecond
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->ARR = TIM3->ARR * delay; // delay in millisecond
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	88fa      	ldrh	r2, [r7, #6]
 8000e3a:	4916      	ldr	r1, [pc, #88]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e3c:	fb02 f303 	mul.w	r3, r2, r3
 8000e40:	62cb      	str	r3, [r1, #44]	; 0x2c
	TIM3->CR1 |= TIM_CR1_ARPE; // enable auto reload buffering
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e4c:	6013      	str	r3, [r2, #0]

	// set to only counter overflow raises interrupt flag
	TIM3->CR1 |= TIM_CR1_URS;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e54:	f043 0304 	orr.w	r3, r3, #4
 8000e58:	6013      	str	r3, [r2, #0]

	// re-initialise the counter and generates an update of the registers
	TIM3->EGR |= TIM_EGR_UG;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6153      	str	r3, [r2, #20]

	// enable the update interrupt
	TIM3->DIER |= TIM_DIER_UIE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	60d3      	str	r3, [r2, #12]

	// clear the interrupt
	TIM3->SR &= ~TIM_SR_UIF;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e74:	691b      	ldr	r3, [r3, #16]
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <trigger_oneshot+0x8c>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	6113      	str	r3, [r2, #16]

	oneshot_callback_function = callback_function;
 8000e7e:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <trigger_oneshot+0x90>)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	6013      	str	r3, [r2, #0]

	enable_interrupt(TIM3_IRQn,2);
 8000e84:	2102      	movs	r1, #2
 8000e86:	201d      	movs	r0, #29
 8000e88:	f7ff ff10 	bl	8000cac <enable_interrupt>

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40000400 	.word	0x40000400
 8000e98:	2000012c 	.word	0x2000012c

08000e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff feaa 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f002 fd7d 	bl	80039c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ece:	f7ff fb91 	bl	80005f4 <main>

08000ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ed4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000ee0:	08003b78 	.word	0x08003b78
  ldr r2, =_sbss
 8000ee4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8000ee8:	20000270 	.word	0x20000270

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_Init+0x28>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_Init+0x28>)
 8000efa:	f043 0310 	orr.w	r3, r3, #16
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f00:	2003      	movs	r0, #3
 8000f02:	f000 f90d 	bl	8001120 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f06:	2000      	movs	r0, #0
 8000f08:	f000 f808 	bl	8000f1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f0c:	f7ff fdb0 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40022000 	.word	0x40022000

08000f1c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_InitTick+0x54>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_InitTick+0x58>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f917 	bl	800116e <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f58:	f000 f8ed 	bl	8001136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x5c>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000050 	.word	0x20000050
 8000f74:	20000058 	.word	0x20000058
 8000f78:	20000054 	.word	0x20000054

08000f7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000058 	.word	0x20000058
 8000fa0:	20000130 	.word	0x20000130

08000fa4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000130 	.word	0x20000130

08000fbc <__NVIC_SetPriorityGrouping>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_SetPriority>:
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
	...

080010dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010ec:	d301      	bcc.n	80010f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00f      	b.n	8001112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <SysTick_Config+0x40>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010fa:	210f      	movs	r1, #15
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001100:	f7ff ff8e 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <SysTick_Config+0x40>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <SysTick_Config+0x40>)
 800110c:	2207      	movs	r2, #7
 800110e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	e000e010 	.word	0xe000e010

08001120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff47 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b086      	sub	sp, #24
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	60b9      	str	r1, [r7, #8]
 8001140:	607a      	str	r2, [r7, #4]
 8001142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001148:	f7ff ff5c 	bl	8001004 <__NVIC_GetPriorityGrouping>
 800114c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	6978      	ldr	r0, [r7, #20]
 8001154:	f7ff ff8e 	bl	8001074 <NVIC_EncodePriority>
 8001158:	4602      	mov	r2, r0
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	bf00      	nop
 8001168:	3718      	adds	r7, #24
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff ffb0 	bl	80010dc <SysTick_Config>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001196:	e154      	b.n	8001442 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2101      	movs	r1, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8146 	beq.w	800143c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d005      	beq.n	80011c8 <HAL_GPIO_Init+0x40>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d130      	bne.n	800122a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68da      	ldr	r2, [r3, #12]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011fe:	2201      	movs	r2, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	091b      	lsrs	r3, r3, #4
 8001214:	f003 0201 	and.w	r2, r3, #1
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b03      	cmp	r3, #3
 8001234:	d017      	beq.n	8001266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d123      	bne.n	80012ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	691a      	ldr	r2, [r3, #16]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f003 0307 	and.w	r3, r3, #7
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	08da      	lsrs	r2, r3, #3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3208      	adds	r2, #8
 80012b4:	6939      	ldr	r1, [r7, #16]
 80012b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0203 	and.w	r2, r3, #3
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 80a0 	beq.w	800143c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_GPIO_Init+0x2d8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_GPIO_Init+0x2d8>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_GPIO_Init+0x2d8>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001314:	4a53      	ldr	r2, [pc, #332]	; (8001464 <HAL_GPIO_Init+0x2dc>)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	089b      	lsrs	r3, r3, #2
 800131a:	3302      	adds	r3, #2
 800131c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	220f      	movs	r2, #15
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800133e:	d019      	beq.n	8001374 <HAL_GPIO_Init+0x1ec>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a49      	ldr	r2, [pc, #292]	; (8001468 <HAL_GPIO_Init+0x2e0>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d013      	beq.n	8001370 <HAL_GPIO_Init+0x1e8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a48      	ldr	r2, [pc, #288]	; (800146c <HAL_GPIO_Init+0x2e4>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d00d      	beq.n	800136c <HAL_GPIO_Init+0x1e4>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a47      	ldr	r2, [pc, #284]	; (8001470 <HAL_GPIO_Init+0x2e8>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d007      	beq.n	8001368 <HAL_GPIO_Init+0x1e0>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_GPIO_Init+0x2ec>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d101      	bne.n	8001364 <HAL_GPIO_Init+0x1dc>
 8001360:	2304      	movs	r3, #4
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001364:	2305      	movs	r3, #5
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001368:	2303      	movs	r3, #3
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x1ee>
 8001374:	2300      	movs	r3, #0
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001386:	4937      	ldr	r1, [pc, #220]	; (8001464 <HAL_GPIO_Init+0x2dc>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b8:	4a2f      	ldr	r2, [pc, #188]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013e2:	4a25      	ldr	r2, [pc, #148]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001412:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_GPIO_Init+0x2f0>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f aea3 	bne.w	8001198 <HAL_GPIO_Init+0x10>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	48000400 	.word	0x48000400
 800146c:	48000800 	.word	0x48000800
 8001470:	48000c00 	.word	0x48000c00
 8001474:	48001000 	.word	0x48001000
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001482:	af00      	add	r7, sp, #0
 8001484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800148c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001492:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f001 b823 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 817d 	beq.w	80017b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b8:	4bbc      	ldr	r3, [pc, #752]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d00c      	beq.n	80014de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c4:	4bb9      	ldr	r3, [pc, #740]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d15c      	bne.n	800158a <HAL_RCC_OscConfig+0x10e>
 80014d0:	4bb6      	ldr	r3, [pc, #728]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014dc:	d155      	bne.n	800158a <HAL_RCC_OscConfig+0x10e>
 80014de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	095b      	lsrs	r3, r3, #5
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <HAL_RCC_OscConfig+0x94>
 800150a:	4ba8      	ldr	r3, [pc, #672]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	e015      	b.n	800153c <HAL_RCC_OscConfig+0xc0>
 8001510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001514:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001528:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800152c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001538:	4b9c      	ldr	r3, [pc, #624]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001540:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001544:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001548:	fa92 f2a2 	rbit	r2, r2
 800154c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001550:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001554:	fab2 f282 	clz	r2, r2
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f042 0220 	orr.w	r2, r2, #32
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	f002 021f 	and.w	r2, r2, #31
 8001564:	2101      	movs	r1, #1
 8001566:	fa01 f202 	lsl.w	r2, r1, r2
 800156a:	4013      	ands	r3, r2
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 811f 	beq.w	80017b0 <HAL_RCC_OscConfig+0x334>
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	f040 8116 	bne.w	80017b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	f000 bfaf 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x12e>
 800159c:	4b83      	ldr	r3, [pc, #524]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a82      	ldr	r2, [pc, #520]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e036      	b.n	8001618 <HAL_RCC_OscConfig+0x19c>
 80015aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x158>
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b79      	ldr	r3, [pc, #484]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a78      	ldr	r2, [pc, #480]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e021      	b.n	8001618 <HAL_RCC_OscConfig+0x19c>
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x184>
 80015e6:	4b71      	ldr	r3, [pc, #452]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a70      	ldr	r2, [pc, #448]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b6e      	ldr	r3, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a6d      	ldr	r2, [pc, #436]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e00b      	b.n	8001618 <HAL_RCC_OscConfig+0x19c>
 8001600:	4b6a      	ldr	r3, [pc, #424]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a69      	ldr	r2, [pc, #420]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	4b67      	ldr	r3, [pc, #412]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a66      	ldr	r2, [pc, #408]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001616:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001618:	4b64      	ldr	r3, [pc, #400]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800161a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161c:	f023 020f 	bic.w	r2, r3, #15
 8001620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001624:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	495f      	ldr	r1, [pc, #380]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 800162e:	4313      	orrs	r3, r2
 8001630:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d059      	beq.n	80016f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fcaf 	bl	8000fa4 <HAL_GetTick>
 8001646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	e00a      	b.n	8001662 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164c:	f7ff fcaa 	bl	8000fa4 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d902      	bls.n	8001662 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	f000 bf43 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001676:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	b2db      	uxtb	r3, r3
 8001680:	095b      	lsrs	r3, r3, #5
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d102      	bne.n	8001694 <HAL_RCC_OscConfig+0x218>
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	e015      	b.n	80016c0 <HAL_RCC_OscConfig+0x244>
 8001694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001698:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80016a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80016b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80016c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80016cc:	fa92 f2a2 	rbit	r2, r2
 80016d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80016d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80016d8:	fab2 f282 	clz	r2, r2
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	f002 021f 	and.w	r2, r2, #31
 80016e8:	2101      	movs	r1, #1
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0ab      	beq.n	800164c <HAL_RCC_OscConfig+0x1d0>
 80016f4:	e05d      	b.n	80017b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fc55 	bl	8000fa4 <HAL_GetTick>
 80016fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001700:	f7ff fc50 	bl	8000fa4 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d902      	bls.n	8001716 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	f000 bee9 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800172a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	095b      	lsrs	r3, r3, #5
 8001736:	b2db      	uxtb	r3, r3
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <HAL_RCC_OscConfig+0x2cc>
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	e015      	b.n	8001774 <HAL_RCC_OscConfig+0x2f8>
 8001748:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800174c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001754:	fa93 f3a3 	rbit	r3, r3
 8001758:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800175c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001760:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001764:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001768:	fa93 f3a3 	rbit	r3, r3
 800176c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_RCC_OscConfig+0x330>)
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001778:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800177c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001780:	fa92 f2a2 	rbit	r2, r2
 8001784:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001788:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800178c:	fab2 f282 	clz	r2, r2
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	f042 0220 	orr.w	r2, r2, #32
 8001796:	b2d2      	uxtb	r2, r2
 8001798:	f002 021f 	and.w	r2, r2, #31
 800179c:	2101      	movs	r1, #1
 800179e:	fa01 f202 	lsl.w	r2, r1, r2
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ab      	bne.n	8001700 <HAL_RCC_OscConfig+0x284>
 80017a8:	e003      	b.n	80017b2 <HAL_RCC_OscConfig+0x336>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 817d 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017c8:	4ba6      	ldr	r3, [pc, #664]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017d4:	4ba3      	ldr	r3, [pc, #652]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d172      	bne.n	80018c6 <HAL_RCC_OscConfig+0x44a>
 80017e0:	4ba0      	ldr	r3, [pc, #640]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d16c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x44a>
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80017f6:	fa93 f3a3 	rbit	r3, r3
 80017fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80017fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001802:	fab3 f383 	clz	r3, r3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	095b      	lsrs	r3, r3, #5
 800180a:	b2db      	uxtb	r3, r3
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d102      	bne.n	800181c <HAL_RCC_OscConfig+0x3a0>
 8001816:	4b93      	ldr	r3, [pc, #588]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e013      	b.n	8001844 <HAL_RCC_OscConfig+0x3c8>
 800181c:	2302      	movs	r3, #2
 800181e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001822:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001826:	fa93 f3a3 	rbit	r3, r3
 800182a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800182e:	2302      	movs	r3, #2
 8001830:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001834:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001838:	fa93 f3a3 	rbit	r3, r3
 800183c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001840:	4b88      	ldr	r3, [pc, #544]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2202      	movs	r2, #2
 8001846:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800184a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800184e:	fa92 f2a2 	rbit	r2, r2
 8001852:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001856:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800185a:	fab2 f282 	clz	r2, r2
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f042 0220 	orr.w	r2, r2, #32
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	f002 021f 	and.w	r2, r2, #31
 800186a:	2101      	movs	r1, #1
 800186c:	fa01 f202 	lsl.w	r2, r1, r2
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00a      	beq.n	800188c <HAL_RCC_OscConfig+0x410>
 8001876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800187a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d002      	beq.n	800188c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	f000 be2e 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b75      	ldr	r3, [pc, #468]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	21f8      	movs	r1, #248	; 0xf8
 80018a2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80018aa:	fa91 f1a1 	rbit	r1, r1
 80018ae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80018b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80018b6:	fab1 f181 	clz	r1, r1
 80018ba:	b2c9      	uxtb	r1, r1
 80018bc:	408b      	lsls	r3, r1
 80018be:	4969      	ldr	r1, [pc, #420]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	e0fd      	b.n	8001ac2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8088 	beq.w	80019e8 <HAL_RCC_OscConfig+0x56c>
 80018d8:	2301      	movs	r3, #1
 80018da:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80018e2:	fa93 f3a3 	rbit	r3, r3
 80018e6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80018ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	461a      	mov	r2, r3
 8001900:	2301      	movs	r3, #1
 8001902:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fb4e 	bl	8000fa4 <HAL_GetTick>
 8001908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190e:	f7ff fb49 	bl	8000fa4 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d902      	bls.n	8001924 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	f000 bde2 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001924:	2302      	movs	r3, #2
 8001926:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001936:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b01      	cmp	r3, #1
 800194c:	d102      	bne.n	8001954 <HAL_RCC_OscConfig+0x4d8>
 800194e:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	e013      	b.n	800197c <HAL_RCC_OscConfig+0x500>
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800196c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2202      	movs	r2, #2
 800197e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001982:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001986:	fa92 f2a2 	rbit	r2, r2
 800198a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800198e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001992:	fab2 f282 	clz	r2, r2
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	f042 0220 	orr.w	r2, r2, #32
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f002 021f 	and.w	r2, r2, #31
 80019a2:	2101      	movs	r1, #1
 80019a4:	fa01 f202 	lsl.w	r2, r1, r2
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0af      	beq.n	800190e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	21f8      	movs	r1, #248	; 0xf8
 80019c4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80019cc:	fa91 f1a1 	rbit	r1, r1
 80019d0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80019d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80019d8:	fab1 f181 	clz	r1, r1
 80019dc:	b2c9      	uxtb	r1, r1
 80019de:	408b      	lsls	r3, r1
 80019e0:	4920      	ldr	r1, [pc, #128]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	600b      	str	r3, [r1, #0]
 80019e6:	e06c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x646>
 80019e8:	2301      	movs	r3, #1
 80019ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80019fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff fac6 	bl	8000fa4 <HAL_GetTick>
 8001a18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a1e:	f7ff fac1 	bl	8000fa4 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d902      	bls.n	8001a34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f000 bd5a 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001a3e:	fa93 f3a3 	rbit	r3, r3
 8001a42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	095b      	lsrs	r3, r3, #5
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d104      	bne.n	8001a68 <HAL_RCC_OscConfig+0x5ec>
 8001a5e:	4b01      	ldr	r3, [pc, #4]	; (8001a64 <HAL_RCC_OscConfig+0x5e8>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	e015      	b.n	8001a90 <HAL_RCC_OscConfig+0x614>
 8001a64:	40021000 	.word	0x40021000
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001a8c:	4bc8      	ldr	r3, [pc, #800]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	2202      	movs	r2, #2
 8001a92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001a96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a9a:	fa92 f2a2 	rbit	r2, r2
 8001a9e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001aa2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001aa6:	fab2 f282 	clz	r2, r2
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	f042 0220 	orr.w	r2, r2, #32
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	f002 021f 	and.w	r2, r2, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ad      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 8110 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d079      	beq.n	8001bdc <HAL_RCC_OscConfig+0x760>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4bab      	ldr	r3, [pc, #684]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	2301      	movs	r3, #1
 8001b10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff fa47 	bl	8000fa4 <HAL_GetTick>
 8001b16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	e00a      	b.n	8001b32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fa42 	bl	8000fa4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d902      	bls.n	8001b32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	f000 bcdb 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001b3c:	fa93 f3a3 	rbit	r3, r3
 8001b40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	fa93 f2a3 	rbit	r2, r3
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b70:	2202      	movs	r2, #2
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	fa93 f2a3 	rbit	r2, r3
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8c:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b98:	2102      	movs	r1, #2
 8001b9a:	6019      	str	r1, [r3, #0]
 8001b9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ba0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f1a3 	rbit	r1, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bb2:	6019      	str	r1, [r3, #0]
  return result;
 8001bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fab3 f383 	clz	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 031f 	and.w	r3, r3, #31
 8001bce:	2101      	movs	r1, #1
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0a0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x6a0>
 8001bda:	e08d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x87c>
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001bfe:	601a      	str	r2, [r3, #0]
  return result;
 8001c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	fab3 f383 	clz	r3, r3
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b68      	ldr	r3, [pc, #416]	; (8001db4 <HAL_RCC_OscConfig+0x938>)
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f9c1 	bl	8000fa4 <HAL_GetTick>
 8001c22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff f9bc 	bl	8000fa4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d902      	bls.n	8001c3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	f000 bc55 	b.w	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001c3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c46:	2202      	movs	r2, #2
 8001c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	fa93 f2a3 	rbit	r2, r3
 8001c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c8e:	2202      	movs	r2, #2
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ca8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	6019      	str	r1, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cbe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f1a3 	rbit	r1, r3
 8001cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ccc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cd0:	6019      	str	r1, [r3, #0]
  return result;
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	2101      	movs	r1, #1
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d197      	bne.n	8001c28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 81a1 	beq.w	8002050 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d116      	bne.n	8001d4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	61d3      	str	r3, [r2, #28]
 8001d2c:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d38:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001d46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d11a      	bne.n	8001d90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5a:	4b17      	ldr	r3, [pc, #92]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d66:	f7ff f91d 	bl	8000fa4 <HAL_GetTick>
 8001d6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	e009      	b.n	8001d84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d70:	f7ff f918 	bl	8000fa4 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b64      	cmp	r3, #100	; 0x64
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e3b1      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_RCC_OscConfig+0x93c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ef      	beq.n	8001d70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10d      	bne.n	8001dbc <HAL_RCC_OscConfig+0x940>
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a02      	ldr	r2, [pc, #8]	; (8001db0 <HAL_RCC_OscConfig+0x934>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e03c      	b.n	8001e28 <HAL_RCC_OscConfig+0x9ac>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	10908120 	.word	0x10908120
 8001db8:	40007000 	.word	0x40007000
 8001dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10c      	bne.n	8001de6 <HAL_RCC_OscConfig+0x96a>
 8001dcc:	4bc1      	ldr	r3, [pc, #772]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4ac0      	ldr	r2, [pc, #768]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6213      	str	r3, [r2, #32]
 8001dd8:	4bbe      	ldr	r3, [pc, #760]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4abd      	ldr	r2, [pc, #756]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6213      	str	r3, [r2, #32]
 8001de4:	e020      	b.n	8001e28 <HAL_RCC_OscConfig+0x9ac>
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b05      	cmp	r3, #5
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x994>
 8001df6:	4bb7      	ldr	r3, [pc, #732]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	4ab6      	ldr	r2, [pc, #728]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6213      	str	r3, [r2, #32]
 8001e02:	4bb4      	ldr	r3, [pc, #720]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	4ab3      	ldr	r2, [pc, #716]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0x9ac>
 8001e10:	4bb0      	ldr	r3, [pc, #704]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4aaf      	ldr	r2, [pc, #700]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4bad      	ldr	r3, [pc, #692]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4aac      	ldr	r2, [pc, #688]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001e22:	f023 0304 	bic.w	r3, r3, #4
 8001e26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8081 	beq.w	8001f3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f8b3 	bl	8000fa4 <HAL_GetTick>
 8001e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e42:	e00b      	b.n	8001e5c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e44:	f7ff f8ae 	bl	8000fa4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e345      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e64:	2202      	movs	r2, #2
 8001e66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e90:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	fa93 f2a3 	rbit	r2, r3
 8001e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e9e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001ea2:	601a      	str	r2, [r3, #0]
  return result;
 8001ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001eac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	095b      	lsrs	r3, r3, #5
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d102      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xa4c>
 8001ec2:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	e013      	b.n	8001ef0 <HAL_RCC_OscConfig+0xa74>
 8001ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ecc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	fa93 f2a3 	rbit	r2, r3
 8001ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	4b79      	ldr	r3, [pc, #484]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ef4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001ef8:	2102      	movs	r1, #2
 8001efa:	6011      	str	r1, [r2, #0]
 8001efc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f00:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	fa92 f1a2 	rbit	r1, r2
 8001f0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f0e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f12:	6011      	str	r1, [r2, #0]
  return result;
 8001f14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001f18:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	fab2 f282 	clz	r2, r2
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	f002 021f 	and.w	r2, r2, #31
 8001f2e:	2101      	movs	r1, #1
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	4013      	ands	r3, r2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d084      	beq.n	8001e44 <HAL_RCC_OscConfig+0x9c8>
 8001f3a:	e07f      	b.n	800203c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f832 	bl	8000fa4 <HAL_GetTick>
 8001f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00b      	b.n	8001f5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff f82d 	bl	8000fa4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e2c4      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 8001f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f62:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f66:	2202      	movs	r2, #2
 8001f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f86:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f92:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fa93 f2a3 	rbit	r2, r3
 8001f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fa4:	601a      	str	r2, [r3, #0]
  return result;
 8001fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001faa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001fae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	fab3 f383 	clz	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_OscConfig+0xb4e>
 8001fc4:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	e013      	b.n	8001ff2 <HAL_RCC_OscConfig+0xb76>
 8001fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fda:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fa93 f2a3 	rbit	r2, r3
 8001fe4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	4b39      	ldr	r3, [pc, #228]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ff6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002002:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fa92 f1a2 	rbit	r1, r2
 800200c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002010:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002014:	6011      	str	r1, [r2, #0]
  return result;
 8002016:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800201a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f002 021f 	and.w	r2, r2, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d184      	bne.n	8001f46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800203c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002040:	2b01      	cmp	r3, #1
 8002042:	d105      	bne.n	8002050 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 800204a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002050:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002054:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8242 	beq.w	80024e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <HAL_RCC_OscConfig+0xc58>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b08      	cmp	r3, #8
 800206c:	f000 8213 	beq.w	8002496 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	f040 8162 	bne.w	8002346 <HAL_RCC_OscConfig+0xeca>
 8002082:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002086:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800208a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800208e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002094:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020a6:	601a      	str	r2, [r3, #0]
  return result;
 80020a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80020b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	461a      	mov	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe ff6c 	bl	8000fa4 <HAL_GetTick>
 80020cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d0:	e00c      	b.n	80020ec <HAL_RCC_OscConfig+0xc70>
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7fe ff64 	bl	8000fa4 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e1fd      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 80020ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80020f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002110:	601a      	str	r2, [r3, #0]
  return result;
 8002112:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002116:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800211a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	fab3 f383 	clz	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d102      	bne.n	8002136 <HAL_RCC_OscConfig+0xcba>
 8002130:	4bb0      	ldr	r3, [pc, #704]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	e027      	b.n	8002186 <HAL_RCC_OscConfig+0xd0a>
 8002136:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800213a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800213e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002142:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002156:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002160:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002164:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b9c      	ldr	r3, [pc, #624]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800218a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800218e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002192:	6011      	str	r1, [r2, #0]
 8002194:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002198:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	fa92 f1a2 	rbit	r1, r2
 80021a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021aa:	6011      	str	r1, [r2, #0]
  return result;
 80021ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	fab2 f282 	clz	r2, r2
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	f042 0220 	orr.w	r2, r2, #32
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	f002 021f 	and.w	r2, r2, #31
 80021c6:	2101      	movs	r1, #1
 80021c8:	fa01 f202 	lsl.w	r2, r1, r2
 80021cc:	4013      	ands	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d182      	bne.n	80020d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	430b      	orrs	r3, r1
 80021f4:	497f      	ldr	r1, [pc, #508]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002206:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	fa93 f2a3 	rbit	r2, r3
 8002216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800221a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800221e:	601a      	str	r2, [r3, #0]
  return result;
 8002220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002224:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002228:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800222a:	fab3 f383 	clz	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002234:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	461a      	mov	r2, r3
 800223c:	2301      	movs	r3, #1
 800223e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe feb0 	bl	8000fa4 <HAL_GetTick>
 8002244:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	e009      	b.n	800225e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7fe feab 	bl	8000fa4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e144      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 800225e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002262:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002270:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002282:	601a      	str	r2, [r3, #0]
  return result;
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800228c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0xe2c>
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e027      	b.n	80022f8 <HAL_RCC_OscConfig+0xe7c>
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	fa93 f2a3 	rbit	r2, r3
 80022ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022fc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002300:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002304:	6011      	str	r1, [r2, #0]
 8002306:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800230a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	fa92 f1a2 	rbit	r1, r2
 8002314:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002318:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800231c:	6011      	str	r1, [r2, #0]
  return result;
 800231e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002322:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	f042 0220 	orr.w	r2, r2, #32
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	f002 021f 	and.w	r2, r2, #31
 8002338:	2101      	movs	r1, #1
 800233a:	fa01 f202 	lsl.w	r2, r1, r2
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d082      	beq.n	800224a <HAL_RCC_OscConfig+0xdce>
 8002344:	e0cf      	b.n	80024e6 <HAL_RCC_OscConfig+0x106a>
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800234e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002352:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002358:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	fa93 f2a3 	rbit	r2, r3
 8002362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002366:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800236a:	601a      	str	r2, [r3, #0]
  return result;
 800236c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002370:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002374:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002380:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	461a      	mov	r2, r3
 8002388:	2300      	movs	r3, #0
 800238a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fe0a 	bl	8000fa4 <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002394:	e009      	b.n	80023aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fe05 	bl	8000fa4 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e09e      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80023d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	095b      	lsrs	r3, r3, #5
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d104      	bne.n	80023f8 <HAL_RCC_OscConfig+0xf7c>
 80023ee:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_RCC_OscConfig+0xf78>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	e029      	b.n	8002448 <HAL_RCC_OscConfig+0xfcc>
 80023f4:	40021000 	.word	0x40021000
 80023f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002400:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	fa93 f2a3 	rbit	r2, r3
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <HAL_RCC_OscConfig+0x1078>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800244c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002450:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002454:	6011      	str	r1, [r2, #0]
 8002456:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800245a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	fa92 f1a2 	rbit	r1, r2
 8002464:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002468:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800246c:	6011      	str	r1, [r2, #0]
  return result;
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	f042 0220 	orr.w	r2, r2, #32
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	f002 021f 	and.w	r2, r2, #31
 8002488:	2101      	movs	r1, #1
 800248a:	fa01 f202 	lsl.w	r2, r1, r2
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d180      	bne.n	8002396 <HAL_RCC_OscConfig+0xf1a>
 8002494:	e027      	b.n	80024e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002496:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01e      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_RCC_OscConfig+0x1078>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10b      	bne.n	80024e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80024ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024de:	429a      	cmp	r2, r3
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	; 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e162      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b90      	ldr	r3, [pc, #576]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b8d      	ldr	r3, [pc, #564]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	498b      	ldr	r1, [pc, #556]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b89      	ldr	r3, [pc, #548]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e14a      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b82      	ldr	r3, [pc, #520]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	497f      	ldr	r1, [pc, #508]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80dc 	beq.w	8002724 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d13c      	bne.n	80025ee <HAL_RCC_ClockConfig+0xf6>
 8002574:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <HAL_RCC_ClockConfig+0xa6>
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e00f      	b.n	80025be <HAL_RCC_ClockConfig+0xc6>
 800259e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	667b      	str	r3, [r7, #100]	; 0x64
 80025ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b0:	663b      	str	r3, [r7, #96]	; 0x60
 80025b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c6:	fa92 f2a2 	rbit	r2, r2
 80025ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025ce:	fab2 f282 	clz	r2, r2
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	f042 0220 	orr.w	r2, r2, #32
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	f002 021f 	and.w	r2, r2, #31
 80025de:	2101      	movs	r1, #1
 80025e0:	fa01 f202 	lsl.w	r2, r1, r2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d17b      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0f3      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d13c      	bne.n	8002670 <HAL_RCC_ClockConfig+0x178>
 80025f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	fab3 f383 	clz	r3, r3
 800260a:	b2db      	uxtb	r3, r3
 800260c:	095b      	lsrs	r3, r3, #5
 800260e:	b2db      	uxtb	r3, r3
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d102      	bne.n	8002620 <HAL_RCC_ClockConfig+0x128>
 800261a:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e00f      	b.n	8002640 <HAL_RCC_ClockConfig+0x148>
 8002620:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	647b      	str	r3, [r7, #68]	; 0x44
 800262e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
 8002634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800263c:	4b46      	ldr	r3, [pc, #280]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002644:	63ba      	str	r2, [r7, #56]	; 0x38
 8002646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002648:	fa92 f2a2 	rbit	r2, r2
 800264c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800264e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	f042 0220 	orr.w	r2, r2, #32
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f002 021f 	and.w	r2, r2, #31
 8002660:	2101      	movs	r1, #1
 8002662:	fa01 f202 	lsl.w	r2, r1, r2
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13a      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e0b2      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
 8002670:	2302      	movs	r3, #2
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	fa93 f3a3 	rbit	r3, r3
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	095b      	lsrs	r3, r3, #5
 8002686:	b2db      	uxtb	r3, r3
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	d102      	bne.n	8002698 <HAL_RCC_ClockConfig+0x1a0>
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e00d      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1bc>
 8002698:	2302      	movs	r3, #2
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	2302      	movs	r3, #2
 80026a6:	623b      	str	r3, [r7, #32]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	61fb      	str	r3, [r7, #28]
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	2202      	movs	r2, #2
 80026b6:	61ba      	str	r2, [r7, #24]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	fa92 f2a2 	rbit	r2, r2
 80026be:	617a      	str	r2, [r7, #20]
  return result;
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e079      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 0203 	bic.w	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	491a      	ldr	r1, [pc, #104]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fc56 	bl	8000fa4 <HAL_GetTick>
 80026f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7fe fc52 	bl	8000fa4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e061      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <HAL_RCC_ClockConfig+0x260>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 020c 	and.w	r2, r3, #12
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	429a      	cmp	r2, r3
 8002722:	d1eb      	bne.n	80026fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d214      	bcs.n	800275c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4906      	ldr	r1, [pc, #24]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCC_ClockConfig+0x25c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e040      	b.n	80027d6 <HAL_RCC_ClockConfig+0x2de>
 8002754:	40022000 	.word	0x40022000
 8002758:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	491a      	ldr	r1, [pc, #104]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0308 	and.w	r3, r3, #8
 8002782:	2b00      	cmp	r3, #0
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002786:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4912      	ldr	r1, [pc, #72]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800279a:	f000 f829 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800279e:	4601      	mov	r1, r0
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCC_ClockConfig+0x2e8>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a8:	22f0      	movs	r2, #240	; 0xf0
 80027aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	60fa      	str	r2, [r7, #12]
  return result;
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	40d3      	lsrs	r3, r2
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_RCC_ClockConfig+0x2ec>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	fa21 f303 	lsr.w	r3, r1, r3
 80027c6:	4a08      	ldr	r2, [pc, #32]	; (80027e8 <HAL_RCC_ClockConfig+0x2f0>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027ca:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_RCC_ClockConfig+0x2f4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fba4 	bl	8000f1c <HAL_InitTick>
  
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3778      	adds	r7, #120	; 0x78
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40021000 	.word	0x40021000
 80027e4:	08003b40 	.word	0x08003b40
 80027e8:	20000050 	.word	0x20000050
 80027ec:	20000054 	.word	0x20000054

080027f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	2300      	movs	r3, #0
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800280a:	4b29      	ldr	r3, [pc, #164]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b04      	cmp	r3, #4
 8002818:	d002      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x30>
 800281a:	2b08      	cmp	r3, #8
 800281c:	d003      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
 800281e:	e03c      	b.n	800289a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002820:	4b24      	ldr	r3, [pc, #144]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002822:	623b      	str	r3, [r7, #32]
      break;
 8002824:	e03c      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800282c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002830:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	607a      	str	r2, [r7, #4]
  return result;
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	40d3      	lsrs	r3, r2
 8002844:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	220f      	movs	r2, #15
 8002854:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	60fa      	str	r2, [r7, #12]
  return result;
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	fab2 f282 	clz	r2, r2
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	40d3      	lsrs	r3, r2
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800286a:	5cd3      	ldrb	r3, [r2, r3]
 800286c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002878:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fb02 f303 	mul.w	r3, r2, r3
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
 8002888:	e004      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	623b      	str	r3, [r7, #32]
      break;
 8002898:	e002      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800289c:	623b      	str	r3, [r7, #32]
      break;
 800289e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a0:	6a3b      	ldr	r3, [r7, #32]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	372c      	adds	r7, #44	; 0x2c
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000
 80028b4:	007a1200 	.word	0x007a1200
 80028b8:	08003b50 	.word	0x08003b50
 80028bc:	08003b60 	.word	0x08003b60
 80028c0:	003d0900 	.word	0x003d0900

080028c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b092      	sub	sp, #72	; 0x48
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 80d4 	beq.w	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e8:	4b4e      	ldr	r3, [pc, #312]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10e      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b4b      	ldr	r3, [pc, #300]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4a4a      	ldr	r2, [pc, #296]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fe:	61d3      	str	r3, [r2, #28]
 8002900:	4b48      	ldr	r3, [pc, #288]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800290c:	2301      	movs	r3, #1
 800290e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b45      	ldr	r3, [pc, #276]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d118      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800291e:	4b42      	ldr	r3, [pc, #264]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a41      	ldr	r2, [pc, #260]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800292a:	f7fe fb3b 	bl	8000fa4 <HAL_GetTick>
 800292e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	e008      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002932:	f7fe fb37 	bl	8000fa4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d901      	bls.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e169      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002944:	4b38      	ldr	r3, [pc, #224]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002950:	4b34      	ldr	r3, [pc, #208]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800295a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 8084 	beq.w	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800296c:	429a      	cmp	r2, r3
 800296e:	d07c      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002970:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800297a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	461a      	mov	r2, r3
 800299a:	2301      	movs	r3, #1
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ae:	fab3 f383 	clz	r3, r3
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	461a      	mov	r2, r3
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029b8:	4413      	add	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	461a      	mov	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029c2:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d04b      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fae7 	bl	8000fa4 <HAL_GetTick>
 80029d6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d8:	e00a      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029da:	f7fe fae3 	bl	8000fa4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e113      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	2302      	movs	r3, #2
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	61fb      	str	r3, [r7, #28]
  return result;
 8002a08:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d108      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a1e:	4b01      	ldr	r3, [pc, #4]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	e00d      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	10908100 	.word	0x10908100
 8002a30:	2302      	movs	r3, #2
 8002a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	fa93 f3a3 	rbit	r3, r3
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	4b78      	ldr	r3, [pc, #480]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	2202      	movs	r2, #2
 8002a42:	613a      	str	r2, [r7, #16]
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	fa92 f2a2 	rbit	r2, r2
 8002a4a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	fab2 f282 	clz	r2, r2
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	f002 021f 	and.w	r2, r2, #31
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0b7      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	496a      	ldr	r1, [pc, #424]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d105      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4a65      	ldr	r2, [pc, #404]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a9c:	4b60      	ldr	r3, [pc, #384]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	f023 0203 	bic.w	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	495d      	ldr	r1, [pc, #372]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d008      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aba:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4956      	ldr	r1, [pc, #344]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ad8:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	494e      	ldr	r1, [pc, #312]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d008      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002af6:	4b4a      	ldr	r3, [pc, #296]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f023 0210 	bic.w	r2, r3, #16
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4947      	ldr	r1, [pc, #284]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b14:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b20:	493f      	ldr	r1, [pc, #252]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b32:	4b3b      	ldr	r3, [pc, #236]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f023 0220 	bic.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4938      	ldr	r1, [pc, #224]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b50:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	4930      	ldr	r1, [pc, #192]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b6e:	4b2c      	ldr	r3, [pc, #176]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4929      	ldr	r1, [pc, #164]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b8c:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	4921      	ldr	r1, [pc, #132]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	491a      	ldr	r1, [pc, #104]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	4912      	ldr	r1, [pc, #72]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	490b      	ldr	r1, [pc, #44]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3748      	adds	r7, #72	; 0x48
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000

08002c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e049      	b.n	8002cca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd ff34 	bl	8000ab8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 fa4a 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_TIM_PWM_Start+0x24>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e03c      	b.n	8002d72 <HAL_TIM_PWM_Start+0x9e>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d109      	bne.n	8002d12 <HAL_TIM_PWM_Start+0x3e>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	e02f      	b.n	8002d72 <HAL_TIM_PWM_Start+0x9e>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d109      	bne.n	8002d2c <HAL_TIM_PWM_Start+0x58>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	bf14      	ite	ne
 8002d24:	2301      	movne	r3, #1
 8002d26:	2300      	moveq	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	e022      	b.n	8002d72 <HAL_TIM_PWM_Start+0x9e>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2b0c      	cmp	r3, #12
 8002d30:	d109      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x72>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e015      	b.n	8002d72 <HAL_TIM_PWM_Start+0x9e>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b10      	cmp	r3, #16
 8002d4a:	d109      	bne.n	8002d60 <HAL_TIM_PWM_Start+0x8c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e008      	b.n	8002d72 <HAL_TIM_PWM_Start+0x9e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e097      	b.n	8002eaa <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Start+0xb6>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d88:	e023      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xfe>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xc6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	e01b      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xfe>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d104      	bne.n	8002daa <HAL_TIM_PWM_Start+0xd6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da8:	e013      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xfe>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b0c      	cmp	r3, #12
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_PWM_Start+0xe6>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002db8:	e00b      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xfe>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b10      	cmp	r3, #16
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0xf6>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc8:	e003      	b.n	8002dd2 <HAL_TIM_PWM_Start+0xfe>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2202      	movs	r2, #2
 8002dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 fcf4 	bl	80037c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a33      	ldr	r2, [pc, #204]	; (8002eb4 <HAL_TIM_PWM_Start+0x1e0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d013      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x13e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a32      	ldr	r2, [pc, #200]	; (8002eb8 <HAL_TIM_PWM_Start+0x1e4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00e      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x13e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a30      	ldr	r2, [pc, #192]	; (8002ebc <HAL_TIM_PWM_Start+0x1e8>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d009      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x13e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a2f      	ldr	r2, [pc, #188]	; (8002ec0 <HAL_TIM_PWM_Start+0x1ec>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d004      	beq.n	8002e12 <HAL_TIM_PWM_Start+0x13e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_TIM_PWM_Start+0x1f0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_PWM_Start+0x142>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <HAL_TIM_PWM_Start+0x144>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d007      	beq.n	8002e2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a20      	ldr	r2, [pc, #128]	; (8002eb4 <HAL_TIM_PWM_Start+0x1e0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x194>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3e:	d013      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x194>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a20      	ldr	r2, [pc, #128]	; (8002ec8 <HAL_TIM_PWM_Start+0x1f4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x194>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1f      	ldr	r2, [pc, #124]	; (8002ecc <HAL_TIM_PWM_Start+0x1f8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x194>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_TIM_PWM_Start+0x1e4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_PWM_Start+0x194>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIM_PWM_Start+0x1e8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d115      	bne.n	8002e94 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_TIM_PWM_Start+0x1fc>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d015      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x1d2>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d011      	beq.n	8002ea6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0201 	orr.w	r2, r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e92:	e008      	b.n	8002ea6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e000      	b.n	8002ea8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40012c00 	.word	0x40012c00
 8002eb8:	40013400 	.word	0x40013400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40014400 	.word	0x40014400
 8002ec4:	40014800 	.word	0x40014800
 8002ec8:	40000400 	.word	0x40000400
 8002ecc:	40000800 	.word	0x40000800
 8002ed0:	00010007 	.word	0x00010007

08002ed4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e0ff      	b.n	80030f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b14      	cmp	r3, #20
 8002efe:	f200 80f0 	bhi.w	80030e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f02:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f5d 	.word	0x08002f5d
 8002f0c:	080030e3 	.word	0x080030e3
 8002f10:	080030e3 	.word	0x080030e3
 8002f14:	080030e3 	.word	0x080030e3
 8002f18:	08002f9d 	.word	0x08002f9d
 8002f1c:	080030e3 	.word	0x080030e3
 8002f20:	080030e3 	.word	0x080030e3
 8002f24:	080030e3 	.word	0x080030e3
 8002f28:	08002fdf 	.word	0x08002fdf
 8002f2c:	080030e3 	.word	0x080030e3
 8002f30:	080030e3 	.word	0x080030e3
 8002f34:	080030e3 	.word	0x080030e3
 8002f38:	0800301f 	.word	0x0800301f
 8002f3c:	080030e3 	.word	0x080030e3
 8002f40:	080030e3 	.word	0x080030e3
 8002f44:	080030e3 	.word	0x080030e3
 8002f48:	08003061 	.word	0x08003061
 8002f4c:	080030e3 	.word	0x080030e3
 8002f50:	080030e3 	.word	0x080030e3
 8002f54:	080030e3 	.word	0x080030e3
 8002f58:	080030a1 	.word	0x080030a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f95a 	bl	800321c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0208 	orr.w	r2, r2, #8
 8002f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	619a      	str	r2, [r3, #24]
      break;
 8002f9a:	e0a5      	b.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 f9ca 	bl	800333c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	021a      	lsls	r2, r3, #8
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	619a      	str	r2, [r3, #24]
      break;
 8002fdc:	e084      	b.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa33 	bl	8003450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0208 	orr.w	r2, r2, #8
 8002ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0204 	bic.w	r2, r2, #4
 8003008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69d9      	ldr	r1, [r3, #28]
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	61da      	str	r2, [r3, #28]
      break;
 800301c:	e064      	b.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	4618      	mov	r0, r3
 8003026:	f000 fa9b 	bl	8003560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	021a      	lsls	r2, r3, #8
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	61da      	str	r2, [r3, #28]
      break;
 800305e:	e043      	b.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fae4 	bl	8003634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 0208 	orr.w	r2, r2, #8
 800307a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0204 	bic.w	r2, r2, #4
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800309e:	e023      	b.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fb28 	bl	80036fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	021a      	lsls	r2, r3, #8
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030e0:	e002      	b.n	80030e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
      break;
 80030e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop

080030fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3c      	ldr	r2, [pc, #240]	; (8003200 <TIM_Base_SetConfig+0x104>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d00f      	beq.n	8003134 <TIM_Base_SetConfig+0x38>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d00b      	beq.n	8003134 <TIM_Base_SetConfig+0x38>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a39      	ldr	r2, [pc, #228]	; (8003204 <TIM_Base_SetConfig+0x108>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d007      	beq.n	8003134 <TIM_Base_SetConfig+0x38>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a38      	ldr	r2, [pc, #224]	; (8003208 <TIM_Base_SetConfig+0x10c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d003      	beq.n	8003134 <TIM_Base_SetConfig+0x38>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a37      	ldr	r2, [pc, #220]	; (800320c <TIM_Base_SetConfig+0x110>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800313a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2d      	ldr	r2, [pc, #180]	; (8003200 <TIM_Base_SetConfig+0x104>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01b      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003154:	d017      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a2a      	ldr	r2, [pc, #168]	; (8003204 <TIM_Base_SetConfig+0x108>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d013      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a29      	ldr	r2, [pc, #164]	; (8003208 <TIM_Base_SetConfig+0x10c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00f      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a28      	ldr	r2, [pc, #160]	; (800320c <TIM_Base_SetConfig+0x110>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00b      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <TIM_Base_SetConfig+0x114>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a26      	ldr	r2, [pc, #152]	; (8003214 <TIM_Base_SetConfig+0x118>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d003      	beq.n	8003186 <TIM_Base_SetConfig+0x8a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0x11c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d108      	bne.n	8003198 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800318c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	4313      	orrs	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <TIM_Base_SetConfig+0x104>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00f      	beq.n	80031e4 <TIM_Base_SetConfig+0xe8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a11      	ldr	r2, [pc, #68]	; (800320c <TIM_Base_SetConfig+0x110>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00b      	beq.n	80031e4 <TIM_Base_SetConfig+0xe8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a10      	ldr	r2, [pc, #64]	; (8003210 <TIM_Base_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d007      	beq.n	80031e4 <TIM_Base_SetConfig+0xe8>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a0f      	ldr	r2, [pc, #60]	; (8003214 <TIM_Base_SetConfig+0x118>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0xe8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <TIM_Base_SetConfig+0x11c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d103      	bne.n	80031ec <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	615a      	str	r2, [r3, #20]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40012c00 	.word	0x40012c00
 8003204:	40000400 	.word	0x40000400
 8003208:	40000800 	.word	0x40000800
 800320c:	40013400 	.word	0x40013400
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800

0800321c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f023 0201 	bic.w	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0303 	bic.w	r3, r3, #3
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	f023 0302 	bic.w	r3, r3, #2
 8003268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <TIM_OC1_SetConfig+0x10c>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d00f      	beq.n	800329c <TIM_OC1_SetConfig+0x80>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2b      	ldr	r2, [pc, #172]	; (800332c <TIM_OC1_SetConfig+0x110>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00b      	beq.n	800329c <TIM_OC1_SetConfig+0x80>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a2a      	ldr	r2, [pc, #168]	; (8003330 <TIM_OC1_SetConfig+0x114>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_OC1_SetConfig+0x80>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a29      	ldr	r2, [pc, #164]	; (8003334 <TIM_OC1_SetConfig+0x118>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC1_SetConfig+0x80>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a28      	ldr	r2, [pc, #160]	; (8003338 <TIM_OC1_SetConfig+0x11c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10c      	bne.n	80032b6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0308 	bic.w	r3, r3, #8
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <TIM_OC1_SetConfig+0x10c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00f      	beq.n	80032de <TIM_OC1_SetConfig+0xc2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <TIM_OC1_SetConfig+0x110>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00b      	beq.n	80032de <TIM_OC1_SetConfig+0xc2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a19      	ldr	r2, [pc, #100]	; (8003330 <TIM_OC1_SetConfig+0x114>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <TIM_OC1_SetConfig+0xc2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <TIM_OC1_SetConfig+0x118>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d003      	beq.n	80032de <TIM_OC1_SetConfig+0xc2>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a17      	ldr	r2, [pc, #92]	; (8003338 <TIM_OC1_SetConfig+0x11c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d111      	bne.n	8003302 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	621a      	str	r2, [r3, #32]
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40013400 	.word	0x40013400
 8003330:	40014000 	.word	0x40014000
 8003334:	40014400 	.word	0x40014400
 8003338:	40014800 	.word	0x40014800

0800333c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f023 0210 	bic.w	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0320 	bic.w	r3, r3, #32
 800338a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a28      	ldr	r2, [pc, #160]	; (800343c <TIM_OC2_SetConfig+0x100>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_OC2_SetConfig+0x6c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a27      	ldr	r2, [pc, #156]	; (8003440 <TIM_OC2_SetConfig+0x104>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d10d      	bne.n	80033c4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a1d      	ldr	r2, [pc, #116]	; (800343c <TIM_OC2_SetConfig+0x100>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d00f      	beq.n	80033ec <TIM_OC2_SetConfig+0xb0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a1c      	ldr	r2, [pc, #112]	; (8003440 <TIM_OC2_SetConfig+0x104>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00b      	beq.n	80033ec <TIM_OC2_SetConfig+0xb0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a1b      	ldr	r2, [pc, #108]	; (8003444 <TIM_OC2_SetConfig+0x108>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d007      	beq.n	80033ec <TIM_OC2_SetConfig+0xb0>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <TIM_OC2_SetConfig+0x10c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d003      	beq.n	80033ec <TIM_OC2_SetConfig+0xb0>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a19      	ldr	r2, [pc, #100]	; (800344c <TIM_OC2_SetConfig+0x110>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d113      	bne.n	8003414 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033f2:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033fa:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	621a      	str	r2, [r3, #32]
}
 800342e:	bf00      	nop
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40013400 	.word	0x40013400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800

08003450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a27      	ldr	r2, [pc, #156]	; (800354c <TIM_OC3_SetConfig+0xfc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_OC3_SetConfig+0x6a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM_OC3_SetConfig+0x100>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10d      	bne.n	80034d6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	021b      	lsls	r3, r3, #8
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034d4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <TIM_OC3_SetConfig+0xfc>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00f      	beq.n	80034fe <TIM_OC3_SetConfig+0xae>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <TIM_OC3_SetConfig+0x100>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00b      	beq.n	80034fe <TIM_OC3_SetConfig+0xae>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <TIM_OC3_SetConfig+0x104>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <TIM_OC3_SetConfig+0xae>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a19      	ldr	r2, [pc, #100]	; (8003558 <TIM_OC3_SetConfig+0x108>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_OC3_SetConfig+0xae>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <TIM_OC3_SetConfig+0x10c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d113      	bne.n	8003526 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	621a      	str	r2, [r3, #32]
}
 8003540:	bf00      	nop
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40013400 	.word	0x40013400
 8003554:	40014000 	.word	0x40014000
 8003558:	40014400 	.word	0x40014400
 800355c:	40014800 	.word	0x40014800

08003560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800359a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	031b      	lsls	r3, r3, #12
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a18      	ldr	r2, [pc, #96]	; (8003620 <TIM_OC4_SetConfig+0xc0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00f      	beq.n	80035e4 <TIM_OC4_SetConfig+0x84>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <TIM_OC4_SetConfig+0xc4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <TIM_OC4_SetConfig+0x84>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a16      	ldr	r2, [pc, #88]	; (8003628 <TIM_OC4_SetConfig+0xc8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d007      	beq.n	80035e4 <TIM_OC4_SetConfig+0x84>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a15      	ldr	r2, [pc, #84]	; (800362c <TIM_OC4_SetConfig+0xcc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_OC4_SetConfig+0x84>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a14      	ldr	r2, [pc, #80]	; (8003630 <TIM_OC4_SetConfig+0xd0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d109      	bne.n	80035f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	019b      	lsls	r3, r3, #6
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40013400 	.word	0x40013400
 8003628:	40014000 	.word	0x40014000
 800362c:	40014400 	.word	0x40014400
 8003630:	40014800 	.word	0x40014800

08003634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003634:	b480      	push	{r7}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	041b      	lsls	r3, r3, #16
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a17      	ldr	r2, [pc, #92]	; (80036e8 <TIM_OC5_SetConfig+0xb4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d00f      	beq.n	80036ae <TIM_OC5_SetConfig+0x7a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a16      	ldr	r2, [pc, #88]	; (80036ec <TIM_OC5_SetConfig+0xb8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00b      	beq.n	80036ae <TIM_OC5_SetConfig+0x7a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <TIM_OC5_SetConfig+0xbc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d007      	beq.n	80036ae <TIM_OC5_SetConfig+0x7a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <TIM_OC5_SetConfig+0xc0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d003      	beq.n	80036ae <TIM_OC5_SetConfig+0x7a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <TIM_OC5_SetConfig+0xc4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d109      	bne.n	80036c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800

080036fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	051b      	lsls	r3, r3, #20
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <TIM_OC6_SetConfig+0xb8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00f      	beq.n	8003778 <TIM_OC6_SetConfig+0x7c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <TIM_OC6_SetConfig+0xbc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00b      	beq.n	8003778 <TIM_OC6_SetConfig+0x7c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a16      	ldr	r2, [pc, #88]	; (80037bc <TIM_OC6_SetConfig+0xc0>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <TIM_OC6_SetConfig+0x7c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a15      	ldr	r2, [pc, #84]	; (80037c0 <TIM_OC6_SetConfig+0xc4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_OC6_SetConfig+0x7c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a14      	ldr	r2, [pc, #80]	; (80037c4 <TIM_OC6_SetConfig+0xc8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d109      	bne.n	800378c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	029b      	lsls	r3, r3, #10
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40013400 	.word	0x40013400
 80037bc:	40014000 	.word	0x40014000
 80037c0:	40014400 	.word	0x40014400
 80037c4:	40014800 	.word	0x40014800

080037c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2201      	movs	r2, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	43db      	mvns	r3, r3
 80037ea:	401a      	ands	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6a1a      	ldr	r2, [r3, #32]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003800:	431a      	orrs	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
	...

08003814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003828:	2302      	movs	r3, #2
 800382a:	e063      	b.n	80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a2b      	ldr	r2, [pc, #172]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d108      	bne.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a1b      	ldr	r2, [pc, #108]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d018      	beq.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389e:	d013      	beq.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00e      	beq.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a17      	ldr	r2, [pc, #92]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d009      	beq.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a13      	ldr	r2, [pc, #76]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10c      	bne.n	80038e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40013400 	.word	0x40013400
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40014000 	.word	0x40014000

08003914 <abort>:
 8003914:	b508      	push	{r3, lr}
 8003916:	2006      	movs	r0, #6
 8003918:	f000 f834 	bl	8003984 <raise>
 800391c:	2001      	movs	r0, #1
 800391e:	f7fd f961 	bl	8000be4 <_exit>

08003922 <memset>:
 8003922:	4402      	add	r2, r0
 8003924:	4603      	mov	r3, r0
 8003926:	4293      	cmp	r3, r2
 8003928:	d100      	bne.n	800392c <memset+0xa>
 800392a:	4770      	bx	lr
 800392c:	f803 1b01 	strb.w	r1, [r3], #1
 8003930:	e7f9      	b.n	8003926 <memset+0x4>

08003932 <_raise_r>:
 8003932:	291f      	cmp	r1, #31
 8003934:	b538      	push	{r3, r4, r5, lr}
 8003936:	4604      	mov	r4, r0
 8003938:	460d      	mov	r5, r1
 800393a:	d904      	bls.n	8003946 <_raise_r+0x14>
 800393c:	2316      	movs	r3, #22
 800393e:	6003      	str	r3, [r0, #0]
 8003940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003948:	b112      	cbz	r2, 8003950 <_raise_r+0x1e>
 800394a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800394e:	b94b      	cbnz	r3, 8003964 <_raise_r+0x32>
 8003950:	4620      	mov	r0, r4
 8003952:	f000 f831 	bl	80039b8 <_getpid_r>
 8003956:	462a      	mov	r2, r5
 8003958:	4601      	mov	r1, r0
 800395a:	4620      	mov	r0, r4
 800395c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003960:	f000 b818 	b.w	8003994 <_kill_r>
 8003964:	2b01      	cmp	r3, #1
 8003966:	d00a      	beq.n	800397e <_raise_r+0x4c>
 8003968:	1c59      	adds	r1, r3, #1
 800396a:	d103      	bne.n	8003974 <_raise_r+0x42>
 800396c:	2316      	movs	r3, #22
 800396e:	6003      	str	r3, [r0, #0]
 8003970:	2001      	movs	r0, #1
 8003972:	e7e7      	b.n	8003944 <_raise_r+0x12>
 8003974:	2400      	movs	r4, #0
 8003976:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800397a:	4628      	mov	r0, r5
 800397c:	4798      	blx	r3
 800397e:	2000      	movs	r0, #0
 8003980:	e7e0      	b.n	8003944 <_raise_r+0x12>
	...

08003984 <raise>:
 8003984:	4b02      	ldr	r3, [pc, #8]	; (8003990 <raise+0xc>)
 8003986:	4601      	mov	r1, r0
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f7ff bfd2 	b.w	8003932 <_raise_r>
 800398e:	bf00      	nop
 8003990:	200000a8 	.word	0x200000a8

08003994 <_kill_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	4d07      	ldr	r5, [pc, #28]	; (80039b4 <_kill_r+0x20>)
 8003998:	2300      	movs	r3, #0
 800399a:	4604      	mov	r4, r0
 800399c:	4608      	mov	r0, r1
 800399e:	4611      	mov	r1, r2
 80039a0:	602b      	str	r3, [r5, #0]
 80039a2:	f7fd f90f 	bl	8000bc4 <_kill>
 80039a6:	1c43      	adds	r3, r0, #1
 80039a8:	d102      	bne.n	80039b0 <_kill_r+0x1c>
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	b103      	cbz	r3, 80039b0 <_kill_r+0x1c>
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
 80039b2:	bf00      	nop
 80039b4:	2000026c 	.word	0x2000026c

080039b8 <_getpid_r>:
 80039b8:	f7fd b8fc 	b.w	8000bb4 <_getpid>

080039bc <__errno>:
 80039bc:	4b01      	ldr	r3, [pc, #4]	; (80039c4 <__errno+0x8>)
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	200000a8 	.word	0x200000a8

080039c8 <__libc_init_array>:
 80039c8:	b570      	push	{r4, r5, r6, lr}
 80039ca:	4d0d      	ldr	r5, [pc, #52]	; (8003a00 <__libc_init_array+0x38>)
 80039cc:	4c0d      	ldr	r4, [pc, #52]	; (8003a04 <__libc_init_array+0x3c>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	2600      	movs	r6, #0
 80039d4:	42a6      	cmp	r6, r4
 80039d6:	d109      	bne.n	80039ec <__libc_init_array+0x24>
 80039d8:	4d0b      	ldr	r5, [pc, #44]	; (8003a08 <__libc_init_array+0x40>)
 80039da:	4c0c      	ldr	r4, [pc, #48]	; (8003a0c <__libc_init_array+0x44>)
 80039dc:	f000 f818 	bl	8003a10 <_init>
 80039e0:	1b64      	subs	r4, r4, r5
 80039e2:	10a4      	asrs	r4, r4, #2
 80039e4:	2600      	movs	r6, #0
 80039e6:	42a6      	cmp	r6, r4
 80039e8:	d105      	bne.n	80039f6 <__libc_init_array+0x2e>
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f0:	4798      	blx	r3
 80039f2:	3601      	adds	r6, #1
 80039f4:	e7ee      	b.n	80039d4 <__libc_init_array+0xc>
 80039f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039fa:	4798      	blx	r3
 80039fc:	3601      	adds	r6, #1
 80039fe:	e7f2      	b.n	80039e6 <__libc_init_array+0x1e>
 8003a00:	08003b70 	.word	0x08003b70
 8003a04:	08003b70 	.word	0x08003b70
 8003a08:	08003b70 	.word	0x08003b70
 8003a0c:	08003b74 	.word	0x08003b74

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
