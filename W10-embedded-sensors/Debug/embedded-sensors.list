
embedded-sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009248  08009248  00019248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800962c  0800962c  000202ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800962c  0800962c  000202ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800962c  0800962c  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800962c  0800962c  0001962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  08009634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202ec  2**0
                  CONTENTS
 10 .bss          000005cc  200002ec  200002ec  000202ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008b8  200008b8  000202ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010d43  00000000  00000000  0002035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000307b  00000000  00000000  000310a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000fd0  00000000  00000000  00034120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000bf1  00000000  00000000  000350f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003d671  00000000  00000000  00035ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000150c5  00000000  00000000  00073352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eaee5  00000000  00000000  00088417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050e4  00000000  00000000  001732fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  001783e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002ec 	.word	0x200002ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800922c 	.word	0x0800922c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f0 	.word	0x200002f0
 80001cc:	0800922c 	.word	0x0800922c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bac:	b0a6      	sub	sp, #152	; 0x98
 8000bae:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb0:	f000 fd42 	bl	8001638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb4:	f000 f8b0 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb8:	f000 f9b0 	bl	8000f1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bbc:	f000 f90e 	bl	8000ddc <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bc0:	f000 f94c 	bl	8000e5c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000bc4:	f000 f988 	bl	8000ed8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000bc8:	f004 f9aa 	bl	8004f20 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 8000bcc:	f004 f8d2 	bl	8004d74 <BSP_ACCELERO_Init>


  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	494c      	ldr	r1, [pc, #304]	; (8000d04 <main+0x15c>)
 8000bd4:	2004      	movs	r0, #4
 8000bd6:	f000 fa25 	bl	8001024 <SerialInitialise>
  uint8_t string_to_send[64] = "This is a string !\r\n";
 8000bda:	4b4b      	ldr	r3, [pc, #300]	; (8000d08 <main+0x160>)
 8000bdc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000be0:	461d      	mov	r5, r3
 8000be2:	6828      	ldr	r0, [r5, #0]
 8000be4:	6869      	ldr	r1, [r5, #4]
 8000be6:	68aa      	ldr	r2, [r5, #8]
 8000be8:	68eb      	ldr	r3, [r5, #12]
 8000bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bec:	6928      	ldr	r0, [r5, #16]
 8000bee:	6020      	str	r0, [r4, #0]
 8000bf0:	7d2b      	ldrb	r3, [r5, #20]
 8000bf2:	7123      	strb	r3, [r4, #4]
 8000bf4:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8000bf8:	222b      	movs	r2, #43	; 0x2b
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f006 fa1c 	bl	800703a <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fa40 	bl	800508c <BSP_GYRO_GetXYZ>
	  BSP_ACCELERO_GetXYZ(&acc_values[0]);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4618      	mov	r0, r3
 8000c12:	f004 f971 	bl	8004ef8 <BSP_ACCELERO_GetXYZ>

	  float_acc_values[0] = (float)acc_values[0] / 1500.;
 8000c16:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c1a:	ee07 3a90 	vmov	s15, r3
 8000c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c22:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8000d0c <main+0x164>
 8000c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c2a:	edc7 7a04 	vstr	s15, [r7, #16]
	  float_acc_values[1] = (float)acc_values[1] / 1500.;
 8000c2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c3a:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000d0c <main+0x164>
 8000c3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c42:	edc7 7a05 	vstr	s15, [r7, #20]
	  float_acc_values[2] = (float)acc_values[2] / 1500.;
 8000c46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000c4a:	ee07 3a90 	vmov	s15, r3
 8000c4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c52:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8000d0c <main+0x164>
 8000c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c5a:	edc7 7a06 	vstr	s15, [r7, #24]

	  sprintf(string_to_send, "%0.6f,%0.6f,%0.6f,%0.3f,%0.3f,%0.3f\r\n", gyro_values[0]/20000, gyro_values[1]/20000, gyro_values[2]/20000,
 8000c5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000c62:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000d10 <main+0x168>
 8000c66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c6a:	ee16 0a90 	vmov	r0, s13
 8000c6e:	f7ff fc6b 	bl	8000548 <__aeabi_f2d>
 8000c72:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000c76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c7a:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000d10 <main+0x168>
 8000c7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c82:	ee16 0a90 	vmov	r0, s13
 8000c86:	f7ff fc5f 	bl	8000548 <__aeabi_f2d>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c92:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000d10 <main+0x168>
 8000c96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000c9a:	ee16 0a90 	vmov	r0, s13
 8000c9e:	f7ff fc53 	bl	8000548 <__aeabi_f2d>
 8000ca2:	4680      	mov	r8, r0
 8000ca4:	4689      	mov	r9, r1
			  float_acc_values[0], float_acc_values[1], float_acc_values[2]);
 8000ca6:	693b      	ldr	r3, [r7, #16]
	  sprintf(string_to_send, "%0.6f,%0.6f,%0.6f,%0.3f,%0.3f,%0.3f\r\n", gyro_values[0]/20000, gyro_values[1]/20000, gyro_values[2]/20000,
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fc4d 	bl	8000548 <__aeabi_f2d>
 8000cae:	4682      	mov	sl, r0
 8000cb0:	468b      	mov	fp, r1
			  float_acc_values[0], float_acc_values[1], float_acc_values[2]);
 8000cb2:	697b      	ldr	r3, [r7, #20]
	  sprintf(string_to_send, "%0.6f,%0.6f,%0.6f,%0.3f,%0.3f,%0.3f\r\n", gyro_values[0]/20000, gyro_values[1]/20000, gyro_values[2]/20000,
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fc47 	bl	8000548 <__aeabi_f2d>
 8000cba:	e9c7 0100 	strd	r0, r1, [r7]
			  float_acc_values[0], float_acc_values[1], float_acc_values[2]);
 8000cbe:	69bb      	ldr	r3, [r7, #24]
	  sprintf(string_to_send, "%0.6f,%0.6f,%0.6f,%0.3f,%0.3f,%0.3f\r\n", gyro_values[0]/20000, gyro_values[1]/20000, gyro_values[2]/20000,
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fc41 	bl	8000548 <__aeabi_f2d>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000cd2:	ed97 7b00 	vldr	d7, [r7]
 8000cd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000cda:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8000cde:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8000ce2:	e9cd 4500 	strd	r4, r5, [sp]
 8000ce6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cea:	490a      	ldr	r1, [pc, #40]	; (8000d14 <main+0x16c>)
 8000cec:	f006 f942 	bl	8006f74 <siprintf>
	  SerialOutputString(string_to_send, &USART1_PORT);
 8000cf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cf4:	4903      	ldr	r1, [pc, #12]	; (8000d04 <main+0x15c>)
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 fa21 	bl	800113e <SerialOutputString>

	  HAL_Delay(10);
 8000cfc:	200a      	movs	r0, #10
 8000cfe:	f000 fd01 	bl	8001704 <HAL_Delay>
  {
 8000d02:	e77e      	b.n	8000c02 <main+0x5a>
 8000d04:	20000000 	.word	0x20000000
 8000d08:	08009270 	.word	0x08009270
 8000d0c:	44bb8000 	.word	0x44bb8000
 8000d10:	469c4000 	.word	0x469c4000
 8000d14:	08009248 	.word	0x08009248

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09e      	sub	sp, #120	; 0x78
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d22:	2228      	movs	r2, #40	; 0x28
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 f987 	bl	800703a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	223c      	movs	r2, #60	; 0x3c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f006 f979 	bl	800703a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d4c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d56:	2301      	movs	r3, #1
 8000d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d66:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d6c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d6e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 ff86 	bl	8002c84 <HAL_RCC_OscConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d7e:	f000 f94b 	bl	8001018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d82:	230f      	movs	r3, #15
 8000d84:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d86:	2302      	movs	r3, #2
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f002 ffae 	bl	8003d00 <HAL_RCC_ClockConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000daa:	f000 f935 	bl	8001018 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <SystemClock_Config+0xc0>)
 8000db0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 f984 	bl	80040cc <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dca:	f000 f925 	bl	8001018 <Error_Handler>
  }
}
 8000dce:	bf00      	nop
 8000dd0:	3778      	adds	r7, #120	; 0x78
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	00020020 	.word	0x00020020

08000ddc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_I2C1_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000de8:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <MX_I2C1_Init+0x7c>)
 8000dea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dec:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e16:	480e      	ldr	r0, [pc, #56]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e18:	f001 f818 	bl	8001e4c <HAL_I2C_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e22:	f000 f8f9 	bl	8001018 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e26:	2100      	movs	r1, #0
 8000e28:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e2a:	f001 fdc1 	bl	80029b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e34:	f000 f8f0 	bl	8001018 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2C1_Init+0x74>)
 8000e3c:	f001 fe03 	bl	8002a46 <HAL_I2CEx_ConfigDigitalFilter>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f8e7 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000308 	.word	0x20000308
 8000e54:	40005400 	.word	0x40005400
 8000e58:	2000090e 	.word	0x2000090e

08000e5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_SPI1_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e76:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e92:	2208      	movs	r2, #8
 8000e94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000eaa:	2207      	movs	r2, #7
 8000eac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_SPI1_Init+0x74>)
 8000ebc:	f003 fab6 	bl	800442c <HAL_SPI_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 f8a7 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000035c 	.word	0x2000035c
 8000ed4:	40013000 	.word	0x40013000

08000ed8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000edc:	4b0d      	ldr	r3, [pc, #52]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <MX_USB_PCD_Init+0x40>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000eea:	2202      	movs	r2, #2
 8000eec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_USB_PCD_Init+0x3c>)
 8000f02:	f001 fdec 	bl	8002ade <HAL_PCD_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000f0c:	f000 f884 	bl	8001018 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003c0 	.word	0x200003c0
 8000f18:	40005c00 	.word	0x40005c00

08000f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f32:	4b37      	ldr	r3, [pc, #220]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a36      	ldr	r2, [pc, #216]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f6c:	6153      	str	r3, [r2, #20]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	6153      	str	r3, [r2, #20]
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f9c:	6153      	str	r3, [r2, #20]
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_GPIO_Init+0xf4>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000faa:	2200      	movs	r2, #0
 8000fac:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <MX_GPIO_Init+0xf8>)
 8000fb2:	f000 ff33 	bl	8001e1c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000fb6:	2337      	movs	r3, #55	; 0x37
 8000fb8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fba:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <MX_GPIO_Init+0xf8>)
 8000fcc:	f000 fcd0 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fd0:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000fd4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480a      	ldr	r0, [pc, #40]	; (8001014 <MX_GPIO_Init+0xf8>)
 8000fea:	f000 fcc1 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001004:	f000 fcb4 	bl	8001970 <HAL_GPIO_Init>

}
 8001008:	bf00      	nop
 800100a:	3728      	adds	r7, #40	; 0x28
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40021000 	.word	0x40021000
 8001014:	48001000 	.word	0x48001000

08001018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101c:	b672      	cpsid	i
}
 800101e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001020:	e7fe      	b.n	8001020 <Error_Handler+0x8>
	...

08001024 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001024:	b480      	push	{r7}
 8001026:	b087      	sub	sp, #28
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <SerialInitialise+0xe4>)
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	4a33      	ldr	r2, [pc, #204]	; (8001108 <SerialInitialise+0xe4>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <SerialInitialise+0xe4>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <SerialInitialise+0xe4>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d106      	bne.n	8001064 <SerialInitialise+0x40>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <SerialInitialise+0xe4>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a2b      	ldr	r2, [pc, #172]	; (8001108 <SerialInitialise+0xe4>)
 800105c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001060:	6153      	str	r3, [r2, #20]
		break;
 8001062:	e000      	b.n	8001066 <SerialInitialise+0x42>
	default:
		break;
 8001064:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800106e:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001078:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	69d9      	ldr	r1, [r3, #28]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d821      	bhi.n	80010ea <SerialInitialise+0xc6>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <SerialInitialise+0x88>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010c1 	.word	0x080010c1
 80010b0:	080010c9 	.word	0x080010c9
 80010b4:	080010d1 	.word	0x080010d1
 80010b8:	080010d9 	.word	0x080010d9
 80010bc:	080010e1 	.word	0x080010e1
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2246      	movs	r2, #70	; 0x46
 80010c4:	801a      	strh	r2, [r3, #0]
		break;
 80010c6:	e010      	b.n	80010ea <SerialInitialise+0xc6>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	2246      	movs	r2, #70	; 0x46
 80010cc:	801a      	strh	r2, [r3, #0]
		break;
 80010ce:	e00c      	b.n	80010ea <SerialInitialise+0xc6>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2246      	movs	r2, #70	; 0x46
 80010d4:	801a      	strh	r2, [r3, #0]
		break;
 80010d6:	e008      	b.n	80010ea <SerialInitialise+0xc6>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2246      	movs	r2, #70	; 0x46
 80010dc:	801a      	strh	r2, [r3, #0]
		break;
 80010de:	e004      	b.n	80010ea <SerialInitialise+0xc6>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80010e6:	801a      	strh	r2, [r3, #0]
		break;
 80010e8:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f042 020d 	orr.w	r2, r2, #13
 80010f8:	601a      	str	r2, [r3, #0]
}
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000

0800110c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001118:	bf00      	nop
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001124:	2b00      	cmp	r3, #0
 8001126:	d0f8      	beq.n	800111a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	b292      	uxth	r2, r2
 8001130:	801a      	strh	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800113e:	b580      	push	{r7, lr}
 8001140:	b084      	sub	sp, #16
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800114c:	e00b      	b.n	8001166 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffd9 	bl	800110c <SerialOutputChar>
		counter++;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3301      	adds	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
		pt++;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3301      	adds	r3, #1
 8001164:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1ef      	bne.n	800114e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	4798      	blx	r3
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_MspInit+0x44>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <HAL_MspInit+0x44>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_MspInit+0x44>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_MspInit+0x44>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011be:	2007      	movs	r0, #7
 80011c0:	f000 fb94 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a17      	ldr	r2, [pc, #92]	; (800124c <HAL_I2C_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d127      	bne.n	8001242 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_I2C_MspInit+0x80>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a16      	ldr	r2, [pc, #88]	; (8001250 <HAL_I2C_MspInit+0x80>)
 80011f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011fc:	6153      	str	r3, [r2, #20]
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_I2C_MspInit+0x80>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800120a:	23c0      	movs	r3, #192	; 0xc0
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120e:	2312      	movs	r3, #18
 8001210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001216:	2303      	movs	r3, #3
 8001218:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800121a:	2304      	movs	r3, #4
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <HAL_I2C_MspInit+0x84>)
 8001226:	f000 fba3 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800122a:	4b09      	ldr	r3, [pc, #36]	; (8001250 <HAL_I2C_MspInit+0x80>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_I2C_MspInit+0x80>)
 8001230:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001234:	61d3      	str	r3, [r2, #28]
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_I2C_MspInit+0x80>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3728      	adds	r7, #40	; 0x28
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40005400 	.word	0x40005400
 8001250:	40021000 	.word	0x40021000
 8001254:	48000400 	.word	0x48000400

08001258 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <HAL_I2C_MspDeInit+0x38>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10d      	bne.n	8001286 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_I2C_MspDeInit+0x3c>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_I2C_MspDeInit+0x3c>)
 8001270:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001274:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <HAL_I2C_MspDeInit+0x40>)
 800127a:	f000 fcf3 	bl	8001c64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_I2C_MspDeInit+0x40>)
 8001282:	f000 fcef 	bl	8001c64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40005400 	.word	0x40005400
 8001294:	40021000 	.word	0x40021000
 8001298:	48000400 	.word	0x48000400

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	; (8001318 <HAL_SPI_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d128      	bne.n	8001310 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_SPI_MspInit+0x80>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	4a16      	ldr	r2, [pc, #88]	; (800131c <HAL_SPI_MspInit+0x80>)
 80012c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c8:	6193      	str	r3, [r2, #24]
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_SPI_MspInit+0x80>)
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_SPI_MspInit+0x80>)
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_SPI_MspInit+0x80>)
 80012dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e0:	6153      	str	r3, [r2, #20]
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_SPI_MspInit+0x80>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80012ee:	23e0      	movs	r3, #224	; 0xe0
 80012f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012fe:	2305      	movs	r3, #5
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130c:	f000 fb30 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40013000 	.word	0x40013000
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a08      	ldr	r2, [pc, #32]	; (8001350 <HAL_SPI_MspDeInit+0x30>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d10a      	bne.n	8001348 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_SPI_MspDeInit+0x34>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_SPI_MspDeInit+0x34>)
 8001338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 800133e:	21e0      	movs	r1, #224	; 0xe0
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f000 fc8e 	bl	8001c64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40013000 	.word	0x40013000
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a18      	ldr	r2, [pc, #96]	; (80013d8 <HAL_PCD_MspInit+0x80>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d129      	bne.n	80013ce <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_PCD_MspInit+0x84>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <HAL_PCD_MspInit+0x84>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	6153      	str	r3, [r2, #20]
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_PCD_MspInit+0x84>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001392:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80013a4:	230e      	movs	r3, #14
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f000 fadd 	bl	8001970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <HAL_PCD_MspInit+0x84>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a08      	ldr	r2, [pc, #32]	; (80013dc <HAL_PCD_MspInit+0x84>)
 80013bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013c0:	61d3      	str	r3, [r2, #28]
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_PCD_MspInit+0x84>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3728      	adds	r7, #40	; 0x28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005c00 	.word	0x40005c00
 80013dc:	40021000 	.word	0x40021000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 f94a 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	return 1;
 8001438:	2301      	movs	r3, #1
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <_kill>:

int _kill(int pid, int sig)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800144e:	f005 fe47 	bl	80070e0 <__errno>
 8001452:	4603      	mov	r3, r0
 8001454:	2216      	movs	r2, #22
 8001456:	601a      	str	r2, [r3, #0]
	return -1;
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <_exit>:

void _exit (int status)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800146c:	f04f 31ff 	mov.w	r1, #4294967295
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffe7 	bl	8001444 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001476:	e7fe      	b.n	8001476 <_exit+0x12>

08001478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e00a      	b.n	80014a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800148a:	f3af 8000 	nop.w
 800148e:	4601      	mov	r1, r0
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	1c5a      	adds	r2, r3, #1
 8001494:	60ba      	str	r2, [r7, #8]
 8001496:	b2ca      	uxtb	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbf0      	blt.n	800148a <_read+0x12>
	}

return len;
 80014a8:	687b      	ldr	r3, [r7, #4]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e009      	b.n	80014d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	60ba      	str	r2, [r7, #8]
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697a      	ldr	r2, [r7, #20]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbf1      	blt.n	80014c4 <_write+0x12>
	}
	return len;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_close>:

int _close(int file)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
	return -1;
 80014f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001512:	605a      	str	r2, [r3, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_isatty>:

int _isatty(int file)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
	return 1;
 800152a:	2301      	movs	r3, #1
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
	return 0;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800155c:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <_sbrk+0x5c>)
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <_sbrk+0x60>)
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001568:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d102      	bne.n	8001576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <_sbrk+0x64>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <_sbrk+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	429a      	cmp	r2, r3
 8001582:	d207      	bcs.n	8001594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001584:	f005 fdac 	bl	80070e0 <__errno>
 8001588:	4603      	mov	r3, r0
 800158a:	220c      	movs	r2, #12
 800158c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158e:	f04f 33ff 	mov.w	r3, #4294967295
 8001592:	e009      	b.n	80015a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159a:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <_sbrk+0x64>)
 80015a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015a6:	68fb      	ldr	r3, [r7, #12]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	2000a000 	.word	0x2000a000
 80015b4:	00000400 	.word	0x00000400
 80015b8:	200006ac 	.word	0x200006ac
 80015bc:	200008b8 	.word	0x200008b8

080015c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <SystemInit+0x20>)
 80015c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ca:	4a05      	ldr	r2, [pc, #20]	; (80015e0 <SystemInit+0x20>)
 80015cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800161c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e8:	f7ff ffea 	bl	80015c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ec:	480c      	ldr	r0, [pc, #48]	; (8001620 <LoopForever+0x6>)
  ldr r1, =_edata
 80015ee:	490d      	ldr	r1, [pc, #52]	; (8001624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f0:	4a0d      	ldr	r2, [pc, #52]	; (8001628 <LoopForever+0xe>)
  movs r3, #0
 80015f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f4:	e002      	b.n	80015fc <LoopCopyDataInit>

080015f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fa:	3304      	adds	r3, #4

080015fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001600:	d3f9      	bcc.n	80015f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001604:	4c0a      	ldr	r4, [pc, #40]	; (8001630 <LoopForever+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001608:	e001      	b.n	800160e <LoopFillZerobss>

0800160a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800160c:	3204      	adds	r2, #4

0800160e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800160e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001610:	d3fb      	bcc.n	800160a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001612:	f005 fd6b 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001616:	f7ff fac7 	bl	8000ba8 <main>

0800161a <LoopForever>:

LoopForever:
    b LoopForever
 800161a:	e7fe      	b.n	800161a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800161c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001624:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8001628:	08009634 	.word	0x08009634
  ldr r2, =_sbss
 800162c:	200002ec 	.word	0x200002ec
  ldr r4, =_ebss
 8001630:	200008b8 	.word	0x200008b8

08001634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_2_IRQHandler>
	...

08001638 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x28>)
 8001642:	f043 0310 	orr.w	r3, r3, #16
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f94f 	bl	80018ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fd98 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40022000 	.word	0x40022000

08001664 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 f967 	bl	8001956 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 f92f 	bl	8001902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000040 	.word	0x20000040
 80016bc:	20000048 	.word	0x20000048
 80016c0:	20000044 	.word	0x20000044

080016c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000048 	.word	0x20000048
 80016e8:	200006b0 	.word	0x200006b0

080016ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200006b0 	.word	0x200006b0

08001704 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_Delay+0x44>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000048 	.word	0x20000048

0800174c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001768:	4013      	ands	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x44>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <__NVIC_GetPriorityGrouping+0x18>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	0a1b      	lsrs	r3, r3, #8
 800179e:	f003 0307 	and.w	r3, r3, #7
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	db0b      	blt.n	80017da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	f003 021f 	and.w	r2, r3, #31
 80017c8:	4907      	ldr	r1, [pc, #28]	; (80017e8 <__NVIC_EnableIRQ+0x38>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	095b      	lsrs	r3, r3, #5
 80017d0:	2001      	movs	r0, #1
 80017d2:	fa00 f202 	lsl.w	r2, r0, r2
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
	...

080018a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b8:	d301      	bcc.n	80018be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ba:	2301      	movs	r3, #1
 80018bc:	e00f      	b.n	80018de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018be:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <SysTick_Config+0x40>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c6:	210f      	movs	r1, #15
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	f7ff ff8e 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <SysTick_Config+0x40>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <SysTick_Config+0x40>)
 80018d8:	2207      	movs	r2, #7
 80018da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	e000e010 	.word	0xe000e010

080018ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff ff29 	bl	800174c <__NVIC_SetPriorityGrouping>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	4603      	mov	r3, r0
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001914:	f7ff ff3e 	bl	8001794 <__NVIC_GetPriorityGrouping>
 8001918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	6978      	ldr	r0, [r7, #20]
 8001920:	f7ff ff8e 	bl	8001840 <NVIC_EncodePriority>
 8001924:	4602      	mov	r2, r0
 8001926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff5d 	bl	80017ec <__NVIC_SetPriority>
}
 8001932:	bf00      	nop
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff31 	bl	80017b0 <__NVIC_EnableIRQ>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffa2 	bl	80018a8 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e154      	b.n	8001c2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8146 	beq.w	8001c24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	f003 0201 	and.w	r2, r3, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	6939      	ldr	r1, [r7, #16]
 8001a9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0203 	and.w	r2, r3, #3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f000 80a0 	beq.w	8001c24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001afc:	4a53      	ldr	r2, [pc, #332]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b26:	d019      	beq.n	8001b5c <HAL_GPIO_Init+0x1ec>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a49      	ldr	r2, [pc, #292]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_GPIO_Init+0x1e8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a48      	ldr	r2, [pc, #288]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1e4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a47      	ldr	r2, [pc, #284]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1e0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a46      	ldr	r2, [pc, #280]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1dc>
 8001b48:	2304      	movs	r3, #4
 8001b4a:	e008      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	e006      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b50:	2303      	movs	r3, #3
 8001b52:	e004      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e002      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bca:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf4:	4a1a      	ldr	r2, [pc, #104]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	3301      	adds	r3, #1
 8001c28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f aea3 	bne.w	8001980 <HAL_GPIO_Init+0x10>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010000 	.word	0x40010000
 8001c50:	48000400 	.word	0x48000400
 8001c54:	48000800 	.word	0x48000800
 8001c58:	48000c00 	.word	0x48000c00
 8001c5c:	48001000 	.word	0x48001000
 8001c60:	40010400 	.word	0x40010400

08001c64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c72:	e0b8      	b.n	8001de6 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c74:	2201      	movs	r2, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ab 	beq.w	8001de0 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <HAL_GPIO_DeInit+0x1a0>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	220f      	movs	r2, #15
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cb2:	d019      	beq.n	8001ce8 <HAL_GPIO_DeInit+0x84>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a54      	ldr	r2, [pc, #336]	; (8001e08 <HAL_GPIO_DeInit+0x1a4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_GPIO_DeInit+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a53      	ldr	r2, [pc, #332]	; (8001e0c <HAL_GPIO_DeInit+0x1a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_DeInit+0x7c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a52      	ldr	r2, [pc, #328]	; (8001e10 <HAL_GPIO_DeInit+0x1ac>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_DeInit+0x78>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a51      	ldr	r2, [pc, #324]	; (8001e14 <HAL_GPIO_DeInit+0x1b0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_DeInit+0x74>
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e008      	b.n	8001cea <HAL_GPIO_DeInit+0x86>
 8001cd8:	2305      	movs	r3, #5
 8001cda:	e006      	b.n	8001cea <HAL_GPIO_DeInit+0x86>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e004      	b.n	8001cea <HAL_GPIO_DeInit+0x86>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_DeInit+0x86>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_GPIO_DeInit+0x86>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	f002 0203 	and.w	r2, r2, #3
 8001cf0:	0092      	lsls	r2, r2, #2
 8001cf2:	4093      	lsls	r3, r2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d132      	bne.n	8001d60 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001cfa:	4b47      	ldr	r3, [pc, #284]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	4945      	ldr	r1, [pc, #276]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d04:	4013      	ands	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4941      	ldr	r1, [pc, #260]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001d16:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d18:	68da      	ldr	r2, [r3, #12]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	493e      	ldr	r1, [pc, #248]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001d24:	4b3c      	ldr	r3, [pc, #240]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	493a      	ldr	r1, [pc, #232]	; (8001e18 <HAL_GPIO_DeInit+0x1b4>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d42:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <HAL_GPIO_DeInit+0x1a0>)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43da      	mvns	r2, r3
 8001d52:	482c      	ldr	r0, [pc, #176]	; (8001e04 <HAL_GPIO_DeInit+0x1a0>)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	400a      	ands	r2, r1
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	2103      	movs	r1, #3
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	401a      	ands	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	08d2      	lsrs	r2, r2, #3
 8001d96:	4019      	ands	r1, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3208      	adds	r2, #8
 8001d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2103      	movs	r1, #3
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	2101      	movs	r1, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	401a      	ands	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa22 f303 	lsr.w	r3, r2, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f47f af40 	bne.w	8001c74 <HAL_GPIO_DeInit+0x10>
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40010000 	.word	0x40010000
 8001e08:	48000400 	.word	0x48000400
 8001e0c:	48000800 	.word	0x48000800
 8001e10:	48000c00 	.word	0x48000c00
 8001e14:	48001000 	.word	0x48001000
 8001e18:	40010400 	.word	0x40010400

08001e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e2c:	787b      	ldrb	r3, [r7, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e32:	887a      	ldrh	r2, [r7, #2]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e081      	b.n	8001f62 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d106      	bne.n	8001e78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff f9ac 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2224      	movs	r2, #36	; 0x24
 8001e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e006      	b.n	8001ed4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ed2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d104      	bne.n	8001ee6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691a      	ldr	r2, [r3, #16]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69d9      	ldr	r1, [r3, #28]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a1a      	ldr	r2, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e021      	b.n	8001fc0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0201 	bic.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff f95f 	bl	8001258 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af02      	add	r7, sp, #8
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	817b      	strh	r3, [r7, #10]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	813b      	strh	r3, [r7, #8]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	f040 80f9 	bne.w	80021e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_I2C_Mem_Write+0x34>
 8001ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002002:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0ed      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800200e:	2b01      	cmp	r3, #1
 8002010:	d101      	bne.n	8002016 <HAL_I2C_Mem_Write+0x4e>
 8002012:	2302      	movs	r3, #2
 8002014:	e0e6      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800201e:	f7ff fb65 	bl	80016ec <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2319      	movs	r3, #25
 800202a:	2201      	movs	r2, #1
 800202c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f000 fad1 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0d1      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2221      	movs	r2, #33	; 0x21
 8002044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a3a      	ldr	r2, [r7, #32]
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002060:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002068:	88f8      	ldrh	r0, [r7, #6]
 800206a:	893a      	ldrh	r2, [r7, #8]
 800206c:	8979      	ldrh	r1, [r7, #10]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	4603      	mov	r3, r0
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f000 f9e1 	bl	8002440 <I2C_RequestMemoryWrite>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0a9      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	2bff      	cmp	r3, #255	; 0xff
 8002098:	d90e      	bls.n	80020b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 fc4b 	bl	800294c <I2C_TransferConfig>
 80020b6:	e00f      	b.n	80020d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	8979      	ldrh	r1, [r7, #10]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 fc3a 	bl	800294c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f000 faca 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e07b      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	3b01      	subs	r3, #1
 800210a:	b29a      	uxth	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	3b01      	subs	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002120:	b29b      	uxth	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d034      	beq.n	8002190 <HAL_I2C_Mem_Write+0x1c8>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	d130      	bne.n	8002190 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 fa4d 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e04d      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2bff      	cmp	r3, #255	; 0xff
 8002150:	d90e      	bls.n	8002170 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	22ff      	movs	r2, #255	; 0xff
 8002156:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215c:	b2da      	uxtb	r2, r3
 800215e:	8979      	ldrh	r1, [r7, #10]
 8002160:	2300      	movs	r3, #0
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fbef 	bl	800294c <I2C_TransferConfig>
 800216e:	e00f      	b.n	8002190 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217e:	b2da      	uxtb	r2, r3
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fbde 	bl	800294c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d19e      	bne.n	80020d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 fab0 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e01a      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2220      	movs	r2, #32
 80021b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6859      	ldr	r1, [r3, #4]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_I2C_Mem_Write+0x224>)
 80021c2:	400b      	ands	r3, r1
 80021c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80021e2:	2302      	movs	r3, #2
  }
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	fe00e800 	.word	0xfe00e800

080021f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af02      	add	r7, sp, #8
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	461a      	mov	r2, r3
 80021fe:	4603      	mov	r3, r0
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	460b      	mov	r3, r1
 8002204:	813b      	strh	r3, [r7, #8]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b20      	cmp	r3, #32
 8002214:	f040 80fd 	bne.w	8002412 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_I2C_Mem_Read+0x34>
 800221e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0f1      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_I2C_Mem_Read+0x4e>
 800223a:	2302      	movs	r3, #2
 800223c:	e0ea      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002246:	f7ff fa51 	bl	80016ec <HAL_GetTick>
 800224a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2319      	movs	r3, #25
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f9bd 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0d5      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2222      	movs	r2, #34	; 0x22
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a3a      	ldr	r2, [r7, #32]
 8002282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002290:	88f8      	ldrh	r0, [r7, #6]
 8002292:	893a      	ldrh	r2, [r7, #8]
 8002294:	8979      	ldrh	r1, [r7, #10]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	4603      	mov	r3, r0
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f921 	bl	80024e8 <I2C_RequestMemoryRead>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d005      	beq.n	80022b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0ad      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022bc:	b29b      	uxth	r3, r3
 80022be:	2bff      	cmp	r3, #255	; 0xff
 80022c0:	d90e      	bls.n	80022e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	22ff      	movs	r2, #255	; 0xff
 80022c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	8979      	ldrh	r1, [r7, #10]
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_I2C_Mem_Read+0x22c>)
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fb37 	bl	800294c <I2C_TransferConfig>
 80022de:	e00f      	b.n	8002300 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <HAL_I2C_Mem_Read+0x22c>)
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fb26 	bl	800294c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002306:	2200      	movs	r2, #0
 8002308:	2104      	movs	r1, #4
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f964 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07c      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d034      	beq.n	80023c0 <HAL_I2C_Mem_Read+0x1d0>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d130      	bne.n	80023c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	2200      	movs	r2, #0
 8002366:	2180      	movs	r1, #128	; 0x80
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f935 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e04d      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237c:	b29b      	uxth	r3, r3
 800237e:	2bff      	cmp	r3, #255	; 0xff
 8002380:	d90e      	bls.n	80023a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	22ff      	movs	r2, #255	; 0xff
 8002386:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	b2da      	uxtb	r2, r3
 800238e:	8979      	ldrh	r1, [r7, #10]
 8002390:	2300      	movs	r3, #0
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fad7 	bl	800294c <I2C_TransferConfig>
 800239e:	e00f      	b.n	80023c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	8979      	ldrh	r1, [r7, #10]
 80023b2:	2300      	movs	r3, #0
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 fac6 	bl	800294c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d19a      	bne.n	8002300 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f998 	bl	8002704 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e01a      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2220      	movs	r2, #32
 80023e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_I2C_Mem_Read+0x230>)
 80023f2:	400b      	ands	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2220      	movs	r2, #32
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e000      	b.n	8002414 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002412:	2302      	movs	r3, #2
  }
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	80002400 	.word	0x80002400
 8002420:	fe00e800 	.word	0xfe00e800

08002424 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002432:	b2db      	uxtb	r3, r3
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	b2da      	uxtb	r2, r3
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <I2C_RequestMemoryWrite+0xa4>)
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa6f 	bl	800294c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f8ff 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e02c      	b.n	80024dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002488:	893b      	ldrh	r3, [r7, #8]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	629a      	str	r2, [r3, #40]	; 0x28
 8002492:	e015      	b.n	80024c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002494:	893b      	ldrh	r3, [r7, #8]
 8002496:	0a1b      	lsrs	r3, r3, #8
 8002498:	b29b      	uxth	r3, r3
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	69b9      	ldr	r1, [r7, #24]
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f8e5 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e012      	b.n	80024dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b6:	893b      	ldrh	r3, [r7, #8]
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2180      	movs	r1, #128	; 0x80
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f884 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	80002000 	.word	0x80002000

080024e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	4608      	mov	r0, r1
 80024f2:	4611      	mov	r1, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	817b      	strh	r3, [r7, #10]
 80024fa:	460b      	mov	r3, r1
 80024fc:	813b      	strh	r3, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	b2da      	uxtb	r2, r3
 8002506:	8979      	ldrh	r1, [r7, #10]
 8002508:	4b20      	ldr	r3, [pc, #128]	; (800258c <I2C_RequestMemoryRead+0xa4>)
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fa1c 	bl	800294c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002514:	69fa      	ldr	r2, [r7, #28]
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f8ac 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e02c      	b.n	8002582 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d105      	bne.n	800253a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800252e:	893b      	ldrh	r3, [r7, #8]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
 8002538:	e015      	b.n	8002566 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800253a:	893b      	ldrh	r3, [r7, #8]
 800253c:	0a1b      	lsrs	r3, r3, #8
 800253e:	b29b      	uxth	r3, r3
 8002540:	b2da      	uxtb	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f892 	bl	8002676 <I2C_WaitOnTXISFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e012      	b.n	8002582 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800255c:	893b      	ldrh	r3, [r7, #8]
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	2200      	movs	r2, #0
 800256e:	2140      	movs	r1, #64	; 0x40
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f831 	bl	80025d8 <I2C_WaitOnFlagUntilTimeout>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e000      	b.n	8002582 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	80002000 	.word	0x80002000

08002590 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d007      	beq.n	80025cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699a      	ldr	r2, [r3, #24]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	619a      	str	r2, [r3, #24]
  }
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e8:	e031      	b.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d02d      	beq.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f2:	f7ff f87b 	bl	80016ec <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d302      	bcc.n	8002608 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d122      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699a      	ldr	r2, [r3, #24]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	429a      	cmp	r2, r3
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	429a      	cmp	r2, r3
 8002624:	d113      	bne.n	800264e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262a:	f043 0220 	orr.w	r2, r3, #32
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e00f      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699a      	ldr	r2, [r3, #24]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	4013      	ands	r3, r2
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	429a      	cmp	r2, r3
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	429a      	cmp	r2, r3
 800266a:	d0be      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002682:	e033      	b.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f87f 	bl	800278c <I2C_IsErrorOccurred>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e031      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269e:	d025      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7ff f824 	bl	80016ec <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11a      	bne.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d013      	beq.n	80026ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c8:	f043 0220 	orr.w	r2, r3, #32
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d1c4      	bne.n	8002684 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002710:	e02f      	b.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f838 	bl	800278c <I2C_IsErrorOccurred>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e02d      	b.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7fe ffe1 	bl	80016ec <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d11a      	bne.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b20      	cmp	r3, #32
 8002748:	d013      	beq.n	8002772 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e007      	b.n	8002782 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b20      	cmp	r3, #32
 800277e:	d1c8      	bne.n	8002712 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08a      	sub	sp, #40	; 0x28
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d068      	beq.n	800288a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2210      	movs	r2, #16
 80027be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c0:	e049      	b.n	8002856 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d045      	beq.n	8002856 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe ff8f 	bl	80016ec <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_IsErrorOccurred+0x54>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13a      	bne.n	8002856 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002802:	d121      	bne.n	8002848 <I2C_IsErrorOccurred+0xbc>
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800280a:	d01d      	beq.n	8002848 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	2b20      	cmp	r3, #32
 8002810:	d01a      	beq.n	8002848 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002820:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002822:	f7fe ff63 	bl	80016ec <HAL_GetTick>
 8002826:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002828:	e00e      	b.n	8002848 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800282a:	f7fe ff5f 	bl	80016ec <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b19      	cmp	r3, #25
 8002836:	d907      	bls.n	8002848 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002838:	6a3b      	ldr	r3, [r7, #32]
 800283a:	f043 0320 	orr.w	r3, r3, #32
 800283e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002846:	e006      	b.n	8002856 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d1e9      	bne.n	800282a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b20      	cmp	r3, #32
 8002862:	d003      	beq.n	800286c <I2C_IsErrorOccurred+0xe0>
 8002864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0aa      	beq.n	80027c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800286c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002870:	2b00      	cmp	r3, #0
 8002872:	d103      	bne.n	800287c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00b      	beq.n	80028b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01c      	beq.n	800293a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff fe45 	bl	8002590 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <I2C_IsErrorOccurred+0x1bc>)
 8002912:	400b      	ands	r3, r1
 8002914:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	431a      	orrs	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800293a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	fe00e800 	.word	0xfe00e800

0800294c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	460b      	mov	r3, r1
 8002958:	817b      	strh	r3, [r7, #10]
 800295a:	4613      	mov	r3, r2
 800295c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295e:	897b      	ldrh	r3, [r7, #10]
 8002960:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002964:	7a7b      	ldrb	r3, [r7, #9]
 8002966:	041b      	lsls	r3, r3, #16
 8002968:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800296c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	4313      	orrs	r3, r2
 8002976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800297a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	0d5b      	lsrs	r3, r3, #21
 8002986:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <I2C_TransferConfig+0x60>)
 800298c:	430b      	orrs	r3, r1
 800298e:	43db      	mvns	r3, r3
 8002990:	ea02 0103 	and.w	r1, r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	03ff63ff 	.word	0x03ff63ff

080029b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d138      	bne.n	8002a38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e032      	b.n	8002a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2224      	movs	r2, #36	; 0x24
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0201 	bic.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6819      	ldr	r1, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d139      	bne.n	8002ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e033      	b.n	8002ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2224      	movs	r2, #36	; 0x24
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0201 	bic.w	r2, r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	e000      	b.n	8002ad2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ad0:	2302      	movs	r3, #2
  }
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae0:	b08b      	sub	sp, #44	; 0x2c
 8002ae2:	af06      	add	r7, sp, #24
 8002ae4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0c4      	b.n	8002c7a <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d106      	bne.n	8002b0a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7fe fc27 	bl	8001358 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f002 f8f0 	bl	8004cfc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e040      	b.n	8002ba4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3301      	adds	r3, #1
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4c:	7bfb      	ldrb	r3, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	2200      	movs	r2, #0
 8002b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	440b      	add	r3, r1
 8002b70:	3338      	adds	r3, #56	; 0x38
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	440b      	add	r3, r1
 8002b84:	333c      	adds	r3, #60	; 0x3c
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b8a:	7bfa      	ldrb	r2, [r7, #15]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	440b      	add	r3, r1
 8002b98:	3340      	adds	r3, #64	; 0x40
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d3b9      	bcc.n	8002b22 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e044      	b.n	8002c3e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bdc:	7bfa      	ldrb	r2, [r7, #15]
 8002bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	440b      	add	r3, r1
 8002bee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf6:	7bfa      	ldrb	r2, [r7, #15]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	440b      	add	r3, r1
 8002c1a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	440b      	add	r3, r1
 8002c30:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	7bfa      	ldrb	r2, [r7, #15]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3b5      	bcc.n	8002bb4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	603b      	str	r3, [r7, #0]
 8002c4e:	687e      	ldr	r6, [r7, #4]
 8002c50:	466d      	mov	r5, sp
 8002c52:	f106 0410 	add.w	r4, r6, #16
 8002c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	602b      	str	r3, [r5, #0]
 8002c5e:	1d33      	adds	r3, r6, #4
 8002c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c62:	6838      	ldr	r0, [r7, #0]
 8002c64:	f002 f865 	bl	8004d32 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	f001 b823 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 817d 	beq.w	8002fba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cc0:	4bbc      	ldr	r3, [pc, #752]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ccc:	4bb9      	ldr	r3, [pc, #740]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d15c      	bne.n	8002d92 <HAL_RCC_OscConfig+0x10e>
 8002cd8:	4bb6      	ldr	r3, [pc, #728]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d155      	bne.n	8002d92 <HAL_RCC_OscConfig+0x10e>
 8002ce6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002cea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cfa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	095b      	lsrs	r3, r3, #5
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f043 0301 	orr.w	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HAL_RCC_OscConfig+0x94>
 8002d12:	4ba8      	ldr	r3, [pc, #672]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e015      	b.n	8002d44 <HAL_RCC_OscConfig+0xc0>
 8002d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d24:	fa93 f3a3 	rbit	r3, r3
 8002d28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d40:	4b9c      	ldr	r3, [pc, #624]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d50:	fa92 f2a2 	rbit	r2, r2
 8002d54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d5c:	fab2 f282 	clz	r2, r2
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	f042 0220 	orr.w	r2, r2, #32
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	f002 021f 	and.w	r2, r2, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 811f 	beq.w	8002fb8 <HAL_RCC_OscConfig+0x334>
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 8116 	bne.w	8002fb8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f000 bfaf 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12e>
 8002da4:	4b83      	ldr	r3, [pc, #524]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a82      	ldr	r2, [pc, #520]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dae:	6013      	str	r3, [r2, #0]
 8002db0:	e036      	b.n	8002e20 <HAL_RCC_OscConfig+0x19c>
 8002db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x158>
 8002dc2:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7b      	ldr	r2, [pc, #492]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b79      	ldr	r3, [pc, #484]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a78      	ldr	r2, [pc, #480]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e021      	b.n	8002e20 <HAL_RCC_OscConfig+0x19c>
 8002ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x184>
 8002dee:	4b71      	ldr	r3, [pc, #452]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a70      	ldr	r2, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6d      	ldr	r2, [pc, #436]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0x19c>
 8002e08:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a69      	ldr	r2, [pc, #420]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e20:	4b64      	ldr	r3, [pc, #400]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f023 020f 	bic.w	r2, r3, #15
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	495f      	ldr	r1, [pc, #380]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d059      	beq.n	8002efe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fc4f 	bl	80016ec <HAL_GetTick>
 8002e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fc4a 	bl	80016ec <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d902      	bls.n	8002e6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f000 bf43 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8002e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_OscConfig+0x218>
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e015      	b.n	8002ec8 <HAL_RCC_OscConfig+0x244>
 8002e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002eb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ecc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ed0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ed4:	fa92 f2a2 	rbit	r2, r2
 8002ed8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002edc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f042 0220 	orr.w	r2, r2, #32
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f002 021f 	and.w	r2, r2, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0ab      	beq.n	8002e54 <HAL_RCC_OscConfig+0x1d0>
 8002efc:	e05d      	b.n	8002fba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fe fbf5 	bl	80016ec <HAL_GetTick>
 8002f02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e00a      	b.n	8002f1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f08:	f7fe fbf0 	bl	80016ec <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b64      	cmp	r3, #100	; 0x64
 8002f16:	d902      	bls.n	8002f1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	f000 bee9 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8002f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f2a:	fa93 f3a3 	rbit	r3, r3
 8002f2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	095b      	lsrs	r3, r3, #5
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d102      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2cc>
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e015      	b.n	8002f7c <HAL_RCC_OscConfig+0x2f8>
 8002f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f5c:	fa93 f3a3 	rbit	r3, r3
 8002f60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_RCC_OscConfig+0x330>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f042 0220 	orr.w	r2, r2, #32
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f002 021f 	and.w	r2, r2, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1ab      	bne.n	8002f08 <HAL_RCC_OscConfig+0x284>
 8002fb0:	e003      	b.n	8002fba <HAL_RCC_OscConfig+0x336>
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 817d 	beq.w	80032ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fd0:	4ba6      	ldr	r3, [pc, #664]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fdc:	4ba3      	ldr	r3, [pc, #652]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d172      	bne.n	80030ce <HAL_RCC_OscConfig+0x44a>
 8002fe8:	4ba0      	ldr	r3, [pc, #640]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d16c      	bne.n	80030ce <HAL_RCC_OscConfig+0x44a>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003006:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d102      	bne.n	8003024 <HAL_RCC_OscConfig+0x3a0>
 800301e:	4b93      	ldr	r3, [pc, #588]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	e013      	b.n	800304c <HAL_RCC_OscConfig+0x3c8>
 8003024:	2302      	movs	r3, #2
 8003026:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800302e:	fa93 f3a3 	rbit	r3, r3
 8003032:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003036:	2302      	movs	r3, #2
 8003038:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800303c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003040:	fa93 f3a3 	rbit	r3, r3
 8003044:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003048:	4b88      	ldr	r3, [pc, #544]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	2202      	movs	r2, #2
 800304e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003052:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800305e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003062:	fab2 f282 	clz	r2, r2
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	f042 0220 	orr.w	r2, r2, #32
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	f002 021f 	and.w	r2, r2, #31
 8003072:	2101      	movs	r1, #1
 8003074:	fa01 f202 	lsl.w	r2, r1, r2
 8003078:	4013      	ands	r3, r2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00a      	beq.n	8003094 <HAL_RCC_OscConfig+0x410>
 800307e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d002      	beq.n	8003094 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f000 be2e 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b75      	ldr	r3, [pc, #468]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	21f8      	movs	r1, #248	; 0xf8
 80030aa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80030b2:	fa91 f1a1 	rbit	r1, r1
 80030b6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80030ba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80030be:	fab1 f181 	clz	r1, r1
 80030c2:	b2c9      	uxtb	r1, r1
 80030c4:	408b      	lsls	r3, r1
 80030c6:	4969      	ldr	r1, [pc, #420]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030cc:	e0fd      	b.n	80032ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8088 	beq.w	80031f0 <HAL_RCC_OscConfig+0x56c>
 80030e0:	2301      	movs	r3, #1
 80030e2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030ea:	fa93 f3a3 	rbit	r3, r3
 80030ee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030f2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f6:	fab3 f383 	clz	r3, r3
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003100:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	461a      	mov	r2, r3
 8003108:	2301      	movs	r3, #1
 800310a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310c:	f7fe faee 	bl	80016ec <HAL_GetTick>
 8003110:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	e00a      	b.n	800312c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe fae9 	bl	80016ec <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d902      	bls.n	800312c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	f000 bde2 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
 800312c:	2302      	movs	r3, #2
 800312e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800313e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	fab3 f383 	clz	r3, r3
 8003146:	b2db      	uxtb	r3, r3
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_RCC_OscConfig+0x4d8>
 8003156:	4b45      	ldr	r3, [pc, #276]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	e013      	b.n	8003184 <HAL_RCC_OscConfig+0x500>
 800315c:	2302      	movs	r3, #2
 800315e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003166:	fa93 f3a3 	rbit	r3, r3
 800316a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800316e:	2302      	movs	r3, #2
 8003170:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003174:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003180:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	2202      	movs	r2, #2
 8003186:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800318a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800318e:	fa92 f2a2 	rbit	r2, r2
 8003192:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003196:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800319a:	fab2 f282 	clz	r2, r2
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	f042 0220 	orr.w	r2, r2, #32
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	f002 021f 	and.w	r2, r2, #31
 80031aa:	2101      	movs	r1, #1
 80031ac:	fa01 f202 	lsl.w	r2, r1, r2
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0af      	beq.n	8003116 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b2d      	ldr	r3, [pc, #180]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	21f8      	movs	r1, #248	; 0xf8
 80031cc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031d4:	fa91 f1a1 	rbit	r1, r1
 80031d8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031dc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031e0:	fab1 f181 	clz	r1, r1
 80031e4:	b2c9      	uxtb	r1, r1
 80031e6:	408b      	lsls	r3, r1
 80031e8:	4920      	ldr	r1, [pc, #128]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
 80031ee:	e06c      	b.n	80032ca <HAL_RCC_OscConfig+0x646>
 80031f0:	2301      	movs	r3, #1
 80031f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003202:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003206:	fab3 f383 	clz	r3, r3
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003210:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	461a      	mov	r2, r3
 8003218:	2300      	movs	r3, #0
 800321a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fa66 	bl	80016ec <HAL_GetTick>
 8003220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003224:	e00a      	b.n	800323c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003226:	f7fe fa61 	bl	80016ec <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	f000 bd5a 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
 800323c:	2302      	movs	r3, #2
 800323e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800324e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d104      	bne.n	8003270 <HAL_RCC_OscConfig+0x5ec>
 8003266:	4b01      	ldr	r3, [pc, #4]	; (800326c <HAL_RCC_OscConfig+0x5e8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	e015      	b.n	8003298 <HAL_RCC_OscConfig+0x614>
 800326c:	40021000 	.word	0x40021000
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003282:	2302      	movs	r3, #2
 8003284:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003288:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003294:	4bc8      	ldr	r3, [pc, #800]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2202      	movs	r2, #2
 800329a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800329e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80032a2:	fa92 f2a2 	rbit	r2, r2
 80032a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80032aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80032ae:	fab2 f282 	clz	r2, r2
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f042 0220 	orr.w	r2, r2, #32
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	f002 021f 	and.w	r2, r2, #31
 80032be:	2101      	movs	r1, #1
 80032c0:	fa01 f202 	lsl.w	r2, r1, r2
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ad      	bne.n	8003226 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0308 	and.w	r3, r3, #8
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 8110 	beq.w	8003500 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d079      	beq.n	80033e4 <HAL_RCC_OscConfig+0x760>
 80032f0:	2301      	movs	r3, #1
 80032f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	4bab      	ldr	r3, [pc, #684]	; (80035bc <HAL_RCC_OscConfig+0x938>)
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	461a      	mov	r2, r3
 8003316:	2301      	movs	r3, #1
 8003318:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800331a:	f7fe f9e7 	bl	80016ec <HAL_GetTick>
 800331e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003324:	f7fe f9e2 	bl	80016ec <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d902      	bls.n	800333a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	f000 bcdb 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
 800333a:	2302      	movs	r3, #2
 800333c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800334c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003350:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003354:	2202      	movs	r2, #2
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800335c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	fa93 f2a3 	rbit	r2, r3
 8003366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003374:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003378:	2202      	movs	r2, #2
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	fa93 f2a3 	rbit	r2, r3
 800338a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800338e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003392:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003394:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 8003396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800339c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033a0:	2102      	movs	r1, #2
 80033a2:	6019      	str	r1, [r3, #0]
 80033a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	fa93 f1a3 	rbit	r1, r3
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033ba:	6019      	str	r1, [r3, #0]
  return result;
 80033bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0a0      	beq.n	8003324 <HAL_RCC_OscConfig+0x6a0>
 80033e2:	e08d      	b.n	8003500 <HAL_RCC_OscConfig+0x87c>
 80033e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	fa93 f2a3 	rbit	r2, r3
 80033fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003402:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003406:	601a      	str	r2, [r3, #0]
  return result;
 8003408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003410:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x938>)
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	461a      	mov	r2, r3
 8003422:	2300      	movs	r3, #0
 8003424:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003426:	f7fe f961 	bl	80016ec <HAL_GetTick>
 800342a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342e:	e00a      	b.n	8003446 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003430:	f7fe f95c 	bl	80016ec <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d902      	bls.n	8003446 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	f000 bc55 	b.w	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800344e:	2202      	movs	r2, #2
 8003450:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003456:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	fa93 f2a3 	rbit	r2, r3
 8003460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003464:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003472:	2202      	movs	r2, #2
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	fa93 f2a3 	rbit	r2, r3
 8003484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003488:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003496:	2202      	movs	r2, #2
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f2a3 	rbit	r2, r3
 80034a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80034b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 80034b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034be:	2102      	movs	r1, #2
 80034c0:	6019      	str	r1, [r3, #0]
 80034c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	fa93 f1a3 	rbit	r1, r3
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034d8:	6019      	str	r1, [r3, #0]
  return result;
 80034da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	2101      	movs	r1, #1
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d197      	bne.n	8003430 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003504:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 81a1 	beq.w	8003858 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351c:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d116      	bne.n	8003556 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	61d3      	str	r3, [r2, #28]
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800353c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003540:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800354a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800354e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_OscConfig+0x93c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355e:	2b00      	cmp	r3, #0
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b17      	ldr	r3, [pc, #92]	; (80035c0 <HAL_RCC_OscConfig+0x93c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_RCC_OscConfig+0x93c>)
 8003568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356e:	f7fe f8bd 	bl	80016ec <HAL_GetTick>
 8003572:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003576:	e009      	b.n	800358c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fe f8b8 	bl	80016ec <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e3b1      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RCC_OscConfig+0x93c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10d      	bne.n	80035c4 <HAL_RCC_OscConfig+0x940>
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a02      	ldr	r2, [pc, #8]	; (80035b8 <HAL_RCC_OscConfig+0x934>)
 80035ae:	f043 0301 	orr.w	r3, r3, #1
 80035b2:	6213      	str	r3, [r2, #32]
 80035b4:	e03c      	b.n	8003630 <HAL_RCC_OscConfig+0x9ac>
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	10908120 	.word	0x10908120
 80035c0:	40007000 	.word	0x40007000
 80035c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10c      	bne.n	80035ee <HAL_RCC_OscConfig+0x96a>
 80035d4:	4bc1      	ldr	r3, [pc, #772]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4ac0      	ldr	r2, [pc, #768]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	4bbe      	ldr	r3, [pc, #760]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	4abd      	ldr	r2, [pc, #756]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80035e6:	f023 0304 	bic.w	r3, r3, #4
 80035ea:	6213      	str	r3, [r2, #32]
 80035ec:	e020      	b.n	8003630 <HAL_RCC_OscConfig+0x9ac>
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x994>
 80035fe:	4bb7      	ldr	r3, [pc, #732]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	4ab6      	ldr	r2, [pc, #728]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 8003604:	f043 0304 	orr.w	r3, r3, #4
 8003608:	6213      	str	r3, [r2, #32]
 800360a:	4bb4      	ldr	r3, [pc, #720]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4ab3      	ldr	r2, [pc, #716]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	e00b      	b.n	8003630 <HAL_RCC_OscConfig+0x9ac>
 8003618:	4bb0      	ldr	r3, [pc, #704]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4aaf      	ldr	r2, [pc, #700]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 800361e:	f023 0301 	bic.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	4bad      	ldr	r3, [pc, #692]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	4aac      	ldr	r2, [pc, #688]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 800362a:	f023 0304 	bic.w	r3, r3, #4
 800362e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003634:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 8081 	beq.w	8003744 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7fe f853 	bl	80016ec <HAL_GetTick>
 8003646:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe f84e 	bl	80016ec <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e345      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800366c:	2202      	movs	r2, #2
 800366e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003674:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	fa93 f2a3 	rbit	r2, r3
 800367e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003682:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003690:	2202      	movs	r2, #2
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	fa93 f2a3 	rbit	r2, r3
 80036a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036aa:	601a      	str	r2, [r3, #0]
  return result;
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80036b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d102      	bne.n	80036d0 <HAL_RCC_OscConfig+0xa4c>
 80036ca:	4b84      	ldr	r3, [pc, #528]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	e013      	b.n	80036f8 <HAL_RCC_OscConfig+0xa74>
 80036d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036d8:	2202      	movs	r2, #2
 80036da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	4b79      	ldr	r3, [pc, #484]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003700:	2102      	movs	r1, #2
 8003702:	6011      	str	r1, [r2, #0]
 8003704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003708:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	fa92 f1a2 	rbit	r1, r2
 8003712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003716:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800371a:	6011      	str	r1, [r2, #0]
  return result;
 800371c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003720:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003724:	6812      	ldr	r2, [r2, #0]
 8003726:	fab2 f282 	clz	r2, r2
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003730:	b2d2      	uxtb	r2, r2
 8003732:	f002 021f 	and.w	r2, r2, #31
 8003736:	2101      	movs	r1, #1
 8003738:	fa01 f202 	lsl.w	r2, r1, r2
 800373c:	4013      	ands	r3, r2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d084      	beq.n	800364c <HAL_RCC_OscConfig+0x9c8>
 8003742:	e07f      	b.n	8003844 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fd ffd2 	bl	80016ec <HAL_GetTick>
 8003748:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	e00b      	b.n	8003766 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fd ffcd 	bl	80016ec <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e2c4      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8003766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800376a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800376e:	2202      	movs	r2, #2
 8003770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003776:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	fa93 f2a3 	rbit	r2, r3
 8003780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003784:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003792:	2202      	movs	r2, #2
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037ac:	601a      	str	r2, [r3, #0]
  return result;
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80037b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037b8:	fab3 f383 	clz	r3, r3
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d102      	bne.n	80037d2 <HAL_RCC_OscConfig+0xb4e>
 80037cc:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	e013      	b.n	80037fa <HAL_RCC_OscConfig+0xb76>
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037da:	2202      	movs	r2, #2
 80037dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80037fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003802:	2102      	movs	r1, #2
 8003804:	6011      	str	r1, [r2, #0]
 8003806:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800380a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	fa92 f1a2 	rbit	r1, r2
 8003814:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003818:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800381c:	6011      	str	r1, [r2, #0]
  return result;
 800381e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003822:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fab2 f282 	clz	r2, r2
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	f002 021f 	and.w	r2, r2, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f202 	lsl.w	r2, r1, r2
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d184      	bne.n	800374e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003844:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4a22      	ldr	r2, [pc, #136]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 8003852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003856:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800385c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8242 	beq.w	8003cee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386a:	4b1c      	ldr	r3, [pc, #112]	; (80038dc <HAL_RCC_OscConfig+0xc58>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 030c 	and.w	r3, r3, #12
 8003872:	2b08      	cmp	r3, #8
 8003874:	f000 8213 	beq.w	8003c9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b02      	cmp	r3, #2
 8003886:	f040 8162 	bne.w	8003b4e <HAL_RCC_OscConfig+0xeca>
 800388a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800388e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003892:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	fa93 f2a3 	rbit	r2, r3
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038ae:	601a      	str	r2, [r3, #0]
  return result;
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80038b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ba:	fab3 f383 	clz	r3, r3
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	461a      	mov	r2, r3
 80038cc:	2300      	movs	r3, #0
 80038ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d0:	f7fd ff0c 	bl	80016ec <HAL_GetTick>
 80038d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d8:	e00c      	b.n	80038f4 <HAL_RCC_OscConfig+0xc70>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fd ff04 	bl	80016ec <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1fd      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80038fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	fa93 f2a3 	rbit	r2, r3
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003918:	601a      	str	r2, [r3, #0]
  return result;
 800391a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800391e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003922:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003924:	fab3 f383 	clz	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	095b      	lsrs	r3, r3, #5
 800392c:	b2db      	uxtb	r3, r3
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d102      	bne.n	800393e <HAL_RCC_OscConfig+0xcba>
 8003938:	4bb0      	ldr	r3, [pc, #704]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	e027      	b.n	800398e <HAL_RCC_OscConfig+0xd0a>
 800393e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003942:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003946:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800394a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	fa93 f2a3 	rbit	r2, r3
 800395a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800395e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003968:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800396c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003976:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003984:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	4b9c      	ldr	r3, [pc, #624]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003992:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003996:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800399a:	6011      	str	r1, [r2, #0]
 800399c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80039a4:	6812      	ldr	r2, [r2, #0]
 80039a6:	fa92 f1a2 	rbit	r1, r2
 80039aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039b2:	6011      	str	r1, [r2, #0]
  return result;
 80039b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80039b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	fab2 f282 	clz	r2, r2
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	f042 0220 	orr.w	r2, r2, #32
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	f002 021f 	and.w	r2, r2, #31
 80039ce:	2101      	movs	r1, #1
 80039d0:	fa01 f202 	lsl.w	r2, r1, r2
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d182      	bne.n	80038e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039da:	4b88      	ldr	r3, [pc, #544]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	430b      	orrs	r3, r1
 80039fc:	497f      	ldr	r1, [pc, #508]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	604b      	str	r3, [r1, #4]
 8003a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a06:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	fa93 f2a3 	rbit	r2, r3
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a26:	601a      	str	r2, [r3, #0]
  return result;
 8003a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003a30:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a32:	fab3 f383 	clz	r3, r3
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	461a      	mov	r2, r3
 8003a44:	2301      	movs	r3, #1
 8003a46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd fe50 	bl	80016ec <HAL_GetTick>
 8003a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fe4b 	bl	80016ec <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e144      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8003a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a6a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a78:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a86:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a8a:	601a      	str	r2, [r3, #0]
  return result;
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003a94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a96:	fab3 f383 	clz	r3, r3
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xe2c>
 8003aaa:	4b54      	ldr	r3, [pc, #336]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	e027      	b.n	8003b00 <HAL_RCC_OscConfig+0xe7c>
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ab8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003abc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	fa93 f2a3 	rbit	r2, r3
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ada:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003ade:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	fa93 f2a3 	rbit	r2, r3
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b04:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b0c:	6011      	str	r1, [r2, #0]
 8003b0e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b12:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	fa92 f1a2 	rbit	r1, r2
 8003b1c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b20:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b24:	6011      	str	r1, [r2, #0]
  return result;
 8003b26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b2a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	fab2 f282 	clz	r2, r2
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	f042 0220 	orr.w	r2, r2, #32
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	f002 021f 	and.w	r2, r2, #31
 8003b40:	2101      	movs	r1, #1
 8003b42:	fa01 f202 	lsl.w	r2, r1, r2
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d082      	beq.n	8003a52 <HAL_RCC_OscConfig+0xdce>
 8003b4c:	e0cf      	b.n	8003cee <HAL_RCC_OscConfig+0x106a>
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b60:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	fa93 f2a3 	rbit	r2, r3
 8003b6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b6e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b72:	601a      	str	r2, [r3, #0]
  return result;
 8003b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b78:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003b7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	461a      	mov	r2, r3
 8003b90:	2300      	movs	r3, #0
 8003b92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b94:	f7fd fdaa 	bl	80016ec <HAL_GetTick>
 8003b98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9c:	e009      	b.n	8003bb2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fd fda5 	bl	80016ec <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e09e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003bba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	fa93 f2a3 	rbit	r2, r3
 8003bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003bd6:	601a      	str	r2, [r3, #0]
  return result;
 8003bd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bdc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003be0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be2:	fab3 f383 	clz	r3, r3
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	095b      	lsrs	r3, r3, #5
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d104      	bne.n	8003c00 <HAL_RCC_OscConfig+0xf7c>
 8003bf6:	4b01      	ldr	r3, [pc, #4]	; (8003bfc <HAL_RCC_OscConfig+0xf78>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	e029      	b.n	8003c50 <HAL_RCC_OscConfig+0xfcc>
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	fa93 f2a3 	rbit	r2, r3
 8003c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c38:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	fa93 f2a3 	rbit	r2, r3
 8003c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <HAL_RCC_OscConfig+0x1078>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c54:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c5c:	6011      	str	r1, [r2, #0]
 8003c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c62:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	fa92 f1a2 	rbit	r1, r2
 8003c6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c70:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c74:	6011      	str	r1, [r2, #0]
  return result;
 8003c76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	fab2 f282 	clz	r2, r2
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	f042 0220 	orr.w	r2, r2, #32
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f002 021f 	and.w	r2, r2, #31
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f202 	lsl.w	r2, r1, r2
 8003c96:	4013      	ands	r3, r2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d180      	bne.n	8003b9e <HAL_RCC_OscConfig+0xf1a>
 8003c9c:	e027      	b.n	8003cee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e01e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCC_OscConfig+0x1078>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003cba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cbe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d10b      	bne.n	8003cea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003cd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d001      	beq.n	8003cee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b09e      	sub	sp, #120	; 0x78
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e162      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b90      	ldr	r3, [pc, #576]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d910      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b8d      	ldr	r3, [pc, #564]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 0207 	bic.w	r2, r3, #7
 8003d2e:	498b      	ldr	r1, [pc, #556]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b89      	ldr	r3, [pc, #548]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e14a      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d008      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d54:	4b82      	ldr	r3, [pc, #520]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	497f      	ldr	r1, [pc, #508]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80dc 	beq.w	8003f2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d13c      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xf6>
 8003d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d84:	fa93 f3a3 	rbit	r3, r3
 8003d88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8c:	fab3 f383 	clz	r3, r3
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d102      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xa6>
 8003da0:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e00f      	b.n	8003dc6 <HAL_RCC_ClockConfig+0xc6>
 8003da6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003daa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	667b      	str	r3, [r7, #100]	; 0x64
 8003db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003db8:	663b      	str	r3, [r7, #96]	; 0x60
 8003dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dbc:	fa93 f3a3 	rbit	r3, r3
 8003dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dc2:	4b67      	ldr	r3, [pc, #412]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dca:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dce:	fa92 f2a2 	rbit	r2, r2
 8003dd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003dd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dd6:	fab2 f282 	clz	r2, r2
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	f002 021f 	and.w	r2, r2, #31
 8003de6:	2101      	movs	r1, #1
 8003de8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d17b      	bne.n	8003eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e0f3      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d13c      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x178>
 8003dfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e06:	fa93 f3a3 	rbit	r3, r3
 8003e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	fab3 f383 	clz	r3, r3
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d102      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x128>
 8003e22:	4b4f      	ldr	r3, [pc, #316]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	e00f      	b.n	8003e48 <HAL_RCC_ClockConfig+0x148>
 8003e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
 8003e36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e3e:	fa93 f3a3 	rbit	r3, r3
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e44:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e50:	fa92 f2a2 	rbit	r2, r2
 8003e54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e58:	fab2 f282 	clz	r2, r2
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	f042 0220 	orr.w	r2, r2, #32
 8003e62:	b2d2      	uxtb	r2, r2
 8003e64:	f002 021f 	and.w	r2, r2, #31
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6e:	4013      	ands	r3, r2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d13a      	bne.n	8003eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b2      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x1a0>
 8003e9a:	4b31      	ldr	r3, [pc, #196]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	e00d      	b.n	8003ebc <HAL_RCC_ClockConfig+0x1bc>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	fa93 f3a3 	rbit	r3, r3
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003eac:	2302      	movs	r3, #2
 8003eae:	623b      	str	r3, [r7, #32]
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	fa93 f3a3 	rbit	r3, r3
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	61ba      	str	r2, [r7, #24]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	fa92 f2a2 	rbit	r2, r2
 8003ec6:	617a      	str	r2, [r7, #20]
  return result;
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f042 0220 	orr.w	r2, r2, #32
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f002 021f 	and.w	r2, r2, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e079      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f023 0203 	bic.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	491a      	ldr	r1, [pc, #104]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003efc:	f7fd fbf6 	bl	80016ec <HAL_GetTick>
 8003f00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fd fbf2 	bl	80016ec <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e061      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_RCC_ClockConfig+0x260>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f003 020c 	and.w	r2, r3, #12
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d1eb      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0307 	and.w	r3, r3, #7
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d214      	bcs.n	8003f64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b08      	ldr	r3, [pc, #32]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 0207 	bic.w	r2, r3, #7
 8003f42:	4906      	ldr	r1, [pc, #24]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <HAL_RCC_ClockConfig+0x25c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e040      	b.n	8003fde <HAL_RCC_ClockConfig+0x2de>
 8003f5c:	40022000 	.word	0x40022000
 8003f60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f70:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	491a      	ldr	r1, [pc, #104]	; (8003fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8e:	4b16      	ldr	r3, [pc, #88]	; (8003fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4912      	ldr	r1, [pc, #72]	; (8003fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fa2:	f000 f829 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fa6:	4601      	mov	r1, r0
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <HAL_RCC_ClockConfig+0x2e8>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb0:	22f0      	movs	r2, #240	; 0xf0
 8003fb2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	fa92 f2a2 	rbit	r2, r2
 8003fba:	60fa      	str	r2, [r7, #12]
  return result;
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	fab2 f282 	clz	r2, r2
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	40d3      	lsrs	r3, r2
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x2ec>)
 8003fc8:	5cd3      	ldrb	r3, [r2, r3]
 8003fca:	fa21 f303 	lsr.w	r3, r1, r3
 8003fce:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <HAL_RCC_ClockConfig+0x2f0>)
 8003fd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fd2:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <HAL_RCC_ClockConfig+0x2f4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd fb44 	bl	8001664 <HAL_InitTick>
  
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3778      	adds	r7, #120	; 0x78
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	08009288 	.word	0x08009288
 8003ff0:	20000040 	.word	0x20000040
 8003ff4:	20000044 	.word	0x20000044

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b08b      	sub	sp, #44	; 0x2c
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	2300      	movs	r3, #0
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004012:	4b29      	ldr	r3, [pc, #164]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b04      	cmp	r3, #4
 8004020:	d002      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x30>
 8004022:	2b08      	cmp	r3, #8
 8004024:	d003      	beq.n	800402e <HAL_RCC_GetSysClockFreq+0x36>
 8004026:	e03c      	b.n	80040a2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004028:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_GetSysClockFreq+0xc4>)
 800402a:	623b      	str	r3, [r7, #32]
      break;
 800402c:	e03c      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004034:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004038:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	fa92 f2a2 	rbit	r2, r2
 8004040:	607a      	str	r2, [r7, #4]
  return result;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	fab2 f282 	clz	r2, r2
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	40d3      	lsrs	r3, r2
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800404e:	5cd3      	ldrb	r3, [r2, r3]
 8004050:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004052:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	220f      	movs	r2, #15
 800405c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	fa92 f2a2 	rbit	r2, r2
 8004064:	60fa      	str	r2, [r7, #12]
  return result;
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	fab2 f282 	clz	r2, r2
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	40d3      	lsrs	r3, r2
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004072:	5cd3      	ldrb	r3, [r2, r3]
 8004074:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004080:	4a0e      	ldr	r2, [pc, #56]	; (80040bc <HAL_RCC_GetSysClockFreq+0xc4>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	fbb2 f2f3 	udiv	r2, r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
 8004090:	e004      	b.n	800409c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	623b      	str	r3, [r7, #32]
      break;
 80040a0:	e002      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_GetSysClockFreq+0xc4>)
 80040a4:	623b      	str	r3, [r7, #32]
      break;
 80040a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040a8:	6a3b      	ldr	r3, [r7, #32]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	372c      	adds	r7, #44	; 0x2c
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40021000 	.word	0x40021000
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	08009298 	.word	0x08009298
 80040c4:	080092a8 	.word	0x080092a8
 80040c8:	003d0900 	.word	0x003d0900

080040cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b092      	sub	sp, #72	; 0x48
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80d4 	beq.w	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f0:	4b4e      	ldr	r3, [pc, #312]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10e      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fc:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	4a4a      	ldr	r2, [pc, #296]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	61d3      	str	r3, [r2, #28]
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411a:	4b45      	ldr	r3, [pc, #276]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d118      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004126:	4b42      	ldr	r3, [pc, #264]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a41      	ldr	r2, [pc, #260]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800412c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004130:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004132:	f7fd fadb 	bl	80016ec <HAL_GetTick>
 8004136:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	e008      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413a:	f7fd fad7 	bl	80016ec <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b64      	cmp	r3, #100	; 0x64
 8004146:	d901      	bls.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e169      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	4b38      	ldr	r3, [pc, #224]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004158:	4b34      	ldr	r3, [pc, #208]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004160:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8084 	beq.w	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004172:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004174:	429a      	cmp	r2, r3
 8004176:	d07c      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004178:	4b2c      	ldr	r3, [pc, #176]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004182:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004186:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	fa93 f3a3 	rbit	r3, r3
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004192:	fab3 f383 	clz	r3, r3
 8004196:	b2db      	uxtb	r3, r3
 8004198:	461a      	mov	r2, r3
 800419a:	4b26      	ldr	r3, [pc, #152]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	461a      	mov	r2, r3
 80041a2:	2301      	movs	r3, #1
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ae:	fa93 f3a3 	rbit	r3, r3
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c0:	4413      	add	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	461a      	mov	r2, r3
 80041c6:	2300      	movs	r3, #0
 80041c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041ca:	4a18      	ldr	r2, [pc, #96]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d04b      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fd fa87 	bl	80016ec <HAL_GetTick>
 80041de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e0:	e00a      	b.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e2:	f7fd fa83 	bl	80016ec <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e113      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80041f8:	2302      	movs	r3, #2
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	627b      	str	r3, [r7, #36]	; 0x24
 8004204:	2302      	movs	r3, #2
 8004206:	623b      	str	r3, [r7, #32]
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	61fb      	str	r3, [r7, #28]
  return result;
 8004210:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f043 0302 	orr.w	r3, r3, #2
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d108      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004226:	4b01      	ldr	r3, [pc, #4]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	e00d      	b.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800422c:	40021000 	.word	0x40021000
 8004230:	40007000 	.word	0x40007000
 8004234:	10908100 	.word	0x10908100
 8004238:	2302      	movs	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	4b78      	ldr	r3, [pc, #480]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2202      	movs	r2, #2
 800424a:	613a      	str	r2, [r7, #16]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	fa92 f2a2 	rbit	r2, r2
 8004252:	60fa      	str	r2, [r7, #12]
  return result;
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	fab2 f282 	clz	r2, r2
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	f002 021f 	and.w	r2, r2, #31
 8004266:	2101      	movs	r1, #1
 8004268:	fa01 f202 	lsl.w	r2, r1, r2
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0b7      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004272:	4b6d      	ldr	r3, [pc, #436]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	496a      	ldr	r1, [pc, #424]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004280:	4313      	orrs	r3, r2
 8004282:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004284:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004288:	2b01      	cmp	r3, #1
 800428a:	d105      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428c:	4b66      	ldr	r3, [pc, #408]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4a65      	ldr	r2, [pc, #404]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004296:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a4:	4b60      	ldr	r3, [pc, #384]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	f023 0203 	bic.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	495d      	ldr	r1, [pc, #372]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d008      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c2:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	4956      	ldr	r1, [pc, #344]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e0:	4b51      	ldr	r3, [pc, #324]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	494e      	ldr	r1, [pc, #312]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d008      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fe:	4b4a      	ldr	r3, [pc, #296]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	f023 0210 	bic.w	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	69db      	ldr	r3, [r3, #28]
 800430a:	4947      	ldr	r1, [pc, #284]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800430c:	4313      	orrs	r3, r2
 800430e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d008      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800431c:	4b42      	ldr	r3, [pc, #264]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	493f      	ldr	r1, [pc, #252]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433e:	f023 0220 	bic.w	r2, r3, #32
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	4938      	ldr	r1, [pc, #224]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004358:	4b33      	ldr	r3, [pc, #204]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800435a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	4930      	ldr	r1, [pc, #192]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004366:	4313      	orrs	r3, r2
 8004368:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	4929      	ldr	r1, [pc, #164]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004384:	4313      	orrs	r3, r2
 8004386:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	4921      	ldr	r1, [pc, #132]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	491a      	ldr	r1, [pc, #104]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043d0:	4b15      	ldr	r3, [pc, #84]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	4912      	ldr	r1, [pc, #72]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d008      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80043ee:	4b0e      	ldr	r3, [pc, #56]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	490b      	ldr	r1, [pc, #44]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004418:	4903      	ldr	r1, [pc, #12]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3748      	adds	r7, #72	; 0x48
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000

0800442c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e09d      	b.n	800457a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d108      	bne.n	8004458 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444e:	d009      	beq.n	8004464 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	61da      	str	r2, [r3, #28]
 8004456:	e005      	b.n	8004464 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fc ff0c 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800449a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044a4:	d902      	bls.n	80044ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	e002      	b.n	80044b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80044ba:	d007      	beq.n	80044cc <HAL_SPI_Init+0xa0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044c4:	d002      	beq.n	80044cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	ea42 0103 	orr.w	r1, r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	f003 0204 	and.w	r2, r3, #4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004548:	ea42 0103 	orr.w	r1, r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69da      	ldr	r2, [r3, #28]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b082      	sub	sp, #8
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e01a      	b.n	80045ca <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045aa:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fc feb7 	bl	8001320 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b08a      	sub	sp, #40	; 0x28
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	607a      	str	r2, [r7, #4]
 80045de:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045e0:	2301      	movs	r3, #1
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_SPI_TransmitReceive+0x26>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e20a      	b.n	8004a0e <HAL_SPI_TransmitReceive+0x43c>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004600:	f7fd f874 	bl	80016ec <HAL_GetTick>
 8004604:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800460c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800461c:	7efb      	ldrb	r3, [r7, #27]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d00e      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x6e>
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004628:	d106      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <HAL_SPI_TransmitReceive+0x66>
 8004632:	7efb      	ldrb	r3, [r7, #27]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d003      	beq.n	8004640 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004638:	2302      	movs	r3, #2
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800463e:	e1e0      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x80>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <HAL_SPI_TransmitReceive+0x80>
 800464c:	887b      	ldrh	r3, [r7, #2]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d103      	bne.n	800465a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004658:	e1d3      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b04      	cmp	r3, #4
 8004664:	d003      	beq.n	800466e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2205      	movs	r2, #5
 800466a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	887a      	ldrh	r2, [r7, #2]
 800467e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	887a      	ldrh	r2, [r7, #2]
 8004686:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046b0:	d802      	bhi.n	80046b8 <HAL_SPI_TransmitReceive+0xe6>
 80046b2:	8a3b      	ldrh	r3, [r7, #16]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d908      	bls.n	80046ca <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	e007      	b.n	80046da <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046d8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e4:	2b40      	cmp	r3, #64	; 0x40
 80046e6:	d007      	beq.n	80046f8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004700:	f240 8081 	bls.w	8004806 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x140>
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d16d      	bne.n	80047ee <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	881a      	ldrh	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	1c9a      	adds	r2, r3, #2
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472c:	b29b      	uxth	r3, r3
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004736:	e05a      	b.n	80047ee <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b02      	cmp	r3, #2
 8004744:	d11b      	bne.n	800477e <HAL_SPI_TransmitReceive+0x1ac>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d016      	beq.n	800477e <HAL_SPI_TransmitReceive+0x1ac>
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	2b01      	cmp	r3, #1
 8004754:	d113      	bne.n	800477e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	1c9a      	adds	r2, r3, #2
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b01      	cmp	r3, #1
 800478a:	d11c      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x1f4>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d016      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	b292      	uxth	r2, r2
 80047a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	1c9a      	adds	r2, r3, #2
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047c2:	2301      	movs	r3, #1
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80047c6:	f7fc ff91 	bl	80016ec <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d80b      	bhi.n	80047ee <HAL_SPI_TransmitReceive+0x21c>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d007      	beq.n	80047ee <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80047ec:	e109      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d19f      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x166>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d199      	bne.n	8004738 <HAL_SPI_TransmitReceive+0x166>
 8004804:	e0e3      	b.n	80049ce <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_SPI_TransmitReceive+0x244>
 800480e:	8a7b      	ldrh	r3, [r7, #18]
 8004810:	2b01      	cmp	r3, #1
 8004812:	f040 80cf 	bne.w	80049b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d912      	bls.n	8004846 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	881a      	ldrh	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483a:	b29b      	uxth	r3, r3
 800483c:	3b02      	subs	r3, #2
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004844:	e0b6      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	7812      	ldrb	r2, [r2, #0]
 8004852:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	3b01      	subs	r3, #1
 8004866:	b29a      	uxth	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800486c:	e0a2      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b02      	cmp	r3, #2
 800487a:	d134      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x314>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d02f      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x314>
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	2b01      	cmp	r3, #1
 800488a:	d12c      	bne.n	80048e6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d912      	bls.n	80048bc <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489a:	881a      	ldrh	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	1c9a      	adds	r2, r3, #2
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	3b02      	subs	r3, #2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ba:	e012      	b.n	80048e2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	330c      	adds	r3, #12
 80048c6:	7812      	ldrb	r2, [r2, #0]
 80048c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d148      	bne.n	8004986 <HAL_SPI_TransmitReceive+0x3b4>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d042      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004906:	b29b      	uxth	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d923      	bls.n	8004954 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	b292      	uxth	r2, r2
 8004918:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	1c9a      	adds	r2, r3, #2
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b02      	subs	r3, #2
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b01      	cmp	r3, #1
 8004940:	d81f      	bhi.n	8004982 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	e016      	b.n	8004982 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f103 020c 	add.w	r2, r3, #12
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004976:	b29b      	uxth	r3, r3
 8004978:	3b01      	subs	r3, #1
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004982:	2301      	movs	r3, #1
 8004984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004986:	f7fc feb1 	bl	80016ec <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004992:	429a      	cmp	r2, r3
 8004994:	d803      	bhi.n	800499e <HAL_SPI_TransmitReceive+0x3cc>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d102      	bne.n	80049a4 <HAL_SPI_TransmitReceive+0x3d2>
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d107      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80049b2:	e026      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f47f af57 	bne.w	800486e <HAL_SPI_TransmitReceive+0x29c>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f47f af50 	bne.w	800486e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f94c 	bl	8004c70 <SPI_EndRxTxTransaction>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f8:	e003      	b.n	8004a02 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a24:	b2db      	uxtb	r3, r3
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a44:	f7fc fe52 	bl	80016ec <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a54:	f7fc fe4a 	bl	80016ec <HAL_GetTick>
 8004a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	015b      	lsls	r3, r3, #5
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6a:	e054      	b.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d050      	beq.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a74:	f7fc fe3a 	bl	80016ec <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d902      	bls.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d13d      	bne.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d111      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d004      	beq.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d107      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d10f      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e017      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d19b      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000040 	.word	0x20000040

08004b44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004b56:	f7fc fdc9 	bl	80016ec <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	4413      	add	r3, r2
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004b66:	f7fc fdc1 	bl	80016ec <HAL_GetTick>
 8004b6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004b74:	4b3d      	ldr	r3, [pc, #244]	; (8004c6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	00da      	lsls	r2, r3, #3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	0d1b      	lsrs	r3, r3, #20
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004b8c:	e060      	b.n	8004c50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b94:	d107      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ba4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d050      	beq.n	8004c50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bae:	f7fc fd9d 	bl	80016ec <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d902      	bls.n	8004bc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d13d      	bne.n	8004c40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004bd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bdc:	d111      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be6:	d004      	beq.n	8004bf2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf0:	d107      	bne.n	8004c02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c0a:	d10f      	bne.n	8004c2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e010      	b.n	8004c62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689a      	ldr	r2, [r3, #8]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d196      	bne.n	8004b8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3728      	adds	r7, #40	; 0x28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000040 	.word	0x20000040

08004c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	9300      	str	r3, [sp, #0]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7ff ff5b 	bl	8004b44 <SPI_WaitFifoStateUntilTimeout>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	f043 0220 	orr.w	r2, r3, #32
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e027      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f7ff fec0 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e014      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff ff34 	bl	8004b44 <SPI_WaitFifoStateUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e000      	b.n	8004cf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d04:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004d08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004d32:	b084      	sub	sp, #16
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	f107 0014 	add.w	r0, r7, #20
 8004d40:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	b004      	add	sp, #16
 8004d72:	4770      	bx	lr

08004d74 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 8004d82:	1d3b      	adds	r3, r7, #4
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8004d8a:	4b58      	ldr	r3, [pc, #352]	; (8004eec <BSP_ACCELERO_Init+0x178>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	4798      	blx	r3
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b33      	cmp	r3, #51	; 0x33
 8004d94:	d14f      	bne.n	8004e36 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8004d96:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <BSP_ACCELERO_Init+0x17c>)
 8004d98:	4a54      	ldr	r2, [pc, #336]	; (8004eec <BSP_ACCELERO_Init+0x178>)
 8004d9a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 8004da0:	2340      	movs	r3, #64	; 0x40
 8004da2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 8004da4:	2307      	movs	r3, #7
 8004da6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 8004da8:	2300      	movs	r3, #0
 8004daa:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 8004dac:	2300      	movs	r3, #0
 8004dae:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 8004db0:	2300      	movs	r3, #0
 8004db2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 8004db4:	2308      	movs	r3, #8
 8004db6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004db8:	7b3a      	ldrb	r2, [r7, #12]
 8004dba:	7b7b      	ldrb	r3, [r7, #13]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8004dc0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	8abb      	ldrh	r3, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004dce:	7c3a      	ldrb	r2, [r7, #16]
 8004dd0:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	7cbb      	ldrb	r3, [r7, #18]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004de4:	b21a      	sxth	r2, r3
 8004de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	b21b      	sxth	r3, r3
 8004dee:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004df0:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <BSP_ACCELERO_Init+0x17c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	8aba      	ldrh	r2, [r7, #20]
 8004df8:	4610      	mov	r0, r2
 8004dfa:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8004e00:	2310      	movs	r3, #16
 8004e02:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004e0c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8004e0e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004e10:	4313      	orrs	r3, r2
 8004e12:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8004e14:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8004e22:	4b33      	ldr	r3, [pc, #204]	; (8004ef0 <BSP_ACCELERO_Init+0x17c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	8aba      	ldrh	r2, [r7, #20]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	75fb      	strb	r3, [r7, #23]
 8004e34:	e054      	b.n	8004ee0 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8004e36:	4b2f      	ldr	r3, [pc, #188]	; (8004ef4 <BSP_ACCELERO_Init+0x180>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	4798      	blx	r3
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b33      	cmp	r3, #51	; 0x33
 8004e40:	d14e      	bne.n	8004ee0 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8004e42:	4b2b      	ldr	r3, [pc, #172]	; (8004ef0 <BSP_ACCELERO_Init+0x17c>)
 8004e44:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <BSP_ACCELERO_Init+0x180>)
 8004e46:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 8004e4c:	2340      	movs	r3, #64	; 0x40
 8004e4e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8004e50:	2307      	movs	r3, #7
 8004e52:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8004e54:	2300      	movs	r3, #0
 8004e56:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8004e60:	2308      	movs	r3, #8
 8004e62:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004e64:	7b3a      	ldrb	r2, [r7, #12]
 8004e66:	7b7b      	ldrb	r3, [r7, #13]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	8abb      	ldrh	r3, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004e7a:	7c3a      	ldrb	r2, [r7, #16]
 8004e7c:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b2da      	uxtb	r2, r3
 8004e82:	7cbb      	ldrb	r3, [r7, #18]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8004e90:	b21a      	sxth	r2, r3
 8004e92:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	b21b      	sxth	r3, r3
 8004e9a:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004e9c:	4b14      	ldr	r3, [pc, #80]	; (8004ef0 <BSP_ACCELERO_Init+0x17c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	8aba      	ldrh	r2, [r7, #20]
 8004ea4:	4610      	mov	r0, r2
 8004ea6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 8004eac:	2310      	movs	r3, #16
 8004eae:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004eb8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 8004eba:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8004ec0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 8004ec6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <BSP_ACCELERO_Init+0x17c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	8aba      	ldrh	r2, [r7, #20]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4798      	blx	r3

    ret = ACCELERO_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	200000e8 	.word	0x200000e8
 8004ef0:	200006b4 	.word	0x200006b4
 8004ef4:	200000b4 	.word	0x200000b4

08004ef8 <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointer on 3 angular accelerations
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <BSP_ACCELERO_GetXYZ+0x24>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <BSP_ACCELERO_GetXYZ+0x1c>
  {
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8004f0a:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <BSP_ACCELERO_GetXYZ+0x24>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
  }
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200006b4 	.word	0x200006b4

08004f20 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8004f2e:	2300      	movs	r3, #0
 8004f30:	703b      	strb	r3, [r7, #0]
 8004f32:	2300      	movs	r3, #0
 8004f34:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004f36:	4b52      	ldr	r3, [pc, #328]	; (8005080 <BSP_GYRO_Init+0x160>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	4798      	blx	r3
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2bd4      	cmp	r3, #212	; 0xd4
 8004f40:	d005      	beq.n	8004f4e <BSP_GYRO_Init+0x2e>
 8004f42:	4b4f      	ldr	r3, [pc, #316]	; (8005080 <BSP_GYRO_Init+0x160>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	4798      	blx	r3
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2bd5      	cmp	r3, #213	; 0xd5
 8004f4c:	d146      	bne.n	8004fdc <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8004f4e:	4b4d      	ldr	r3, [pc, #308]	; (8005084 <BSP_GYRO_Init+0x164>)
 8004f50:	4a4b      	ldr	r2, [pc, #300]	; (8005080 <BSP_GYRO_Init+0x160>)
 8004f52:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8004f54:	2308      	movs	r3, #8
 8004f56:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8004f5c:	2307      	movs	r3, #7
 8004f5e:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8004f60:	2330      	movs	r3, #48	; 0x30
 8004f62:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8004f64:	2300      	movs	r3, #0
 8004f66:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004f70:	793a      	ldrb	r2, [r7, #4]
 8004f72:	797b      	ldrb	r3, [r7, #5]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004f78:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004f86:	7a3a      	ldrb	r2, [r7, #8]
 8004f88:	7a7b      	ldrb	r3, [r7, #9]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8004f8e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	89bb      	ldrh	r3, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8004fa0:	4b38      	ldr	r3, [pc, #224]	; (8005084 <BSP_GYRO_Init+0x164>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	89ba      	ldrh	r2, [r7, #12]
 8004fa8:	4610      	mov	r0, r2
 8004faa:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8004fac:	2300      	movs	r3, #0
 8004fae:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004fb4:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8004fb6:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8004fbe:	4b31      	ldr	r3, [pc, #196]	; (8005084 <BSP_GYRO_Init+0x164>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc4:	89ba      	ldrh	r2, [r7, #12]
 8004fc6:	b2d2      	uxtb	r2, r2
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8004fcc:	4b2d      	ldr	r3, [pc, #180]	; (8005084 <BSP_GYRO_Init+0x164>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd2:	2010      	movs	r0, #16
 8004fd4:	4798      	blx	r3

    ret = GYRO_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	e04b      	b.n	8005074 <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <BSP_GYRO_Init+0x168>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	4798      	blx	r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2bd3      	cmp	r3, #211	; 0xd3
 8004fe6:	d145      	bne.n	8005074 <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 8004fe8:	4b26      	ldr	r3, [pc, #152]	; (8005084 <BSP_GYRO_Init+0x164>)
 8004fea:	4a27      	ldr	r2, [pc, #156]	; (8005088 <BSP_GYRO_Init+0x168>)
 8004fec:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 8004fee:	2308      	movs	r3, #8
 8004ff0:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 8004ff6:	2307      	movs	r3, #7
 8004ff8:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8004ffa:	2330      	movs	r3, #48	; 0x30
 8004ffc:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8004ffe:	2300      	movs	r3, #0
 8005000:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 8005002:	2300      	movs	r3, #0
 8005004:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 8005006:	2310      	movs	r3, #16
 8005008:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800500a:	793a      	ldrb	r2, [r7, #4]
 800500c:	797b      	ldrb	r3, [r7, #5]
 800500e:	4313      	orrs	r3, r2
 8005010:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005012:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005014:	4313      	orrs	r3, r2
 8005016:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005018:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800501a:	4313      	orrs	r3, r2
 800501c:	b2db      	uxtb	r3, r3
 800501e:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005020:	7a3a      	ldrb	r2, [r7, #8]
 8005022:	7a7b      	ldrb	r3, [r7, #9]
 8005024:	4313      	orrs	r3, r2
 8005026:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005028:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800502a:	4313      	orrs	r3, r2
 800502c:	b2db      	uxtb	r3, r3
 800502e:	b29b      	uxth	r3, r3
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	b29a      	uxth	r2, r3
 8005034:	89bb      	ldrh	r3, [r7, #12]
 8005036:	4313      	orrs	r3, r2
 8005038:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 800503a:	4b12      	ldr	r3, [pc, #72]	; (8005084 <BSP_GYRO_Init+0x164>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	89ba      	ldrh	r2, [r7, #12]
 8005042:	4610      	mov	r0, r2
 8005044:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 8005046:	2300      	movs	r3, #0
 8005048:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 800504a:	2300      	movs	r3, #0
 800504c:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800504e:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8005050:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005052:	4313      	orrs	r3, r2
 8005054:	b2db      	uxtb	r3, r3
 8005056:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <BSP_GYRO_Init+0x164>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505e:	89ba      	ldrh	r2, [r7, #12]
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	4610      	mov	r0, r2
 8005064:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 8005066:	4b07      	ldr	r3, [pc, #28]	; (8005084 <BSP_GYRO_Init+0x164>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	2010      	movs	r0, #16
 800506e:	4798      	blx	r3

    ret = GYRO_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20000080 	.word	0x20000080
 8005084:	200006b8 	.word	0x200006b8
 8005088:	2000004c 	.word	0x2000004c

0800508c <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <BSP_GYRO_GetXYZ+0x24>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 800509e:	4b04      	ldr	r3, [pc, #16]	; (80050b0 <BSP_GYRO_GetXYZ+0x24>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	4798      	blx	r3
  }
}
 80050a8:	bf00      	nop
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	200006b8 	.word	0x200006b8

080050b4 <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80050be:	2300      	movs	r3, #0
 80050c0:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 80050c2:	f001 f8df 	bl	8006284 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80050c6:	88fb      	ldrh	r3, [r7, #6]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80050cc:	f107 030f 	add.w	r3, r7, #15
 80050d0:	2201      	movs	r2, #1
 80050d2:	2120      	movs	r1, #32
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 f91b 	bl	8006310 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	b29b      	uxth	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80050e4:	f107 030f 	add.w	r3, r7, #15
 80050e8:	2201      	movs	r2, #1
 80050ea:	2123      	movs	r1, #35	; 0x23
 80050ec:	4618      	mov	r0, r3
 80050ee:	f001 f90f 	bl	8006310 <GYRO_IO_Write>
}
 80050f2:	bf00      	nop
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 80050fa:	b480      	push	{r7}
 80050fc:	af00      	add	r7, sp, #0
}
 80050fe:	bf00      	nop
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 800510e:	f001 f8b9 	bl	8006284 <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 8005112:	1dfb      	adds	r3, r7, #7
 8005114:	2201      	movs	r2, #1
 8005116:	210f      	movs	r1, #15
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f92b 	bl	8006374 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 800511e:	79fb      	ldrb	r3, [r7, #7]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800512e:	1dfb      	adds	r3, r7, #7
 8005130:	2201      	movs	r2, #1
 8005132:	2124      	movs	r1, #36	; 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f001 f91d 	bl	8006374 <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005140:	b2db      	uxtb	r3, r3
 8005142:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	2201      	movs	r2, #1
 8005148:	2124      	movs	r1, #36	; 0x24
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f8e0 	bl	8006310 <GYRO_IO_Write>
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 800516c:	f107 030f 	add.w	r3, r7, #15
 8005170:	2201      	movs	r2, #1
 8005172:	2120      	movs	r1, #32
 8005174:	4618      	mov	r0, r3
 8005176:	f001 f8cb 	bl	8006310 <GYRO_IO_Write>
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	4603      	mov	r3, r0
 800518a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	2300      	movs	r3, #0
 8005192:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 8005194:	f107 030f 	add.w	r3, r7, #15
 8005198:	2201      	movs	r2, #1
 800519a:	2130      	movs	r1, #48	; 0x30
 800519c:	4618      	mov	r0, r3
 800519e:	f001 f8e9 	bl	8006374 <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80051a2:	f107 030e 	add.w	r3, r7, #14
 80051a6:	2201      	movs	r2, #1
 80051a8:	2122      	movs	r1, #34	; 0x22
 80051aa:	4618      	mov	r0, r3
 80051ac:	f001 f8e2 	bl	8006374 <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
 80051b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	121b      	asrs	r3, r3, #8
 80051c0:	b25a      	sxtb	r2, r3
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	b25b      	sxtb	r3, r3
 80051c6:	4313      	orrs	r3, r2
 80051c8:	b25b      	sxtb	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80051ce:	7bbb      	ldrb	r3, [r7, #14]
 80051d0:	f023 0320 	bic.w	r3, r3, #32
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	4313      	orrs	r3, r2
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80051e4:	f107 030f 	add.w	r3, r7, #15
 80051e8:	2201      	movs	r2, #1
 80051ea:	2130      	movs	r1, #48	; 0x30
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 f88f 	bl	8006310 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80051f2:	f107 030e 	add.w	r3, r7, #14
 80051f6:	2201      	movs	r2, #1
 80051f8:	2122      	movs	r1, #34	; 0x22
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 f888 	bl	8006310 <GYRO_IO_Write>
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	4603      	mov	r3, r0
 8005210:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8005212:	f107 030f 	add.w	r3, r7, #15
 8005216:	2201      	movs	r2, #1
 8005218:	2122      	movs	r1, #34	; 0x22
 800521a:	4618      	mov	r0, r3
 800521c:	f001 f8aa 	bl	8006374 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10a      	bne.n	800523c <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522c:	b2db      	uxtb	r3, r3
 800522e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005236:	b2db      	uxtb	r3, r3
 8005238:	73fb      	strb	r3, [r7, #15]
 800523a:	e00c      	b.n	8005256 <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d109      	bne.n	8005256 <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	f023 0308 	bic.w	r3, r3, #8
 8005248:	b2db      	uxtb	r3, r3
 800524a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	f043 0308 	orr.w	r3, r3, #8
 8005252:	b2db      	uxtb	r3, r3
 8005254:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8005256:	f107 030f 	add.w	r3, r7, #15
 800525a:	2201      	movs	r2, #1
 800525c:	2122      	movs	r1, #34	; 0x22
 800525e:	4618      	mov	r0, r3
 8005260:	f001 f856 	bl	8006310 <GYRO_IO_Write>
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 8005276:	f107 030f 	add.w	r3, r7, #15
 800527a:	2201      	movs	r2, #1
 800527c:	2122      	movs	r1, #34	; 0x22
 800527e:	4618      	mov	r0, r3
 8005280:	f001 f878 	bl	8006374 <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d107      	bne.n	800529a <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005290:	b2db      	uxtb	r3, r3
 8005292:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e009      	b.n	80052ae <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d106      	bne.n	80052ae <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
 80052a2:	f023 0308 	bic.w	r3, r3, #8
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80052ae:	f107 030f 	add.w	r3, r7, #15
 80052b2:	2201      	movs	r2, #1
 80052b4:	2122      	movs	r1, #34	; 0x22
 80052b6:	4618      	mov	r0, r3
 80052b8:	f001 f82a 	bl	8006310 <GYRO_IO_Write>
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80052ce:	f107 030f 	add.w	r3, r7, #15
 80052d2:	2201      	movs	r2, #1
 80052d4:	2121      	movs	r1, #33	; 0x21
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f84c 	bl	8006374 <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80052e6:	7bfa      	ldrb	r2, [r7, #15]
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80052f0:	f107 030f 	add.w	r3, r7, #15
 80052f4:	2201      	movs	r2, #1
 80052f6:	2121      	movs	r1, #33	; 0x21
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f809 	bl	8006310 <GYRO_IO_Write>
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	4603      	mov	r3, r0
 800530e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005310:	f107 030f 	add.w	r3, r7, #15
 8005314:	2201      	movs	r2, #1
 8005316:	2124      	movs	r1, #36	; 0x24
 8005318:	4618      	mov	r0, r3
 800531a:	f001 f82b 	bl	8006374 <GYRO_IO_Read>

  tmpreg &= 0xEF;
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	b2db      	uxtb	r3, r3
 8005326:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8005328:	7bfa      	ldrb	r2, [r7, #15]
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	4313      	orrs	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005332:	f107 030f 	add.w	r3, r7, #15
 8005336:	2201      	movs	r2, #1
 8005338:	2124      	movs	r1, #36	; 0x24
 800533a:	4618      	mov	r0, r3
 800533c:	f000 ffe8 	bl	8006310 <GYRO_IO_Write>
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	2300      	movs	r3, #0
 8005356:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005358:	f107 0310 	add.w	r3, r7, #16
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8005370:	f107 030f 	add.w	r3, r7, #15
 8005374:	2201      	movs	r2, #1
 8005376:	2123      	movs	r1, #35	; 0x23
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fffb 	bl	8006374 <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 800537e:	f107 0318 	add.w	r3, r7, #24
 8005382:	2206      	movs	r2, #6
 8005384:	2128      	movs	r1, #40	; 0x28
 8005386:	4618      	mov	r0, r3
 8005388:	f000 fff4 	bl	8006374 <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d123      	bne.n	80053de <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	623b      	str	r3, [r7, #32]
 800539a:	e01c      	b.n	80053d6 <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	3301      	adds	r3, #1
 80053a2:	3328      	adds	r3, #40	; 0x28
 80053a4:	443b      	add	r3, r7
 80053a6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	b29a      	uxth	r2, r3
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	3328      	adds	r3, #40	; 0x28
 80053b6:	443b      	add	r3, r7
 80053b8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	4413      	add	r3, r2
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	b21a      	sxth	r2, r3
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	3328      	adds	r3, #40	; 0x28
 80053ca:	443b      	add	r3, r7
 80053cc:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	3301      	adds	r3, #1
 80053d4:	623b      	str	r3, [r7, #32]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	dddf      	ble.n	800539c <I3G4250D_ReadXYZAngRate+0x54>
 80053dc:	e022      	b.n	8005424 <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80053de:	2300      	movs	r3, #0
 80053e0:	623b      	str	r3, [r7, #32]
 80053e2:	e01c      	b.n	800541e <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	3328      	adds	r3, #40	; 0x28
 80053ea:	443b      	add	r3, r7
 80053ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	021b      	lsls	r3, r3, #8
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	3301      	adds	r3, #1
 80053fc:	3328      	adds	r3, #40	; 0x28
 80053fe:	443b      	add	r3, r7
 8005400:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005404:	b29b      	uxth	r3, r3
 8005406:	4413      	add	r3, r2
 8005408:	b29b      	uxth	r3, r3
 800540a:	b21a      	sxth	r2, r3
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	3328      	adds	r3, #40	; 0x28
 8005412:	443b      	add	r3, r7
 8005414:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	3301      	adds	r3, #1
 800541c:	623b      	str	r3, [r7, #32]
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	2b02      	cmp	r3, #2
 8005422:	dddf      	ble.n	80053e4 <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 8005424:	7bfb      	ldrb	r3, [r7, #15]
 8005426:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800542a:	2b20      	cmp	r3, #32
 800542c:	d00c      	beq.n	8005448 <I3G4250D_ReadXYZAngRate+0x100>
 800542e:	2b20      	cmp	r3, #32
 8005430:	dc0d      	bgt.n	800544e <I3G4250D_ReadXYZAngRate+0x106>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <I3G4250D_ReadXYZAngRate+0xf4>
 8005436:	2b10      	cmp	r3, #16
 8005438:	d003      	beq.n	8005442 <I3G4250D_ReadXYZAngRate+0xfa>
 800543a:	e008      	b.n	800544e <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 800543c:	4b15      	ldr	r3, [pc, #84]	; (8005494 <I3G4250D_ReadXYZAngRate+0x14c>)
 800543e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005440:	e005      	b.n	800544e <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 8005442:	4b15      	ldr	r3, [pc, #84]	; (8005498 <I3G4250D_ReadXYZAngRate+0x150>)
 8005444:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005446:	e002      	b.n	800544e <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <I3G4250D_ReadXYZAngRate+0x154>)
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800544c:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 800544e:	2300      	movs	r3, #0
 8005450:	623b      	str	r3, [r7, #32]
 8005452:	e016      	b.n	8005482 <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	3328      	adds	r3, #40	; 0x28
 800545a:	443b      	add	r3, r7
 800545c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005478:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	3301      	adds	r3, #1
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	2b02      	cmp	r3, #2
 8005486:	dde5      	ble.n	8005454 <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	3728      	adds	r7, #40	; 0x28
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	410c0000 	.word	0x410c0000
 8005498:	418c0000 	.word	0x418c0000
 800549c:	428c0000 	.word	0x428c0000

080054a0 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80054aa:	2300      	movs	r3, #0
 80054ac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80054ae:	f000 fee9 	bl	8006284 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80054b2:	88fb      	ldrh	r3, [r7, #6]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80054b8:	f107 030f 	add.w	r3, r7, #15
 80054bc:	2201      	movs	r2, #1
 80054be:	2120      	movs	r1, #32
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 ff25 	bl	8006310 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	0a1b      	lsrs	r3, r3, #8
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80054d0:	f107 030f 	add.w	r3, r7, #15
 80054d4:	2201      	movs	r2, #1
 80054d6:	2123      	movs	r1, #35	; 0x23
 80054d8:	4618      	mov	r0, r3
 80054da:	f000 ff19 	bl	8006310 <GYRO_IO_Write>
}
 80054de:	bf00      	nop
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80054e6:	b480      	push	{r7}
 80054e8:	af00      	add	r7, sp, #0
}
 80054ea:	bf00      	nop
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80054fa:	f000 fec3 	bl	8006284 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80054fe:	1dfb      	adds	r3, r7, #7
 8005500:	2201      	movs	r2, #1
 8005502:	210f      	movs	r1, #15
 8005504:	4618      	mov	r0, r3
 8005506:	f000 ff35 	bl	8006374 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800550a:	79fb      	ldrb	r3, [r7, #7]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800551a:	1dfb      	adds	r3, r7, #7
 800551c:	2201      	movs	r2, #1
 800551e:	2124      	movs	r1, #36	; 0x24
 8005520:	4618      	mov	r0, r3
 8005522:	f000 ff27 	bl	8006374 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8005526:	79fb      	ldrb	r3, [r7, #7]
 8005528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800552c:	b2db      	uxtb	r3, r3
 800552e:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005530:	1dfb      	adds	r3, r7, #7
 8005532:	2201      	movs	r2, #1
 8005534:	2124      	movs	r1, #36	; 0x24
 8005536:	4618      	mov	r0, r3
 8005538:	f000 feea 	bl	8006310 <GYRO_IO_Write>
}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	4603      	mov	r3, r0
 800554c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005552:	88fb      	ldrh	r3, [r7, #6]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005558:	f107 030f 	add.w	r3, r7, #15
 800555c:	2201      	movs	r2, #1
 800555e:	2120      	movs	r1, #32
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fed5 	bl	8006310 <GYRO_IO_Write>
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	4603      	mov	r3, r0
 8005576:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005578:	2300      	movs	r3, #0
 800557a:	73fb      	strb	r3, [r7, #15]
 800557c:	2300      	movs	r3, #0
 800557e:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005580:	f107 030f 	add.w	r3, r7, #15
 8005584:	2201      	movs	r2, #1
 8005586:	2130      	movs	r1, #48	; 0x30
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fef3 	bl	8006374 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 800558e:	f107 030e 	add.w	r3, r7, #14
 8005592:	2201      	movs	r2, #1
 8005594:	2122      	movs	r1, #34	; 0x22
 8005596:	4618      	mov	r0, r3
 8005598:	f000 feec 	bl	8006374 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80055a6:	88fb      	ldrh	r3, [r7, #6]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	121b      	asrs	r3, r3, #8
 80055ac:	b25a      	sxtb	r2, r3
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	b25b      	sxtb	r3, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	f023 0320 	bic.w	r3, r3, #32
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	7bbb      	ldrb	r3, [r7, #14]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80055d0:	f107 030f 	add.w	r3, r7, #15
 80055d4:	2201      	movs	r2, #1
 80055d6:	2130      	movs	r1, #48	; 0x30
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fe99 	bl	8006310 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80055de:	f107 030e 	add.w	r3, r7, #14
 80055e2:	2201      	movs	r2, #1
 80055e4:	2122      	movs	r1, #34	; 0x22
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 fe92 	bl	8006310 <GYRO_IO_Write>
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4603      	mov	r3, r0
 80055fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80055fe:	f107 030f 	add.w	r3, r7, #15
 8005602:	2201      	movs	r2, #1
 8005604:	2122      	movs	r1, #34	; 0x22
 8005606:	4618      	mov	r0, r3
 8005608:	f000 feb4 	bl	8006374 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005618:	b2db      	uxtb	r3, r3
 800561a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005622:	b2db      	uxtb	r3, r3
 8005624:	73fb      	strb	r3, [r7, #15]
 8005626:	e00c      	b.n	8005642 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d109      	bne.n	8005642 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	f023 0308 	bic.w	r3, r3, #8
 8005634:	b2db      	uxtb	r3, r3
 8005636:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	f043 0308 	orr.w	r3, r3, #8
 800563e:	b2db      	uxtb	r3, r3
 8005640:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005642:	f107 030f 	add.w	r3, r7, #15
 8005646:	2201      	movs	r2, #1
 8005648:	2122      	movs	r1, #34	; 0x22
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fe60 	bl	8006310 <GYRO_IO_Write>
}
 8005650:	bf00      	nop
 8005652:	3710      	adds	r7, #16
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005662:	f107 030f 	add.w	r3, r7, #15
 8005666:	2201      	movs	r2, #1
 8005668:	2122      	movs	r1, #34	; 0x22
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fe82 	bl	8006374 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d107      	bne.n	8005686 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8005676:	7bfb      	ldrb	r3, [r7, #15]
 8005678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567c:	b2db      	uxtb	r3, r3
 800567e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	73fb      	strb	r3, [r7, #15]
 8005684:	e009      	b.n	800569a <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d106      	bne.n	800569a <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	f023 0308 	bic.w	r3, r3, #8
 8005692:	b2db      	uxtb	r3, r3
 8005694:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800569a:	f107 030f 	add.w	r3, r7, #15
 800569e:	2201      	movs	r2, #1
 80056a0:	2122      	movs	r1, #34	; 0x22
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fe34 	bl	8006310 <GYRO_IO_Write>
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	4603      	mov	r3, r0
 80056b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80056ba:	f107 030f 	add.w	r3, r7, #15
 80056be:	2201      	movs	r2, #1
 80056c0:	2121      	movs	r1, #33	; 0x21
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fe56 	bl	8006374 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
 80056ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80056d2:	7bfa      	ldrb	r2, [r7, #15]
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80056dc:	f107 030f 	add.w	r3, r7, #15
 80056e0:	2201      	movs	r2, #1
 80056e2:	2121      	movs	r1, #33	; 0x21
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fe13 	bl	8006310 <GYRO_IO_Write>
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b084      	sub	sp, #16
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	4603      	mov	r3, r0
 80056fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80056fc:	f107 030f 	add.w	r3, r7, #15
 8005700:	2201      	movs	r2, #1
 8005702:	2124      	movs	r1, #36	; 0x24
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fe35 	bl	8006374 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	f023 0310 	bic.w	r3, r3, #16
 8005710:	b2db      	uxtb	r3, r3
 8005712:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	79fb      	ldrb	r3, [r7, #7]
 8005718:	4313      	orrs	r3, r2
 800571a:	b2db      	uxtb	r3, r3
 800571c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800571e:	f107 030f 	add.w	r3, r7, #15
 8005722:	2201      	movs	r2, #1
 8005724:	2124      	movs	r1, #36	; 0x24
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fdf2 	bl	8006310 <GYRO_IO_Write>
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 800573c:	2300      	movs	r3, #0
 800573e:	61bb      	str	r3, [r7, #24]
 8005740:	2300      	movs	r3, #0
 8005742:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005744:	f107 0310 	add.w	r3, r7, #16
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8005758:	2300      	movs	r3, #0
 800575a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 800575c:	f107 030f 	add.w	r3, r7, #15
 8005760:	2201      	movs	r2, #1
 8005762:	2123      	movs	r1, #35	; 0x23
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fe05 	bl	8006374 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800576a:	f107 0318 	add.w	r3, r7, #24
 800576e:	2206      	movs	r2, #6
 8005770:	2128      	movs	r1, #40	; 0x28
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fdfe 	bl	8006374 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8005778:	7bfb      	ldrb	r3, [r7, #15]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d123      	bne.n	80057ca <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	623b      	str	r3, [r7, #32]
 8005786:	e01c      	b.n	80057c2 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	3301      	adds	r3, #1
 800578e:	3328      	adds	r3, #40	; 0x28
 8005790:	443b      	add	r3, r7
 8005792:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005796:	b29b      	uxth	r3, r3
 8005798:	021b      	lsls	r3, r3, #8
 800579a:	b29a      	uxth	r2, r3
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	3328      	adds	r3, #40	; 0x28
 80057a2:	443b      	add	r3, r7
 80057a4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	4413      	add	r3, r2
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	b21a      	sxth	r2, r3
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	3328      	adds	r3, #40	; 0x28
 80057b6:	443b      	add	r3, r7
 80057b8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	3301      	adds	r3, #1
 80057c0:	623b      	str	r3, [r7, #32]
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	dddf      	ble.n	8005788 <L3GD20_ReadXYZAngRate+0x54>
 80057c8:	e022      	b.n	8005810 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80057ca:	2300      	movs	r3, #0
 80057cc:	623b      	str	r3, [r7, #32]
 80057ce:	e01c      	b.n	800580a <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	3328      	adds	r3, #40	; 0x28
 80057d6:	443b      	add	r3, r7
 80057d8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	021b      	lsls	r3, r3, #8
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	3301      	adds	r3, #1
 80057e8:	3328      	adds	r3, #40	; 0x28
 80057ea:	443b      	add	r3, r7
 80057ec:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	4413      	add	r3, r2
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	b21a      	sxth	r2, r3
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	3328      	adds	r3, #40	; 0x28
 80057fe:	443b      	add	r3, r7
 8005800:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	3301      	adds	r3, #1
 8005808:	623b      	str	r3, [r7, #32]
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2b02      	cmp	r3, #2
 800580e:	dddf      	ble.n	80057d0 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005816:	2b20      	cmp	r3, #32
 8005818:	d00c      	beq.n	8005834 <L3GD20_ReadXYZAngRate+0x100>
 800581a:	2b20      	cmp	r3, #32
 800581c:	dc0d      	bgt.n	800583a <L3GD20_ReadXYZAngRate+0x106>
 800581e:	2b00      	cmp	r3, #0
 8005820:	d002      	beq.n	8005828 <L3GD20_ReadXYZAngRate+0xf4>
 8005822:	2b10      	cmp	r3, #16
 8005824:	d003      	beq.n	800582e <L3GD20_ReadXYZAngRate+0xfa>
 8005826:	e008      	b.n	800583a <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <L3GD20_ReadXYZAngRate+0x14c>)
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800582c:	e005      	b.n	800583a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <L3GD20_ReadXYZAngRate+0x150>)
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005832:	e002      	b.n	800583a <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8005834:	4b14      	ldr	r3, [pc, #80]	; (8005888 <L3GD20_ReadXYZAngRate+0x154>)
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005838:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	e016      	b.n	800586e <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	3328      	adds	r3, #40	; 0x28
 8005846:	443b      	add	r3, r7
 8005848:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4413      	add	r3, r2
 800585c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005864:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	3301      	adds	r3, #1
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	2b02      	cmp	r3, #2
 8005872:	dde5      	ble.n	8005840 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	410c0000 	.word	0x410c0000
 8005884:	418c0000 	.word	0x418c0000
 8005888:	428c0000 	.word	0x428c0000

0800588c <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 800589a:	f000 fda5 	bl	80063e8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	461a      	mov	r2, r3
 80058a6:	2120      	movs	r1, #32
 80058a8:	2032      	movs	r0, #50	; 0x32
 80058aa:	f000 fe15 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	461a      	mov	r2, r3
 80058b6:	2123      	movs	r1, #35	; 0x23
 80058b8:	2032      	movs	r0, #50	; 0x32
 80058ba:	f000 fe0d 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 80058c6:	b480      	push	{r7}
 80058c8:	af00      	add	r7, sp, #0
}
 80058ca:	bf00      	nop
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80058da:	2300      	movs	r3, #0
 80058dc:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80058de:	f000 fd83 	bl	80063e8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 80058e2:	210f      	movs	r1, #15
 80058e4:	2032      	movs	r0, #50	; 0x32
 80058e6:	f000 fe0a 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 80058ee:	79fb      	ldrb	r3, [r7, #7]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80058fe:	2124      	movs	r1, #36	; 0x24
 8005900:	2032      	movs	r0, #50	; 0x32
 8005902:	f000 fdfc 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 800590a:	79fb      	ldrb	r3, [r7, #7]
 800590c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005910:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8005912:	79fb      	ldrb	r3, [r7, #7]
 8005914:	461a      	mov	r2, r3
 8005916:	2124      	movs	r1, #36	; 0x24
 8005918:	2032      	movs	r0, #50	; 0x32
 800591a:	f000 fddd 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b084      	sub	sp, #16
 800592a:	af00      	add	r7, sp, #0
 800592c:	4603      	mov	r3, r0
 800592e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005930:	2121      	movs	r1, #33	; 0x21
 8005932:	2032      	movs	r0, #50	; 0x32
 8005934:	f000 fde3 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005938:	4603      	mov	r3, r0
 800593a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	f003 030c 	and.w	r3, r3, #12
 8005942:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	4313      	orrs	r3, r2
 800594a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	461a      	mov	r2, r3
 8005950:	2121      	movs	r1, #33	; 0x21
 8005952:	2032      	movs	r0, #50	; 0x32
 8005954:	f000 fdc0 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	4603      	mov	r3, r0
 8005968:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 800596a:	2121      	movs	r1, #33	; 0x21
 800596c:	2032      	movs	r0, #50	; 0x32
 800596e:	f000 fdc6 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	f023 0308 	bic.w	r3, r3, #8
 800597c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	4313      	orrs	r3, r2
 8005984:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	461a      	mov	r2, r3
 800598a:	2121      	movs	r1, #33	; 0x21
 800598c:	2032      	movs	r0, #50	; 0x32
 800598e:	f000 fda3 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b088      	sub	sp, #32
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80059a2:	2300      	movs	r3, #0
 80059a4:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 80059aa:	2301      	movs	r3, #1
 80059ac:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 80059ae:	2123      	movs	r1, #35	; 0x23
 80059b0:	2032      	movs	r0, #50	; 0x32
 80059b2:	f000 fda4 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80059b6:	4603      	mov	r3, r0
 80059b8:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 80059ba:	2124      	movs	r1, #36	; 0x24
 80059bc:	2032      	movs	r0, #50	; 0x32
 80059be:	f000 fd9e 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80059c2:	4603      	mov	r3, r0
 80059c4:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 80059c6:	2128      	movs	r1, #40	; 0x28
 80059c8:	2032      	movs	r0, #50	; 0x32
 80059ca:	f000 fd98 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80059ce:	4603      	mov	r3, r0
 80059d0:	b25b      	sxtb	r3, r3
 80059d2:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 80059d4:	2129      	movs	r1, #41	; 0x29
 80059d6:	2032      	movs	r0, #50	; 0x32
 80059d8:	f000 fd91 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80059dc:	4603      	mov	r3, r0
 80059de:	b25b      	sxtb	r3, r3
 80059e0:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 80059e2:	212a      	movs	r1, #42	; 0x2a
 80059e4:	2032      	movs	r0, #50	; 0x32
 80059e6:	f000 fd8a 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80059ea:	4603      	mov	r3, r0
 80059ec:	b25b      	sxtb	r3, r3
 80059ee:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 80059f0:	212b      	movs	r1, #43	; 0x2b
 80059f2:	2032      	movs	r0, #50	; 0x32
 80059f4:	f000 fd83 	bl	80064fe <COMPASSACCELERO_IO_Read>
 80059f8:	4603      	mov	r3, r0
 80059fa:	b25b      	sxtb	r3, r3
 80059fc:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 80059fe:	212c      	movs	r1, #44	; 0x2c
 8005a00:	2032      	movs	r0, #50	; 0x32
 8005a02:	f000 fd7c 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005a06:	4603      	mov	r3, r0
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8005a0c:	212d      	movs	r1, #45	; 0x2d
 8005a0e:	2032      	movs	r0, #50	; 0x32
 8005a10:	f000 fd75 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005a14:	4603      	mov	r3, r0
 8005a16:	b25b      	sxtb	r3, r3
 8005a18:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8005a1a:	7d3b      	ldrb	r3, [r7, #20]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d123      	bne.n	8005a6c <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	77fb      	strb	r3, [r7, #31]
 8005a28:	e01c      	b.n	8005a64 <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8005a2a:	7ffb      	ldrb	r3, [r7, #31]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	3301      	adds	r3, #1
 8005a30:	3320      	adds	r3, #32
 8005a32:	443b      	add	r3, r7
 8005a34:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	7ffb      	ldrb	r3, [r7, #31]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	3320      	adds	r3, #32
 8005a44:	443b      	add	r3, r7
 8005a46:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4413      	add	r3, r2
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	7ffb      	ldrb	r3, [r7, #31]
 8005a52:	b212      	sxth	r2, r2
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	3320      	adds	r3, #32
 8005a58:	443b      	add	r3, r7
 8005a5a:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005a5e:	7ffb      	ldrb	r3, [r7, #31]
 8005a60:	3301      	adds	r3, #1
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d9df      	bls.n	8005a2a <LSM303AGR_AccReadXYZ+0x90>
 8005a6a:	e022      	b.n	8005ab2 <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e01c      	b.n	8005aac <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8005a72:	7ffb      	ldrb	r3, [r7, #31]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	3320      	adds	r3, #32
 8005a78:	443b      	add	r3, r7
 8005a7a:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	7ffb      	ldrb	r3, [r7, #31]
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	3301      	adds	r3, #1
 8005a8a:	3320      	adds	r3, #32
 8005a8c:	443b      	add	r3, r7
 8005a8e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4413      	add	r3, r2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	7ffb      	ldrb	r3, [r7, #31]
 8005a9a:	b212      	sxth	r2, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	3320      	adds	r3, #32
 8005aa0:	443b      	add	r3, r7
 8005aa2:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005aa6:	7ffb      	ldrb	r3, [r7, #31]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	7ffb      	ldrb	r3, [r7, #31]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d9df      	bls.n	8005a72 <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8005ab2:	7d3b      	ldrb	r3, [r7, #20]
 8005ab4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ab8:	2b30      	cmp	r3, #48	; 0x30
 8005aba:	d013      	beq.n	8005ae4 <LSM303AGR_AccReadXYZ+0x14a>
 8005abc:	2b30      	cmp	r3, #48	; 0x30
 8005abe:	dc14      	bgt.n	8005aea <LSM303AGR_AccReadXYZ+0x150>
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d00c      	beq.n	8005ade <LSM303AGR_AccReadXYZ+0x144>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	dc10      	bgt.n	8005aea <LSM303AGR_AccReadXYZ+0x150>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <LSM303AGR_AccReadXYZ+0x138>
 8005acc:	2b10      	cmp	r3, #16
 8005ace:	d003      	beq.n	8005ad8 <LSM303AGR_AccReadXYZ+0x13e>
 8005ad0:	e00b      	b.n	8005aea <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	77bb      	strb	r3, [r7, #30]
    break;
 8005ad6:	e008      	b.n	8005aea <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8005ad8:	2302      	movs	r3, #2
 8005ada:	77bb      	strb	r3, [r7, #30]
    break;
 8005adc:	e005      	b.n	8005aea <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	77bb      	strb	r3, [r7, #30]
    break;
 8005ae2:	e002      	b.n	8005aea <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	77bb      	strb	r3, [r7, #30]
    break;
 8005ae8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005aea:	2300      	movs	r3, #0
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e014      	b.n	8005b1a <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8005af0:	7ffb      	ldrb	r3, [r7, #31]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	3320      	adds	r3, #32
 8005af6:	443b      	add	r3, r7
 8005af8:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	7fbb      	ldrb	r3, [r7, #30]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	fb12 f303 	smulbb	r3, r2, r3
 8005b06:	b299      	uxth	r1, r3
 8005b08:	7ffb      	ldrb	r3, [r7, #31]
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	4413      	add	r3, r2
 8005b10:	b20a      	sxth	r2, r1
 8005b12:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005b14:	7ffb      	ldrb	r3, [r7, #31]
 8005b16:	3301      	adds	r3, #1
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	7ffb      	ldrb	r3, [r7, #31]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d9e7      	bls.n	8005af0 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8005b20:	bf00      	nop
 8005b22:	bf00      	nop
 8005b24:	3720      	adds	r7, #32
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	4603      	mov	r3, r0
 8005b32:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005b38:	2121      	movs	r1, #33	; 0x21
 8005b3a:	2032      	movs	r0, #50	; 0x32
 8005b3c:	f000 fcdf 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	f023 0304 	bic.w	r3, r3, #4
 8005b4a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8005b4c:	7bfa      	ldrb	r2, [r7, #15]
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005b54:	7bfb      	ldrb	r3, [r7, #15]
 8005b56:	461a      	mov	r2, r3
 8005b58:	2121      	movs	r1, #33	; 0x21
 8005b5a:	2032      	movs	r0, #50	; 0x32
 8005b5c:	f000 fcbc 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8005b76:	2122      	movs	r1, #34	; 0x22
 8005b78:	2032      	movs	r0, #50	; 0x32
 8005b7a:	f000 fcc0 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8005b82:	7bfa      	ldrb	r2, [r7, #15]
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2122      	movs	r1, #34	; 0x22
 8005b90:	2032      	movs	r0, #50	; 0x32
 8005b92:	f000 fca1 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8005bac:	2138      	movs	r1, #56	; 0x38
 8005bae:	2032      	movs	r0, #50	; 0x32
 8005bb0:	f000 fca5 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8005bc0:	7bfb      	ldrb	r3, [r7, #15]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	2138      	movs	r1, #56	; 0x38
 8005bc6:	2032      	movs	r0, #50	; 0x32
 8005bc8:	f000 fc86 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8005bcc:	230a      	movs	r3, #10
 8005bce:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8005bd0:	7bfb      	ldrb	r3, [r7, #15]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	213a      	movs	r1, #58	; 0x3a
 8005bd6:	2032      	movs	r0, #50	; 0x32
 8005bd8:	f000 fc7e 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8005bdc:	2305      	movs	r3, #5
 8005bde:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8005be0:	7bfb      	ldrb	r3, [r7, #15]
 8005be2:	461a      	mov	r2, r3
 8005be4:	213b      	movs	r1, #59	; 0x3b
 8005be6:	2032      	movs	r0, #50	; 0x32
 8005be8:	f000 fc76 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	213c      	movs	r1, #60	; 0x3c
 8005bf2:	2032      	movs	r0, #50	; 0x32
 8005bf4:	f000 fc70 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8005bf8:	2332      	movs	r3, #50	; 0x32
 8005bfa:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	213d      	movs	r1, #61	; 0x3d
 8005c02:	2032      	movs	r0, #50	; 0x32
 8005c04:	f000 fc68 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8005c14:	f000 fc32 	bl	800647c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8005c18:	2080      	movs	r0, #128	; 0x80
 8005c1a:	f7ff ffa5 	bl	8005b68 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8005c1e:	2004      	movs	r0, #4
 8005c20:	f7ff ff83 	bl	8005b2a <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 8005c24:	2010      	movs	r0, #16
 8005c26:	f7ff ffba 	bl	8005b9e <LSM303AGR_AccClickITEnable>
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b084      	sub	sp, #16
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	4603      	mov	r3, r0
 8005c36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005c3c:	f000 fbd4 	bl	80063e8 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
 8005c46:	461a      	mov	r2, r3
 8005c48:	2120      	movs	r1, #32
 8005c4a:	2032      	movs	r0, #50	; 0x32
 8005c4c:	f000 fc44 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8005c50:	2300      	movs	r3, #0
 8005c52:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
 8005c56:	461a      	mov	r2, r3
 8005c58:	2123      	movs	r1, #35	; 0x23
 8005c5a:	2032      	movs	r0, #50	; 0x32
 8005c5c:	f000 fc3c 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8005c68:	b480      	push	{r7}
 8005c6a:	af00      	add	r7, sp, #0
}
 8005c6c:	bf00      	nop
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8005c80:	f000 fbb2 	bl	80063e8 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8005c84:	210f      	movs	r1, #15
 8005c86:	2032      	movs	r0, #50	; 0x32
 8005c88:	f000 fc39 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8005c90:	79fb      	ldrb	r3, [r7, #7]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005ca0:	2124      	movs	r1, #36	; 0x24
 8005ca2:	2032      	movs	r0, #50	; 0x32
 8005ca4:	f000 fc2b 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8005cac:	79fb      	ldrb	r3, [r7, #7]
 8005cae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005cb2:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2124      	movs	r1, #36	; 0x24
 8005cba:	2032      	movs	r0, #50	; 0x32
 8005cbc:	f000 fc0c 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005cc0:	bf00      	nop
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	4603      	mov	r3, r0
 8005cd0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005cd2:	2121      	movs	r1, #33	; 0x21
 8005cd4:	2032      	movs	r0, #50	; 0x32
 8005cd6:	f000 fc12 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
 8005ce4:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8005ce6:	7bfa      	ldrb	r2, [r7, #15]
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2121      	movs	r1, #33	; 0x21
 8005cf4:	2032      	movs	r0, #50	; 0x32
 8005cf6:	f000 fbef 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b084      	sub	sp, #16
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	4603      	mov	r3, r0
 8005d0a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005d0c:	2121      	movs	r1, #33	; 0x21
 8005d0e:	2032      	movs	r0, #50	; 0x32
 8005d10:	f000 fbf5 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	f023 0308 	bic.w	r3, r3, #8
 8005d1e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8005d20:	7bfa      	ldrb	r2, [r7, #15]
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2121      	movs	r1, #33	; 0x21
 8005d2e:	2032      	movs	r0, #50	; 0x32
 8005d30:	f000 fbd2 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005d34:	bf00      	nop
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8005d44:	2300      	movs	r3, #0
 8005d46:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8005d50:	2123      	movs	r1, #35	; 0x23
 8005d52:	2032      	movs	r0, #50	; 0x32
 8005d54:	f000 fbd3 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8005d5c:	2124      	movs	r1, #36	; 0x24
 8005d5e:	2032      	movs	r0, #50	; 0x32
 8005d60:	f000 fbcd 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d64:	4603      	mov	r3, r0
 8005d66:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8005d68:	2128      	movs	r1, #40	; 0x28
 8005d6a:	2032      	movs	r0, #50	; 0x32
 8005d6c:	f000 fbc7 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d70:	4603      	mov	r3, r0
 8005d72:	b25b      	sxtb	r3, r3
 8005d74:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8005d76:	2129      	movs	r1, #41	; 0x29
 8005d78:	2032      	movs	r0, #50	; 0x32
 8005d7a:	f000 fbc0 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8005d84:	212a      	movs	r1, #42	; 0x2a
 8005d86:	2032      	movs	r0, #50	; 0x32
 8005d88:	f000 fbb9 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	b25b      	sxtb	r3, r3
 8005d90:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8005d92:	212b      	movs	r1, #43	; 0x2b
 8005d94:	2032      	movs	r0, #50	; 0x32
 8005d96:	f000 fbb2 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	b25b      	sxtb	r3, r3
 8005d9e:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8005da0:	212c      	movs	r1, #44	; 0x2c
 8005da2:	2032      	movs	r0, #50	; 0x32
 8005da4:	f000 fbab 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005da8:	4603      	mov	r3, r0
 8005daa:	b25b      	sxtb	r3, r3
 8005dac:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8005dae:	212d      	movs	r1, #45	; 0x2d
 8005db0:	2032      	movs	r0, #50	; 0x32
 8005db2:	f000 fba4 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005db6:	4603      	mov	r3, r0
 8005db8:	b25b      	sxtb	r3, r3
 8005dba:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8005dbc:	7d3b      	ldrb	r3, [r7, #20]
 8005dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d123      	bne.n	8005e0e <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e01c      	b.n	8005e06 <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8005dcc:	7ffb      	ldrb	r3, [r7, #31]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	3320      	adds	r3, #32
 8005dd4:	443b      	add	r3, r7
 8005dd6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	7ffb      	ldrb	r3, [r7, #31]
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	3320      	adds	r3, #32
 8005de6:	443b      	add	r3, r7
 8005de8:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	4413      	add	r3, r2
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	7ffb      	ldrb	r3, [r7, #31]
 8005df4:	b212      	sxth	r2, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	3320      	adds	r3, #32
 8005dfa:	443b      	add	r3, r7
 8005dfc:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005e00:	7ffb      	ldrb	r3, [r7, #31]
 8005e02:	3301      	adds	r3, #1
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	7ffb      	ldrb	r3, [r7, #31]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d9df      	bls.n	8005dcc <LSM303DLHC_AccReadXYZ+0x90>
 8005e0c:	e022      	b.n	8005e54 <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e01c      	b.n	8005e4e <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	005b      	lsls	r3, r3, #1
 8005e18:	3320      	adds	r3, #32
 8005e1a:	443b      	add	r3, r7
 8005e1c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	021b      	lsls	r3, r3, #8
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	3320      	adds	r3, #32
 8005e2e:	443b      	add	r3, r7
 8005e30:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4413      	add	r3, r2
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	7ffb      	ldrb	r3, [r7, #31]
 8005e3c:	b212      	sxth	r2, r2
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	3320      	adds	r3, #32
 8005e42:	443b      	add	r3, r7
 8005e44:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	77fb      	strb	r3, [r7, #31]
 8005e4e:	7ffb      	ldrb	r3, [r7, #31]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d9df      	bls.n	8005e14 <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8005e54:	7d3b      	ldrb	r3, [r7, #20]
 8005e56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e5a:	2b30      	cmp	r3, #48	; 0x30
 8005e5c:	d013      	beq.n	8005e86 <LSM303DLHC_AccReadXYZ+0x14a>
 8005e5e:	2b30      	cmp	r3, #48	; 0x30
 8005e60:	dc14      	bgt.n	8005e8c <LSM303DLHC_AccReadXYZ+0x150>
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d00c      	beq.n	8005e80 <LSM303DLHC_AccReadXYZ+0x144>
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	dc10      	bgt.n	8005e8c <LSM303DLHC_AccReadXYZ+0x150>
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d002      	beq.n	8005e74 <LSM303DLHC_AccReadXYZ+0x138>
 8005e6e:	2b10      	cmp	r3, #16
 8005e70:	d003      	beq.n	8005e7a <LSM303DLHC_AccReadXYZ+0x13e>
 8005e72:	e00b      	b.n	8005e8c <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8005e74:	2301      	movs	r3, #1
 8005e76:	77bb      	strb	r3, [r7, #30]
    break;
 8005e78:	e008      	b.n	8005e8c <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	77bb      	strb	r3, [r7, #30]
    break;
 8005e7e:	e005      	b.n	8005e8c <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8005e80:	2304      	movs	r3, #4
 8005e82:	77bb      	strb	r3, [r7, #30]
    break;
 8005e84:	e002      	b.n	8005e8c <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8005e86:	230c      	movs	r3, #12
 8005e88:	77bb      	strb	r3, [r7, #30]
    break;
 8005e8a:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	77fb      	strb	r3, [r7, #31]
 8005e90:	e014      	b.n	8005ebc <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	3320      	adds	r3, #32
 8005e98:	443b      	add	r3, r7
 8005e9a:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	7fbb      	ldrb	r3, [r7, #30]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	fb12 f303 	smulbb	r3, r2, r3
 8005ea8:	b299      	uxth	r1, r3
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	b20a      	sxth	r2, r1
 8005eb4:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005eb6:	7ffb      	ldrb	r3, [r7, #31]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	7ffb      	ldrb	r3, [r7, #31]
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d9e7      	bls.n	8005e92 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	3720      	adds	r7, #32
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8005eda:	2121      	movs	r1, #33	; 0x21
 8005edc:	2032      	movs	r0, #50	; 0x32
 8005ede:	f000 fb0e 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	f023 0304 	bic.w	r3, r3, #4
 8005eec:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8005eee:	7bfa      	ldrb	r2, [r7, #15]
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	2121      	movs	r1, #33	; 0x21
 8005efc:	2032      	movs	r0, #50	; 0x32
 8005efe:	f000 faeb 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005f02:	bf00      	nop
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	4603      	mov	r3, r0
 8005f12:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005f14:	2300      	movs	r3, #0
 8005f16:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8005f18:	2122      	movs	r1, #34	; 0x22
 8005f1a:	2032      	movs	r0, #50	; 0x32
 8005f1c:	f000 faef 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8005f24:	7bfa      	ldrb	r2, [r7, #15]
 8005f26:	79fb      	ldrb	r3, [r7, #7]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	2122      	movs	r1, #34	; 0x22
 8005f32:	2032      	movs	r0, #50	; 0x32
 8005f34:	f000 fad0 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8005f4e:	2138      	movs	r1, #56	; 0x38
 8005f50:	2032      	movs	r0, #50	; 0x32
 8005f52:	f000 fad4 	bl	80064fe <COMPASSACCELERO_IO_Read>
 8005f56:	4603      	mov	r3, r0
 8005f58:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8005f5a:	7bfa      	ldrb	r2, [r7, #15]
 8005f5c:	79fb      	ldrb	r3, [r7, #7]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	461a      	mov	r2, r3
 8005f66:	2138      	movs	r1, #56	; 0x38
 8005f68:	2032      	movs	r0, #50	; 0x32
 8005f6a:	f000 fab5 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8005f6e:	230a      	movs	r3, #10
 8005f70:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	461a      	mov	r2, r3
 8005f76:	213a      	movs	r1, #58	; 0x3a
 8005f78:	2032      	movs	r0, #50	; 0x32
 8005f7a:	f000 faad 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8005f7e:	2305      	movs	r3, #5
 8005f80:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	461a      	mov	r2, r3
 8005f86:	213b      	movs	r1, #59	; 0x3b
 8005f88:	2032      	movs	r0, #50	; 0x32
 8005f8a:	f000 faa5 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	461a      	mov	r2, r3
 8005f92:	213c      	movs	r1, #60	; 0x3c
 8005f94:	2032      	movs	r0, #50	; 0x32
 8005f96:	f000 fa9f 	bl	80064d8 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8005f9a:	2332      	movs	r3, #50	; 0x32
 8005f9c:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	213d      	movs	r1, #61	; 0x3d
 8005fa4:	2032      	movs	r0, #50	; 0x32
 8005fa6:	f000 fa97 	bl	80064d8 <COMPASSACCELERO_IO_Write>
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8005fb6:	f000 fa61 	bl	800647c <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8005fba:	2080      	movs	r0, #128	; 0x80
 8005fbc:	f7ff ffa5 	bl	8005f0a <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8005fc0:	2004      	movs	r0, #4
 8005fc2:	f7ff ff83 	bl	8005ecc <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8005fc6:	2010      	movs	r0, #16
 8005fc8:	f7ff ffba 	bl	8005f40 <LSM303DLHC_AccClickITEnable>
}
 8005fcc:	bf00      	nop
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b08a      	sub	sp, #40	; 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8005fd8:	4b15      	ldr	r3, [pc, #84]	; (8006030 <I2Cx_MspInit+0x60>)
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	4a14      	ldr	r2, [pc, #80]	; (8006030 <I2Cx_MspInit+0x60>)
 8005fde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fe2:	6153      	str	r3, [r2, #20]
 8005fe4:	4b12      	ldr	r3, [pc, #72]	; (8006030 <I2Cx_MspInit+0x60>)
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8005ff0:	23c0      	movs	r3, #192	; 0xc0
 8005ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8006000:	2304      	movs	r3, #4
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	4619      	mov	r1, r3
 800600a:	480a      	ldr	r0, [pc, #40]	; (8006034 <I2Cx_MspInit+0x64>)
 800600c:	f7fb fcb0 	bl	8001970 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <I2Cx_MspInit+0x60>)
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <I2Cx_MspInit+0x60>)
 8006016:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800601a:	61d3      	str	r3, [r2, #28]
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <I2Cx_MspInit+0x60>)
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	68fb      	ldr	r3, [r7, #12]
}
 8006028:	bf00      	nop
 800602a:	3728      	adds	r7, #40	; 0x28
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40021000 	.word	0x40021000
 8006034:	48000400 	.word	0x48000400

08006038 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800603c:	4811      	ldr	r0, [pc, #68]	; (8006084 <I2Cx_Init+0x4c>)
 800603e:	f7fc f9f1 	bl	8002424 <HAL_I2C_GetState>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d11a      	bne.n	800607e <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8006048:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <I2Cx_Init+0x4c>)
 800604a:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <I2Cx_Init+0x50>)
 800604c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 800604e:	4b0d      	ldr	r3, [pc, #52]	; (8006084 <I2Cx_Init+0x4c>)
 8006050:	2232      	movs	r2, #50	; 0x32
 8006052:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006054:	4b0b      	ldr	r3, [pc, #44]	; (8006084 <I2Cx_Init+0x4c>)
 8006056:	2201      	movs	r2, #1
 8006058:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800605a:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <I2Cx_Init+0x4c>)
 800605c:	2200      	movs	r2, #0
 800605e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8006060:	4b08      	ldr	r3, [pc, #32]	; (8006084 <I2Cx_Init+0x4c>)
 8006062:	2200      	movs	r2, #0
 8006064:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006066:	4b07      	ldr	r3, [pc, #28]	; (8006084 <I2Cx_Init+0x4c>)
 8006068:	2200      	movs	r2, #0
 800606a:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 800606c:	4b05      	ldr	r3, [pc, #20]	; (8006084 <I2Cx_Init+0x4c>)
 800606e:	2200      	movs	r2, #0
 8006070:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8006072:	4804      	ldr	r0, [pc, #16]	; (8006084 <I2Cx_Init+0x4c>)
 8006074:	f7ff ffac 	bl	8005fd0 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8006078:	4802      	ldr	r0, [pc, #8]	; (8006084 <I2Cx_Init+0x4c>)
 800607a:	f7fb fee7 	bl	8001e4c <HAL_I2C_Init>
  }
}
 800607e:	bf00      	nop
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000720 	.word	0x20000720
 8006088:	40005400 	.word	0x40005400

0800608c <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af04      	add	r7, sp, #16
 8006092:	4603      	mov	r3, r0
 8006094:	80fb      	strh	r3, [r7, #6]
 8006096:	460b      	mov	r3, r1
 8006098:	717b      	strb	r3, [r7, #5]
 800609a:	4613      	mov	r3, r2
 800609c:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80060a2:	797b      	ldrb	r3, [r7, #5]
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <I2Cx_WriteData+0x48>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	88f9      	ldrh	r1, [r7, #6]
 80060ac:	9302      	str	r3, [sp, #8]
 80060ae:	2301      	movs	r3, #1
 80060b0:	9301      	str	r3, [sp, #4]
 80060b2:	1d3b      	adds	r3, r7, #4
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	2301      	movs	r3, #1
 80060b8:	4807      	ldr	r0, [pc, #28]	; (80060d8 <I2Cx_WriteData+0x4c>)
 80060ba:	f7fb ff85 	bl	8001fc8 <HAL_I2C_Mem_Write>
 80060be:	4603      	mov	r3, r0
 80060c0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80060c8:	f000 f834 	bl	8006134 <I2Cx_Error>
  }
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20000120 	.word	0x20000120
 80060d8:	20000720 	.word	0x20000720

080060dc <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b088      	sub	sp, #32
 80060e0:	af04      	add	r7, sp, #16
 80060e2:	4603      	mov	r3, r0
 80060e4:	460a      	mov	r2, r1
 80060e6:	80fb      	strh	r3, [r7, #6]
 80060e8:	4613      	mov	r3, r2
 80060ea:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80060f4:	797b      	ldrb	r3, [r7, #5]
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	4b0c      	ldr	r3, [pc, #48]	; (800612c <I2Cx_ReadData+0x50>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	88f9      	ldrh	r1, [r7, #6]
 80060fe:	9302      	str	r3, [sp, #8]
 8006100:	2301      	movs	r3, #1
 8006102:	9301      	str	r3, [sp, #4]
 8006104:	f107 030e 	add.w	r3, r7, #14
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	2301      	movs	r3, #1
 800610c:	4808      	ldr	r0, [pc, #32]	; (8006130 <I2Cx_ReadData+0x54>)
 800610e:	f7fc f86f 	bl	80021f0 <HAL_I2C_Mem_Read>
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 800611c:	f000 f80a 	bl	8006134 <I2Cx_Error>
  
  }
  return value;
 8006120:	7bbb      	ldrb	r3, [r7, #14]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000120 	.word	0x20000120
 8006130:	20000720 	.word	0x20000720

08006134 <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8006138:	4803      	ldr	r0, [pc, #12]	; (8006148 <I2Cx_Error+0x14>)
 800613a:	f7fb ff16 	bl	8001f6a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 800613e:	f7ff ff7b 	bl	8006038 <I2Cx_Init>
}
 8006142:	bf00      	nop
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20000720 	.word	0x20000720

0800614c <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8006150:	481a      	ldr	r0, [pc, #104]	; (80061bc <SPIx_Init+0x70>)
 8006152:	f7fe fc60 	bl	8004a16 <HAL_SPI_GetState>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d12c      	bne.n	80061b6 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 800615c:	4b17      	ldr	r3, [pc, #92]	; (80061bc <SPIx_Init+0x70>)
 800615e:	4a18      	ldr	r2, [pc, #96]	; (80061c0 <SPIx_Init+0x74>)
 8006160:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006162:	4b16      	ldr	r3, [pc, #88]	; (80061bc <SPIx_Init+0x70>)
 8006164:	2218      	movs	r2, #24
 8006166:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <SPIx_Init+0x70>)
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800616e:	4b13      	ldr	r3, [pc, #76]	; (80061bc <SPIx_Init+0x70>)
 8006170:	2200      	movs	r2, #0
 8006172:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006174:	4b11      	ldr	r3, [pc, #68]	; (80061bc <SPIx_Init+0x70>)
 8006176:	2200      	movs	r2, #0
 8006178:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800617a:	4b10      	ldr	r3, [pc, #64]	; (80061bc <SPIx_Init+0x70>)
 800617c:	2200      	movs	r2, #0
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8006180:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <SPIx_Init+0x70>)
 8006182:	2207      	movs	r2, #7
 8006184:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8006186:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <SPIx_Init+0x70>)
 8006188:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800618c:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800618e:	4b0b      	ldr	r3, [pc, #44]	; (80061bc <SPIx_Init+0x70>)
 8006190:	2200      	movs	r2, #0
 8006192:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8006194:	4b09      	ldr	r3, [pc, #36]	; (80061bc <SPIx_Init+0x70>)
 8006196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619a:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800619c:	4b07      	ldr	r3, [pc, #28]	; (80061bc <SPIx_Init+0x70>)
 800619e:	2200      	movs	r2, #0
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80061a2:	4b06      	ldr	r3, [pc, #24]	; (80061bc <SPIx_Init+0x70>)
 80061a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061a8:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80061aa:	4804      	ldr	r0, [pc, #16]	; (80061bc <SPIx_Init+0x70>)
 80061ac:	f000 f836 	bl	800621c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80061b0:	4802      	ldr	r0, [pc, #8]	; (80061bc <SPIx_Init+0x70>)
 80061b2:	f7fe f93b 	bl	800442c <HAL_SPI_Init>
  }
}
 80061b6:	bf00      	nop
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	200006bc 	.word	0x200006bc
 80061c0:	40013000 	.word	0x40013000

080061c4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	4603      	mov	r3, r0
 80061cc:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 80061ce:	2300      	movs	r3, #0
 80061d0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <SPIx_WriteRead+0x38>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f107 020f 	add.w	r2, r7, #15
 80061da:	1df9      	adds	r1, r7, #7
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2301      	movs	r3, #1
 80061e0:	4807      	ldr	r0, [pc, #28]	; (8006200 <SPIx_WriteRead+0x3c>)
 80061e2:	f7fe f9f6 	bl	80045d2 <HAL_SPI_TransmitReceive>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80061ec:	f000 f80a 	bl	8006204 <SPIx_Error>
  }
  
  return receivedbyte;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2000011c 	.word	0x2000011c
 8006200:	200006bc 	.word	0x200006bc

08006204 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006208:	4803      	ldr	r0, [pc, #12]	; (8006218 <SPIx_Error+0x14>)
 800620a:	f7fe f9ba 	bl	8004582 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800620e:	f7ff ff9d 	bl	800614c <SPIx_Init>
}
 8006212:	bf00      	nop
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	200006bc 	.word	0x200006bc

0800621c <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8006224:	4b16      	ldr	r3, [pc, #88]	; (8006280 <SPIx_MspInit+0x64>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	4a15      	ldr	r2, [pc, #84]	; (8006280 <SPIx_MspInit+0x64>)
 800622a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800622e:	6193      	str	r3, [r2, #24]
 8006230:	4b13      	ldr	r3, [pc, #76]	; (8006280 <SPIx_MspInit+0x64>)
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <SPIx_MspInit+0x64>)
 800623e:	695b      	ldr	r3, [r3, #20]
 8006240:	4a0f      	ldr	r2, [pc, #60]	; (8006280 <SPIx_MspInit+0x64>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006246:	6153      	str	r3, [r2, #20]
 8006248:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <SPIx_MspInit+0x64>)
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8006254:	23e0      	movs	r3, #224	; 0xe0
 8006256:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8006258:	2302      	movs	r3, #2
 800625a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006260:	2303      	movs	r3, #3
 8006262:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8006264:	2305      	movs	r3, #5
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8006268:	f107 0314 	add.w	r3, r7, #20
 800626c:	4619      	mov	r1, r3
 800626e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006272:	f7fb fb7d 	bl	8001970 <HAL_GPIO_Init>
}
 8006276:	bf00      	nop
 8006278:	3728      	adds	r7, #40	; 0x28
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	40021000 	.word	0x40021000

08006284 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800628a:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <GYRO_IO_Init+0x84>)
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <GYRO_IO_Init+0x84>)
 8006290:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006294:	6153      	str	r3, [r2, #20]
 8006296:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <GYRO_IO_Init+0x84>)
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80062a2:	2308      	movs	r3, #8
 80062a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80062a6:	2301      	movs	r3, #1
 80062a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80062ae:	2303      	movs	r3, #3
 80062b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80062b2:	f107 030c 	add.w	r3, r7, #12
 80062b6:	4619      	mov	r1, r3
 80062b8:	4814      	ldr	r0, [pc, #80]	; (800630c <GYRO_IO_Init+0x88>)
 80062ba:	f7fb fb59 	bl	8001970 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80062be:	2201      	movs	r2, #1
 80062c0:	2108      	movs	r1, #8
 80062c2:	4812      	ldr	r0, [pc, #72]	; (800630c <GYRO_IO_Init+0x88>)
 80062c4:	f7fb fdaa 	bl	8001e1c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80062c8:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <GYRO_IO_Init+0x84>)
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	4a0e      	ldr	r2, [pc, #56]	; (8006308 <GYRO_IO_Init+0x84>)
 80062ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80062d2:	6153      	str	r3, [r2, #20]
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <GYRO_IO_Init+0x84>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80062e0:	2303      	movs	r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80062e8:	2303      	movs	r3, #3
 80062ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80062f0:	f107 030c 	add.w	r3, r7, #12
 80062f4:	4619      	mov	r1, r3
 80062f6:	4805      	ldr	r0, [pc, #20]	; (800630c <GYRO_IO_Init+0x88>)
 80062f8:	f7fb fb3a 	bl	8001970 <HAL_GPIO_Init>
  
  SPIx_Init();
 80062fc:	f7ff ff26 	bl	800614c <SPIx_Init>
}
 8006300:	bf00      	nop
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	40021000 	.word	0x40021000
 800630c:	48001000 	.word	0x48001000

08006310 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	460b      	mov	r3, r1
 800631a:	70fb      	strb	r3, [r7, #3]
 800631c:	4613      	mov	r3, r2
 800631e:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8006320:	883b      	ldrh	r3, [r7, #0]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d903      	bls.n	800632e <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800632c:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800632e:	2200      	movs	r2, #0
 8006330:	2108      	movs	r1, #8
 8006332:	480f      	ldr	r0, [pc, #60]	; (8006370 <GYRO_IO_Write+0x60>)
 8006334:	f7fb fd72 	bl	8001e1c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff ff42 	bl	80061c4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8006340:	e00a      	b.n	8006358 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff ff3c 	bl	80061c4 <SPIx_WriteRead>
    NumByteToWrite--;
 800634c:	883b      	ldrh	r3, [r7, #0]
 800634e:	3b01      	subs	r3, #1
 8006350:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3301      	adds	r3, #1
 8006356:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8006358:	883b      	ldrh	r3, [r7, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f1      	bne.n	8006342 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800635e:	2201      	movs	r2, #1
 8006360:	2108      	movs	r1, #8
 8006362:	4803      	ldr	r0, [pc, #12]	; (8006370 <GYRO_IO_Write+0x60>)
 8006364:	f7fb fd5a 	bl	8001e1c <HAL_GPIO_WritePin>
}
 8006368:	bf00      	nop
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	48001000 	.word	0x48001000

08006374 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
 8006380:	4613      	mov	r3, r2
 8006382:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8006384:	883b      	ldrh	r3, [r7, #0]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d904      	bls.n	8006394 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800638a:	78fb      	ldrb	r3, [r7, #3]
 800638c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006390:	70fb      	strb	r3, [r7, #3]
 8006392:	e003      	b.n	800639c <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800639a:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800639c:	2200      	movs	r2, #0
 800639e:	2108      	movs	r1, #8
 80063a0:	4810      	ldr	r0, [pc, #64]	; (80063e4 <GYRO_IO_Read+0x70>)
 80063a2:	f7fb fd3b 	bl	8001e1c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80063a6:	78fb      	ldrb	r3, [r7, #3]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff ff0b 	bl	80061c4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80063ae:	e00c      	b.n	80063ca <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80063b0:	2000      	movs	r0, #0
 80063b2:	f7ff ff07 	bl	80061c4 <SPIx_WriteRead>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80063be:	883b      	ldrh	r3, [r7, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80063ca:	883b      	ldrh	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1ef      	bne.n	80063b0 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80063d0:	2201      	movs	r2, #1
 80063d2:	2108      	movs	r1, #8
 80063d4:	4803      	ldr	r0, [pc, #12]	; (80063e4 <GYRO_IO_Read+0x70>)
 80063d6:	f7fb fd21 	bl	8001e1c <HAL_GPIO_WritePin>
}  
 80063da:	bf00      	nop
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	48001000 	.word	0x48001000

080063e8 <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <COMPASSACCELERO_IO_Init+0x8c>)
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	4a20      	ldr	r2, [pc, #128]	; (8006474 <COMPASSACCELERO_IO_Init+0x8c>)
 80063f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063f8:	6153      	str	r3, [r2, #20]
 80063fa:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <COMPASSACCELERO_IO_Init+0x8c>)
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8006406:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <COMPASSACCELERO_IO_Init+0x8c>)
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	4a1a      	ldr	r2, [pc, #104]	; (8006474 <COMPASSACCELERO_IO_Init+0x8c>)
 800640c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006410:	6153      	str	r3, [r2, #20]
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <COMPASSACCELERO_IO_Init+0x8c>)
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800641a:	607b      	str	r3, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 800641e:	2304      	movs	r3, #4
 8006420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8006422:	2300      	movs	r3, #0
 8006424:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8006426:	2300      	movs	r3, #0
 8006428:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800642a:	2303      	movs	r3, #3
 800642c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 800642e:	f107 030c 	add.w	r3, r7, #12
 8006432:	4619      	mov	r1, r3
 8006434:	4810      	ldr	r0, [pc, #64]	; (8006478 <COMPASSACCELERO_IO_Init+0x90>)
 8006436:	f7fb fa9b 	bl	8001970 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 800643a:	2200      	movs	r2, #0
 800643c:	210f      	movs	r1, #15
 800643e:	2008      	movs	r0, #8
 8006440:	f7fb fa5f 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8006444:	2008      	movs	r0, #8
 8006446:	f7fb fa78 	bl	800193a <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800644a:	2330      	movs	r3, #48	; 0x30
 800644c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006452:	2303      	movs	r3, #3
 8006454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 800645a:	f107 030c 	add.w	r3, r7, #12
 800645e:	4619      	mov	r1, r3
 8006460:	4805      	ldr	r0, [pc, #20]	; (8006478 <COMPASSACCELERO_IO_Init+0x90>)
 8006462:	f7fb fa85 	bl	8001970 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8006466:	f7ff fde7 	bl	8006038 <I2Cx_Init>
}
 800646a:	bf00      	nop
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40021000 	.word	0x40021000
 8006478:	48001000 	.word	0x48001000

0800647c <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8006482:	4b13      	ldr	r3, [pc, #76]	; (80064d0 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	4a12      	ldr	r2, [pc, #72]	; (80064d0 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006488:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800648c:	6153      	str	r3, [r2, #20]
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 800649a:	2330      	movs	r3, #48	; 0x30
 800649c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800649e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80064a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80064a4:	2303      	movs	r3, #3
 80064a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	4619      	mov	r1, r3
 80064b0:	4808      	ldr	r0, [pc, #32]	; (80064d4 <COMPASSACCELERO_IO_ITConfig+0x58>)
 80064b2:	f7fb fa5d 	bl	8001970 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80064b6:	2200      	movs	r2, #0
 80064b8:	210f      	movs	r1, #15
 80064ba:	200a      	movs	r0, #10
 80064bc:	f7fb fa21 	bl	8001902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80064c0:	200a      	movs	r0, #10
 80064c2:	f7fb fa3a 	bl	800193a <HAL_NVIC_EnableIRQ>
  
}
 80064c6:	bf00      	nop
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	40021000 	.word	0x40021000
 80064d4:	48001000 	.word	0x48001000

080064d8 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	80fb      	strh	r3, [r7, #6]
 80064e2:	460b      	mov	r3, r1
 80064e4:	717b      	strb	r3, [r7, #5]
 80064e6:	4613      	mov	r3, r2
 80064e8:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80064ea:	793a      	ldrb	r2, [r7, #4]
 80064ec:	7979      	ldrb	r1, [r7, #5]
 80064ee:	88fb      	ldrh	r3, [r7, #6]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7ff fdcb 	bl	800608c <I2Cx_WriteData>
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b082      	sub	sp, #8
 8006502:	af00      	add	r7, sp, #0
 8006504:	4603      	mov	r3, r0
 8006506:	460a      	mov	r2, r1
 8006508:	80fb      	strh	r3, [r7, #6]
 800650a:	4613      	mov	r3, r2
 800650c:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 800650e:	797a      	ldrb	r2, [r7, #5]
 8006510:	88fb      	ldrh	r3, [r7, #6]
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff fde1 	bl	80060dc <I2Cx_ReadData>
 800651a:	4603      	mov	r3, r0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <__cvt>:
 8006524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006528:	ec55 4b10 	vmov	r4, r5, d0
 800652c:	2d00      	cmp	r5, #0
 800652e:	460e      	mov	r6, r1
 8006530:	4619      	mov	r1, r3
 8006532:	462b      	mov	r3, r5
 8006534:	bfbb      	ittet	lt
 8006536:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800653a:	461d      	movlt	r5, r3
 800653c:	2300      	movge	r3, #0
 800653e:	232d      	movlt	r3, #45	; 0x2d
 8006540:	700b      	strb	r3, [r1, #0]
 8006542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006544:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006548:	4691      	mov	r9, r2
 800654a:	f023 0820 	bic.w	r8, r3, #32
 800654e:	bfbc      	itt	lt
 8006550:	4622      	movlt	r2, r4
 8006552:	4614      	movlt	r4, r2
 8006554:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006558:	d005      	beq.n	8006566 <__cvt+0x42>
 800655a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800655e:	d100      	bne.n	8006562 <__cvt+0x3e>
 8006560:	3601      	adds	r6, #1
 8006562:	2102      	movs	r1, #2
 8006564:	e000      	b.n	8006568 <__cvt+0x44>
 8006566:	2103      	movs	r1, #3
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9301      	str	r3, [sp, #4]
 800656c:	ab02      	add	r3, sp, #8
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	ec45 4b10 	vmov	d0, r4, r5
 8006574:	4653      	mov	r3, sl
 8006576:	4632      	mov	r2, r6
 8006578:	f000 fe76 	bl	8007268 <_dtoa_r>
 800657c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006580:	4607      	mov	r7, r0
 8006582:	d102      	bne.n	800658a <__cvt+0x66>
 8006584:	f019 0f01 	tst.w	r9, #1
 8006588:	d022      	beq.n	80065d0 <__cvt+0xac>
 800658a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800658e:	eb07 0906 	add.w	r9, r7, r6
 8006592:	d110      	bne.n	80065b6 <__cvt+0x92>
 8006594:	783b      	ldrb	r3, [r7, #0]
 8006596:	2b30      	cmp	r3, #48	; 0x30
 8006598:	d10a      	bne.n	80065b0 <__cvt+0x8c>
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80065a6:	b918      	cbnz	r0, 80065b0 <__cvt+0x8c>
 80065a8:	f1c6 0601 	rsb	r6, r6, #1
 80065ac:	f8ca 6000 	str.w	r6, [sl]
 80065b0:	f8da 3000 	ldr.w	r3, [sl]
 80065b4:	4499      	add	r9, r3
 80065b6:	2200      	movs	r2, #0
 80065b8:	2300      	movs	r3, #0
 80065ba:	4620      	mov	r0, r4
 80065bc:	4629      	mov	r1, r5
 80065be:	f7fa fa83 	bl	8000ac8 <__aeabi_dcmpeq>
 80065c2:	b108      	cbz	r0, 80065c8 <__cvt+0xa4>
 80065c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80065c8:	2230      	movs	r2, #48	; 0x30
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	454b      	cmp	r3, r9
 80065ce:	d307      	bcc.n	80065e0 <__cvt+0xbc>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065d4:	1bdb      	subs	r3, r3, r7
 80065d6:	4638      	mov	r0, r7
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	b004      	add	sp, #16
 80065dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e7f0      	b.n	80065ca <__cvt+0xa6>

080065e8 <__exponent>:
 80065e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ea:	4603      	mov	r3, r0
 80065ec:	2900      	cmp	r1, #0
 80065ee:	bfb8      	it	lt
 80065f0:	4249      	neglt	r1, r1
 80065f2:	f803 2b02 	strb.w	r2, [r3], #2
 80065f6:	bfb4      	ite	lt
 80065f8:	222d      	movlt	r2, #45	; 0x2d
 80065fa:	222b      	movge	r2, #43	; 0x2b
 80065fc:	2909      	cmp	r1, #9
 80065fe:	7042      	strb	r2, [r0, #1]
 8006600:	dd2a      	ble.n	8006658 <__exponent+0x70>
 8006602:	f10d 0207 	add.w	r2, sp, #7
 8006606:	4617      	mov	r7, r2
 8006608:	260a      	movs	r6, #10
 800660a:	4694      	mov	ip, r2
 800660c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006610:	fb06 1415 	mls	r4, r6, r5, r1
 8006614:	3430      	adds	r4, #48	; 0x30
 8006616:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800661a:	460c      	mov	r4, r1
 800661c:	2c63      	cmp	r4, #99	; 0x63
 800661e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006622:	4629      	mov	r1, r5
 8006624:	dcf1      	bgt.n	800660a <__exponent+0x22>
 8006626:	3130      	adds	r1, #48	; 0x30
 8006628:	f1ac 0402 	sub.w	r4, ip, #2
 800662c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006630:	1c41      	adds	r1, r0, #1
 8006632:	4622      	mov	r2, r4
 8006634:	42ba      	cmp	r2, r7
 8006636:	d30a      	bcc.n	800664e <__exponent+0x66>
 8006638:	f10d 0209 	add.w	r2, sp, #9
 800663c:	eba2 020c 	sub.w	r2, r2, ip
 8006640:	42bc      	cmp	r4, r7
 8006642:	bf88      	it	hi
 8006644:	2200      	movhi	r2, #0
 8006646:	4413      	add	r3, r2
 8006648:	1a18      	subs	r0, r3, r0
 800664a:	b003      	add	sp, #12
 800664c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006652:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006656:	e7ed      	b.n	8006634 <__exponent+0x4c>
 8006658:	2330      	movs	r3, #48	; 0x30
 800665a:	3130      	adds	r1, #48	; 0x30
 800665c:	7083      	strb	r3, [r0, #2]
 800665e:	70c1      	strb	r1, [r0, #3]
 8006660:	1d03      	adds	r3, r0, #4
 8006662:	e7f1      	b.n	8006648 <__exponent+0x60>

08006664 <_printf_float>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	ed2d 8b02 	vpush	{d8}
 800666c:	b08d      	sub	sp, #52	; 0x34
 800666e:	460c      	mov	r4, r1
 8006670:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006674:	4616      	mov	r6, r2
 8006676:	461f      	mov	r7, r3
 8006678:	4605      	mov	r5, r0
 800667a:	f000 fce7 	bl	800704c <_localeconv_r>
 800667e:	f8d0 a000 	ldr.w	sl, [r0]
 8006682:	4650      	mov	r0, sl
 8006684:	f7f9 fdf4 	bl	8000270 <strlen>
 8006688:	2300      	movs	r3, #0
 800668a:	930a      	str	r3, [sp, #40]	; 0x28
 800668c:	6823      	ldr	r3, [r4, #0]
 800668e:	9305      	str	r3, [sp, #20]
 8006690:	f8d8 3000 	ldr.w	r3, [r8]
 8006694:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006698:	3307      	adds	r3, #7
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	f103 0208 	add.w	r2, r3, #8
 80066a2:	f8c8 2000 	str.w	r2, [r8]
 80066a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80066b4:	ee08 0a10 	vmov	s16, r0
 80066b8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80066bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c0:	4b9e      	ldr	r3, [pc, #632]	; (800693c <_printf_float+0x2d8>)
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	f7fa fa31 	bl	8000b2c <__aeabi_dcmpun>
 80066ca:	bb88      	cbnz	r0, 8006730 <_printf_float+0xcc>
 80066cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d0:	4b9a      	ldr	r3, [pc, #616]	; (800693c <_printf_float+0x2d8>)
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295
 80066d6:	f7fa fa0b 	bl	8000af0 <__aeabi_dcmple>
 80066da:	bb48      	cbnz	r0, 8006730 <_printf_float+0xcc>
 80066dc:	2200      	movs	r2, #0
 80066de:	2300      	movs	r3, #0
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7fa f9fa 	bl	8000adc <__aeabi_dcmplt>
 80066e8:	b110      	cbz	r0, 80066f0 <_printf_float+0x8c>
 80066ea:	232d      	movs	r3, #45	; 0x2d
 80066ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f0:	4a93      	ldr	r2, [pc, #588]	; (8006940 <_printf_float+0x2dc>)
 80066f2:	4b94      	ldr	r3, [pc, #592]	; (8006944 <_printf_float+0x2e0>)
 80066f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80066f8:	bf94      	ite	ls
 80066fa:	4690      	movls	r8, r2
 80066fc:	4698      	movhi	r8, r3
 80066fe:	2303      	movs	r3, #3
 8006700:	6123      	str	r3, [r4, #16]
 8006702:	9b05      	ldr	r3, [sp, #20]
 8006704:	f023 0304 	bic.w	r3, r3, #4
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	f04f 0900 	mov.w	r9, #0
 800670e:	9700      	str	r7, [sp, #0]
 8006710:	4633      	mov	r3, r6
 8006712:	aa0b      	add	r2, sp, #44	; 0x2c
 8006714:	4621      	mov	r1, r4
 8006716:	4628      	mov	r0, r5
 8006718:	f000 f9da 	bl	8006ad0 <_printf_common>
 800671c:	3001      	adds	r0, #1
 800671e:	f040 8090 	bne.w	8006842 <_printf_float+0x1de>
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	b00d      	add	sp, #52	; 0x34
 8006728:	ecbd 8b02 	vpop	{d8}
 800672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006730:	4642      	mov	r2, r8
 8006732:	464b      	mov	r3, r9
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7fa f9f8 	bl	8000b2c <__aeabi_dcmpun>
 800673c:	b140      	cbz	r0, 8006750 <_printf_float+0xec>
 800673e:	464b      	mov	r3, r9
 8006740:	2b00      	cmp	r3, #0
 8006742:	bfbc      	itt	lt
 8006744:	232d      	movlt	r3, #45	; 0x2d
 8006746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800674a:	4a7f      	ldr	r2, [pc, #508]	; (8006948 <_printf_float+0x2e4>)
 800674c:	4b7f      	ldr	r3, [pc, #508]	; (800694c <_printf_float+0x2e8>)
 800674e:	e7d1      	b.n	80066f4 <_printf_float+0x90>
 8006750:	6863      	ldr	r3, [r4, #4]
 8006752:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006756:	9206      	str	r2, [sp, #24]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	d13f      	bne.n	80067dc <_printf_float+0x178>
 800675c:	2306      	movs	r3, #6
 800675e:	6063      	str	r3, [r4, #4]
 8006760:	9b05      	ldr	r3, [sp, #20]
 8006762:	6861      	ldr	r1, [r4, #4]
 8006764:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006768:	2300      	movs	r3, #0
 800676a:	9303      	str	r3, [sp, #12]
 800676c:	ab0a      	add	r3, sp, #40	; 0x28
 800676e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006772:	ab09      	add	r3, sp, #36	; 0x24
 8006774:	ec49 8b10 	vmov	d0, r8, r9
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006780:	4628      	mov	r0, r5
 8006782:	f7ff fecf 	bl	8006524 <__cvt>
 8006786:	9b06      	ldr	r3, [sp, #24]
 8006788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800678a:	2b47      	cmp	r3, #71	; 0x47
 800678c:	4680      	mov	r8, r0
 800678e:	d108      	bne.n	80067a2 <_printf_float+0x13e>
 8006790:	1cc8      	adds	r0, r1, #3
 8006792:	db02      	blt.n	800679a <_printf_float+0x136>
 8006794:	6863      	ldr	r3, [r4, #4]
 8006796:	4299      	cmp	r1, r3
 8006798:	dd41      	ble.n	800681e <_printf_float+0x1ba>
 800679a:	f1ab 0302 	sub.w	r3, fp, #2
 800679e:	fa5f fb83 	uxtb.w	fp, r3
 80067a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067a6:	d820      	bhi.n	80067ea <_printf_float+0x186>
 80067a8:	3901      	subs	r1, #1
 80067aa:	465a      	mov	r2, fp
 80067ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067b0:	9109      	str	r1, [sp, #36]	; 0x24
 80067b2:	f7ff ff19 	bl	80065e8 <__exponent>
 80067b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067b8:	1813      	adds	r3, r2, r0
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	4681      	mov	r9, r0
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	dc02      	bgt.n	80067c8 <_printf_float+0x164>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	07d2      	lsls	r2, r2, #31
 80067c6:	d501      	bpl.n	80067cc <_printf_float+0x168>
 80067c8:	3301      	adds	r3, #1
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d09c      	beq.n	800670e <_printf_float+0xaa>
 80067d4:	232d      	movs	r3, #45	; 0x2d
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067da:	e798      	b.n	800670e <_printf_float+0xaa>
 80067dc:	9a06      	ldr	r2, [sp, #24]
 80067de:	2a47      	cmp	r2, #71	; 0x47
 80067e0:	d1be      	bne.n	8006760 <_printf_float+0xfc>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1bc      	bne.n	8006760 <_printf_float+0xfc>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7b9      	b.n	800675e <_printf_float+0xfa>
 80067ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80067ee:	d118      	bne.n	8006822 <_printf_float+0x1be>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	dd0b      	ble.n	800680e <_printf_float+0x1aa>
 80067f6:	6121      	str	r1, [r4, #16]
 80067f8:	b913      	cbnz	r3, 8006800 <_printf_float+0x19c>
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	07d0      	lsls	r0, r2, #31
 80067fe:	d502      	bpl.n	8006806 <_printf_float+0x1a2>
 8006800:	3301      	adds	r3, #1
 8006802:	440b      	add	r3, r1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	65a1      	str	r1, [r4, #88]	; 0x58
 8006808:	f04f 0900 	mov.w	r9, #0
 800680c:	e7de      	b.n	80067cc <_printf_float+0x168>
 800680e:	b913      	cbnz	r3, 8006816 <_printf_float+0x1b2>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	07d2      	lsls	r2, r2, #31
 8006814:	d501      	bpl.n	800681a <_printf_float+0x1b6>
 8006816:	3302      	adds	r3, #2
 8006818:	e7f4      	b.n	8006804 <_printf_float+0x1a0>
 800681a:	2301      	movs	r3, #1
 800681c:	e7f2      	b.n	8006804 <_printf_float+0x1a0>
 800681e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006824:	4299      	cmp	r1, r3
 8006826:	db05      	blt.n	8006834 <_printf_float+0x1d0>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	6121      	str	r1, [r4, #16]
 800682c:	07d8      	lsls	r0, r3, #31
 800682e:	d5ea      	bpl.n	8006806 <_printf_float+0x1a2>
 8006830:	1c4b      	adds	r3, r1, #1
 8006832:	e7e7      	b.n	8006804 <_printf_float+0x1a0>
 8006834:	2900      	cmp	r1, #0
 8006836:	bfd4      	ite	le
 8006838:	f1c1 0202 	rsble	r2, r1, #2
 800683c:	2201      	movgt	r2, #1
 800683e:	4413      	add	r3, r2
 8006840:	e7e0      	b.n	8006804 <_printf_float+0x1a0>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	055a      	lsls	r2, r3, #21
 8006846:	d407      	bmi.n	8006858 <_printf_float+0x1f4>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	4642      	mov	r2, r8
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	d12c      	bne.n	80068b0 <_printf_float+0x24c>
 8006856:	e764      	b.n	8006722 <_printf_float+0xbe>
 8006858:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800685c:	f240 80e0 	bls.w	8006a20 <_printf_float+0x3bc>
 8006860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f92e 	bl	8000ac8 <__aeabi_dcmpeq>
 800686c:	2800      	cmp	r0, #0
 800686e:	d034      	beq.n	80068da <_printf_float+0x276>
 8006870:	4a37      	ldr	r2, [pc, #220]	; (8006950 <_printf_float+0x2ec>)
 8006872:	2301      	movs	r3, #1
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af51 	beq.w	8006722 <_printf_float+0xbe>
 8006880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006884:	429a      	cmp	r2, r3
 8006886:	db02      	blt.n	800688e <_printf_float+0x22a>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07d8      	lsls	r0, r3, #31
 800688c:	d510      	bpl.n	80068b0 <_printf_float+0x24c>
 800688e:	ee18 3a10 	vmov	r3, s16
 8006892:	4652      	mov	r2, sl
 8006894:	4631      	mov	r1, r6
 8006896:	4628      	mov	r0, r5
 8006898:	47b8      	blx	r7
 800689a:	3001      	adds	r0, #1
 800689c:	f43f af41 	beq.w	8006722 <_printf_float+0xbe>
 80068a0:	f04f 0800 	mov.w	r8, #0
 80068a4:	f104 091a 	add.w	r9, r4, #26
 80068a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068aa:	3b01      	subs	r3, #1
 80068ac:	4543      	cmp	r3, r8
 80068ae:	dc09      	bgt.n	80068c4 <_printf_float+0x260>
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	079b      	lsls	r3, r3, #30
 80068b4:	f100 8107 	bmi.w	8006ac6 <_printf_float+0x462>
 80068b8:	68e0      	ldr	r0, [r4, #12]
 80068ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068bc:	4298      	cmp	r0, r3
 80068be:	bfb8      	it	lt
 80068c0:	4618      	movlt	r0, r3
 80068c2:	e730      	b.n	8006726 <_printf_float+0xc2>
 80068c4:	2301      	movs	r3, #1
 80068c6:	464a      	mov	r2, r9
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	47b8      	blx	r7
 80068ce:	3001      	adds	r0, #1
 80068d0:	f43f af27 	beq.w	8006722 <_printf_float+0xbe>
 80068d4:	f108 0801 	add.w	r8, r8, #1
 80068d8:	e7e6      	b.n	80068a8 <_printf_float+0x244>
 80068da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc39      	bgt.n	8006954 <_printf_float+0x2f0>
 80068e0:	4a1b      	ldr	r2, [pc, #108]	; (8006950 <_printf_float+0x2ec>)
 80068e2:	2301      	movs	r3, #1
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af19 	beq.w	8006722 <_printf_float+0xbe>
 80068f0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80068f4:	4313      	orrs	r3, r2
 80068f6:	d102      	bne.n	80068fe <_printf_float+0x29a>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	07d9      	lsls	r1, r3, #31
 80068fc:	d5d8      	bpl.n	80068b0 <_printf_float+0x24c>
 80068fe:	ee18 3a10 	vmov	r3, s16
 8006902:	4652      	mov	r2, sl
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af09 	beq.w	8006722 <_printf_float+0xbe>
 8006910:	f04f 0900 	mov.w	r9, #0
 8006914:	f104 0a1a 	add.w	sl, r4, #26
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	425b      	negs	r3, r3
 800691c:	454b      	cmp	r3, r9
 800691e:	dc01      	bgt.n	8006924 <_printf_float+0x2c0>
 8006920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006922:	e792      	b.n	800684a <_printf_float+0x1e6>
 8006924:	2301      	movs	r3, #1
 8006926:	4652      	mov	r2, sl
 8006928:	4631      	mov	r1, r6
 800692a:	4628      	mov	r0, r5
 800692c:	47b8      	blx	r7
 800692e:	3001      	adds	r0, #1
 8006930:	f43f aef7 	beq.w	8006722 <_printf_float+0xbe>
 8006934:	f109 0901 	add.w	r9, r9, #1
 8006938:	e7ee      	b.n	8006918 <_printf_float+0x2b4>
 800693a:	bf00      	nop
 800693c:	7fefffff 	.word	0x7fefffff
 8006940:	080092b8 	.word	0x080092b8
 8006944:	080092bc 	.word	0x080092bc
 8006948:	080092c0 	.word	0x080092c0
 800694c:	080092c4 	.word	0x080092c4
 8006950:	080092c8 	.word	0x080092c8
 8006954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006958:	429a      	cmp	r2, r3
 800695a:	bfa8      	it	ge
 800695c:	461a      	movge	r2, r3
 800695e:	2a00      	cmp	r2, #0
 8006960:	4691      	mov	r9, r2
 8006962:	dc37      	bgt.n	80069d4 <_printf_float+0x370>
 8006964:	f04f 0b00 	mov.w	fp, #0
 8006968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800696c:	f104 021a 	add.w	r2, r4, #26
 8006970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	eba3 0309 	sub.w	r3, r3, r9
 8006978:	455b      	cmp	r3, fp
 800697a:	dc33      	bgt.n	80069e4 <_printf_float+0x380>
 800697c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006980:	429a      	cmp	r2, r3
 8006982:	db3b      	blt.n	80069fc <_printf_float+0x398>
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	07da      	lsls	r2, r3, #31
 8006988:	d438      	bmi.n	80069fc <_printf_float+0x398>
 800698a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800698e:	eba2 0903 	sub.w	r9, r2, r3
 8006992:	9b05      	ldr	r3, [sp, #20]
 8006994:	1ad2      	subs	r2, r2, r3
 8006996:	4591      	cmp	r9, r2
 8006998:	bfa8      	it	ge
 800699a:	4691      	movge	r9, r2
 800699c:	f1b9 0f00 	cmp.w	r9, #0
 80069a0:	dc35      	bgt.n	8006a0e <_printf_float+0x3aa>
 80069a2:	f04f 0800 	mov.w	r8, #0
 80069a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069aa:	f104 0a1a 	add.w	sl, r4, #26
 80069ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	eba3 0309 	sub.w	r3, r3, r9
 80069b8:	4543      	cmp	r3, r8
 80069ba:	f77f af79 	ble.w	80068b0 <_printf_float+0x24c>
 80069be:	2301      	movs	r3, #1
 80069c0:	4652      	mov	r2, sl
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	f43f aeaa 	beq.w	8006722 <_printf_float+0xbe>
 80069ce:	f108 0801 	add.w	r8, r8, #1
 80069d2:	e7ec      	b.n	80069ae <_printf_float+0x34a>
 80069d4:	4613      	mov	r3, r2
 80069d6:	4631      	mov	r1, r6
 80069d8:	4642      	mov	r2, r8
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	d1c0      	bne.n	8006964 <_printf_float+0x300>
 80069e2:	e69e      	b.n	8006722 <_printf_float+0xbe>
 80069e4:	2301      	movs	r3, #1
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	9205      	str	r2, [sp, #20]
 80069ec:	47b8      	blx	r7
 80069ee:	3001      	adds	r0, #1
 80069f0:	f43f ae97 	beq.w	8006722 <_printf_float+0xbe>
 80069f4:	9a05      	ldr	r2, [sp, #20]
 80069f6:	f10b 0b01 	add.w	fp, fp, #1
 80069fa:	e7b9      	b.n	8006970 <_printf_float+0x30c>
 80069fc:	ee18 3a10 	vmov	r3, s16
 8006a00:	4652      	mov	r2, sl
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d1be      	bne.n	800698a <_printf_float+0x326>
 8006a0c:	e689      	b.n	8006722 <_printf_float+0xbe>
 8006a0e:	9a05      	ldr	r2, [sp, #20]
 8006a10:	464b      	mov	r3, r9
 8006a12:	4442      	add	r2, r8
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d1c1      	bne.n	80069a2 <_printf_float+0x33e>
 8006a1e:	e680      	b.n	8006722 <_printf_float+0xbe>
 8006a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a22:	2a01      	cmp	r2, #1
 8006a24:	dc01      	bgt.n	8006a2a <_printf_float+0x3c6>
 8006a26:	07db      	lsls	r3, r3, #31
 8006a28:	d53a      	bpl.n	8006aa0 <_printf_float+0x43c>
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	4642      	mov	r2, r8
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	47b8      	blx	r7
 8006a34:	3001      	adds	r0, #1
 8006a36:	f43f ae74 	beq.w	8006722 <_printf_float+0xbe>
 8006a3a:	ee18 3a10 	vmov	r3, s16
 8006a3e:	4652      	mov	r2, sl
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f ae6b 	beq.w	8006722 <_printf_float+0xbe>
 8006a4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a50:	2200      	movs	r2, #0
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006a58:	f7fa f836 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a5c:	b9d8      	cbnz	r0, 8006a96 <_printf_float+0x432>
 8006a5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a62:	f108 0201 	add.w	r2, r8, #1
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d10e      	bne.n	8006a8e <_printf_float+0x42a>
 8006a70:	e657      	b.n	8006722 <_printf_float+0xbe>
 8006a72:	2301      	movs	r3, #1
 8006a74:	4652      	mov	r2, sl
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f ae50 	beq.w	8006722 <_printf_float+0xbe>
 8006a82:	f108 0801 	add.w	r8, r8, #1
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	4543      	cmp	r3, r8
 8006a8c:	dcf1      	bgt.n	8006a72 <_printf_float+0x40e>
 8006a8e:	464b      	mov	r3, r9
 8006a90:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a94:	e6da      	b.n	800684c <_printf_float+0x1e8>
 8006a96:	f04f 0800 	mov.w	r8, #0
 8006a9a:	f104 0a1a 	add.w	sl, r4, #26
 8006a9e:	e7f2      	b.n	8006a86 <_printf_float+0x422>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	4642      	mov	r2, r8
 8006aa4:	e7df      	b.n	8006a66 <_printf_float+0x402>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	464a      	mov	r2, r9
 8006aaa:	4631      	mov	r1, r6
 8006aac:	4628      	mov	r0, r5
 8006aae:	47b8      	blx	r7
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	f43f ae36 	beq.w	8006722 <_printf_float+0xbe>
 8006ab6:	f108 0801 	add.w	r8, r8, #1
 8006aba:	68e3      	ldr	r3, [r4, #12]
 8006abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006abe:	1a5b      	subs	r3, r3, r1
 8006ac0:	4543      	cmp	r3, r8
 8006ac2:	dcf0      	bgt.n	8006aa6 <_printf_float+0x442>
 8006ac4:	e6f8      	b.n	80068b8 <_printf_float+0x254>
 8006ac6:	f04f 0800 	mov.w	r8, #0
 8006aca:	f104 0919 	add.w	r9, r4, #25
 8006ace:	e7f4      	b.n	8006aba <_printf_float+0x456>

08006ad0 <_printf_common>:
 8006ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	688a      	ldr	r2, [r1, #8]
 8006ada:	690b      	ldr	r3, [r1, #16]
 8006adc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	bfb8      	it	lt
 8006ae4:	4613      	movlt	r3, r2
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aec:	4607      	mov	r7, r0
 8006aee:	460c      	mov	r4, r1
 8006af0:	b10a      	cbz	r2, 8006af6 <_printf_common+0x26>
 8006af2:	3301      	adds	r3, #1
 8006af4:	6033      	str	r3, [r6, #0]
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	0699      	lsls	r1, r3, #26
 8006afa:	bf42      	ittt	mi
 8006afc:	6833      	ldrmi	r3, [r6, #0]
 8006afe:	3302      	addmi	r3, #2
 8006b00:	6033      	strmi	r3, [r6, #0]
 8006b02:	6825      	ldr	r5, [r4, #0]
 8006b04:	f015 0506 	ands.w	r5, r5, #6
 8006b08:	d106      	bne.n	8006b18 <_printf_common+0x48>
 8006b0a:	f104 0a19 	add.w	sl, r4, #25
 8006b0e:	68e3      	ldr	r3, [r4, #12]
 8006b10:	6832      	ldr	r2, [r6, #0]
 8006b12:	1a9b      	subs	r3, r3, r2
 8006b14:	42ab      	cmp	r3, r5
 8006b16:	dc26      	bgt.n	8006b66 <_printf_common+0x96>
 8006b18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b1c:	1e13      	subs	r3, r2, #0
 8006b1e:	6822      	ldr	r2, [r4, #0]
 8006b20:	bf18      	it	ne
 8006b22:	2301      	movne	r3, #1
 8006b24:	0692      	lsls	r2, r2, #26
 8006b26:	d42b      	bmi.n	8006b80 <_printf_common+0xb0>
 8006b28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4638      	mov	r0, r7
 8006b30:	47c0      	blx	r8
 8006b32:	3001      	adds	r0, #1
 8006b34:	d01e      	beq.n	8006b74 <_printf_common+0xa4>
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	6922      	ldr	r2, [r4, #16]
 8006b3a:	f003 0306 	and.w	r3, r3, #6
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	bf02      	ittt	eq
 8006b42:	68e5      	ldreq	r5, [r4, #12]
 8006b44:	6833      	ldreq	r3, [r6, #0]
 8006b46:	1aed      	subeq	r5, r5, r3
 8006b48:	68a3      	ldr	r3, [r4, #8]
 8006b4a:	bf0c      	ite	eq
 8006b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b50:	2500      	movne	r5, #0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bfc4      	itt	gt
 8006b56:	1a9b      	subgt	r3, r3, r2
 8006b58:	18ed      	addgt	r5, r5, r3
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	341a      	adds	r4, #26
 8006b5e:	42b5      	cmp	r5, r6
 8006b60:	d11a      	bne.n	8006b98 <_printf_common+0xc8>
 8006b62:	2000      	movs	r0, #0
 8006b64:	e008      	b.n	8006b78 <_printf_common+0xa8>
 8006b66:	2301      	movs	r3, #1
 8006b68:	4652      	mov	r2, sl
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	4638      	mov	r0, r7
 8006b6e:	47c0      	blx	r8
 8006b70:	3001      	adds	r0, #1
 8006b72:	d103      	bne.n	8006b7c <_printf_common+0xac>
 8006b74:	f04f 30ff 	mov.w	r0, #4294967295
 8006b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b7c:	3501      	adds	r5, #1
 8006b7e:	e7c6      	b.n	8006b0e <_printf_common+0x3e>
 8006b80:	18e1      	adds	r1, r4, r3
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	2030      	movs	r0, #48	; 0x30
 8006b86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b8a:	4422      	add	r2, r4
 8006b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b94:	3302      	adds	r3, #2
 8006b96:	e7c7      	b.n	8006b28 <_printf_common+0x58>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4622      	mov	r2, r4
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	47c0      	blx	r8
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	d0e6      	beq.n	8006b74 <_printf_common+0xa4>
 8006ba6:	3601      	adds	r6, #1
 8006ba8:	e7d9      	b.n	8006b5e <_printf_common+0x8e>
	...

08006bac <_printf_i>:
 8006bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	7e0f      	ldrb	r7, [r1, #24]
 8006bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb4:	2f78      	cmp	r7, #120	; 0x78
 8006bb6:	4691      	mov	r9, r2
 8006bb8:	4680      	mov	r8, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	469a      	mov	sl, r3
 8006bbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bc2:	d807      	bhi.n	8006bd4 <_printf_i+0x28>
 8006bc4:	2f62      	cmp	r7, #98	; 0x62
 8006bc6:	d80a      	bhi.n	8006bde <_printf_i+0x32>
 8006bc8:	2f00      	cmp	r7, #0
 8006bca:	f000 80d4 	beq.w	8006d76 <_printf_i+0x1ca>
 8006bce:	2f58      	cmp	r7, #88	; 0x58
 8006bd0:	f000 80c0 	beq.w	8006d54 <_printf_i+0x1a8>
 8006bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bdc:	e03a      	b.n	8006c54 <_printf_i+0xa8>
 8006bde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006be2:	2b15      	cmp	r3, #21
 8006be4:	d8f6      	bhi.n	8006bd4 <_printf_i+0x28>
 8006be6:	a101      	add	r1, pc, #4	; (adr r1, 8006bec <_printf_i+0x40>)
 8006be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bec:	08006c45 	.word	0x08006c45
 8006bf0:	08006c59 	.word	0x08006c59
 8006bf4:	08006bd5 	.word	0x08006bd5
 8006bf8:	08006bd5 	.word	0x08006bd5
 8006bfc:	08006bd5 	.word	0x08006bd5
 8006c00:	08006bd5 	.word	0x08006bd5
 8006c04:	08006c59 	.word	0x08006c59
 8006c08:	08006bd5 	.word	0x08006bd5
 8006c0c:	08006bd5 	.word	0x08006bd5
 8006c10:	08006bd5 	.word	0x08006bd5
 8006c14:	08006bd5 	.word	0x08006bd5
 8006c18:	08006d5d 	.word	0x08006d5d
 8006c1c:	08006c85 	.word	0x08006c85
 8006c20:	08006d17 	.word	0x08006d17
 8006c24:	08006bd5 	.word	0x08006bd5
 8006c28:	08006bd5 	.word	0x08006bd5
 8006c2c:	08006d7f 	.word	0x08006d7f
 8006c30:	08006bd5 	.word	0x08006bd5
 8006c34:	08006c85 	.word	0x08006c85
 8006c38:	08006bd5 	.word	0x08006bd5
 8006c3c:	08006bd5 	.word	0x08006bd5
 8006c40:	08006d1f 	.word	0x08006d1f
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	1d1a      	adds	r2, r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	602a      	str	r2, [r5, #0]
 8006c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c54:	2301      	movs	r3, #1
 8006c56:	e09f      	b.n	8006d98 <_printf_i+0x1ec>
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	682b      	ldr	r3, [r5, #0]
 8006c5c:	0607      	lsls	r7, r0, #24
 8006c5e:	f103 0104 	add.w	r1, r3, #4
 8006c62:	6029      	str	r1, [r5, #0]
 8006c64:	d501      	bpl.n	8006c6a <_printf_i+0xbe>
 8006c66:	681e      	ldr	r6, [r3, #0]
 8006c68:	e003      	b.n	8006c72 <_printf_i+0xc6>
 8006c6a:	0646      	lsls	r6, r0, #25
 8006c6c:	d5fb      	bpl.n	8006c66 <_printf_i+0xba>
 8006c6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	da03      	bge.n	8006c7e <_printf_i+0xd2>
 8006c76:	232d      	movs	r3, #45	; 0x2d
 8006c78:	4276      	negs	r6, r6
 8006c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7e:	485a      	ldr	r0, [pc, #360]	; (8006de8 <_printf_i+0x23c>)
 8006c80:	230a      	movs	r3, #10
 8006c82:	e012      	b.n	8006caa <_printf_i+0xfe>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	6820      	ldr	r0, [r4, #0]
 8006c88:	1d19      	adds	r1, r3, #4
 8006c8a:	6029      	str	r1, [r5, #0]
 8006c8c:	0605      	lsls	r5, r0, #24
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0xe8>
 8006c90:	681e      	ldr	r6, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0xee>
 8006c94:	0641      	lsls	r1, r0, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0xe4>
 8006c98:	881e      	ldrh	r6, [r3, #0]
 8006c9a:	4853      	ldr	r0, [pc, #332]	; (8006de8 <_printf_i+0x23c>)
 8006c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c9e:	bf0c      	ite	eq
 8006ca0:	2308      	moveq	r3, #8
 8006ca2:	230a      	movne	r3, #10
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006caa:	6865      	ldr	r5, [r4, #4]
 8006cac:	60a5      	str	r5, [r4, #8]
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	bfa2      	ittt	ge
 8006cb2:	6821      	ldrge	r1, [r4, #0]
 8006cb4:	f021 0104 	bicge.w	r1, r1, #4
 8006cb8:	6021      	strge	r1, [r4, #0]
 8006cba:	b90e      	cbnz	r6, 8006cc0 <_printf_i+0x114>
 8006cbc:	2d00      	cmp	r5, #0
 8006cbe:	d04b      	beq.n	8006d58 <_printf_i+0x1ac>
 8006cc0:	4615      	mov	r5, r2
 8006cc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cc6:	fb03 6711 	mls	r7, r3, r1, r6
 8006cca:	5dc7      	ldrb	r7, [r0, r7]
 8006ccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cd0:	4637      	mov	r7, r6
 8006cd2:	42bb      	cmp	r3, r7
 8006cd4:	460e      	mov	r6, r1
 8006cd6:	d9f4      	bls.n	8006cc2 <_printf_i+0x116>
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d10b      	bne.n	8006cf4 <_printf_i+0x148>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07de      	lsls	r6, r3, #31
 8006ce0:	d508      	bpl.n	8006cf4 <_printf_i+0x148>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	6861      	ldr	r1, [r4, #4]
 8006ce6:	4299      	cmp	r1, r3
 8006ce8:	bfde      	ittt	le
 8006cea:	2330      	movle	r3, #48	; 0x30
 8006cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cf4:	1b52      	subs	r2, r2, r5
 8006cf6:	6122      	str	r2, [r4, #16]
 8006cf8:	f8cd a000 	str.w	sl, [sp]
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	aa03      	add	r2, sp, #12
 8006d00:	4621      	mov	r1, r4
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7ff fee4 	bl	8006ad0 <_printf_common>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d14a      	bne.n	8006da2 <_printf_i+0x1f6>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	b004      	add	sp, #16
 8006d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	f043 0320 	orr.w	r3, r3, #32
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	4833      	ldr	r0, [pc, #204]	; (8006dec <_printf_i+0x240>)
 8006d20:	2778      	movs	r7, #120	; 0x78
 8006d22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6829      	ldr	r1, [r5, #0]
 8006d2a:	061f      	lsls	r7, r3, #24
 8006d2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d30:	d402      	bmi.n	8006d38 <_printf_i+0x18c>
 8006d32:	065f      	lsls	r7, r3, #25
 8006d34:	bf48      	it	mi
 8006d36:	b2b6      	uxthmi	r6, r6
 8006d38:	07df      	lsls	r7, r3, #31
 8006d3a:	bf48      	it	mi
 8006d3c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d40:	6029      	str	r1, [r5, #0]
 8006d42:	bf48      	it	mi
 8006d44:	6023      	strmi	r3, [r4, #0]
 8006d46:	b91e      	cbnz	r6, 8006d50 <_printf_i+0x1a4>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	f023 0320 	bic.w	r3, r3, #32
 8006d4e:	6023      	str	r3, [r4, #0]
 8006d50:	2310      	movs	r3, #16
 8006d52:	e7a7      	b.n	8006ca4 <_printf_i+0xf8>
 8006d54:	4824      	ldr	r0, [pc, #144]	; (8006de8 <_printf_i+0x23c>)
 8006d56:	e7e4      	b.n	8006d22 <_printf_i+0x176>
 8006d58:	4615      	mov	r5, r2
 8006d5a:	e7bd      	b.n	8006cd8 <_printf_i+0x12c>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	6826      	ldr	r6, [r4, #0]
 8006d60:	6961      	ldr	r1, [r4, #20]
 8006d62:	1d18      	adds	r0, r3, #4
 8006d64:	6028      	str	r0, [r5, #0]
 8006d66:	0635      	lsls	r5, r6, #24
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	d501      	bpl.n	8006d70 <_printf_i+0x1c4>
 8006d6c:	6019      	str	r1, [r3, #0]
 8006d6e:	e002      	b.n	8006d76 <_printf_i+0x1ca>
 8006d70:	0670      	lsls	r0, r6, #25
 8006d72:	d5fb      	bpl.n	8006d6c <_printf_i+0x1c0>
 8006d74:	8019      	strh	r1, [r3, #0]
 8006d76:	2300      	movs	r3, #0
 8006d78:	6123      	str	r3, [r4, #16]
 8006d7a:	4615      	mov	r5, r2
 8006d7c:	e7bc      	b.n	8006cf8 <_printf_i+0x14c>
 8006d7e:	682b      	ldr	r3, [r5, #0]
 8006d80:	1d1a      	adds	r2, r3, #4
 8006d82:	602a      	str	r2, [r5, #0]
 8006d84:	681d      	ldr	r5, [r3, #0]
 8006d86:	6862      	ldr	r2, [r4, #4]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f7f9 fa20 	bl	80001d0 <memchr>
 8006d90:	b108      	cbz	r0, 8006d96 <_printf_i+0x1ea>
 8006d92:	1b40      	subs	r0, r0, r5
 8006d94:	6060      	str	r0, [r4, #4]
 8006d96:	6863      	ldr	r3, [r4, #4]
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da0:	e7aa      	b.n	8006cf8 <_printf_i+0x14c>
 8006da2:	6923      	ldr	r3, [r4, #16]
 8006da4:	462a      	mov	r2, r5
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	47d0      	blx	sl
 8006dac:	3001      	adds	r0, #1
 8006dae:	d0ad      	beq.n	8006d0c <_printf_i+0x160>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	079b      	lsls	r3, r3, #30
 8006db4:	d413      	bmi.n	8006dde <_printf_i+0x232>
 8006db6:	68e0      	ldr	r0, [r4, #12]
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	4298      	cmp	r0, r3
 8006dbc:	bfb8      	it	lt
 8006dbe:	4618      	movlt	r0, r3
 8006dc0:	e7a6      	b.n	8006d10 <_printf_i+0x164>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4640      	mov	r0, r8
 8006dca:	47d0      	blx	sl
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d09d      	beq.n	8006d0c <_printf_i+0x160>
 8006dd0:	3501      	adds	r5, #1
 8006dd2:	68e3      	ldr	r3, [r4, #12]
 8006dd4:	9903      	ldr	r1, [sp, #12]
 8006dd6:	1a5b      	subs	r3, r3, r1
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dcf2      	bgt.n	8006dc2 <_printf_i+0x216>
 8006ddc:	e7eb      	b.n	8006db6 <_printf_i+0x20a>
 8006dde:	2500      	movs	r5, #0
 8006de0:	f104 0619 	add.w	r6, r4, #25
 8006de4:	e7f5      	b.n	8006dd2 <_printf_i+0x226>
 8006de6:	bf00      	nop
 8006de8:	080092ca 	.word	0x080092ca
 8006dec:	080092db 	.word	0x080092db

08006df0 <std>:
 8006df0:	2300      	movs	r3, #0
 8006df2:	b510      	push	{r4, lr}
 8006df4:	4604      	mov	r4, r0
 8006df6:	e9c0 3300 	strd	r3, r3, [r0]
 8006dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006dfe:	6083      	str	r3, [r0, #8]
 8006e00:	8181      	strh	r1, [r0, #12]
 8006e02:	6643      	str	r3, [r0, #100]	; 0x64
 8006e04:	81c2      	strh	r2, [r0, #14]
 8006e06:	6183      	str	r3, [r0, #24]
 8006e08:	4619      	mov	r1, r3
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	305c      	adds	r0, #92	; 0x5c
 8006e0e:	f000 f914 	bl	800703a <memset>
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <std+0x58>)
 8006e14:	6263      	str	r3, [r4, #36]	; 0x24
 8006e16:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <std+0x5c>)
 8006e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e1a:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <std+0x60>)
 8006e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e1e:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <std+0x64>)
 8006e20:	6323      	str	r3, [r4, #48]	; 0x30
 8006e22:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <std+0x68>)
 8006e24:	6224      	str	r4, [r4, #32]
 8006e26:	429c      	cmp	r4, r3
 8006e28:	d006      	beq.n	8006e38 <std+0x48>
 8006e2a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006e2e:	4294      	cmp	r4, r2
 8006e30:	d002      	beq.n	8006e38 <std+0x48>
 8006e32:	33d0      	adds	r3, #208	; 0xd0
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d105      	bne.n	8006e44 <std+0x54>
 8006e38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e40:	f000 b978 	b.w	8007134 <__retarget_lock_init_recursive>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	bf00      	nop
 8006e48:	08006fb5 	.word	0x08006fb5
 8006e4c:	08006fd7 	.word	0x08006fd7
 8006e50:	0800700f 	.word	0x0800700f
 8006e54:	08007033 	.word	0x08007033
 8006e58:	2000076c 	.word	0x2000076c

08006e5c <stdio_exit_handler>:
 8006e5c:	4a02      	ldr	r2, [pc, #8]	; (8006e68 <stdio_exit_handler+0xc>)
 8006e5e:	4903      	ldr	r1, [pc, #12]	; (8006e6c <stdio_exit_handler+0x10>)
 8006e60:	4803      	ldr	r0, [pc, #12]	; (8006e70 <stdio_exit_handler+0x14>)
 8006e62:	f000 b869 	b.w	8006f38 <_fwalk_sglue>
 8006e66:	bf00      	nop
 8006e68:	20000124 	.word	0x20000124
 8006e6c:	08008b01 	.word	0x08008b01
 8006e70:	20000130 	.word	0x20000130

08006e74 <cleanup_stdio>:
 8006e74:	6841      	ldr	r1, [r0, #4]
 8006e76:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <cleanup_stdio+0x34>)
 8006e78:	4299      	cmp	r1, r3
 8006e7a:	b510      	push	{r4, lr}
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	d001      	beq.n	8006e84 <cleanup_stdio+0x10>
 8006e80:	f001 fe3e 	bl	8008b00 <_fflush_r>
 8006e84:	68a1      	ldr	r1, [r4, #8]
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <cleanup_stdio+0x38>)
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	d002      	beq.n	8006e92 <cleanup_stdio+0x1e>
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f001 fe37 	bl	8008b00 <_fflush_r>
 8006e92:	68e1      	ldr	r1, [r4, #12]
 8006e94:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <cleanup_stdio+0x3c>)
 8006e96:	4299      	cmp	r1, r3
 8006e98:	d004      	beq.n	8006ea4 <cleanup_stdio+0x30>
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea0:	f001 be2e 	b.w	8008b00 <_fflush_r>
 8006ea4:	bd10      	pop	{r4, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000076c 	.word	0x2000076c
 8006eac:	200007d4 	.word	0x200007d4
 8006eb0:	2000083c 	.word	0x2000083c

08006eb4 <global_stdio_init.part.0>:
 8006eb4:	b510      	push	{r4, lr}
 8006eb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <global_stdio_init.part.0+0x30>)
 8006eb8:	4c0b      	ldr	r4, [pc, #44]	; (8006ee8 <global_stdio_init.part.0+0x34>)
 8006eba:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <global_stdio_init.part.0+0x38>)
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2104      	movs	r1, #4
 8006ec4:	f7ff ff94 	bl	8006df0 <std>
 8006ec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ecc:	2201      	movs	r2, #1
 8006ece:	2109      	movs	r1, #9
 8006ed0:	f7ff ff8e 	bl	8006df0 <std>
 8006ed4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ed8:	2202      	movs	r2, #2
 8006eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ede:	2112      	movs	r1, #18
 8006ee0:	f7ff bf86 	b.w	8006df0 <std>
 8006ee4:	200008a4 	.word	0x200008a4
 8006ee8:	2000076c 	.word	0x2000076c
 8006eec:	08006e5d 	.word	0x08006e5d

08006ef0 <__sfp_lock_acquire>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__sfp_lock_acquire+0x8>)
 8006ef2:	f000 b920 	b.w	8007136 <__retarget_lock_acquire_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	200008ad 	.word	0x200008ad

08006efc <__sfp_lock_release>:
 8006efc:	4801      	ldr	r0, [pc, #4]	; (8006f04 <__sfp_lock_release+0x8>)
 8006efe:	f000 b91b 	b.w	8007138 <__retarget_lock_release_recursive>
 8006f02:	bf00      	nop
 8006f04:	200008ad 	.word	0x200008ad

08006f08 <__sinit>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	f7ff fff0 	bl	8006ef0 <__sfp_lock_acquire>
 8006f10:	6a23      	ldr	r3, [r4, #32]
 8006f12:	b11b      	cbz	r3, 8006f1c <__sinit+0x14>
 8006f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f18:	f7ff bff0 	b.w	8006efc <__sfp_lock_release>
 8006f1c:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <__sinit+0x28>)
 8006f1e:	6223      	str	r3, [r4, #32]
 8006f20:	4b04      	ldr	r3, [pc, #16]	; (8006f34 <__sinit+0x2c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1f5      	bne.n	8006f14 <__sinit+0xc>
 8006f28:	f7ff ffc4 	bl	8006eb4 <global_stdio_init.part.0>
 8006f2c:	e7f2      	b.n	8006f14 <__sinit+0xc>
 8006f2e:	bf00      	nop
 8006f30:	08006e75 	.word	0x08006e75
 8006f34:	200008a4 	.word	0x200008a4

08006f38 <_fwalk_sglue>:
 8006f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	4688      	mov	r8, r1
 8006f40:	4614      	mov	r4, r2
 8006f42:	2600      	movs	r6, #0
 8006f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f48:	f1b9 0901 	subs.w	r9, r9, #1
 8006f4c:	d505      	bpl.n	8006f5a <_fwalk_sglue+0x22>
 8006f4e:	6824      	ldr	r4, [r4, #0]
 8006f50:	2c00      	cmp	r4, #0
 8006f52:	d1f7      	bne.n	8006f44 <_fwalk_sglue+0xc>
 8006f54:	4630      	mov	r0, r6
 8006f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d907      	bls.n	8006f70 <_fwalk_sglue+0x38>
 8006f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f64:	3301      	adds	r3, #1
 8006f66:	d003      	beq.n	8006f70 <_fwalk_sglue+0x38>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4638      	mov	r0, r7
 8006f6c:	47c0      	blx	r8
 8006f6e:	4306      	orrs	r6, r0
 8006f70:	3568      	adds	r5, #104	; 0x68
 8006f72:	e7e9      	b.n	8006f48 <_fwalk_sglue+0x10>

08006f74 <siprintf>:
 8006f74:	b40e      	push	{r1, r2, r3}
 8006f76:	b500      	push	{lr}
 8006f78:	b09c      	sub	sp, #112	; 0x70
 8006f7a:	ab1d      	add	r3, sp, #116	; 0x74
 8006f7c:	9002      	str	r0, [sp, #8]
 8006f7e:	9006      	str	r0, [sp, #24]
 8006f80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f84:	4809      	ldr	r0, [pc, #36]	; (8006fac <siprintf+0x38>)
 8006f86:	9107      	str	r1, [sp, #28]
 8006f88:	9104      	str	r1, [sp, #16]
 8006f8a:	4909      	ldr	r1, [pc, #36]	; (8006fb0 <siprintf+0x3c>)
 8006f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f90:	9105      	str	r1, [sp, #20]
 8006f92:	6800      	ldr	r0, [r0, #0]
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	a902      	add	r1, sp, #8
 8006f98:	f001 fc2e 	bl	80087f8 <_svfiprintf_r>
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
 8006fa2:	b01c      	add	sp, #112	; 0x70
 8006fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fa8:	b003      	add	sp, #12
 8006faa:	4770      	bx	lr
 8006fac:	2000017c 	.word	0x2000017c
 8006fb0:	ffff0208 	.word	0xffff0208

08006fb4 <__sread>:
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	f000 f86c 	bl	8007098 <_read_r>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	bfab      	itete	ge
 8006fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fc8:	181b      	addge	r3, r3, r0
 8006fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fce:	bfac      	ite	ge
 8006fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fd2:	81a3      	strhlt	r3, [r4, #12]
 8006fd4:	bd10      	pop	{r4, pc}

08006fd6 <__swrite>:
 8006fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	461f      	mov	r7, r3
 8006fdc:	898b      	ldrh	r3, [r1, #12]
 8006fde:	05db      	lsls	r3, r3, #23
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	4616      	mov	r6, r2
 8006fe6:	d505      	bpl.n	8006ff4 <__swrite+0x1e>
 8006fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fec:	2302      	movs	r3, #2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f000 f840 	bl	8007074 <_lseek_r>
 8006ff4:	89a3      	ldrh	r3, [r4, #12]
 8006ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	4632      	mov	r2, r6
 8007002:	463b      	mov	r3, r7
 8007004:	4628      	mov	r0, r5
 8007006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800700a:	f000 b857 	b.w	80070bc <_write_r>

0800700e <__sseek>:
 800700e:	b510      	push	{r4, lr}
 8007010:	460c      	mov	r4, r1
 8007012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007016:	f000 f82d 	bl	8007074 <_lseek_r>
 800701a:	1c43      	adds	r3, r0, #1
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	bf15      	itete	ne
 8007020:	6560      	strne	r0, [r4, #84]	; 0x54
 8007022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800702a:	81a3      	strheq	r3, [r4, #12]
 800702c:	bf18      	it	ne
 800702e:	81a3      	strhne	r3, [r4, #12]
 8007030:	bd10      	pop	{r4, pc}

08007032 <__sclose>:
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	f000 b80d 	b.w	8007054 <_close_r>

0800703a <memset>:
 800703a:	4402      	add	r2, r0
 800703c:	4603      	mov	r3, r0
 800703e:	4293      	cmp	r3, r2
 8007040:	d100      	bne.n	8007044 <memset+0xa>
 8007042:	4770      	bx	lr
 8007044:	f803 1b01 	strb.w	r1, [r3], #1
 8007048:	e7f9      	b.n	800703e <memset+0x4>
	...

0800704c <_localeconv_r>:
 800704c:	4800      	ldr	r0, [pc, #0]	; (8007050 <_localeconv_r+0x4>)
 800704e:	4770      	bx	lr
 8007050:	20000270 	.word	0x20000270

08007054 <_close_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_close_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fa fa43 	bl	80014ea <_close>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_close_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_close_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	200008a8 	.word	0x200008a8

08007074 <_lseek_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d07      	ldr	r5, [pc, #28]	; (8007094 <_lseek_r+0x20>)
 8007078:	4604      	mov	r4, r0
 800707a:	4608      	mov	r0, r1
 800707c:	4611      	mov	r1, r2
 800707e:	2200      	movs	r2, #0
 8007080:	602a      	str	r2, [r5, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	f7fa fa58 	bl	8001538 <_lseek>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_lseek_r+0x1e>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_lseek_r+0x1e>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200008a8 	.word	0x200008a8

08007098 <_read_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d07      	ldr	r5, [pc, #28]	; (80070b8 <_read_r+0x20>)
 800709c:	4604      	mov	r4, r0
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fa f9e6 	bl	8001478 <_read>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_read_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_read_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200008a8 	.word	0x200008a8

080070bc <_write_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	; (80070dc <_write_r+0x20>)
 80070c0:	4604      	mov	r4, r0
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7fa f9f1 	bl	80014b2 <_write>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_write_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_write_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	200008a8 	.word	0x200008a8

080070e0 <__errno>:
 80070e0:	4b01      	ldr	r3, [pc, #4]	; (80070e8 <__errno+0x8>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	2000017c 	.word	0x2000017c

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4d0d      	ldr	r5, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1b64      	subs	r4, r4, r5
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2600      	movs	r6, #0
 80070f8:	42a6      	cmp	r6, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4d0b      	ldr	r5, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f002 f894 	bl	800922c <_init>
 8007104:	1b64      	subs	r4, r4, r5
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2600      	movs	r6, #0
 800710a:	42a6      	cmp	r6, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f855 3b04 	ldr.w	r3, [r5], #4
 8007114:	4798      	blx	r3
 8007116:	3601      	adds	r6, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f855 3b04 	ldr.w	r3, [r5], #4
 800711e:	4798      	blx	r3
 8007120:	3601      	adds	r6, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	0800962c 	.word	0x0800962c
 8007128:	0800962c 	.word	0x0800962c
 800712c:	0800962c 	.word	0x0800962c
 8007130:	08009630 	.word	0x08009630

08007134 <__retarget_lock_init_recursive>:
 8007134:	4770      	bx	lr

08007136 <__retarget_lock_acquire_recursive>:
 8007136:	4770      	bx	lr

08007138 <__retarget_lock_release_recursive>:
 8007138:	4770      	bx	lr

0800713a <memcpy>:
 800713a:	440a      	add	r2, r1
 800713c:	4291      	cmp	r1, r2
 800713e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007142:	d100      	bne.n	8007146 <memcpy+0xc>
 8007144:	4770      	bx	lr
 8007146:	b510      	push	{r4, lr}
 8007148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800714c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007150:	4291      	cmp	r1, r2
 8007152:	d1f9      	bne.n	8007148 <memcpy+0xe>
 8007154:	bd10      	pop	{r4, pc}

08007156 <quorem>:
 8007156:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	6903      	ldr	r3, [r0, #16]
 800715c:	690c      	ldr	r4, [r1, #16]
 800715e:	42a3      	cmp	r3, r4
 8007160:	4607      	mov	r7, r0
 8007162:	db7e      	blt.n	8007262 <quorem+0x10c>
 8007164:	3c01      	subs	r4, #1
 8007166:	f101 0814 	add.w	r8, r1, #20
 800716a:	f100 0514 	add.w	r5, r0, #20
 800716e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800717c:	3301      	adds	r3, #1
 800717e:	429a      	cmp	r2, r3
 8007180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007188:	fbb2 f6f3 	udiv	r6, r2, r3
 800718c:	d331      	bcc.n	80071f2 <quorem+0x9c>
 800718e:	f04f 0e00 	mov.w	lr, #0
 8007192:	4640      	mov	r0, r8
 8007194:	46ac      	mov	ip, r5
 8007196:	46f2      	mov	sl, lr
 8007198:	f850 2b04 	ldr.w	r2, [r0], #4
 800719c:	b293      	uxth	r3, r2
 800719e:	fb06 e303 	mla	r3, r6, r3, lr
 80071a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071a6:	0c1a      	lsrs	r2, r3, #16
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	ebaa 0303 	sub.w	r3, sl, r3
 80071ae:	f8dc a000 	ldr.w	sl, [ip]
 80071b2:	fa13 f38a 	uxtah	r3, r3, sl
 80071b6:	fb06 220e 	mla	r2, r6, lr, r2
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	9b00      	ldr	r3, [sp, #0]
 80071be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80071c2:	b292      	uxth	r2, r2
 80071c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80071c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80071cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80071d0:	4581      	cmp	r9, r0
 80071d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071d6:	f84c 3b04 	str.w	r3, [ip], #4
 80071da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80071de:	d2db      	bcs.n	8007198 <quorem+0x42>
 80071e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80071e4:	b92b      	cbnz	r3, 80071f2 <quorem+0x9c>
 80071e6:	9b01      	ldr	r3, [sp, #4]
 80071e8:	3b04      	subs	r3, #4
 80071ea:	429d      	cmp	r5, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	d32c      	bcc.n	800724a <quorem+0xf4>
 80071f0:	613c      	str	r4, [r7, #16]
 80071f2:	4638      	mov	r0, r7
 80071f4:	f001 f9a6 	bl	8008544 <__mcmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	db22      	blt.n	8007242 <quorem+0xec>
 80071fc:	3601      	adds	r6, #1
 80071fe:	4629      	mov	r1, r5
 8007200:	2000      	movs	r0, #0
 8007202:	f858 2b04 	ldr.w	r2, [r8], #4
 8007206:	f8d1 c000 	ldr.w	ip, [r1]
 800720a:	b293      	uxth	r3, r2
 800720c:	1ac3      	subs	r3, r0, r3
 800720e:	0c12      	lsrs	r2, r2, #16
 8007210:	fa13 f38c 	uxtah	r3, r3, ip
 8007214:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800721c:	b29b      	uxth	r3, r3
 800721e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007222:	45c1      	cmp	r9, r8
 8007224:	f841 3b04 	str.w	r3, [r1], #4
 8007228:	ea4f 4022 	mov.w	r0, r2, asr #16
 800722c:	d2e9      	bcs.n	8007202 <quorem+0xac>
 800722e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007232:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007236:	b922      	cbnz	r2, 8007242 <quorem+0xec>
 8007238:	3b04      	subs	r3, #4
 800723a:	429d      	cmp	r5, r3
 800723c:	461a      	mov	r2, r3
 800723e:	d30a      	bcc.n	8007256 <quorem+0x100>
 8007240:	613c      	str	r4, [r7, #16]
 8007242:	4630      	mov	r0, r6
 8007244:	b003      	add	sp, #12
 8007246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724a:	6812      	ldr	r2, [r2, #0]
 800724c:	3b04      	subs	r3, #4
 800724e:	2a00      	cmp	r2, #0
 8007250:	d1ce      	bne.n	80071f0 <quorem+0x9a>
 8007252:	3c01      	subs	r4, #1
 8007254:	e7c9      	b.n	80071ea <quorem+0x94>
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	3b04      	subs	r3, #4
 800725a:	2a00      	cmp	r2, #0
 800725c:	d1f0      	bne.n	8007240 <quorem+0xea>
 800725e:	3c01      	subs	r4, #1
 8007260:	e7eb      	b.n	800723a <quorem+0xe4>
 8007262:	2000      	movs	r0, #0
 8007264:	e7ee      	b.n	8007244 <quorem+0xee>
	...

08007268 <_dtoa_r>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	ed2d 8b04 	vpush	{d8-d9}
 8007270:	69c5      	ldr	r5, [r0, #28]
 8007272:	b093      	sub	sp, #76	; 0x4c
 8007274:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007278:	ec57 6b10 	vmov	r6, r7, d0
 800727c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007280:	9107      	str	r1, [sp, #28]
 8007282:	4604      	mov	r4, r0
 8007284:	920a      	str	r2, [sp, #40]	; 0x28
 8007286:	930d      	str	r3, [sp, #52]	; 0x34
 8007288:	b975      	cbnz	r5, 80072a8 <_dtoa_r+0x40>
 800728a:	2010      	movs	r0, #16
 800728c:	f000 fe2a 	bl	8007ee4 <malloc>
 8007290:	4602      	mov	r2, r0
 8007292:	61e0      	str	r0, [r4, #28]
 8007294:	b920      	cbnz	r0, 80072a0 <_dtoa_r+0x38>
 8007296:	4bae      	ldr	r3, [pc, #696]	; (8007550 <_dtoa_r+0x2e8>)
 8007298:	21ef      	movs	r1, #239	; 0xef
 800729a:	48ae      	ldr	r0, [pc, #696]	; (8007554 <_dtoa_r+0x2ec>)
 800729c:	f001 fc82 	bl	8008ba4 <__assert_func>
 80072a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80072a4:	6005      	str	r5, [r0, #0]
 80072a6:	60c5      	str	r5, [r0, #12]
 80072a8:	69e3      	ldr	r3, [r4, #28]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	b151      	cbz	r1, 80072c4 <_dtoa_r+0x5c>
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	604a      	str	r2, [r1, #4]
 80072b2:	2301      	movs	r3, #1
 80072b4:	4093      	lsls	r3, r2
 80072b6:	608b      	str	r3, [r1, #8]
 80072b8:	4620      	mov	r0, r4
 80072ba:	f000 ff07 	bl	80080cc <_Bfree>
 80072be:	69e3      	ldr	r3, [r4, #28]
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	1e3b      	subs	r3, r7, #0
 80072c6:	bfbb      	ittet	lt
 80072c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	9303      	strlt	r3, [sp, #12]
 80072ce:	2300      	movge	r3, #0
 80072d0:	2201      	movlt	r2, #1
 80072d2:	bfac      	ite	ge
 80072d4:	f8c8 3000 	strge.w	r3, [r8]
 80072d8:	f8c8 2000 	strlt.w	r2, [r8]
 80072dc:	4b9e      	ldr	r3, [pc, #632]	; (8007558 <_dtoa_r+0x2f0>)
 80072de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80072e2:	ea33 0308 	bics.w	r3, r3, r8
 80072e6:	d11b      	bne.n	8007320 <_dtoa_r+0xb8>
 80072e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80072f4:	4333      	orrs	r3, r6
 80072f6:	f000 8593 	beq.w	8007e20 <_dtoa_r+0xbb8>
 80072fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80072fc:	b963      	cbnz	r3, 8007318 <_dtoa_r+0xb0>
 80072fe:	4b97      	ldr	r3, [pc, #604]	; (800755c <_dtoa_r+0x2f4>)
 8007300:	e027      	b.n	8007352 <_dtoa_r+0xea>
 8007302:	4b97      	ldr	r3, [pc, #604]	; (8007560 <_dtoa_r+0x2f8>)
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	3308      	adds	r3, #8
 8007308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	9800      	ldr	r0, [sp, #0]
 800730e:	b013      	add	sp, #76	; 0x4c
 8007310:	ecbd 8b04 	vpop	{d8-d9}
 8007314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007318:	4b90      	ldr	r3, [pc, #576]	; (800755c <_dtoa_r+0x2f4>)
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	3303      	adds	r3, #3
 800731e:	e7f3      	b.n	8007308 <_dtoa_r+0xa0>
 8007320:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	ec51 0b17 	vmov	r0, r1, d7
 800732a:	eeb0 8a47 	vmov.f32	s16, s14
 800732e:	eef0 8a67 	vmov.f32	s17, s15
 8007332:	2300      	movs	r3, #0
 8007334:	f7f9 fbc8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007338:	4681      	mov	r9, r0
 800733a:	b160      	cbz	r0, 8007356 <_dtoa_r+0xee>
 800733c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800733e:	2301      	movs	r3, #1
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8568 	beq.w	8007e1a <_dtoa_r+0xbb2>
 800734a:	4b86      	ldr	r3, [pc, #536]	; (8007564 <_dtoa_r+0x2fc>)
 800734c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	3b01      	subs	r3, #1
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	e7da      	b.n	800730c <_dtoa_r+0xa4>
 8007356:	aa10      	add	r2, sp, #64	; 0x40
 8007358:	a911      	add	r1, sp, #68	; 0x44
 800735a:	4620      	mov	r0, r4
 800735c:	eeb0 0a48 	vmov.f32	s0, s16
 8007360:	eef0 0a68 	vmov.f32	s1, s17
 8007364:	f001 f994 	bl	8008690 <__d2b>
 8007368:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800736c:	4682      	mov	sl, r0
 800736e:	2d00      	cmp	r5, #0
 8007370:	d07f      	beq.n	8007472 <_dtoa_r+0x20a>
 8007372:	ee18 3a90 	vmov	r3, s17
 8007376:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800737a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800737e:	ec51 0b18 	vmov	r0, r1, d8
 8007382:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800738a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800738e:	4619      	mov	r1, r3
 8007390:	2200      	movs	r2, #0
 8007392:	4b75      	ldr	r3, [pc, #468]	; (8007568 <_dtoa_r+0x300>)
 8007394:	f7f8 ff78 	bl	8000288 <__aeabi_dsub>
 8007398:	a367      	add	r3, pc, #412	; (adr r3, 8007538 <_dtoa_r+0x2d0>)
 800739a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739e:	f7f9 f92b 	bl	80005f8 <__aeabi_dmul>
 80073a2:	a367      	add	r3, pc, #412	; (adr r3, 8007540 <_dtoa_r+0x2d8>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f8 ff70 	bl	800028c <__adddf3>
 80073ac:	4606      	mov	r6, r0
 80073ae:	4628      	mov	r0, r5
 80073b0:	460f      	mov	r7, r1
 80073b2:	f7f9 f8b7 	bl	8000524 <__aeabi_i2d>
 80073b6:	a364      	add	r3, pc, #400	; (adr r3, 8007548 <_dtoa_r+0x2e0>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f9 f91c 	bl	80005f8 <__aeabi_dmul>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4630      	mov	r0, r6
 80073c6:	4639      	mov	r1, r7
 80073c8:	f7f8 ff60 	bl	800028c <__adddf3>
 80073cc:	4606      	mov	r6, r0
 80073ce:	460f      	mov	r7, r1
 80073d0:	f7f9 fbc2 	bl	8000b58 <__aeabi_d2iz>
 80073d4:	2200      	movs	r2, #0
 80073d6:	4683      	mov	fp, r0
 80073d8:	2300      	movs	r3, #0
 80073da:	4630      	mov	r0, r6
 80073dc:	4639      	mov	r1, r7
 80073de:	f7f9 fb7d 	bl	8000adc <__aeabi_dcmplt>
 80073e2:	b148      	cbz	r0, 80073f8 <_dtoa_r+0x190>
 80073e4:	4658      	mov	r0, fp
 80073e6:	f7f9 f89d 	bl	8000524 <__aeabi_i2d>
 80073ea:	4632      	mov	r2, r6
 80073ec:	463b      	mov	r3, r7
 80073ee:	f7f9 fb6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80073f2:	b908      	cbnz	r0, 80073f8 <_dtoa_r+0x190>
 80073f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80073f8:	f1bb 0f16 	cmp.w	fp, #22
 80073fc:	d857      	bhi.n	80074ae <_dtoa_r+0x246>
 80073fe:	4b5b      	ldr	r3, [pc, #364]	; (800756c <_dtoa_r+0x304>)
 8007400:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	ec51 0b18 	vmov	r0, r1, d8
 800740c:	f7f9 fb66 	bl	8000adc <__aeabi_dcmplt>
 8007410:	2800      	cmp	r0, #0
 8007412:	d04e      	beq.n	80074b2 <_dtoa_r+0x24a>
 8007414:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007418:	2300      	movs	r3, #0
 800741a:	930c      	str	r3, [sp, #48]	; 0x30
 800741c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800741e:	1b5b      	subs	r3, r3, r5
 8007420:	1e5a      	subs	r2, r3, #1
 8007422:	bf45      	ittet	mi
 8007424:	f1c3 0301 	rsbmi	r3, r3, #1
 8007428:	9305      	strmi	r3, [sp, #20]
 800742a:	2300      	movpl	r3, #0
 800742c:	2300      	movmi	r3, #0
 800742e:	9206      	str	r2, [sp, #24]
 8007430:	bf54      	ite	pl
 8007432:	9305      	strpl	r3, [sp, #20]
 8007434:	9306      	strmi	r3, [sp, #24]
 8007436:	f1bb 0f00 	cmp.w	fp, #0
 800743a:	db3c      	blt.n	80074b6 <_dtoa_r+0x24e>
 800743c:	9b06      	ldr	r3, [sp, #24]
 800743e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007442:	445b      	add	r3, fp
 8007444:	9306      	str	r3, [sp, #24]
 8007446:	2300      	movs	r3, #0
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	9b07      	ldr	r3, [sp, #28]
 800744c:	2b09      	cmp	r3, #9
 800744e:	d868      	bhi.n	8007522 <_dtoa_r+0x2ba>
 8007450:	2b05      	cmp	r3, #5
 8007452:	bfc4      	itt	gt
 8007454:	3b04      	subgt	r3, #4
 8007456:	9307      	strgt	r3, [sp, #28]
 8007458:	9b07      	ldr	r3, [sp, #28]
 800745a:	f1a3 0302 	sub.w	r3, r3, #2
 800745e:	bfcc      	ite	gt
 8007460:	2500      	movgt	r5, #0
 8007462:	2501      	movle	r5, #1
 8007464:	2b03      	cmp	r3, #3
 8007466:	f200 8085 	bhi.w	8007574 <_dtoa_r+0x30c>
 800746a:	e8df f003 	tbb	[pc, r3]
 800746e:	3b2e      	.short	0x3b2e
 8007470:	5839      	.short	0x5839
 8007472:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007476:	441d      	add	r5, r3
 8007478:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800747c:	2b20      	cmp	r3, #32
 800747e:	bfc1      	itttt	gt
 8007480:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007484:	fa08 f803 	lslgt.w	r8, r8, r3
 8007488:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800748c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007490:	bfd6      	itet	le
 8007492:	f1c3 0320 	rsble	r3, r3, #32
 8007496:	ea48 0003 	orrgt.w	r0, r8, r3
 800749a:	fa06 f003 	lslle.w	r0, r6, r3
 800749e:	f7f9 f831 	bl	8000504 <__aeabi_ui2d>
 80074a2:	2201      	movs	r2, #1
 80074a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80074a8:	3d01      	subs	r5, #1
 80074aa:	920e      	str	r2, [sp, #56]	; 0x38
 80074ac:	e76f      	b.n	800738e <_dtoa_r+0x126>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7b3      	b.n	800741a <_dtoa_r+0x1b2>
 80074b2:	900c      	str	r0, [sp, #48]	; 0x30
 80074b4:	e7b2      	b.n	800741c <_dtoa_r+0x1b4>
 80074b6:	9b05      	ldr	r3, [sp, #20]
 80074b8:	eba3 030b 	sub.w	r3, r3, fp
 80074bc:	9305      	str	r3, [sp, #20]
 80074be:	f1cb 0300 	rsb	r3, fp, #0
 80074c2:	9308      	str	r3, [sp, #32]
 80074c4:	2300      	movs	r3, #0
 80074c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c8:	e7bf      	b.n	800744a <_dtoa_r+0x1e2>
 80074ca:	2300      	movs	r3, #0
 80074cc:	9309      	str	r3, [sp, #36]	; 0x24
 80074ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	dc52      	bgt.n	800757a <_dtoa_r+0x312>
 80074d4:	2301      	movs	r3, #1
 80074d6:	9301      	str	r3, [sp, #4]
 80074d8:	9304      	str	r3, [sp, #16]
 80074da:	461a      	mov	r2, r3
 80074dc:	920a      	str	r2, [sp, #40]	; 0x28
 80074de:	e00b      	b.n	80074f8 <_dtoa_r+0x290>
 80074e0:	2301      	movs	r3, #1
 80074e2:	e7f3      	b.n	80074cc <_dtoa_r+0x264>
 80074e4:	2300      	movs	r3, #0
 80074e6:	9309      	str	r3, [sp, #36]	; 0x24
 80074e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ea:	445b      	add	r3, fp
 80074ec:	9301      	str	r3, [sp, #4]
 80074ee:	3301      	adds	r3, #1
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	9304      	str	r3, [sp, #16]
 80074f4:	bfb8      	it	lt
 80074f6:	2301      	movlt	r3, #1
 80074f8:	69e0      	ldr	r0, [r4, #28]
 80074fa:	2100      	movs	r1, #0
 80074fc:	2204      	movs	r2, #4
 80074fe:	f102 0614 	add.w	r6, r2, #20
 8007502:	429e      	cmp	r6, r3
 8007504:	d93d      	bls.n	8007582 <_dtoa_r+0x31a>
 8007506:	6041      	str	r1, [r0, #4]
 8007508:	4620      	mov	r0, r4
 800750a:	f000 fd9f 	bl	800804c <_Balloc>
 800750e:	9000      	str	r0, [sp, #0]
 8007510:	2800      	cmp	r0, #0
 8007512:	d139      	bne.n	8007588 <_dtoa_r+0x320>
 8007514:	4b16      	ldr	r3, [pc, #88]	; (8007570 <_dtoa_r+0x308>)
 8007516:	4602      	mov	r2, r0
 8007518:	f240 11af 	movw	r1, #431	; 0x1af
 800751c:	e6bd      	b.n	800729a <_dtoa_r+0x32>
 800751e:	2301      	movs	r3, #1
 8007520:	e7e1      	b.n	80074e6 <_dtoa_r+0x27e>
 8007522:	2501      	movs	r5, #1
 8007524:	2300      	movs	r3, #0
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	9509      	str	r5, [sp, #36]	; 0x24
 800752a:	f04f 33ff 	mov.w	r3, #4294967295
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	9304      	str	r3, [sp, #16]
 8007532:	2200      	movs	r2, #0
 8007534:	2312      	movs	r3, #18
 8007536:	e7d1      	b.n	80074dc <_dtoa_r+0x274>
 8007538:	636f4361 	.word	0x636f4361
 800753c:	3fd287a7 	.word	0x3fd287a7
 8007540:	8b60c8b3 	.word	0x8b60c8b3
 8007544:	3fc68a28 	.word	0x3fc68a28
 8007548:	509f79fb 	.word	0x509f79fb
 800754c:	3fd34413 	.word	0x3fd34413
 8007550:	080092f9 	.word	0x080092f9
 8007554:	08009310 	.word	0x08009310
 8007558:	7ff00000 	.word	0x7ff00000
 800755c:	080092f5 	.word	0x080092f5
 8007560:	080092ec 	.word	0x080092ec
 8007564:	080092c9 	.word	0x080092c9
 8007568:	3ff80000 	.word	0x3ff80000
 800756c:	08009400 	.word	0x08009400
 8007570:	08009368 	.word	0x08009368
 8007574:	2301      	movs	r3, #1
 8007576:	9309      	str	r3, [sp, #36]	; 0x24
 8007578:	e7d7      	b.n	800752a <_dtoa_r+0x2c2>
 800757a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	9304      	str	r3, [sp, #16]
 8007580:	e7ba      	b.n	80074f8 <_dtoa_r+0x290>
 8007582:	3101      	adds	r1, #1
 8007584:	0052      	lsls	r2, r2, #1
 8007586:	e7ba      	b.n	80074fe <_dtoa_r+0x296>
 8007588:	69e3      	ldr	r3, [r4, #28]
 800758a:	9a00      	ldr	r2, [sp, #0]
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	9b04      	ldr	r3, [sp, #16]
 8007590:	2b0e      	cmp	r3, #14
 8007592:	f200 80a8 	bhi.w	80076e6 <_dtoa_r+0x47e>
 8007596:	2d00      	cmp	r5, #0
 8007598:	f000 80a5 	beq.w	80076e6 <_dtoa_r+0x47e>
 800759c:	f1bb 0f00 	cmp.w	fp, #0
 80075a0:	dd38      	ble.n	8007614 <_dtoa_r+0x3ac>
 80075a2:	4bc0      	ldr	r3, [pc, #768]	; (80078a4 <_dtoa_r+0x63c>)
 80075a4:	f00b 020f 	and.w	r2, fp, #15
 80075a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80075b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80075b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80075b8:	d019      	beq.n	80075ee <_dtoa_r+0x386>
 80075ba:	4bbb      	ldr	r3, [pc, #748]	; (80078a8 <_dtoa_r+0x640>)
 80075bc:	ec51 0b18 	vmov	r0, r1, d8
 80075c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075c4:	f7f9 f942 	bl	800084c <__aeabi_ddiv>
 80075c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075cc:	f008 080f 	and.w	r8, r8, #15
 80075d0:	2503      	movs	r5, #3
 80075d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80078a8 <_dtoa_r+0x640>
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	d10a      	bne.n	80075f2 <_dtoa_r+0x38a>
 80075dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e0:	4632      	mov	r2, r6
 80075e2:	463b      	mov	r3, r7
 80075e4:	f7f9 f932 	bl	800084c <__aeabi_ddiv>
 80075e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ec:	e02b      	b.n	8007646 <_dtoa_r+0x3de>
 80075ee:	2502      	movs	r5, #2
 80075f0:	e7ef      	b.n	80075d2 <_dtoa_r+0x36a>
 80075f2:	f018 0f01 	tst.w	r8, #1
 80075f6:	d008      	beq.n	800760a <_dtoa_r+0x3a2>
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007600:	f7f8 fffa 	bl	80005f8 <__aeabi_dmul>
 8007604:	3501      	adds	r5, #1
 8007606:	4606      	mov	r6, r0
 8007608:	460f      	mov	r7, r1
 800760a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800760e:	f109 0908 	add.w	r9, r9, #8
 8007612:	e7e0      	b.n	80075d6 <_dtoa_r+0x36e>
 8007614:	f000 809f 	beq.w	8007756 <_dtoa_r+0x4ee>
 8007618:	f1cb 0600 	rsb	r6, fp, #0
 800761c:	4ba1      	ldr	r3, [pc, #644]	; (80078a4 <_dtoa_r+0x63c>)
 800761e:	4fa2      	ldr	r7, [pc, #648]	; (80078a8 <_dtoa_r+0x640>)
 8007620:	f006 020f 	and.w	r2, r6, #15
 8007624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	ec51 0b18 	vmov	r0, r1, d8
 8007630:	f7f8 ffe2 	bl	80005f8 <__aeabi_dmul>
 8007634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007638:	1136      	asrs	r6, r6, #4
 800763a:	2300      	movs	r3, #0
 800763c:	2502      	movs	r5, #2
 800763e:	2e00      	cmp	r6, #0
 8007640:	d17e      	bne.n	8007740 <_dtoa_r+0x4d8>
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1d0      	bne.n	80075e8 <_dtoa_r+0x380>
 8007646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007648:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8084 	beq.w	800775a <_dtoa_r+0x4f2>
 8007652:	4b96      	ldr	r3, [pc, #600]	; (80078ac <_dtoa_r+0x644>)
 8007654:	2200      	movs	r2, #0
 8007656:	4640      	mov	r0, r8
 8007658:	4649      	mov	r1, r9
 800765a:	f7f9 fa3f 	bl	8000adc <__aeabi_dcmplt>
 800765e:	2800      	cmp	r0, #0
 8007660:	d07b      	beq.n	800775a <_dtoa_r+0x4f2>
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d078      	beq.n	800775a <_dtoa_r+0x4f2>
 8007668:	9b01      	ldr	r3, [sp, #4]
 800766a:	2b00      	cmp	r3, #0
 800766c:	dd39      	ble.n	80076e2 <_dtoa_r+0x47a>
 800766e:	4b90      	ldr	r3, [pc, #576]	; (80078b0 <_dtoa_r+0x648>)
 8007670:	2200      	movs	r2, #0
 8007672:	4640      	mov	r0, r8
 8007674:	4649      	mov	r1, r9
 8007676:	f7f8 ffbf 	bl	80005f8 <__aeabi_dmul>
 800767a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767e:	9e01      	ldr	r6, [sp, #4]
 8007680:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007684:	3501      	adds	r5, #1
 8007686:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800768a:	4628      	mov	r0, r5
 800768c:	f7f8 ff4a 	bl	8000524 <__aeabi_i2d>
 8007690:	4642      	mov	r2, r8
 8007692:	464b      	mov	r3, r9
 8007694:	f7f8 ffb0 	bl	80005f8 <__aeabi_dmul>
 8007698:	4b86      	ldr	r3, [pc, #536]	; (80078b4 <_dtoa_r+0x64c>)
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 fdf6 	bl	800028c <__adddf3>
 80076a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80076a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	2e00      	cmp	r6, #0
 80076ac:	d158      	bne.n	8007760 <_dtoa_r+0x4f8>
 80076ae:	4b82      	ldr	r3, [pc, #520]	; (80078b8 <_dtoa_r+0x650>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	f7f8 fde7 	bl	8000288 <__aeabi_dsub>
 80076ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076be:	4680      	mov	r8, r0
 80076c0:	4689      	mov	r9, r1
 80076c2:	f7f9 fa29 	bl	8000b18 <__aeabi_dcmpgt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	f040 8296 	bne.w	8007bf8 <_dtoa_r+0x990>
 80076cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80076d0:	4640      	mov	r0, r8
 80076d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076d6:	4649      	mov	r1, r9
 80076d8:	f7f9 fa00 	bl	8000adc <__aeabi_dcmplt>
 80076dc:	2800      	cmp	r0, #0
 80076de:	f040 8289 	bne.w	8007bf4 <_dtoa_r+0x98c>
 80076e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80076e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f2c0 814e 	blt.w	800798a <_dtoa_r+0x722>
 80076ee:	f1bb 0f0e 	cmp.w	fp, #14
 80076f2:	f300 814a 	bgt.w	800798a <_dtoa_r+0x722>
 80076f6:	4b6b      	ldr	r3, [pc, #428]	; (80078a4 <_dtoa_r+0x63c>)
 80076f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80076fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	f280 80dc 	bge.w	80078c0 <_dtoa_r+0x658>
 8007708:	9b04      	ldr	r3, [sp, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f300 80d8 	bgt.w	80078c0 <_dtoa_r+0x658>
 8007710:	f040 826f 	bne.w	8007bf2 <_dtoa_r+0x98a>
 8007714:	4b68      	ldr	r3, [pc, #416]	; (80078b8 <_dtoa_r+0x650>)
 8007716:	2200      	movs	r2, #0
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f8 ff6c 	bl	80005f8 <__aeabi_dmul>
 8007720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007724:	f7f9 f9ee 	bl	8000b04 <__aeabi_dcmpge>
 8007728:	9e04      	ldr	r6, [sp, #16]
 800772a:	4637      	mov	r7, r6
 800772c:	2800      	cmp	r0, #0
 800772e:	f040 8245 	bne.w	8007bbc <_dtoa_r+0x954>
 8007732:	9d00      	ldr	r5, [sp, #0]
 8007734:	2331      	movs	r3, #49	; 0x31
 8007736:	f805 3b01 	strb.w	r3, [r5], #1
 800773a:	f10b 0b01 	add.w	fp, fp, #1
 800773e:	e241      	b.n	8007bc4 <_dtoa_r+0x95c>
 8007740:	07f2      	lsls	r2, r6, #31
 8007742:	d505      	bpl.n	8007750 <_dtoa_r+0x4e8>
 8007744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007748:	f7f8 ff56 	bl	80005f8 <__aeabi_dmul>
 800774c:	3501      	adds	r5, #1
 800774e:	2301      	movs	r3, #1
 8007750:	1076      	asrs	r6, r6, #1
 8007752:	3708      	adds	r7, #8
 8007754:	e773      	b.n	800763e <_dtoa_r+0x3d6>
 8007756:	2502      	movs	r5, #2
 8007758:	e775      	b.n	8007646 <_dtoa_r+0x3de>
 800775a:	9e04      	ldr	r6, [sp, #16]
 800775c:	465f      	mov	r7, fp
 800775e:	e792      	b.n	8007686 <_dtoa_r+0x41e>
 8007760:	9900      	ldr	r1, [sp, #0]
 8007762:	4b50      	ldr	r3, [pc, #320]	; (80078a4 <_dtoa_r+0x63c>)
 8007764:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007768:	4431      	add	r1, r6
 800776a:	9102      	str	r1, [sp, #8]
 800776c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800776e:	eeb0 9a47 	vmov.f32	s18, s14
 8007772:	eef0 9a67 	vmov.f32	s19, s15
 8007776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800777a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800777e:	2900      	cmp	r1, #0
 8007780:	d044      	beq.n	800780c <_dtoa_r+0x5a4>
 8007782:	494e      	ldr	r1, [pc, #312]	; (80078bc <_dtoa_r+0x654>)
 8007784:	2000      	movs	r0, #0
 8007786:	f7f9 f861 	bl	800084c <__aeabi_ddiv>
 800778a:	ec53 2b19 	vmov	r2, r3, d9
 800778e:	f7f8 fd7b 	bl	8000288 <__aeabi_dsub>
 8007792:	9d00      	ldr	r5, [sp, #0]
 8007794:	ec41 0b19 	vmov	d9, r0, r1
 8007798:	4649      	mov	r1, r9
 800779a:	4640      	mov	r0, r8
 800779c:	f7f9 f9dc 	bl	8000b58 <__aeabi_d2iz>
 80077a0:	4606      	mov	r6, r0
 80077a2:	f7f8 febf 	bl	8000524 <__aeabi_i2d>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4640      	mov	r0, r8
 80077ac:	4649      	mov	r1, r9
 80077ae:	f7f8 fd6b 	bl	8000288 <__aeabi_dsub>
 80077b2:	3630      	adds	r6, #48	; 0x30
 80077b4:	f805 6b01 	strb.w	r6, [r5], #1
 80077b8:	ec53 2b19 	vmov	r2, r3, d9
 80077bc:	4680      	mov	r8, r0
 80077be:	4689      	mov	r9, r1
 80077c0:	f7f9 f98c 	bl	8000adc <__aeabi_dcmplt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d164      	bne.n	8007892 <_dtoa_r+0x62a>
 80077c8:	4642      	mov	r2, r8
 80077ca:	464b      	mov	r3, r9
 80077cc:	4937      	ldr	r1, [pc, #220]	; (80078ac <_dtoa_r+0x644>)
 80077ce:	2000      	movs	r0, #0
 80077d0:	f7f8 fd5a 	bl	8000288 <__aeabi_dsub>
 80077d4:	ec53 2b19 	vmov	r2, r3, d9
 80077d8:	f7f9 f980 	bl	8000adc <__aeabi_dcmplt>
 80077dc:	2800      	cmp	r0, #0
 80077de:	f040 80b6 	bne.w	800794e <_dtoa_r+0x6e6>
 80077e2:	9b02      	ldr	r3, [sp, #8]
 80077e4:	429d      	cmp	r5, r3
 80077e6:	f43f af7c 	beq.w	80076e2 <_dtoa_r+0x47a>
 80077ea:	4b31      	ldr	r3, [pc, #196]	; (80078b0 <_dtoa_r+0x648>)
 80077ec:	ec51 0b19 	vmov	r0, r1, d9
 80077f0:	2200      	movs	r2, #0
 80077f2:	f7f8 ff01 	bl	80005f8 <__aeabi_dmul>
 80077f6:	4b2e      	ldr	r3, [pc, #184]	; (80078b0 <_dtoa_r+0x648>)
 80077f8:	ec41 0b19 	vmov	d9, r0, r1
 80077fc:	2200      	movs	r2, #0
 80077fe:	4640      	mov	r0, r8
 8007800:	4649      	mov	r1, r9
 8007802:	f7f8 fef9 	bl	80005f8 <__aeabi_dmul>
 8007806:	4680      	mov	r8, r0
 8007808:	4689      	mov	r9, r1
 800780a:	e7c5      	b.n	8007798 <_dtoa_r+0x530>
 800780c:	ec51 0b17 	vmov	r0, r1, d7
 8007810:	f7f8 fef2 	bl	80005f8 <__aeabi_dmul>
 8007814:	9b02      	ldr	r3, [sp, #8]
 8007816:	9d00      	ldr	r5, [sp, #0]
 8007818:	930f      	str	r3, [sp, #60]	; 0x3c
 800781a:	ec41 0b19 	vmov	d9, r0, r1
 800781e:	4649      	mov	r1, r9
 8007820:	4640      	mov	r0, r8
 8007822:	f7f9 f999 	bl	8000b58 <__aeabi_d2iz>
 8007826:	4606      	mov	r6, r0
 8007828:	f7f8 fe7c 	bl	8000524 <__aeabi_i2d>
 800782c:	3630      	adds	r6, #48	; 0x30
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4640      	mov	r0, r8
 8007834:	4649      	mov	r1, r9
 8007836:	f7f8 fd27 	bl	8000288 <__aeabi_dsub>
 800783a:	f805 6b01 	strb.w	r6, [r5], #1
 800783e:	9b02      	ldr	r3, [sp, #8]
 8007840:	429d      	cmp	r5, r3
 8007842:	4680      	mov	r8, r0
 8007844:	4689      	mov	r9, r1
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	d124      	bne.n	8007896 <_dtoa_r+0x62e>
 800784c:	4b1b      	ldr	r3, [pc, #108]	; (80078bc <_dtoa_r+0x654>)
 800784e:	ec51 0b19 	vmov	r0, r1, d9
 8007852:	f7f8 fd1b 	bl	800028c <__adddf3>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f9 f95b 	bl	8000b18 <__aeabi_dcmpgt>
 8007862:	2800      	cmp	r0, #0
 8007864:	d173      	bne.n	800794e <_dtoa_r+0x6e6>
 8007866:	ec53 2b19 	vmov	r2, r3, d9
 800786a:	4914      	ldr	r1, [pc, #80]	; (80078bc <_dtoa_r+0x654>)
 800786c:	2000      	movs	r0, #0
 800786e:	f7f8 fd0b 	bl	8000288 <__aeabi_dsub>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	4640      	mov	r0, r8
 8007878:	4649      	mov	r1, r9
 800787a:	f7f9 f92f 	bl	8000adc <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f af2f 	beq.w	80076e2 <_dtoa_r+0x47a>
 8007884:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007886:	1e6b      	subs	r3, r5, #1
 8007888:	930f      	str	r3, [sp, #60]	; 0x3c
 800788a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800788e:	2b30      	cmp	r3, #48	; 0x30
 8007890:	d0f8      	beq.n	8007884 <_dtoa_r+0x61c>
 8007892:	46bb      	mov	fp, r7
 8007894:	e04a      	b.n	800792c <_dtoa_r+0x6c4>
 8007896:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <_dtoa_r+0x648>)
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	4680      	mov	r8, r0
 800789e:	4689      	mov	r9, r1
 80078a0:	e7bd      	b.n	800781e <_dtoa_r+0x5b6>
 80078a2:	bf00      	nop
 80078a4:	08009400 	.word	0x08009400
 80078a8:	080093d8 	.word	0x080093d8
 80078ac:	3ff00000 	.word	0x3ff00000
 80078b0:	40240000 	.word	0x40240000
 80078b4:	401c0000 	.word	0x401c0000
 80078b8:	40140000 	.word	0x40140000
 80078bc:	3fe00000 	.word	0x3fe00000
 80078c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80078c4:	9d00      	ldr	r5, [sp, #0]
 80078c6:	4642      	mov	r2, r8
 80078c8:	464b      	mov	r3, r9
 80078ca:	4630      	mov	r0, r6
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7f8 ffbd 	bl	800084c <__aeabi_ddiv>
 80078d2:	f7f9 f941 	bl	8000b58 <__aeabi_d2iz>
 80078d6:	9001      	str	r0, [sp, #4]
 80078d8:	f7f8 fe24 	bl	8000524 <__aeabi_i2d>
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	f7f8 fe8a 	bl	80005f8 <__aeabi_dmul>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4630      	mov	r0, r6
 80078ea:	4639      	mov	r1, r7
 80078ec:	f7f8 fccc 	bl	8000288 <__aeabi_dsub>
 80078f0:	9e01      	ldr	r6, [sp, #4]
 80078f2:	9f04      	ldr	r7, [sp, #16]
 80078f4:	3630      	adds	r6, #48	; 0x30
 80078f6:	f805 6b01 	strb.w	r6, [r5], #1
 80078fa:	9e00      	ldr	r6, [sp, #0]
 80078fc:	1bae      	subs	r6, r5, r6
 80078fe:	42b7      	cmp	r7, r6
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	d134      	bne.n	8007970 <_dtoa_r+0x708>
 8007906:	f7f8 fcc1 	bl	800028c <__adddf3>
 800790a:	4642      	mov	r2, r8
 800790c:	464b      	mov	r3, r9
 800790e:	4606      	mov	r6, r0
 8007910:	460f      	mov	r7, r1
 8007912:	f7f9 f901 	bl	8000b18 <__aeabi_dcmpgt>
 8007916:	b9c8      	cbnz	r0, 800794c <_dtoa_r+0x6e4>
 8007918:	4642      	mov	r2, r8
 800791a:	464b      	mov	r3, r9
 800791c:	4630      	mov	r0, r6
 800791e:	4639      	mov	r1, r7
 8007920:	f7f9 f8d2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007924:	b110      	cbz	r0, 800792c <_dtoa_r+0x6c4>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	07db      	lsls	r3, r3, #31
 800792a:	d40f      	bmi.n	800794c <_dtoa_r+0x6e4>
 800792c:	4651      	mov	r1, sl
 800792e:	4620      	mov	r0, r4
 8007930:	f000 fbcc 	bl	80080cc <_Bfree>
 8007934:	2300      	movs	r3, #0
 8007936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007938:	702b      	strb	r3, [r5, #0]
 800793a:	f10b 0301 	add.w	r3, fp, #1
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007942:	2b00      	cmp	r3, #0
 8007944:	f43f ace2 	beq.w	800730c <_dtoa_r+0xa4>
 8007948:	601d      	str	r5, [r3, #0]
 800794a:	e4df      	b.n	800730c <_dtoa_r+0xa4>
 800794c:	465f      	mov	r7, fp
 800794e:	462b      	mov	r3, r5
 8007950:	461d      	mov	r5, r3
 8007952:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007956:	2a39      	cmp	r2, #57	; 0x39
 8007958:	d106      	bne.n	8007968 <_dtoa_r+0x700>
 800795a:	9a00      	ldr	r2, [sp, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d1f7      	bne.n	8007950 <_dtoa_r+0x6e8>
 8007960:	9900      	ldr	r1, [sp, #0]
 8007962:	2230      	movs	r2, #48	; 0x30
 8007964:	3701      	adds	r7, #1
 8007966:	700a      	strb	r2, [r1, #0]
 8007968:	781a      	ldrb	r2, [r3, #0]
 800796a:	3201      	adds	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e790      	b.n	8007892 <_dtoa_r+0x62a>
 8007970:	4ba3      	ldr	r3, [pc, #652]	; (8007c00 <_dtoa_r+0x998>)
 8007972:	2200      	movs	r2, #0
 8007974:	f7f8 fe40 	bl	80005f8 <__aeabi_dmul>
 8007978:	2200      	movs	r2, #0
 800797a:	2300      	movs	r3, #0
 800797c:	4606      	mov	r6, r0
 800797e:	460f      	mov	r7, r1
 8007980:	f7f9 f8a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007984:	2800      	cmp	r0, #0
 8007986:	d09e      	beq.n	80078c6 <_dtoa_r+0x65e>
 8007988:	e7d0      	b.n	800792c <_dtoa_r+0x6c4>
 800798a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800798c:	2a00      	cmp	r2, #0
 800798e:	f000 80ca 	beq.w	8007b26 <_dtoa_r+0x8be>
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	2a01      	cmp	r2, #1
 8007996:	f300 80ad 	bgt.w	8007af4 <_dtoa_r+0x88c>
 800799a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800799c:	2a00      	cmp	r2, #0
 800799e:	f000 80a5 	beq.w	8007aec <_dtoa_r+0x884>
 80079a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80079a6:	9e08      	ldr	r6, [sp, #32]
 80079a8:	9d05      	ldr	r5, [sp, #20]
 80079aa:	9a05      	ldr	r2, [sp, #20]
 80079ac:	441a      	add	r2, r3
 80079ae:	9205      	str	r2, [sp, #20]
 80079b0:	9a06      	ldr	r2, [sp, #24]
 80079b2:	2101      	movs	r1, #1
 80079b4:	441a      	add	r2, r3
 80079b6:	4620      	mov	r0, r4
 80079b8:	9206      	str	r2, [sp, #24]
 80079ba:	f000 fc3d 	bl	8008238 <__i2b>
 80079be:	4607      	mov	r7, r0
 80079c0:	b165      	cbz	r5, 80079dc <_dtoa_r+0x774>
 80079c2:	9b06      	ldr	r3, [sp, #24]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	dd09      	ble.n	80079dc <_dtoa_r+0x774>
 80079c8:	42ab      	cmp	r3, r5
 80079ca:	9a05      	ldr	r2, [sp, #20]
 80079cc:	bfa8      	it	ge
 80079ce:	462b      	movge	r3, r5
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	9205      	str	r2, [sp, #20]
 80079d4:	9a06      	ldr	r2, [sp, #24]
 80079d6:	1aed      	subs	r5, r5, r3
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	9306      	str	r3, [sp, #24]
 80079dc:	9b08      	ldr	r3, [sp, #32]
 80079de:	b1f3      	cbz	r3, 8007a1e <_dtoa_r+0x7b6>
 80079e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80a3 	beq.w	8007b2e <_dtoa_r+0x8c6>
 80079e8:	2e00      	cmp	r6, #0
 80079ea:	dd10      	ble.n	8007a0e <_dtoa_r+0x7a6>
 80079ec:	4639      	mov	r1, r7
 80079ee:	4632      	mov	r2, r6
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 fce1 	bl	80083b8 <__pow5mult>
 80079f6:	4652      	mov	r2, sl
 80079f8:	4601      	mov	r1, r0
 80079fa:	4607      	mov	r7, r0
 80079fc:	4620      	mov	r0, r4
 80079fe:	f000 fc31 	bl	8008264 <__multiply>
 8007a02:	4651      	mov	r1, sl
 8007a04:	4680      	mov	r8, r0
 8007a06:	4620      	mov	r0, r4
 8007a08:	f000 fb60 	bl	80080cc <_Bfree>
 8007a0c:	46c2      	mov	sl, r8
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	1b9a      	subs	r2, r3, r6
 8007a12:	d004      	beq.n	8007a1e <_dtoa_r+0x7b6>
 8007a14:	4651      	mov	r1, sl
 8007a16:	4620      	mov	r0, r4
 8007a18:	f000 fcce 	bl	80083b8 <__pow5mult>
 8007a1c:	4682      	mov	sl, r0
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 fc09 	bl	8008238 <__i2b>
 8007a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	f340 8081 	ble.w	8007b32 <_dtoa_r+0x8ca>
 8007a30:	461a      	mov	r2, r3
 8007a32:	4601      	mov	r1, r0
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 fcbf 	bl	80083b8 <__pow5mult>
 8007a3a:	9b07      	ldr	r3, [sp, #28]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	4606      	mov	r6, r0
 8007a40:	dd7a      	ble.n	8007b38 <_dtoa_r+0x8d0>
 8007a42:	f04f 0800 	mov.w	r8, #0
 8007a46:	6933      	ldr	r3, [r6, #16]
 8007a48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007a4c:	6918      	ldr	r0, [r3, #16]
 8007a4e:	f000 fba5 	bl	800819c <__hi0bits>
 8007a52:	f1c0 0020 	rsb	r0, r0, #32
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	4418      	add	r0, r3
 8007a5a:	f010 001f 	ands.w	r0, r0, #31
 8007a5e:	f000 8094 	beq.w	8007b8a <_dtoa_r+0x922>
 8007a62:	f1c0 0320 	rsb	r3, r0, #32
 8007a66:	2b04      	cmp	r3, #4
 8007a68:	f340 8085 	ble.w	8007b76 <_dtoa_r+0x90e>
 8007a6c:	9b05      	ldr	r3, [sp, #20]
 8007a6e:	f1c0 001c 	rsb	r0, r0, #28
 8007a72:	4403      	add	r3, r0
 8007a74:	9305      	str	r3, [sp, #20]
 8007a76:	9b06      	ldr	r3, [sp, #24]
 8007a78:	4403      	add	r3, r0
 8007a7a:	4405      	add	r5, r0
 8007a7c:	9306      	str	r3, [sp, #24]
 8007a7e:	9b05      	ldr	r3, [sp, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	dd05      	ble.n	8007a90 <_dtoa_r+0x828>
 8007a84:	4651      	mov	r1, sl
 8007a86:	461a      	mov	r2, r3
 8007a88:	4620      	mov	r0, r4
 8007a8a:	f000 fcef 	bl	800846c <__lshift>
 8007a8e:	4682      	mov	sl, r0
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	dd05      	ble.n	8007aa2 <_dtoa_r+0x83a>
 8007a96:	4631      	mov	r1, r6
 8007a98:	461a      	mov	r2, r3
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f000 fce6 	bl	800846c <__lshift>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d072      	beq.n	8007b8e <_dtoa_r+0x926>
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4650      	mov	r0, sl
 8007aac:	f000 fd4a 	bl	8008544 <__mcmp>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	da6c      	bge.n	8007b8e <_dtoa_r+0x926>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	4651      	mov	r1, sl
 8007ab8:	220a      	movs	r2, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 fb28 	bl	8008110 <__multadd>
 8007ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ac6:	4682      	mov	sl, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 81b0 	beq.w	8007e2e <_dtoa_r+0xbc6>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fb1b 	bl	8008110 <__multadd>
 8007ada:	9b01      	ldr	r3, [sp, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	4607      	mov	r7, r0
 8007ae0:	f300 8096 	bgt.w	8007c10 <_dtoa_r+0x9a8>
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	dc59      	bgt.n	8007b9e <_dtoa_r+0x936>
 8007aea:	e091      	b.n	8007c10 <_dtoa_r+0x9a8>
 8007aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007af2:	e758      	b.n	80079a6 <_dtoa_r+0x73e>
 8007af4:	9b04      	ldr	r3, [sp, #16]
 8007af6:	1e5e      	subs	r6, r3, #1
 8007af8:	9b08      	ldr	r3, [sp, #32]
 8007afa:	42b3      	cmp	r3, r6
 8007afc:	bfbf      	itttt	lt
 8007afe:	9b08      	ldrlt	r3, [sp, #32]
 8007b00:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007b02:	9608      	strlt	r6, [sp, #32]
 8007b04:	1af3      	sublt	r3, r6, r3
 8007b06:	bfb4      	ite	lt
 8007b08:	18d2      	addlt	r2, r2, r3
 8007b0a:	1b9e      	subge	r6, r3, r6
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	bfbc      	itt	lt
 8007b10:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007b12:	2600      	movlt	r6, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bfb7      	itett	lt
 8007b18:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007b1c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007b20:	1a9d      	sublt	r5, r3, r2
 8007b22:	2300      	movlt	r3, #0
 8007b24:	e741      	b.n	80079aa <_dtoa_r+0x742>
 8007b26:	9e08      	ldr	r6, [sp, #32]
 8007b28:	9d05      	ldr	r5, [sp, #20]
 8007b2a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b2c:	e748      	b.n	80079c0 <_dtoa_r+0x758>
 8007b2e:	9a08      	ldr	r2, [sp, #32]
 8007b30:	e770      	b.n	8007a14 <_dtoa_r+0x7ac>
 8007b32:	9b07      	ldr	r3, [sp, #28]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	dc19      	bgt.n	8007b6c <_dtoa_r+0x904>
 8007b38:	9b02      	ldr	r3, [sp, #8]
 8007b3a:	b9bb      	cbnz	r3, 8007b6c <_dtoa_r+0x904>
 8007b3c:	9b03      	ldr	r3, [sp, #12]
 8007b3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b42:	b99b      	cbnz	r3, 8007b6c <_dtoa_r+0x904>
 8007b44:	9b03      	ldr	r3, [sp, #12]
 8007b46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b4a:	0d1b      	lsrs	r3, r3, #20
 8007b4c:	051b      	lsls	r3, r3, #20
 8007b4e:	b183      	cbz	r3, 8007b72 <_dtoa_r+0x90a>
 8007b50:	9b05      	ldr	r3, [sp, #20]
 8007b52:	3301      	adds	r3, #1
 8007b54:	9305      	str	r3, [sp, #20]
 8007b56:	9b06      	ldr	r3, [sp, #24]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	9306      	str	r3, [sp, #24]
 8007b5c:	f04f 0801 	mov.w	r8, #1
 8007b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f47f af6f 	bne.w	8007a46 <_dtoa_r+0x7de>
 8007b68:	2001      	movs	r0, #1
 8007b6a:	e774      	b.n	8007a56 <_dtoa_r+0x7ee>
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	e7f6      	b.n	8007b60 <_dtoa_r+0x8f8>
 8007b72:	4698      	mov	r8, r3
 8007b74:	e7f4      	b.n	8007b60 <_dtoa_r+0x8f8>
 8007b76:	d082      	beq.n	8007a7e <_dtoa_r+0x816>
 8007b78:	9a05      	ldr	r2, [sp, #20]
 8007b7a:	331c      	adds	r3, #28
 8007b7c:	441a      	add	r2, r3
 8007b7e:	9205      	str	r2, [sp, #20]
 8007b80:	9a06      	ldr	r2, [sp, #24]
 8007b82:	441a      	add	r2, r3
 8007b84:	441d      	add	r5, r3
 8007b86:	9206      	str	r2, [sp, #24]
 8007b88:	e779      	b.n	8007a7e <_dtoa_r+0x816>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	e7f4      	b.n	8007b78 <_dtoa_r+0x910>
 8007b8e:	9b04      	ldr	r3, [sp, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	dc37      	bgt.n	8007c04 <_dtoa_r+0x99c>
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	dd34      	ble.n	8007c04 <_dtoa_r+0x99c>
 8007b9a:	9b04      	ldr	r3, [sp, #16]
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	b963      	cbnz	r3, 8007bbc <_dtoa_r+0x954>
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f000 fab2 	bl	8008110 <__multadd>
 8007bac:	4601      	mov	r1, r0
 8007bae:	4606      	mov	r6, r0
 8007bb0:	4650      	mov	r0, sl
 8007bb2:	f000 fcc7 	bl	8008544 <__mcmp>
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	f73f adbb 	bgt.w	8007732 <_dtoa_r+0x4ca>
 8007bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbe:	9d00      	ldr	r5, [sp, #0]
 8007bc0:	ea6f 0b03 	mvn.w	fp, r3
 8007bc4:	f04f 0800 	mov.w	r8, #0
 8007bc8:	4631      	mov	r1, r6
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fa7e 	bl	80080cc <_Bfree>
 8007bd0:	2f00      	cmp	r7, #0
 8007bd2:	f43f aeab 	beq.w	800792c <_dtoa_r+0x6c4>
 8007bd6:	f1b8 0f00 	cmp.w	r8, #0
 8007bda:	d005      	beq.n	8007be8 <_dtoa_r+0x980>
 8007bdc:	45b8      	cmp	r8, r7
 8007bde:	d003      	beq.n	8007be8 <_dtoa_r+0x980>
 8007be0:	4641      	mov	r1, r8
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 fa72 	bl	80080cc <_Bfree>
 8007be8:	4639      	mov	r1, r7
 8007bea:	4620      	mov	r0, r4
 8007bec:	f000 fa6e 	bl	80080cc <_Bfree>
 8007bf0:	e69c      	b.n	800792c <_dtoa_r+0x6c4>
 8007bf2:	2600      	movs	r6, #0
 8007bf4:	4637      	mov	r7, r6
 8007bf6:	e7e1      	b.n	8007bbc <_dtoa_r+0x954>
 8007bf8:	46bb      	mov	fp, r7
 8007bfa:	4637      	mov	r7, r6
 8007bfc:	e599      	b.n	8007732 <_dtoa_r+0x4ca>
 8007bfe:	bf00      	nop
 8007c00:	40240000 	.word	0x40240000
 8007c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80c8 	beq.w	8007d9c <_dtoa_r+0xb34>
 8007c0c:	9b04      	ldr	r3, [sp, #16]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	2d00      	cmp	r5, #0
 8007c12:	dd05      	ble.n	8007c20 <_dtoa_r+0x9b8>
 8007c14:	4639      	mov	r1, r7
 8007c16:	462a      	mov	r2, r5
 8007c18:	4620      	mov	r0, r4
 8007c1a:	f000 fc27 	bl	800846c <__lshift>
 8007c1e:	4607      	mov	r7, r0
 8007c20:	f1b8 0f00 	cmp.w	r8, #0
 8007c24:	d05b      	beq.n	8007cde <_dtoa_r+0xa76>
 8007c26:	6879      	ldr	r1, [r7, #4]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 fa0f 	bl	800804c <_Balloc>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b928      	cbnz	r0, 8007c3e <_dtoa_r+0x9d6>
 8007c32:	4b83      	ldr	r3, [pc, #524]	; (8007e40 <_dtoa_r+0xbd8>)
 8007c34:	4602      	mov	r2, r0
 8007c36:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007c3a:	f7ff bb2e 	b.w	800729a <_dtoa_r+0x32>
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	3202      	adds	r2, #2
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	f107 010c 	add.w	r1, r7, #12
 8007c48:	300c      	adds	r0, #12
 8007c4a:	f7ff fa76 	bl	800713a <memcpy>
 8007c4e:	2201      	movs	r2, #1
 8007c50:	4629      	mov	r1, r5
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 fc0a 	bl	800846c <__lshift>
 8007c58:	9b00      	ldr	r3, [sp, #0]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c62:	4413      	add	r3, r2
 8007c64:	9308      	str	r3, [sp, #32]
 8007c66:	9b02      	ldr	r3, [sp, #8]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	46b8      	mov	r8, r7
 8007c6e:	9306      	str	r3, [sp, #24]
 8007c70:	4607      	mov	r7, r0
 8007c72:	9b04      	ldr	r3, [sp, #16]
 8007c74:	4631      	mov	r1, r6
 8007c76:	3b01      	subs	r3, #1
 8007c78:	4650      	mov	r0, sl
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	f7ff fa6b 	bl	8007156 <quorem>
 8007c80:	4641      	mov	r1, r8
 8007c82:	9002      	str	r0, [sp, #8]
 8007c84:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c88:	4650      	mov	r0, sl
 8007c8a:	f000 fc5b 	bl	8008544 <__mcmp>
 8007c8e:	463a      	mov	r2, r7
 8007c90:	9005      	str	r0, [sp, #20]
 8007c92:	4631      	mov	r1, r6
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 fc71 	bl	800857c <__mdiff>
 8007c9a:	68c2      	ldr	r2, [r0, #12]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	bb02      	cbnz	r2, 8007ce2 <_dtoa_r+0xa7a>
 8007ca0:	4601      	mov	r1, r0
 8007ca2:	4650      	mov	r0, sl
 8007ca4:	f000 fc4e 	bl	8008544 <__mcmp>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4629      	mov	r1, r5
 8007cac:	4620      	mov	r0, r4
 8007cae:	9209      	str	r2, [sp, #36]	; 0x24
 8007cb0:	f000 fa0c 	bl	80080cc <_Bfree>
 8007cb4:	9b07      	ldr	r3, [sp, #28]
 8007cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb8:	9d04      	ldr	r5, [sp, #16]
 8007cba:	ea43 0102 	orr.w	r1, r3, r2
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	4319      	orrs	r1, r3
 8007cc2:	d110      	bne.n	8007ce6 <_dtoa_r+0xa7e>
 8007cc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007cc8:	d029      	beq.n	8007d1e <_dtoa_r+0xab6>
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	dd02      	ble.n	8007cd6 <_dtoa_r+0xa6e>
 8007cd0:	9b02      	ldr	r3, [sp, #8]
 8007cd2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007cd6:	9b01      	ldr	r3, [sp, #4]
 8007cd8:	f883 9000 	strb.w	r9, [r3]
 8007cdc:	e774      	b.n	8007bc8 <_dtoa_r+0x960>
 8007cde:	4638      	mov	r0, r7
 8007ce0:	e7ba      	b.n	8007c58 <_dtoa_r+0x9f0>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e7e1      	b.n	8007caa <_dtoa_r+0xa42>
 8007ce6:	9b05      	ldr	r3, [sp, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	db04      	blt.n	8007cf6 <_dtoa_r+0xa8e>
 8007cec:	9907      	ldr	r1, [sp, #28]
 8007cee:	430b      	orrs	r3, r1
 8007cf0:	9906      	ldr	r1, [sp, #24]
 8007cf2:	430b      	orrs	r3, r1
 8007cf4:	d120      	bne.n	8007d38 <_dtoa_r+0xad0>
 8007cf6:	2a00      	cmp	r2, #0
 8007cf8:	dded      	ble.n	8007cd6 <_dtoa_r+0xa6e>
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f000 fbb4 	bl	800846c <__lshift>
 8007d04:	4631      	mov	r1, r6
 8007d06:	4682      	mov	sl, r0
 8007d08:	f000 fc1c 	bl	8008544 <__mcmp>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	dc03      	bgt.n	8007d18 <_dtoa_r+0xab0>
 8007d10:	d1e1      	bne.n	8007cd6 <_dtoa_r+0xa6e>
 8007d12:	f019 0f01 	tst.w	r9, #1
 8007d16:	d0de      	beq.n	8007cd6 <_dtoa_r+0xa6e>
 8007d18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d1c:	d1d8      	bne.n	8007cd0 <_dtoa_r+0xa68>
 8007d1e:	9a01      	ldr	r2, [sp, #4]
 8007d20:	2339      	movs	r3, #57	; 0x39
 8007d22:	7013      	strb	r3, [r2, #0]
 8007d24:	462b      	mov	r3, r5
 8007d26:	461d      	mov	r5, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007d2e:	2a39      	cmp	r2, #57	; 0x39
 8007d30:	d06c      	beq.n	8007e0c <_dtoa_r+0xba4>
 8007d32:	3201      	adds	r2, #1
 8007d34:	701a      	strb	r2, [r3, #0]
 8007d36:	e747      	b.n	8007bc8 <_dtoa_r+0x960>
 8007d38:	2a00      	cmp	r2, #0
 8007d3a:	dd07      	ble.n	8007d4c <_dtoa_r+0xae4>
 8007d3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007d40:	d0ed      	beq.n	8007d1e <_dtoa_r+0xab6>
 8007d42:	9a01      	ldr	r2, [sp, #4]
 8007d44:	f109 0301 	add.w	r3, r9, #1
 8007d48:	7013      	strb	r3, [r2, #0]
 8007d4a:	e73d      	b.n	8007bc8 <_dtoa_r+0x960>
 8007d4c:	9b04      	ldr	r3, [sp, #16]
 8007d4e:	9a08      	ldr	r2, [sp, #32]
 8007d50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d043      	beq.n	8007de0 <_dtoa_r+0xb78>
 8007d58:	4651      	mov	r1, sl
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 f9d6 	bl	8008110 <__multadd>
 8007d64:	45b8      	cmp	r8, r7
 8007d66:	4682      	mov	sl, r0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	f04f 020a 	mov.w	r2, #10
 8007d70:	4641      	mov	r1, r8
 8007d72:	4620      	mov	r0, r4
 8007d74:	d107      	bne.n	8007d86 <_dtoa_r+0xb1e>
 8007d76:	f000 f9cb 	bl	8008110 <__multadd>
 8007d7a:	4680      	mov	r8, r0
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	9b04      	ldr	r3, [sp, #16]
 8007d80:	3301      	adds	r3, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	e775      	b.n	8007c72 <_dtoa_r+0xa0a>
 8007d86:	f000 f9c3 	bl	8008110 <__multadd>
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	4680      	mov	r8, r0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	220a      	movs	r2, #10
 8007d92:	4620      	mov	r0, r4
 8007d94:	f000 f9bc 	bl	8008110 <__multadd>
 8007d98:	4607      	mov	r7, r0
 8007d9a:	e7f0      	b.n	8007d7e <_dtoa_r+0xb16>
 8007d9c:	9b04      	ldr	r3, [sp, #16]
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	9d00      	ldr	r5, [sp, #0]
 8007da2:	4631      	mov	r1, r6
 8007da4:	4650      	mov	r0, sl
 8007da6:	f7ff f9d6 	bl	8007156 <quorem>
 8007daa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	f805 9b01 	strb.w	r9, [r5], #1
 8007db4:	1aea      	subs	r2, r5, r3
 8007db6:	9b01      	ldr	r3, [sp, #4]
 8007db8:	4293      	cmp	r3, r2
 8007dba:	dd07      	ble.n	8007dcc <_dtoa_r+0xb64>
 8007dbc:	4651      	mov	r1, sl
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	220a      	movs	r2, #10
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	f000 f9a4 	bl	8008110 <__multadd>
 8007dc8:	4682      	mov	sl, r0
 8007dca:	e7ea      	b.n	8007da2 <_dtoa_r+0xb3a>
 8007dcc:	9b01      	ldr	r3, [sp, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	bfc8      	it	gt
 8007dd2:	461d      	movgt	r5, r3
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	bfd8      	it	le
 8007dd8:	2501      	movle	r5, #1
 8007dda:	441d      	add	r5, r3
 8007ddc:	f04f 0800 	mov.w	r8, #0
 8007de0:	4651      	mov	r1, sl
 8007de2:	2201      	movs	r2, #1
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 fb41 	bl	800846c <__lshift>
 8007dea:	4631      	mov	r1, r6
 8007dec:	4682      	mov	sl, r0
 8007dee:	f000 fba9 	bl	8008544 <__mcmp>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	dc96      	bgt.n	8007d24 <_dtoa_r+0xabc>
 8007df6:	d102      	bne.n	8007dfe <_dtoa_r+0xb96>
 8007df8:	f019 0f01 	tst.w	r9, #1
 8007dfc:	d192      	bne.n	8007d24 <_dtoa_r+0xabc>
 8007dfe:	462b      	mov	r3, r5
 8007e00:	461d      	mov	r5, r3
 8007e02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e06:	2a30      	cmp	r2, #48	; 0x30
 8007e08:	d0fa      	beq.n	8007e00 <_dtoa_r+0xb98>
 8007e0a:	e6dd      	b.n	8007bc8 <_dtoa_r+0x960>
 8007e0c:	9a00      	ldr	r2, [sp, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d189      	bne.n	8007d26 <_dtoa_r+0xabe>
 8007e12:	f10b 0b01 	add.w	fp, fp, #1
 8007e16:	2331      	movs	r3, #49	; 0x31
 8007e18:	e796      	b.n	8007d48 <_dtoa_r+0xae0>
 8007e1a:	4b0a      	ldr	r3, [pc, #40]	; (8007e44 <_dtoa_r+0xbdc>)
 8007e1c:	f7ff ba99 	b.w	8007352 <_dtoa_r+0xea>
 8007e20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f47f aa6d 	bne.w	8007302 <_dtoa_r+0x9a>
 8007e28:	4b07      	ldr	r3, [pc, #28]	; (8007e48 <_dtoa_r+0xbe0>)
 8007e2a:	f7ff ba92 	b.w	8007352 <_dtoa_r+0xea>
 8007e2e:	9b01      	ldr	r3, [sp, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	dcb5      	bgt.n	8007da0 <_dtoa_r+0xb38>
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f73f aeb1 	bgt.w	8007b9e <_dtoa_r+0x936>
 8007e3c:	e7b0      	b.n	8007da0 <_dtoa_r+0xb38>
 8007e3e:	bf00      	nop
 8007e40:	08009368 	.word	0x08009368
 8007e44:	080092c8 	.word	0x080092c8
 8007e48:	080092ec 	.word	0x080092ec

08007e4c <_free_r>:
 8007e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e4e:	2900      	cmp	r1, #0
 8007e50:	d044      	beq.n	8007edc <_free_r+0x90>
 8007e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e56:	9001      	str	r0, [sp, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e5e:	bfb8      	it	lt
 8007e60:	18e4      	addlt	r4, r4, r3
 8007e62:	f000 f8e7 	bl	8008034 <__malloc_lock>
 8007e66:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <_free_r+0x94>)
 8007e68:	9801      	ldr	r0, [sp, #4]
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	b933      	cbnz	r3, 8007e7c <_free_r+0x30>
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	6014      	str	r4, [r2, #0]
 8007e72:	b003      	add	sp, #12
 8007e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e78:	f000 b8e2 	b.w	8008040 <__malloc_unlock>
 8007e7c:	42a3      	cmp	r3, r4
 8007e7e:	d908      	bls.n	8007e92 <_free_r+0x46>
 8007e80:	6825      	ldr	r5, [r4, #0]
 8007e82:	1961      	adds	r1, r4, r5
 8007e84:	428b      	cmp	r3, r1
 8007e86:	bf01      	itttt	eq
 8007e88:	6819      	ldreq	r1, [r3, #0]
 8007e8a:	685b      	ldreq	r3, [r3, #4]
 8007e8c:	1949      	addeq	r1, r1, r5
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	e7ed      	b.n	8007e6e <_free_r+0x22>
 8007e92:	461a      	mov	r2, r3
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	b10b      	cbz	r3, 8007e9c <_free_r+0x50>
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d9fa      	bls.n	8007e92 <_free_r+0x46>
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	1855      	adds	r5, r2, r1
 8007ea0:	42a5      	cmp	r5, r4
 8007ea2:	d10b      	bne.n	8007ebc <_free_r+0x70>
 8007ea4:	6824      	ldr	r4, [r4, #0]
 8007ea6:	4421      	add	r1, r4
 8007ea8:	1854      	adds	r4, r2, r1
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	d1e0      	bne.n	8007e72 <_free_r+0x26>
 8007eb0:	681c      	ldr	r4, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	6053      	str	r3, [r2, #4]
 8007eb6:	440c      	add	r4, r1
 8007eb8:	6014      	str	r4, [r2, #0]
 8007eba:	e7da      	b.n	8007e72 <_free_r+0x26>
 8007ebc:	d902      	bls.n	8007ec4 <_free_r+0x78>
 8007ebe:	230c      	movs	r3, #12
 8007ec0:	6003      	str	r3, [r0, #0]
 8007ec2:	e7d6      	b.n	8007e72 <_free_r+0x26>
 8007ec4:	6825      	ldr	r5, [r4, #0]
 8007ec6:	1961      	adds	r1, r4, r5
 8007ec8:	428b      	cmp	r3, r1
 8007eca:	bf04      	itt	eq
 8007ecc:	6819      	ldreq	r1, [r3, #0]
 8007ece:	685b      	ldreq	r3, [r3, #4]
 8007ed0:	6063      	str	r3, [r4, #4]
 8007ed2:	bf04      	itt	eq
 8007ed4:	1949      	addeq	r1, r1, r5
 8007ed6:	6021      	streq	r1, [r4, #0]
 8007ed8:	6054      	str	r4, [r2, #4]
 8007eda:	e7ca      	b.n	8007e72 <_free_r+0x26>
 8007edc:	b003      	add	sp, #12
 8007ede:	bd30      	pop	{r4, r5, pc}
 8007ee0:	200008b0 	.word	0x200008b0

08007ee4 <malloc>:
 8007ee4:	4b02      	ldr	r3, [pc, #8]	; (8007ef0 <malloc+0xc>)
 8007ee6:	4601      	mov	r1, r0
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	f000 b823 	b.w	8007f34 <_malloc_r>
 8007eee:	bf00      	nop
 8007ef0:	2000017c 	.word	0x2000017c

08007ef4 <sbrk_aligned>:
 8007ef4:	b570      	push	{r4, r5, r6, lr}
 8007ef6:	4e0e      	ldr	r6, [pc, #56]	; (8007f30 <sbrk_aligned+0x3c>)
 8007ef8:	460c      	mov	r4, r1
 8007efa:	6831      	ldr	r1, [r6, #0]
 8007efc:	4605      	mov	r5, r0
 8007efe:	b911      	cbnz	r1, 8007f06 <sbrk_aligned+0x12>
 8007f00:	f000 fe40 	bl	8008b84 <_sbrk_r>
 8007f04:	6030      	str	r0, [r6, #0]
 8007f06:	4621      	mov	r1, r4
 8007f08:	4628      	mov	r0, r5
 8007f0a:	f000 fe3b 	bl	8008b84 <_sbrk_r>
 8007f0e:	1c43      	adds	r3, r0, #1
 8007f10:	d00a      	beq.n	8007f28 <sbrk_aligned+0x34>
 8007f12:	1cc4      	adds	r4, r0, #3
 8007f14:	f024 0403 	bic.w	r4, r4, #3
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	d007      	beq.n	8007f2c <sbrk_aligned+0x38>
 8007f1c:	1a21      	subs	r1, r4, r0
 8007f1e:	4628      	mov	r0, r5
 8007f20:	f000 fe30 	bl	8008b84 <_sbrk_r>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d101      	bne.n	8007f2c <sbrk_aligned+0x38>
 8007f28:	f04f 34ff 	mov.w	r4, #4294967295
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bd70      	pop	{r4, r5, r6, pc}
 8007f30:	200008b4 	.word	0x200008b4

08007f34 <_malloc_r>:
 8007f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	1ccd      	adds	r5, r1, #3
 8007f3a:	f025 0503 	bic.w	r5, r5, #3
 8007f3e:	3508      	adds	r5, #8
 8007f40:	2d0c      	cmp	r5, #12
 8007f42:	bf38      	it	cc
 8007f44:	250c      	movcc	r5, #12
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	4607      	mov	r7, r0
 8007f4a:	db01      	blt.n	8007f50 <_malloc_r+0x1c>
 8007f4c:	42a9      	cmp	r1, r5
 8007f4e:	d905      	bls.n	8007f5c <_malloc_r+0x28>
 8007f50:	230c      	movs	r3, #12
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	2600      	movs	r6, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008030 <_malloc_r+0xfc>
 8007f60:	f000 f868 	bl	8008034 <__malloc_lock>
 8007f64:	f8d8 3000 	ldr.w	r3, [r8]
 8007f68:	461c      	mov	r4, r3
 8007f6a:	bb5c      	cbnz	r4, 8007fc4 <_malloc_r+0x90>
 8007f6c:	4629      	mov	r1, r5
 8007f6e:	4638      	mov	r0, r7
 8007f70:	f7ff ffc0 	bl	8007ef4 <sbrk_aligned>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	4604      	mov	r4, r0
 8007f78:	d155      	bne.n	8008026 <_malloc_r+0xf2>
 8007f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007f7e:	4626      	mov	r6, r4
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	d145      	bne.n	8008010 <_malloc_r+0xdc>
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	d048      	beq.n	800801a <_malloc_r+0xe6>
 8007f88:	6823      	ldr	r3, [r4, #0]
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	eb04 0903 	add.w	r9, r4, r3
 8007f92:	f000 fdf7 	bl	8008b84 <_sbrk_r>
 8007f96:	4581      	cmp	r9, r0
 8007f98:	d13f      	bne.n	800801a <_malloc_r+0xe6>
 8007f9a:	6821      	ldr	r1, [r4, #0]
 8007f9c:	1a6d      	subs	r5, r5, r1
 8007f9e:	4629      	mov	r1, r5
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff ffa7 	bl	8007ef4 <sbrk_aligned>
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d037      	beq.n	800801a <_malloc_r+0xe6>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	442b      	add	r3, r5
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d038      	beq.n	800802a <_malloc_r+0xf6>
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	42a2      	cmp	r2, r4
 8007fbc:	d12b      	bne.n	8008016 <_malloc_r+0xe2>
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	e00f      	b.n	8007fe4 <_malloc_r+0xb0>
 8007fc4:	6822      	ldr	r2, [r4, #0]
 8007fc6:	1b52      	subs	r2, r2, r5
 8007fc8:	d41f      	bmi.n	800800a <_malloc_r+0xd6>
 8007fca:	2a0b      	cmp	r2, #11
 8007fcc:	d917      	bls.n	8007ffe <_malloc_r+0xca>
 8007fce:	1961      	adds	r1, r4, r5
 8007fd0:	42a3      	cmp	r3, r4
 8007fd2:	6025      	str	r5, [r4, #0]
 8007fd4:	bf18      	it	ne
 8007fd6:	6059      	strne	r1, [r3, #4]
 8007fd8:	6863      	ldr	r3, [r4, #4]
 8007fda:	bf08      	it	eq
 8007fdc:	f8c8 1000 	streq.w	r1, [r8]
 8007fe0:	5162      	str	r2, [r4, r5]
 8007fe2:	604b      	str	r3, [r1, #4]
 8007fe4:	4638      	mov	r0, r7
 8007fe6:	f104 060b 	add.w	r6, r4, #11
 8007fea:	f000 f829 	bl	8008040 <__malloc_unlock>
 8007fee:	f026 0607 	bic.w	r6, r6, #7
 8007ff2:	1d23      	adds	r3, r4, #4
 8007ff4:	1af2      	subs	r2, r6, r3
 8007ff6:	d0ae      	beq.n	8007f56 <_malloc_r+0x22>
 8007ff8:	1b9b      	subs	r3, r3, r6
 8007ffa:	50a3      	str	r3, [r4, r2]
 8007ffc:	e7ab      	b.n	8007f56 <_malloc_r+0x22>
 8007ffe:	42a3      	cmp	r3, r4
 8008000:	6862      	ldr	r2, [r4, #4]
 8008002:	d1dd      	bne.n	8007fc0 <_malloc_r+0x8c>
 8008004:	f8c8 2000 	str.w	r2, [r8]
 8008008:	e7ec      	b.n	8007fe4 <_malloc_r+0xb0>
 800800a:	4623      	mov	r3, r4
 800800c:	6864      	ldr	r4, [r4, #4]
 800800e:	e7ac      	b.n	8007f6a <_malloc_r+0x36>
 8008010:	4634      	mov	r4, r6
 8008012:	6876      	ldr	r6, [r6, #4]
 8008014:	e7b4      	b.n	8007f80 <_malloc_r+0x4c>
 8008016:	4613      	mov	r3, r2
 8008018:	e7cc      	b.n	8007fb4 <_malloc_r+0x80>
 800801a:	230c      	movs	r3, #12
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4638      	mov	r0, r7
 8008020:	f000 f80e 	bl	8008040 <__malloc_unlock>
 8008024:	e797      	b.n	8007f56 <_malloc_r+0x22>
 8008026:	6025      	str	r5, [r4, #0]
 8008028:	e7dc      	b.n	8007fe4 <_malloc_r+0xb0>
 800802a:	605b      	str	r3, [r3, #4]
 800802c:	deff      	udf	#255	; 0xff
 800802e:	bf00      	nop
 8008030:	200008b0 	.word	0x200008b0

08008034 <__malloc_lock>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__malloc_lock+0x8>)
 8008036:	f7ff b87e 	b.w	8007136 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	200008ac 	.word	0x200008ac

08008040 <__malloc_unlock>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__malloc_unlock+0x8>)
 8008042:	f7ff b879 	b.w	8007138 <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	200008ac 	.word	0x200008ac

0800804c <_Balloc>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	69c6      	ldr	r6, [r0, #28]
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	b976      	cbnz	r6, 8008074 <_Balloc+0x28>
 8008056:	2010      	movs	r0, #16
 8008058:	f7ff ff44 	bl	8007ee4 <malloc>
 800805c:	4602      	mov	r2, r0
 800805e:	61e0      	str	r0, [r4, #28]
 8008060:	b920      	cbnz	r0, 800806c <_Balloc+0x20>
 8008062:	4b18      	ldr	r3, [pc, #96]	; (80080c4 <_Balloc+0x78>)
 8008064:	4818      	ldr	r0, [pc, #96]	; (80080c8 <_Balloc+0x7c>)
 8008066:	216b      	movs	r1, #107	; 0x6b
 8008068:	f000 fd9c 	bl	8008ba4 <__assert_func>
 800806c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008070:	6006      	str	r6, [r0, #0]
 8008072:	60c6      	str	r6, [r0, #12]
 8008074:	69e6      	ldr	r6, [r4, #28]
 8008076:	68f3      	ldr	r3, [r6, #12]
 8008078:	b183      	cbz	r3, 800809c <_Balloc+0x50>
 800807a:	69e3      	ldr	r3, [r4, #28]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008082:	b9b8      	cbnz	r0, 80080b4 <_Balloc+0x68>
 8008084:	2101      	movs	r1, #1
 8008086:	fa01 f605 	lsl.w	r6, r1, r5
 800808a:	1d72      	adds	r2, r6, #5
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	4620      	mov	r0, r4
 8008090:	f000 fda6 	bl	8008be0 <_calloc_r>
 8008094:	b160      	cbz	r0, 80080b0 <_Balloc+0x64>
 8008096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800809a:	e00e      	b.n	80080ba <_Balloc+0x6e>
 800809c:	2221      	movs	r2, #33	; 0x21
 800809e:	2104      	movs	r1, #4
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fd9d 	bl	8008be0 <_calloc_r>
 80080a6:	69e3      	ldr	r3, [r4, #28]
 80080a8:	60f0      	str	r0, [r6, #12]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e4      	bne.n	800807a <_Balloc+0x2e>
 80080b0:	2000      	movs	r0, #0
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	6802      	ldr	r2, [r0, #0]
 80080b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080ba:	2300      	movs	r3, #0
 80080bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080c0:	e7f7      	b.n	80080b2 <_Balloc+0x66>
 80080c2:	bf00      	nop
 80080c4:	080092f9 	.word	0x080092f9
 80080c8:	08009379 	.word	0x08009379

080080cc <_Bfree>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	69c6      	ldr	r6, [r0, #28]
 80080d0:	4605      	mov	r5, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	b976      	cbnz	r6, 80080f4 <_Bfree+0x28>
 80080d6:	2010      	movs	r0, #16
 80080d8:	f7ff ff04 	bl	8007ee4 <malloc>
 80080dc:	4602      	mov	r2, r0
 80080de:	61e8      	str	r0, [r5, #28]
 80080e0:	b920      	cbnz	r0, 80080ec <_Bfree+0x20>
 80080e2:	4b09      	ldr	r3, [pc, #36]	; (8008108 <_Bfree+0x3c>)
 80080e4:	4809      	ldr	r0, [pc, #36]	; (800810c <_Bfree+0x40>)
 80080e6:	218f      	movs	r1, #143	; 0x8f
 80080e8:	f000 fd5c 	bl	8008ba4 <__assert_func>
 80080ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080f0:	6006      	str	r6, [r0, #0]
 80080f2:	60c6      	str	r6, [r0, #12]
 80080f4:	b13c      	cbz	r4, 8008106 <_Bfree+0x3a>
 80080f6:	69eb      	ldr	r3, [r5, #28]
 80080f8:	6862      	ldr	r2, [r4, #4]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008100:	6021      	str	r1, [r4, #0]
 8008102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	080092f9 	.word	0x080092f9
 800810c:	08009379 	.word	0x08009379

08008110 <__multadd>:
 8008110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008114:	690d      	ldr	r5, [r1, #16]
 8008116:	4607      	mov	r7, r0
 8008118:	460c      	mov	r4, r1
 800811a:	461e      	mov	r6, r3
 800811c:	f101 0c14 	add.w	ip, r1, #20
 8008120:	2000      	movs	r0, #0
 8008122:	f8dc 3000 	ldr.w	r3, [ip]
 8008126:	b299      	uxth	r1, r3
 8008128:	fb02 6101 	mla	r1, r2, r1, r6
 800812c:	0c1e      	lsrs	r6, r3, #16
 800812e:	0c0b      	lsrs	r3, r1, #16
 8008130:	fb02 3306 	mla	r3, r2, r6, r3
 8008134:	b289      	uxth	r1, r1
 8008136:	3001      	adds	r0, #1
 8008138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800813c:	4285      	cmp	r5, r0
 800813e:	f84c 1b04 	str.w	r1, [ip], #4
 8008142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008146:	dcec      	bgt.n	8008122 <__multadd+0x12>
 8008148:	b30e      	cbz	r6, 800818e <__multadd+0x7e>
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	42ab      	cmp	r3, r5
 800814e:	dc19      	bgt.n	8008184 <__multadd+0x74>
 8008150:	6861      	ldr	r1, [r4, #4]
 8008152:	4638      	mov	r0, r7
 8008154:	3101      	adds	r1, #1
 8008156:	f7ff ff79 	bl	800804c <_Balloc>
 800815a:	4680      	mov	r8, r0
 800815c:	b928      	cbnz	r0, 800816a <__multadd+0x5a>
 800815e:	4602      	mov	r2, r0
 8008160:	4b0c      	ldr	r3, [pc, #48]	; (8008194 <__multadd+0x84>)
 8008162:	480d      	ldr	r0, [pc, #52]	; (8008198 <__multadd+0x88>)
 8008164:	21ba      	movs	r1, #186	; 0xba
 8008166:	f000 fd1d 	bl	8008ba4 <__assert_func>
 800816a:	6922      	ldr	r2, [r4, #16]
 800816c:	3202      	adds	r2, #2
 800816e:	f104 010c 	add.w	r1, r4, #12
 8008172:	0092      	lsls	r2, r2, #2
 8008174:	300c      	adds	r0, #12
 8008176:	f7fe ffe0 	bl	800713a <memcpy>
 800817a:	4621      	mov	r1, r4
 800817c:	4638      	mov	r0, r7
 800817e:	f7ff ffa5 	bl	80080cc <_Bfree>
 8008182:	4644      	mov	r4, r8
 8008184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008188:	3501      	adds	r5, #1
 800818a:	615e      	str	r6, [r3, #20]
 800818c:	6125      	str	r5, [r4, #16]
 800818e:	4620      	mov	r0, r4
 8008190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008194:	08009368 	.word	0x08009368
 8008198:	08009379 	.word	0x08009379

0800819c <__hi0bits>:
 800819c:	0c03      	lsrs	r3, r0, #16
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	b9d3      	cbnz	r3, 80081d8 <__hi0bits+0x3c>
 80081a2:	0400      	lsls	r0, r0, #16
 80081a4:	2310      	movs	r3, #16
 80081a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80081aa:	bf04      	itt	eq
 80081ac:	0200      	lsleq	r0, r0, #8
 80081ae:	3308      	addeq	r3, #8
 80081b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80081b4:	bf04      	itt	eq
 80081b6:	0100      	lsleq	r0, r0, #4
 80081b8:	3304      	addeq	r3, #4
 80081ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80081be:	bf04      	itt	eq
 80081c0:	0080      	lsleq	r0, r0, #2
 80081c2:	3302      	addeq	r3, #2
 80081c4:	2800      	cmp	r0, #0
 80081c6:	db05      	blt.n	80081d4 <__hi0bits+0x38>
 80081c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80081cc:	f103 0301 	add.w	r3, r3, #1
 80081d0:	bf08      	it	eq
 80081d2:	2320      	moveq	r3, #32
 80081d4:	4618      	mov	r0, r3
 80081d6:	4770      	bx	lr
 80081d8:	2300      	movs	r3, #0
 80081da:	e7e4      	b.n	80081a6 <__hi0bits+0xa>

080081dc <__lo0bits>:
 80081dc:	6803      	ldr	r3, [r0, #0]
 80081de:	f013 0207 	ands.w	r2, r3, #7
 80081e2:	d00c      	beq.n	80081fe <__lo0bits+0x22>
 80081e4:	07d9      	lsls	r1, r3, #31
 80081e6:	d422      	bmi.n	800822e <__lo0bits+0x52>
 80081e8:	079a      	lsls	r2, r3, #30
 80081ea:	bf49      	itett	mi
 80081ec:	085b      	lsrmi	r3, r3, #1
 80081ee:	089b      	lsrpl	r3, r3, #2
 80081f0:	6003      	strmi	r3, [r0, #0]
 80081f2:	2201      	movmi	r2, #1
 80081f4:	bf5c      	itt	pl
 80081f6:	6003      	strpl	r3, [r0, #0]
 80081f8:	2202      	movpl	r2, #2
 80081fa:	4610      	mov	r0, r2
 80081fc:	4770      	bx	lr
 80081fe:	b299      	uxth	r1, r3
 8008200:	b909      	cbnz	r1, 8008206 <__lo0bits+0x2a>
 8008202:	0c1b      	lsrs	r3, r3, #16
 8008204:	2210      	movs	r2, #16
 8008206:	b2d9      	uxtb	r1, r3
 8008208:	b909      	cbnz	r1, 800820e <__lo0bits+0x32>
 800820a:	3208      	adds	r2, #8
 800820c:	0a1b      	lsrs	r3, r3, #8
 800820e:	0719      	lsls	r1, r3, #28
 8008210:	bf04      	itt	eq
 8008212:	091b      	lsreq	r3, r3, #4
 8008214:	3204      	addeq	r2, #4
 8008216:	0799      	lsls	r1, r3, #30
 8008218:	bf04      	itt	eq
 800821a:	089b      	lsreq	r3, r3, #2
 800821c:	3202      	addeq	r2, #2
 800821e:	07d9      	lsls	r1, r3, #31
 8008220:	d403      	bmi.n	800822a <__lo0bits+0x4e>
 8008222:	085b      	lsrs	r3, r3, #1
 8008224:	f102 0201 	add.w	r2, r2, #1
 8008228:	d003      	beq.n	8008232 <__lo0bits+0x56>
 800822a:	6003      	str	r3, [r0, #0]
 800822c:	e7e5      	b.n	80081fa <__lo0bits+0x1e>
 800822e:	2200      	movs	r2, #0
 8008230:	e7e3      	b.n	80081fa <__lo0bits+0x1e>
 8008232:	2220      	movs	r2, #32
 8008234:	e7e1      	b.n	80081fa <__lo0bits+0x1e>
	...

08008238 <__i2b>:
 8008238:	b510      	push	{r4, lr}
 800823a:	460c      	mov	r4, r1
 800823c:	2101      	movs	r1, #1
 800823e:	f7ff ff05 	bl	800804c <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__i2b+0x1a>
 8008246:	4b05      	ldr	r3, [pc, #20]	; (800825c <__i2b+0x24>)
 8008248:	4805      	ldr	r0, [pc, #20]	; (8008260 <__i2b+0x28>)
 800824a:	f240 1145 	movw	r1, #325	; 0x145
 800824e:	f000 fca9 	bl	8008ba4 <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	6144      	str	r4, [r0, #20]
 8008256:	6103      	str	r3, [r0, #16]
 8008258:	bd10      	pop	{r4, pc}
 800825a:	bf00      	nop
 800825c:	08009368 	.word	0x08009368
 8008260:	08009379 	.word	0x08009379

08008264 <__multiply>:
 8008264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008268:	4691      	mov	r9, r2
 800826a:	690a      	ldr	r2, [r1, #16]
 800826c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008270:	429a      	cmp	r2, r3
 8008272:	bfb8      	it	lt
 8008274:	460b      	movlt	r3, r1
 8008276:	460c      	mov	r4, r1
 8008278:	bfbc      	itt	lt
 800827a:	464c      	movlt	r4, r9
 800827c:	4699      	movlt	r9, r3
 800827e:	6927      	ldr	r7, [r4, #16]
 8008280:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008284:	68a3      	ldr	r3, [r4, #8]
 8008286:	6861      	ldr	r1, [r4, #4]
 8008288:	eb07 060a 	add.w	r6, r7, sl
 800828c:	42b3      	cmp	r3, r6
 800828e:	b085      	sub	sp, #20
 8008290:	bfb8      	it	lt
 8008292:	3101      	addlt	r1, #1
 8008294:	f7ff feda 	bl	800804c <_Balloc>
 8008298:	b930      	cbnz	r0, 80082a8 <__multiply+0x44>
 800829a:	4602      	mov	r2, r0
 800829c:	4b44      	ldr	r3, [pc, #272]	; (80083b0 <__multiply+0x14c>)
 800829e:	4845      	ldr	r0, [pc, #276]	; (80083b4 <__multiply+0x150>)
 80082a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80082a4:	f000 fc7e 	bl	8008ba4 <__assert_func>
 80082a8:	f100 0514 	add.w	r5, r0, #20
 80082ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80082b0:	462b      	mov	r3, r5
 80082b2:	2200      	movs	r2, #0
 80082b4:	4543      	cmp	r3, r8
 80082b6:	d321      	bcc.n	80082fc <__multiply+0x98>
 80082b8:	f104 0314 	add.w	r3, r4, #20
 80082bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80082c0:	f109 0314 	add.w	r3, r9, #20
 80082c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80082c8:	9202      	str	r2, [sp, #8]
 80082ca:	1b3a      	subs	r2, r7, r4
 80082cc:	3a15      	subs	r2, #21
 80082ce:	f022 0203 	bic.w	r2, r2, #3
 80082d2:	3204      	adds	r2, #4
 80082d4:	f104 0115 	add.w	r1, r4, #21
 80082d8:	428f      	cmp	r7, r1
 80082da:	bf38      	it	cc
 80082dc:	2204      	movcc	r2, #4
 80082de:	9201      	str	r2, [sp, #4]
 80082e0:	9a02      	ldr	r2, [sp, #8]
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d80c      	bhi.n	8008302 <__multiply+0x9e>
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	dd03      	ble.n	80082f4 <__multiply+0x90>
 80082ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d05b      	beq.n	80083ac <__multiply+0x148>
 80082f4:	6106      	str	r6, [r0, #16]
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	f843 2b04 	str.w	r2, [r3], #4
 8008300:	e7d8      	b.n	80082b4 <__multiply+0x50>
 8008302:	f8b3 a000 	ldrh.w	sl, [r3]
 8008306:	f1ba 0f00 	cmp.w	sl, #0
 800830a:	d024      	beq.n	8008356 <__multiply+0xf2>
 800830c:	f104 0e14 	add.w	lr, r4, #20
 8008310:	46a9      	mov	r9, r5
 8008312:	f04f 0c00 	mov.w	ip, #0
 8008316:	f85e 2b04 	ldr.w	r2, [lr], #4
 800831a:	f8d9 1000 	ldr.w	r1, [r9]
 800831e:	fa1f fb82 	uxth.w	fp, r2
 8008322:	b289      	uxth	r1, r1
 8008324:	fb0a 110b 	mla	r1, sl, fp, r1
 8008328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800832c:	f8d9 2000 	ldr.w	r2, [r9]
 8008330:	4461      	add	r1, ip
 8008332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008336:	fb0a c20b 	mla	r2, sl, fp, ip
 800833a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800833e:	b289      	uxth	r1, r1
 8008340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008344:	4577      	cmp	r7, lr
 8008346:	f849 1b04 	str.w	r1, [r9], #4
 800834a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800834e:	d8e2      	bhi.n	8008316 <__multiply+0xb2>
 8008350:	9a01      	ldr	r2, [sp, #4]
 8008352:	f845 c002 	str.w	ip, [r5, r2]
 8008356:	9a03      	ldr	r2, [sp, #12]
 8008358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800835c:	3304      	adds	r3, #4
 800835e:	f1b9 0f00 	cmp.w	r9, #0
 8008362:	d021      	beq.n	80083a8 <__multiply+0x144>
 8008364:	6829      	ldr	r1, [r5, #0]
 8008366:	f104 0c14 	add.w	ip, r4, #20
 800836a:	46ae      	mov	lr, r5
 800836c:	f04f 0a00 	mov.w	sl, #0
 8008370:	f8bc b000 	ldrh.w	fp, [ip]
 8008374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008378:	fb09 220b 	mla	r2, r9, fp, r2
 800837c:	4452      	add	r2, sl
 800837e:	b289      	uxth	r1, r1
 8008380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008384:	f84e 1b04 	str.w	r1, [lr], #4
 8008388:	f85c 1b04 	ldr.w	r1, [ip], #4
 800838c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008390:	f8be 1000 	ldrh.w	r1, [lr]
 8008394:	fb09 110a 	mla	r1, r9, sl, r1
 8008398:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800839c:	4567      	cmp	r7, ip
 800839e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80083a2:	d8e5      	bhi.n	8008370 <__multiply+0x10c>
 80083a4:	9a01      	ldr	r2, [sp, #4]
 80083a6:	50a9      	str	r1, [r5, r2]
 80083a8:	3504      	adds	r5, #4
 80083aa:	e799      	b.n	80082e0 <__multiply+0x7c>
 80083ac:	3e01      	subs	r6, #1
 80083ae:	e79b      	b.n	80082e8 <__multiply+0x84>
 80083b0:	08009368 	.word	0x08009368
 80083b4:	08009379 	.word	0x08009379

080083b8 <__pow5mult>:
 80083b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	4615      	mov	r5, r2
 80083be:	f012 0203 	ands.w	r2, r2, #3
 80083c2:	4606      	mov	r6, r0
 80083c4:	460f      	mov	r7, r1
 80083c6:	d007      	beq.n	80083d8 <__pow5mult+0x20>
 80083c8:	4c25      	ldr	r4, [pc, #148]	; (8008460 <__pow5mult+0xa8>)
 80083ca:	3a01      	subs	r2, #1
 80083cc:	2300      	movs	r3, #0
 80083ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80083d2:	f7ff fe9d 	bl	8008110 <__multadd>
 80083d6:	4607      	mov	r7, r0
 80083d8:	10ad      	asrs	r5, r5, #2
 80083da:	d03d      	beq.n	8008458 <__pow5mult+0xa0>
 80083dc:	69f4      	ldr	r4, [r6, #28]
 80083de:	b97c      	cbnz	r4, 8008400 <__pow5mult+0x48>
 80083e0:	2010      	movs	r0, #16
 80083e2:	f7ff fd7f 	bl	8007ee4 <malloc>
 80083e6:	4602      	mov	r2, r0
 80083e8:	61f0      	str	r0, [r6, #28]
 80083ea:	b928      	cbnz	r0, 80083f8 <__pow5mult+0x40>
 80083ec:	4b1d      	ldr	r3, [pc, #116]	; (8008464 <__pow5mult+0xac>)
 80083ee:	481e      	ldr	r0, [pc, #120]	; (8008468 <__pow5mult+0xb0>)
 80083f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80083f4:	f000 fbd6 	bl	8008ba4 <__assert_func>
 80083f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083fc:	6004      	str	r4, [r0, #0]
 80083fe:	60c4      	str	r4, [r0, #12]
 8008400:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008408:	b94c      	cbnz	r4, 800841e <__pow5mult+0x66>
 800840a:	f240 2171 	movw	r1, #625	; 0x271
 800840e:	4630      	mov	r0, r6
 8008410:	f7ff ff12 	bl	8008238 <__i2b>
 8008414:	2300      	movs	r3, #0
 8008416:	f8c8 0008 	str.w	r0, [r8, #8]
 800841a:	4604      	mov	r4, r0
 800841c:	6003      	str	r3, [r0, #0]
 800841e:	f04f 0900 	mov.w	r9, #0
 8008422:	07eb      	lsls	r3, r5, #31
 8008424:	d50a      	bpl.n	800843c <__pow5mult+0x84>
 8008426:	4639      	mov	r1, r7
 8008428:	4622      	mov	r2, r4
 800842a:	4630      	mov	r0, r6
 800842c:	f7ff ff1a 	bl	8008264 <__multiply>
 8008430:	4639      	mov	r1, r7
 8008432:	4680      	mov	r8, r0
 8008434:	4630      	mov	r0, r6
 8008436:	f7ff fe49 	bl	80080cc <_Bfree>
 800843a:	4647      	mov	r7, r8
 800843c:	106d      	asrs	r5, r5, #1
 800843e:	d00b      	beq.n	8008458 <__pow5mult+0xa0>
 8008440:	6820      	ldr	r0, [r4, #0]
 8008442:	b938      	cbnz	r0, 8008454 <__pow5mult+0x9c>
 8008444:	4622      	mov	r2, r4
 8008446:	4621      	mov	r1, r4
 8008448:	4630      	mov	r0, r6
 800844a:	f7ff ff0b 	bl	8008264 <__multiply>
 800844e:	6020      	str	r0, [r4, #0]
 8008450:	f8c0 9000 	str.w	r9, [r0]
 8008454:	4604      	mov	r4, r0
 8008456:	e7e4      	b.n	8008422 <__pow5mult+0x6a>
 8008458:	4638      	mov	r0, r7
 800845a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800845e:	bf00      	nop
 8008460:	080094c8 	.word	0x080094c8
 8008464:	080092f9 	.word	0x080092f9
 8008468:	08009379 	.word	0x08009379

0800846c <__lshift>:
 800846c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	460c      	mov	r4, r1
 8008472:	6849      	ldr	r1, [r1, #4]
 8008474:	6923      	ldr	r3, [r4, #16]
 8008476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800847a:	68a3      	ldr	r3, [r4, #8]
 800847c:	4607      	mov	r7, r0
 800847e:	4691      	mov	r9, r2
 8008480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008484:	f108 0601 	add.w	r6, r8, #1
 8008488:	42b3      	cmp	r3, r6
 800848a:	db0b      	blt.n	80084a4 <__lshift+0x38>
 800848c:	4638      	mov	r0, r7
 800848e:	f7ff fddd 	bl	800804c <_Balloc>
 8008492:	4605      	mov	r5, r0
 8008494:	b948      	cbnz	r0, 80084aa <__lshift+0x3e>
 8008496:	4602      	mov	r2, r0
 8008498:	4b28      	ldr	r3, [pc, #160]	; (800853c <__lshift+0xd0>)
 800849a:	4829      	ldr	r0, [pc, #164]	; (8008540 <__lshift+0xd4>)
 800849c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80084a0:	f000 fb80 	bl	8008ba4 <__assert_func>
 80084a4:	3101      	adds	r1, #1
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	e7ee      	b.n	8008488 <__lshift+0x1c>
 80084aa:	2300      	movs	r3, #0
 80084ac:	f100 0114 	add.w	r1, r0, #20
 80084b0:	f100 0210 	add.w	r2, r0, #16
 80084b4:	4618      	mov	r0, r3
 80084b6:	4553      	cmp	r3, sl
 80084b8:	db33      	blt.n	8008522 <__lshift+0xb6>
 80084ba:	6920      	ldr	r0, [r4, #16]
 80084bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80084c0:	f104 0314 	add.w	r3, r4, #20
 80084c4:	f019 091f 	ands.w	r9, r9, #31
 80084c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80084cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80084d0:	d02b      	beq.n	800852a <__lshift+0xbe>
 80084d2:	f1c9 0e20 	rsb	lr, r9, #32
 80084d6:	468a      	mov	sl, r1
 80084d8:	2200      	movs	r2, #0
 80084da:	6818      	ldr	r0, [r3, #0]
 80084dc:	fa00 f009 	lsl.w	r0, r0, r9
 80084e0:	4310      	orrs	r0, r2
 80084e2:	f84a 0b04 	str.w	r0, [sl], #4
 80084e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084ea:	459c      	cmp	ip, r3
 80084ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80084f0:	d8f3      	bhi.n	80084da <__lshift+0x6e>
 80084f2:	ebac 0304 	sub.w	r3, ip, r4
 80084f6:	3b15      	subs	r3, #21
 80084f8:	f023 0303 	bic.w	r3, r3, #3
 80084fc:	3304      	adds	r3, #4
 80084fe:	f104 0015 	add.w	r0, r4, #21
 8008502:	4584      	cmp	ip, r0
 8008504:	bf38      	it	cc
 8008506:	2304      	movcc	r3, #4
 8008508:	50ca      	str	r2, [r1, r3]
 800850a:	b10a      	cbz	r2, 8008510 <__lshift+0xa4>
 800850c:	f108 0602 	add.w	r6, r8, #2
 8008510:	3e01      	subs	r6, #1
 8008512:	4638      	mov	r0, r7
 8008514:	612e      	str	r6, [r5, #16]
 8008516:	4621      	mov	r1, r4
 8008518:	f7ff fdd8 	bl	80080cc <_Bfree>
 800851c:	4628      	mov	r0, r5
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	f842 0f04 	str.w	r0, [r2, #4]!
 8008526:	3301      	adds	r3, #1
 8008528:	e7c5      	b.n	80084b6 <__lshift+0x4a>
 800852a:	3904      	subs	r1, #4
 800852c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008530:	f841 2f04 	str.w	r2, [r1, #4]!
 8008534:	459c      	cmp	ip, r3
 8008536:	d8f9      	bhi.n	800852c <__lshift+0xc0>
 8008538:	e7ea      	b.n	8008510 <__lshift+0xa4>
 800853a:	bf00      	nop
 800853c:	08009368 	.word	0x08009368
 8008540:	08009379 	.word	0x08009379

08008544 <__mcmp>:
 8008544:	b530      	push	{r4, r5, lr}
 8008546:	6902      	ldr	r2, [r0, #16]
 8008548:	690c      	ldr	r4, [r1, #16]
 800854a:	1b12      	subs	r2, r2, r4
 800854c:	d10e      	bne.n	800856c <__mcmp+0x28>
 800854e:	f100 0314 	add.w	r3, r0, #20
 8008552:	3114      	adds	r1, #20
 8008554:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008558:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800855c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008560:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008564:	42a5      	cmp	r5, r4
 8008566:	d003      	beq.n	8008570 <__mcmp+0x2c>
 8008568:	d305      	bcc.n	8008576 <__mcmp+0x32>
 800856a:	2201      	movs	r2, #1
 800856c:	4610      	mov	r0, r2
 800856e:	bd30      	pop	{r4, r5, pc}
 8008570:	4283      	cmp	r3, r0
 8008572:	d3f3      	bcc.n	800855c <__mcmp+0x18>
 8008574:	e7fa      	b.n	800856c <__mcmp+0x28>
 8008576:	f04f 32ff 	mov.w	r2, #4294967295
 800857a:	e7f7      	b.n	800856c <__mcmp+0x28>

0800857c <__mdiff>:
 800857c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	4606      	mov	r6, r0
 8008584:	4611      	mov	r1, r2
 8008586:	4620      	mov	r0, r4
 8008588:	4690      	mov	r8, r2
 800858a:	f7ff ffdb 	bl	8008544 <__mcmp>
 800858e:	1e05      	subs	r5, r0, #0
 8008590:	d110      	bne.n	80085b4 <__mdiff+0x38>
 8008592:	4629      	mov	r1, r5
 8008594:	4630      	mov	r0, r6
 8008596:	f7ff fd59 	bl	800804c <_Balloc>
 800859a:	b930      	cbnz	r0, 80085aa <__mdiff+0x2e>
 800859c:	4b3a      	ldr	r3, [pc, #232]	; (8008688 <__mdiff+0x10c>)
 800859e:	4602      	mov	r2, r0
 80085a0:	f240 2137 	movw	r1, #567	; 0x237
 80085a4:	4839      	ldr	r0, [pc, #228]	; (800868c <__mdiff+0x110>)
 80085a6:	f000 fafd 	bl	8008ba4 <__assert_func>
 80085aa:	2301      	movs	r3, #1
 80085ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80085b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b4:	bfa4      	itt	ge
 80085b6:	4643      	movge	r3, r8
 80085b8:	46a0      	movge	r8, r4
 80085ba:	4630      	mov	r0, r6
 80085bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80085c0:	bfa6      	itte	ge
 80085c2:	461c      	movge	r4, r3
 80085c4:	2500      	movge	r5, #0
 80085c6:	2501      	movlt	r5, #1
 80085c8:	f7ff fd40 	bl	800804c <_Balloc>
 80085cc:	b920      	cbnz	r0, 80085d8 <__mdiff+0x5c>
 80085ce:	4b2e      	ldr	r3, [pc, #184]	; (8008688 <__mdiff+0x10c>)
 80085d0:	4602      	mov	r2, r0
 80085d2:	f240 2145 	movw	r1, #581	; 0x245
 80085d6:	e7e5      	b.n	80085a4 <__mdiff+0x28>
 80085d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80085dc:	6926      	ldr	r6, [r4, #16]
 80085de:	60c5      	str	r5, [r0, #12]
 80085e0:	f104 0914 	add.w	r9, r4, #20
 80085e4:	f108 0514 	add.w	r5, r8, #20
 80085e8:	f100 0e14 	add.w	lr, r0, #20
 80085ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80085f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80085f4:	f108 0210 	add.w	r2, r8, #16
 80085f8:	46f2      	mov	sl, lr
 80085fa:	2100      	movs	r1, #0
 80085fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8008600:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008604:	fa11 f88b 	uxtah	r8, r1, fp
 8008608:	b299      	uxth	r1, r3
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	eba8 0801 	sub.w	r8, r8, r1
 8008610:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008614:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008618:	fa1f f888 	uxth.w	r8, r8
 800861c:	1419      	asrs	r1, r3, #16
 800861e:	454e      	cmp	r6, r9
 8008620:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008624:	f84a 3b04 	str.w	r3, [sl], #4
 8008628:	d8e8      	bhi.n	80085fc <__mdiff+0x80>
 800862a:	1b33      	subs	r3, r6, r4
 800862c:	3b15      	subs	r3, #21
 800862e:	f023 0303 	bic.w	r3, r3, #3
 8008632:	3304      	adds	r3, #4
 8008634:	3415      	adds	r4, #21
 8008636:	42a6      	cmp	r6, r4
 8008638:	bf38      	it	cc
 800863a:	2304      	movcc	r3, #4
 800863c:	441d      	add	r5, r3
 800863e:	4473      	add	r3, lr
 8008640:	469e      	mov	lr, r3
 8008642:	462e      	mov	r6, r5
 8008644:	4566      	cmp	r6, ip
 8008646:	d30e      	bcc.n	8008666 <__mdiff+0xea>
 8008648:	f10c 0203 	add.w	r2, ip, #3
 800864c:	1b52      	subs	r2, r2, r5
 800864e:	f022 0203 	bic.w	r2, r2, #3
 8008652:	3d03      	subs	r5, #3
 8008654:	45ac      	cmp	ip, r5
 8008656:	bf38      	it	cc
 8008658:	2200      	movcc	r2, #0
 800865a:	4413      	add	r3, r2
 800865c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008660:	b17a      	cbz	r2, 8008682 <__mdiff+0x106>
 8008662:	6107      	str	r7, [r0, #16]
 8008664:	e7a4      	b.n	80085b0 <__mdiff+0x34>
 8008666:	f856 8b04 	ldr.w	r8, [r6], #4
 800866a:	fa11 f288 	uxtah	r2, r1, r8
 800866e:	1414      	asrs	r4, r2, #16
 8008670:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008674:	b292      	uxth	r2, r2
 8008676:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800867a:	f84e 2b04 	str.w	r2, [lr], #4
 800867e:	1421      	asrs	r1, r4, #16
 8008680:	e7e0      	b.n	8008644 <__mdiff+0xc8>
 8008682:	3f01      	subs	r7, #1
 8008684:	e7ea      	b.n	800865c <__mdiff+0xe0>
 8008686:	bf00      	nop
 8008688:	08009368 	.word	0x08009368
 800868c:	08009379 	.word	0x08009379

08008690 <__d2b>:
 8008690:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008694:	460f      	mov	r7, r1
 8008696:	2101      	movs	r1, #1
 8008698:	ec59 8b10 	vmov	r8, r9, d0
 800869c:	4616      	mov	r6, r2
 800869e:	f7ff fcd5 	bl	800804c <_Balloc>
 80086a2:	4604      	mov	r4, r0
 80086a4:	b930      	cbnz	r0, 80086b4 <__d2b+0x24>
 80086a6:	4602      	mov	r2, r0
 80086a8:	4b24      	ldr	r3, [pc, #144]	; (800873c <__d2b+0xac>)
 80086aa:	4825      	ldr	r0, [pc, #148]	; (8008740 <__d2b+0xb0>)
 80086ac:	f240 310f 	movw	r1, #783	; 0x30f
 80086b0:	f000 fa78 	bl	8008ba4 <__assert_func>
 80086b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80086b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80086bc:	bb2d      	cbnz	r5, 800870a <__d2b+0x7a>
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	f1b8 0300 	subs.w	r3, r8, #0
 80086c4:	d026      	beq.n	8008714 <__d2b+0x84>
 80086c6:	4668      	mov	r0, sp
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	f7ff fd87 	bl	80081dc <__lo0bits>
 80086ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086d2:	b1e8      	cbz	r0, 8008710 <__d2b+0x80>
 80086d4:	f1c0 0320 	rsb	r3, r0, #32
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	430b      	orrs	r3, r1
 80086de:	40c2      	lsrs	r2, r0
 80086e0:	6163      	str	r3, [r4, #20]
 80086e2:	9201      	str	r2, [sp, #4]
 80086e4:	9b01      	ldr	r3, [sp, #4]
 80086e6:	61a3      	str	r3, [r4, #24]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	bf14      	ite	ne
 80086ec:	2202      	movne	r2, #2
 80086ee:	2201      	moveq	r2, #1
 80086f0:	6122      	str	r2, [r4, #16]
 80086f2:	b1bd      	cbz	r5, 8008724 <__d2b+0x94>
 80086f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80086f8:	4405      	add	r5, r0
 80086fa:	603d      	str	r5, [r7, #0]
 80086fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008700:	6030      	str	r0, [r6, #0]
 8008702:	4620      	mov	r0, r4
 8008704:	b003      	add	sp, #12
 8008706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800870a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800870e:	e7d6      	b.n	80086be <__d2b+0x2e>
 8008710:	6161      	str	r1, [r4, #20]
 8008712:	e7e7      	b.n	80086e4 <__d2b+0x54>
 8008714:	a801      	add	r0, sp, #4
 8008716:	f7ff fd61 	bl	80081dc <__lo0bits>
 800871a:	9b01      	ldr	r3, [sp, #4]
 800871c:	6163      	str	r3, [r4, #20]
 800871e:	3020      	adds	r0, #32
 8008720:	2201      	movs	r2, #1
 8008722:	e7e5      	b.n	80086f0 <__d2b+0x60>
 8008724:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008728:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800872c:	6038      	str	r0, [r7, #0]
 800872e:	6918      	ldr	r0, [r3, #16]
 8008730:	f7ff fd34 	bl	800819c <__hi0bits>
 8008734:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008738:	e7e2      	b.n	8008700 <__d2b+0x70>
 800873a:	bf00      	nop
 800873c:	08009368 	.word	0x08009368
 8008740:	08009379 	.word	0x08009379

08008744 <__ssputs_r>:
 8008744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008748:	688e      	ldr	r6, [r1, #8]
 800874a:	461f      	mov	r7, r3
 800874c:	42be      	cmp	r6, r7
 800874e:	680b      	ldr	r3, [r1, #0]
 8008750:	4682      	mov	sl, r0
 8008752:	460c      	mov	r4, r1
 8008754:	4690      	mov	r8, r2
 8008756:	d82c      	bhi.n	80087b2 <__ssputs_r+0x6e>
 8008758:	898a      	ldrh	r2, [r1, #12]
 800875a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800875e:	d026      	beq.n	80087ae <__ssputs_r+0x6a>
 8008760:	6965      	ldr	r5, [r4, #20]
 8008762:	6909      	ldr	r1, [r1, #16]
 8008764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008768:	eba3 0901 	sub.w	r9, r3, r1
 800876c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008770:	1c7b      	adds	r3, r7, #1
 8008772:	444b      	add	r3, r9
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	429d      	cmp	r5, r3
 8008778:	bf38      	it	cc
 800877a:	461d      	movcc	r5, r3
 800877c:	0553      	lsls	r3, r2, #21
 800877e:	d527      	bpl.n	80087d0 <__ssputs_r+0x8c>
 8008780:	4629      	mov	r1, r5
 8008782:	f7ff fbd7 	bl	8007f34 <_malloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	b360      	cbz	r0, 80087e4 <__ssputs_r+0xa0>
 800878a:	6921      	ldr	r1, [r4, #16]
 800878c:	464a      	mov	r2, r9
 800878e:	f7fe fcd4 	bl	800713a <memcpy>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	6126      	str	r6, [r4, #16]
 80087a0:	6165      	str	r5, [r4, #20]
 80087a2:	444e      	add	r6, r9
 80087a4:	eba5 0509 	sub.w	r5, r5, r9
 80087a8:	6026      	str	r6, [r4, #0]
 80087aa:	60a5      	str	r5, [r4, #8]
 80087ac:	463e      	mov	r6, r7
 80087ae:	42be      	cmp	r6, r7
 80087b0:	d900      	bls.n	80087b4 <__ssputs_r+0x70>
 80087b2:	463e      	mov	r6, r7
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	4632      	mov	r2, r6
 80087b8:	4641      	mov	r1, r8
 80087ba:	f000 f9c9 	bl	8008b50 <memmove>
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	1b9b      	subs	r3, r3, r6
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	4433      	add	r3, r6
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	2000      	movs	r0, #0
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	462a      	mov	r2, r5
 80087d2:	f000 fa2d 	bl	8008c30 <_realloc_r>
 80087d6:	4606      	mov	r6, r0
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1e0      	bne.n	800879e <__ssputs_r+0x5a>
 80087dc:	6921      	ldr	r1, [r4, #16]
 80087de:	4650      	mov	r0, sl
 80087e0:	f7ff fb34 	bl	8007e4c <_free_r>
 80087e4:	230c      	movs	r3, #12
 80087e6:	f8ca 3000 	str.w	r3, [sl]
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	e7e9      	b.n	80087cc <__ssputs_r+0x88>

080087f8 <_svfiprintf_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4698      	mov	r8, r3
 80087fe:	898b      	ldrh	r3, [r1, #12]
 8008800:	061b      	lsls	r3, r3, #24
 8008802:	b09d      	sub	sp, #116	; 0x74
 8008804:	4607      	mov	r7, r0
 8008806:	460d      	mov	r5, r1
 8008808:	4614      	mov	r4, r2
 800880a:	d50e      	bpl.n	800882a <_svfiprintf_r+0x32>
 800880c:	690b      	ldr	r3, [r1, #16]
 800880e:	b963      	cbnz	r3, 800882a <_svfiprintf_r+0x32>
 8008810:	2140      	movs	r1, #64	; 0x40
 8008812:	f7ff fb8f 	bl	8007f34 <_malloc_r>
 8008816:	6028      	str	r0, [r5, #0]
 8008818:	6128      	str	r0, [r5, #16]
 800881a:	b920      	cbnz	r0, 8008826 <_svfiprintf_r+0x2e>
 800881c:	230c      	movs	r3, #12
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	e0d0      	b.n	80089c8 <_svfiprintf_r+0x1d0>
 8008826:	2340      	movs	r3, #64	; 0x40
 8008828:	616b      	str	r3, [r5, #20]
 800882a:	2300      	movs	r3, #0
 800882c:	9309      	str	r3, [sp, #36]	; 0x24
 800882e:	2320      	movs	r3, #32
 8008830:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008834:	f8cd 800c 	str.w	r8, [sp, #12]
 8008838:	2330      	movs	r3, #48	; 0x30
 800883a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80089e0 <_svfiprintf_r+0x1e8>
 800883e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008842:	f04f 0901 	mov.w	r9, #1
 8008846:	4623      	mov	r3, r4
 8008848:	469a      	mov	sl, r3
 800884a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800884e:	b10a      	cbz	r2, 8008854 <_svfiprintf_r+0x5c>
 8008850:	2a25      	cmp	r2, #37	; 0x25
 8008852:	d1f9      	bne.n	8008848 <_svfiprintf_r+0x50>
 8008854:	ebba 0b04 	subs.w	fp, sl, r4
 8008858:	d00b      	beq.n	8008872 <_svfiprintf_r+0x7a>
 800885a:	465b      	mov	r3, fp
 800885c:	4622      	mov	r2, r4
 800885e:	4629      	mov	r1, r5
 8008860:	4638      	mov	r0, r7
 8008862:	f7ff ff6f 	bl	8008744 <__ssputs_r>
 8008866:	3001      	adds	r0, #1
 8008868:	f000 80a9 	beq.w	80089be <_svfiprintf_r+0x1c6>
 800886c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800886e:	445a      	add	r2, fp
 8008870:	9209      	str	r2, [sp, #36]	; 0x24
 8008872:	f89a 3000 	ldrb.w	r3, [sl]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 80a1 	beq.w	80089be <_svfiprintf_r+0x1c6>
 800887c:	2300      	movs	r3, #0
 800887e:	f04f 32ff 	mov.w	r2, #4294967295
 8008882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008886:	f10a 0a01 	add.w	sl, sl, #1
 800888a:	9304      	str	r3, [sp, #16]
 800888c:	9307      	str	r3, [sp, #28]
 800888e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008892:	931a      	str	r3, [sp, #104]	; 0x68
 8008894:	4654      	mov	r4, sl
 8008896:	2205      	movs	r2, #5
 8008898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800889c:	4850      	ldr	r0, [pc, #320]	; (80089e0 <_svfiprintf_r+0x1e8>)
 800889e:	f7f7 fc97 	bl	80001d0 <memchr>
 80088a2:	9a04      	ldr	r2, [sp, #16]
 80088a4:	b9d8      	cbnz	r0, 80088de <_svfiprintf_r+0xe6>
 80088a6:	06d0      	lsls	r0, r2, #27
 80088a8:	bf44      	itt	mi
 80088aa:	2320      	movmi	r3, #32
 80088ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088b0:	0711      	lsls	r1, r2, #28
 80088b2:	bf44      	itt	mi
 80088b4:	232b      	movmi	r3, #43	; 0x2b
 80088b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088ba:	f89a 3000 	ldrb.w	r3, [sl]
 80088be:	2b2a      	cmp	r3, #42	; 0x2a
 80088c0:	d015      	beq.n	80088ee <_svfiprintf_r+0xf6>
 80088c2:	9a07      	ldr	r2, [sp, #28]
 80088c4:	4654      	mov	r4, sl
 80088c6:	2000      	movs	r0, #0
 80088c8:	f04f 0c0a 	mov.w	ip, #10
 80088cc:	4621      	mov	r1, r4
 80088ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d2:	3b30      	subs	r3, #48	; 0x30
 80088d4:	2b09      	cmp	r3, #9
 80088d6:	d94d      	bls.n	8008974 <_svfiprintf_r+0x17c>
 80088d8:	b1b0      	cbz	r0, 8008908 <_svfiprintf_r+0x110>
 80088da:	9207      	str	r2, [sp, #28]
 80088dc:	e014      	b.n	8008908 <_svfiprintf_r+0x110>
 80088de:	eba0 0308 	sub.w	r3, r0, r8
 80088e2:	fa09 f303 	lsl.w	r3, r9, r3
 80088e6:	4313      	orrs	r3, r2
 80088e8:	9304      	str	r3, [sp, #16]
 80088ea:	46a2      	mov	sl, r4
 80088ec:	e7d2      	b.n	8008894 <_svfiprintf_r+0x9c>
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	1d19      	adds	r1, r3, #4
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	9103      	str	r1, [sp, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	bfbb      	ittet	lt
 80088fa:	425b      	neglt	r3, r3
 80088fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008900:	9307      	strge	r3, [sp, #28]
 8008902:	9307      	strlt	r3, [sp, #28]
 8008904:	bfb8      	it	lt
 8008906:	9204      	strlt	r2, [sp, #16]
 8008908:	7823      	ldrb	r3, [r4, #0]
 800890a:	2b2e      	cmp	r3, #46	; 0x2e
 800890c:	d10c      	bne.n	8008928 <_svfiprintf_r+0x130>
 800890e:	7863      	ldrb	r3, [r4, #1]
 8008910:	2b2a      	cmp	r3, #42	; 0x2a
 8008912:	d134      	bne.n	800897e <_svfiprintf_r+0x186>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	1d1a      	adds	r2, r3, #4
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	9203      	str	r2, [sp, #12]
 800891c:	2b00      	cmp	r3, #0
 800891e:	bfb8      	it	lt
 8008920:	f04f 33ff 	movlt.w	r3, #4294967295
 8008924:	3402      	adds	r4, #2
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80089f0 <_svfiprintf_r+0x1f8>
 800892c:	7821      	ldrb	r1, [r4, #0]
 800892e:	2203      	movs	r2, #3
 8008930:	4650      	mov	r0, sl
 8008932:	f7f7 fc4d 	bl	80001d0 <memchr>
 8008936:	b138      	cbz	r0, 8008948 <_svfiprintf_r+0x150>
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	eba0 000a 	sub.w	r0, r0, sl
 800893e:	2240      	movs	r2, #64	; 0x40
 8008940:	4082      	lsls	r2, r0
 8008942:	4313      	orrs	r3, r2
 8008944:	3401      	adds	r4, #1
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894c:	4825      	ldr	r0, [pc, #148]	; (80089e4 <_svfiprintf_r+0x1ec>)
 800894e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008952:	2206      	movs	r2, #6
 8008954:	f7f7 fc3c 	bl	80001d0 <memchr>
 8008958:	2800      	cmp	r0, #0
 800895a:	d038      	beq.n	80089ce <_svfiprintf_r+0x1d6>
 800895c:	4b22      	ldr	r3, [pc, #136]	; (80089e8 <_svfiprintf_r+0x1f0>)
 800895e:	bb1b      	cbnz	r3, 80089a8 <_svfiprintf_r+0x1b0>
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	3307      	adds	r3, #7
 8008964:	f023 0307 	bic.w	r3, r3, #7
 8008968:	3308      	adds	r3, #8
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800896e:	4433      	add	r3, r6
 8008970:	9309      	str	r3, [sp, #36]	; 0x24
 8008972:	e768      	b.n	8008846 <_svfiprintf_r+0x4e>
 8008974:	fb0c 3202 	mla	r2, ip, r2, r3
 8008978:	460c      	mov	r4, r1
 800897a:	2001      	movs	r0, #1
 800897c:	e7a6      	b.n	80088cc <_svfiprintf_r+0xd4>
 800897e:	2300      	movs	r3, #0
 8008980:	3401      	adds	r4, #1
 8008982:	9305      	str	r3, [sp, #20]
 8008984:	4619      	mov	r1, r3
 8008986:	f04f 0c0a 	mov.w	ip, #10
 800898a:	4620      	mov	r0, r4
 800898c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008990:	3a30      	subs	r2, #48	; 0x30
 8008992:	2a09      	cmp	r2, #9
 8008994:	d903      	bls.n	800899e <_svfiprintf_r+0x1a6>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0c6      	beq.n	8008928 <_svfiprintf_r+0x130>
 800899a:	9105      	str	r1, [sp, #20]
 800899c:	e7c4      	b.n	8008928 <_svfiprintf_r+0x130>
 800899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a2:	4604      	mov	r4, r0
 80089a4:	2301      	movs	r3, #1
 80089a6:	e7f0      	b.n	800898a <_svfiprintf_r+0x192>
 80089a8:	ab03      	add	r3, sp, #12
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	462a      	mov	r2, r5
 80089ae:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <_svfiprintf_r+0x1f4>)
 80089b0:	a904      	add	r1, sp, #16
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7fd fe56 	bl	8006664 <_printf_float>
 80089b8:	1c42      	adds	r2, r0, #1
 80089ba:	4606      	mov	r6, r0
 80089bc:	d1d6      	bne.n	800896c <_svfiprintf_r+0x174>
 80089be:	89ab      	ldrh	r3, [r5, #12]
 80089c0:	065b      	lsls	r3, r3, #25
 80089c2:	f53f af2d 	bmi.w	8008820 <_svfiprintf_r+0x28>
 80089c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089c8:	b01d      	add	sp, #116	; 0x74
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	ab03      	add	r3, sp, #12
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	462a      	mov	r2, r5
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <_svfiprintf_r+0x1f4>)
 80089d6:	a904      	add	r1, sp, #16
 80089d8:	4638      	mov	r0, r7
 80089da:	f7fe f8e7 	bl	8006bac <_printf_i>
 80089de:	e7eb      	b.n	80089b8 <_svfiprintf_r+0x1c0>
 80089e0:	080094d4 	.word	0x080094d4
 80089e4:	080094de 	.word	0x080094de
 80089e8:	08006665 	.word	0x08006665
 80089ec:	08008745 	.word	0x08008745
 80089f0:	080094da 	.word	0x080094da

080089f4 <__sflush_r>:
 80089f4:	898a      	ldrh	r2, [r1, #12]
 80089f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fa:	4605      	mov	r5, r0
 80089fc:	0710      	lsls	r0, r2, #28
 80089fe:	460c      	mov	r4, r1
 8008a00:	d458      	bmi.n	8008ab4 <__sflush_r+0xc0>
 8008a02:	684b      	ldr	r3, [r1, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	dc05      	bgt.n	8008a14 <__sflush_r+0x20>
 8008a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dc02      	bgt.n	8008a14 <__sflush_r+0x20>
 8008a0e:	2000      	movs	r0, #0
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	d0f9      	beq.n	8008a0e <__sflush_r+0x1a>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a20:	682f      	ldr	r7, [r5, #0]
 8008a22:	6a21      	ldr	r1, [r4, #32]
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	d032      	beq.n	8008a8e <__sflush_r+0x9a>
 8008a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a2a:	89a3      	ldrh	r3, [r4, #12]
 8008a2c:	075a      	lsls	r2, r3, #29
 8008a2e:	d505      	bpl.n	8008a3c <__sflush_r+0x48>
 8008a30:	6863      	ldr	r3, [r4, #4]
 8008a32:	1ac0      	subs	r0, r0, r3
 8008a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a36:	b10b      	cbz	r3, 8008a3c <__sflush_r+0x48>
 8008a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a3a:	1ac0      	subs	r0, r0, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4602      	mov	r2, r0
 8008a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a42:	6a21      	ldr	r1, [r4, #32]
 8008a44:	4628      	mov	r0, r5
 8008a46:	47b0      	blx	r6
 8008a48:	1c43      	adds	r3, r0, #1
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	d106      	bne.n	8008a5c <__sflush_r+0x68>
 8008a4e:	6829      	ldr	r1, [r5, #0]
 8008a50:	291d      	cmp	r1, #29
 8008a52:	d82b      	bhi.n	8008aac <__sflush_r+0xb8>
 8008a54:	4a29      	ldr	r2, [pc, #164]	; (8008afc <__sflush_r+0x108>)
 8008a56:	410a      	asrs	r2, r1
 8008a58:	07d6      	lsls	r6, r2, #31
 8008a5a:	d427      	bmi.n	8008aac <__sflush_r+0xb8>
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	6062      	str	r2, [r4, #4]
 8008a60:	04d9      	lsls	r1, r3, #19
 8008a62:	6922      	ldr	r2, [r4, #16]
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	d504      	bpl.n	8008a72 <__sflush_r+0x7e>
 8008a68:	1c42      	adds	r2, r0, #1
 8008a6a:	d101      	bne.n	8008a70 <__sflush_r+0x7c>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b903      	cbnz	r3, 8008a72 <__sflush_r+0x7e>
 8008a70:	6560      	str	r0, [r4, #84]	; 0x54
 8008a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a74:	602f      	str	r7, [r5, #0]
 8008a76:	2900      	cmp	r1, #0
 8008a78:	d0c9      	beq.n	8008a0e <__sflush_r+0x1a>
 8008a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a7e:	4299      	cmp	r1, r3
 8008a80:	d002      	beq.n	8008a88 <__sflush_r+0x94>
 8008a82:	4628      	mov	r0, r5
 8008a84:	f7ff f9e2 	bl	8007e4c <_free_r>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8008a8c:	e7c0      	b.n	8008a10 <__sflush_r+0x1c>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b0      	blx	r6
 8008a94:	1c41      	adds	r1, r0, #1
 8008a96:	d1c8      	bne.n	8008a2a <__sflush_r+0x36>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d0c5      	beq.n	8008a2a <__sflush_r+0x36>
 8008a9e:	2b1d      	cmp	r3, #29
 8008aa0:	d001      	beq.n	8008aa6 <__sflush_r+0xb2>
 8008aa2:	2b16      	cmp	r3, #22
 8008aa4:	d101      	bne.n	8008aaa <__sflush_r+0xb6>
 8008aa6:	602f      	str	r7, [r5, #0]
 8008aa8:	e7b1      	b.n	8008a0e <__sflush_r+0x1a>
 8008aaa:	89a3      	ldrh	r3, [r4, #12]
 8008aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	e7ad      	b.n	8008a10 <__sflush_r+0x1c>
 8008ab4:	690f      	ldr	r7, [r1, #16]
 8008ab6:	2f00      	cmp	r7, #0
 8008ab8:	d0a9      	beq.n	8008a0e <__sflush_r+0x1a>
 8008aba:	0793      	lsls	r3, r2, #30
 8008abc:	680e      	ldr	r6, [r1, #0]
 8008abe:	bf08      	it	eq
 8008ac0:	694b      	ldreq	r3, [r1, #20]
 8008ac2:	600f      	str	r7, [r1, #0]
 8008ac4:	bf18      	it	ne
 8008ac6:	2300      	movne	r3, #0
 8008ac8:	eba6 0807 	sub.w	r8, r6, r7
 8008acc:	608b      	str	r3, [r1, #8]
 8008ace:	f1b8 0f00 	cmp.w	r8, #0
 8008ad2:	dd9c      	ble.n	8008a0e <__sflush_r+0x1a>
 8008ad4:	6a21      	ldr	r1, [r4, #32]
 8008ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ad8:	4643      	mov	r3, r8
 8008ada:	463a      	mov	r2, r7
 8008adc:	4628      	mov	r0, r5
 8008ade:	47b0      	blx	r6
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	dc06      	bgt.n	8008af2 <__sflush_r+0xfe>
 8008ae4:	89a3      	ldrh	r3, [r4, #12]
 8008ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aea:	81a3      	strh	r3, [r4, #12]
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	e78e      	b.n	8008a10 <__sflush_r+0x1c>
 8008af2:	4407      	add	r7, r0
 8008af4:	eba8 0800 	sub.w	r8, r8, r0
 8008af8:	e7e9      	b.n	8008ace <__sflush_r+0xda>
 8008afa:	bf00      	nop
 8008afc:	dfbffffe 	.word	0xdfbffffe

08008b00 <_fflush_r>:
 8008b00:	b538      	push	{r3, r4, r5, lr}
 8008b02:	690b      	ldr	r3, [r1, #16]
 8008b04:	4605      	mov	r5, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	b913      	cbnz	r3, 8008b10 <_fflush_r+0x10>
 8008b0a:	2500      	movs	r5, #0
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	bd38      	pop	{r3, r4, r5, pc}
 8008b10:	b118      	cbz	r0, 8008b1a <_fflush_r+0x1a>
 8008b12:	6a03      	ldr	r3, [r0, #32]
 8008b14:	b90b      	cbnz	r3, 8008b1a <_fflush_r+0x1a>
 8008b16:	f7fe f9f7 	bl	8006f08 <__sinit>
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0f3      	beq.n	8008b0a <_fflush_r+0xa>
 8008b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b24:	07d0      	lsls	r0, r2, #31
 8008b26:	d404      	bmi.n	8008b32 <_fflush_r+0x32>
 8008b28:	0599      	lsls	r1, r3, #22
 8008b2a:	d402      	bmi.n	8008b32 <_fflush_r+0x32>
 8008b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b2e:	f7fe fb02 	bl	8007136 <__retarget_lock_acquire_recursive>
 8008b32:	4628      	mov	r0, r5
 8008b34:	4621      	mov	r1, r4
 8008b36:	f7ff ff5d 	bl	80089f4 <__sflush_r>
 8008b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b3c:	07da      	lsls	r2, r3, #31
 8008b3e:	4605      	mov	r5, r0
 8008b40:	d4e4      	bmi.n	8008b0c <_fflush_r+0xc>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	059b      	lsls	r3, r3, #22
 8008b46:	d4e1      	bmi.n	8008b0c <_fflush_r+0xc>
 8008b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b4a:	f7fe faf5 	bl	8007138 <__retarget_lock_release_recursive>
 8008b4e:	e7dd      	b.n	8008b0c <_fflush_r+0xc>

08008b50 <memmove>:
 8008b50:	4288      	cmp	r0, r1
 8008b52:	b510      	push	{r4, lr}
 8008b54:	eb01 0402 	add.w	r4, r1, r2
 8008b58:	d902      	bls.n	8008b60 <memmove+0x10>
 8008b5a:	4284      	cmp	r4, r0
 8008b5c:	4623      	mov	r3, r4
 8008b5e:	d807      	bhi.n	8008b70 <memmove+0x20>
 8008b60:	1e43      	subs	r3, r0, #1
 8008b62:	42a1      	cmp	r1, r4
 8008b64:	d008      	beq.n	8008b78 <memmove+0x28>
 8008b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b6e:	e7f8      	b.n	8008b62 <memmove+0x12>
 8008b70:	4402      	add	r2, r0
 8008b72:	4601      	mov	r1, r0
 8008b74:	428a      	cmp	r2, r1
 8008b76:	d100      	bne.n	8008b7a <memmove+0x2a>
 8008b78:	bd10      	pop	{r4, pc}
 8008b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b82:	e7f7      	b.n	8008b74 <memmove+0x24>

08008b84 <_sbrk_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	; (8008ba0 <_sbrk_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f8 fce0 	bl	8001554 <_sbrk>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_sbrk_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_sbrk_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200008a8 	.word	0x200008a8

08008ba4 <__assert_func>:
 8008ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ba6:	4614      	mov	r4, r2
 8008ba8:	461a      	mov	r2, r3
 8008baa:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <__assert_func+0x2c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4605      	mov	r5, r0
 8008bb0:	68d8      	ldr	r0, [r3, #12]
 8008bb2:	b14c      	cbz	r4, 8008bc8 <__assert_func+0x24>
 8008bb4:	4b07      	ldr	r3, [pc, #28]	; (8008bd4 <__assert_func+0x30>)
 8008bb6:	9100      	str	r1, [sp, #0]
 8008bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bbc:	4906      	ldr	r1, [pc, #24]	; (8008bd8 <__assert_func+0x34>)
 8008bbe:	462b      	mov	r3, r5
 8008bc0:	f000 f872 	bl	8008ca8 <fiprintf>
 8008bc4:	f000 f882 	bl	8008ccc <abort>
 8008bc8:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <__assert_func+0x38>)
 8008bca:	461c      	mov	r4, r3
 8008bcc:	e7f3      	b.n	8008bb6 <__assert_func+0x12>
 8008bce:	bf00      	nop
 8008bd0:	2000017c 	.word	0x2000017c
 8008bd4:	080094ef 	.word	0x080094ef
 8008bd8:	080094fc 	.word	0x080094fc
 8008bdc:	0800952a 	.word	0x0800952a

08008be0 <_calloc_r>:
 8008be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008be2:	fba1 2402 	umull	r2, r4, r1, r2
 8008be6:	b94c      	cbnz	r4, 8008bfc <_calloc_r+0x1c>
 8008be8:	4611      	mov	r1, r2
 8008bea:	9201      	str	r2, [sp, #4]
 8008bec:	f7ff f9a2 	bl	8007f34 <_malloc_r>
 8008bf0:	9a01      	ldr	r2, [sp, #4]
 8008bf2:	4605      	mov	r5, r0
 8008bf4:	b930      	cbnz	r0, 8008c04 <_calloc_r+0x24>
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	b003      	add	sp, #12
 8008bfa:	bd30      	pop	{r4, r5, pc}
 8008bfc:	220c      	movs	r2, #12
 8008bfe:	6002      	str	r2, [r0, #0]
 8008c00:	2500      	movs	r5, #0
 8008c02:	e7f8      	b.n	8008bf6 <_calloc_r+0x16>
 8008c04:	4621      	mov	r1, r4
 8008c06:	f7fe fa18 	bl	800703a <memset>
 8008c0a:	e7f4      	b.n	8008bf6 <_calloc_r+0x16>

08008c0c <__ascii_mbtowc>:
 8008c0c:	b082      	sub	sp, #8
 8008c0e:	b901      	cbnz	r1, 8008c12 <__ascii_mbtowc+0x6>
 8008c10:	a901      	add	r1, sp, #4
 8008c12:	b142      	cbz	r2, 8008c26 <__ascii_mbtowc+0x1a>
 8008c14:	b14b      	cbz	r3, 8008c2a <__ascii_mbtowc+0x1e>
 8008c16:	7813      	ldrb	r3, [r2, #0]
 8008c18:	600b      	str	r3, [r1, #0]
 8008c1a:	7812      	ldrb	r2, [r2, #0]
 8008c1c:	1e10      	subs	r0, r2, #0
 8008c1e:	bf18      	it	ne
 8008c20:	2001      	movne	r0, #1
 8008c22:	b002      	add	sp, #8
 8008c24:	4770      	bx	lr
 8008c26:	4610      	mov	r0, r2
 8008c28:	e7fb      	b.n	8008c22 <__ascii_mbtowc+0x16>
 8008c2a:	f06f 0001 	mvn.w	r0, #1
 8008c2e:	e7f8      	b.n	8008c22 <__ascii_mbtowc+0x16>

08008c30 <_realloc_r>:
 8008c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	4680      	mov	r8, r0
 8008c36:	4614      	mov	r4, r2
 8008c38:	460e      	mov	r6, r1
 8008c3a:	b921      	cbnz	r1, 8008c46 <_realloc_r+0x16>
 8008c3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	4611      	mov	r1, r2
 8008c42:	f7ff b977 	b.w	8007f34 <_malloc_r>
 8008c46:	b92a      	cbnz	r2, 8008c54 <_realloc_r+0x24>
 8008c48:	f7ff f900 	bl	8007e4c <_free_r>
 8008c4c:	4625      	mov	r5, r4
 8008c4e:	4628      	mov	r0, r5
 8008c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c54:	f000 f841 	bl	8008cda <_malloc_usable_size_r>
 8008c58:	4284      	cmp	r4, r0
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	d802      	bhi.n	8008c64 <_realloc_r+0x34>
 8008c5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c62:	d812      	bhi.n	8008c8a <_realloc_r+0x5a>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4640      	mov	r0, r8
 8008c68:	f7ff f964 	bl	8007f34 <_malloc_r>
 8008c6c:	4605      	mov	r5, r0
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d0ed      	beq.n	8008c4e <_realloc_r+0x1e>
 8008c72:	42bc      	cmp	r4, r7
 8008c74:	4622      	mov	r2, r4
 8008c76:	4631      	mov	r1, r6
 8008c78:	bf28      	it	cs
 8008c7a:	463a      	movcs	r2, r7
 8008c7c:	f7fe fa5d 	bl	800713a <memcpy>
 8008c80:	4631      	mov	r1, r6
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7ff f8e2 	bl	8007e4c <_free_r>
 8008c88:	e7e1      	b.n	8008c4e <_realloc_r+0x1e>
 8008c8a:	4635      	mov	r5, r6
 8008c8c:	e7df      	b.n	8008c4e <_realloc_r+0x1e>

08008c8e <__ascii_wctomb>:
 8008c8e:	b149      	cbz	r1, 8008ca4 <__ascii_wctomb+0x16>
 8008c90:	2aff      	cmp	r2, #255	; 0xff
 8008c92:	bf85      	ittet	hi
 8008c94:	238a      	movhi	r3, #138	; 0x8a
 8008c96:	6003      	strhi	r3, [r0, #0]
 8008c98:	700a      	strbls	r2, [r1, #0]
 8008c9a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c9e:	bf98      	it	ls
 8008ca0:	2001      	movls	r0, #1
 8008ca2:	4770      	bx	lr
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	4770      	bx	lr

08008ca8 <fiprintf>:
 8008ca8:	b40e      	push	{r1, r2, r3}
 8008caa:	b503      	push	{r0, r1, lr}
 8008cac:	4601      	mov	r1, r0
 8008cae:	ab03      	add	r3, sp, #12
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <fiprintf+0x20>)
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	6800      	ldr	r0, [r0, #0]
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f000 f83f 	bl	8008d3c <_vfiprintf_r>
 8008cbe:	b002      	add	sp, #8
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	2000017c 	.word	0x2000017c

08008ccc <abort>:
 8008ccc:	b508      	push	{r3, lr}
 8008cce:	2006      	movs	r0, #6
 8008cd0:	f000 fa0c 	bl	80090ec <raise>
 8008cd4:	2001      	movs	r0, #1
 8008cd6:	f7f8 fbc5 	bl	8001464 <_exit>

08008cda <_malloc_usable_size_r>:
 8008cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cde:	1f18      	subs	r0, r3, #4
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	bfbc      	itt	lt
 8008ce4:	580b      	ldrlt	r3, [r1, r0]
 8008ce6:	18c0      	addlt	r0, r0, r3
 8008ce8:	4770      	bx	lr

08008cea <__sfputc_r>:
 8008cea:	6893      	ldr	r3, [r2, #8]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	b410      	push	{r4}
 8008cf2:	6093      	str	r3, [r2, #8]
 8008cf4:	da08      	bge.n	8008d08 <__sfputc_r+0x1e>
 8008cf6:	6994      	ldr	r4, [r2, #24]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	db01      	blt.n	8008d00 <__sfputc_r+0x16>
 8008cfc:	290a      	cmp	r1, #10
 8008cfe:	d103      	bne.n	8008d08 <__sfputc_r+0x1e>
 8008d00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d04:	f000 b934 	b.w	8008f70 <__swbuf_r>
 8008d08:	6813      	ldr	r3, [r2, #0]
 8008d0a:	1c58      	adds	r0, r3, #1
 8008d0c:	6010      	str	r0, [r2, #0]
 8008d0e:	7019      	strb	r1, [r3, #0]
 8008d10:	4608      	mov	r0, r1
 8008d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <__sfputs_r>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460f      	mov	r7, r1
 8008d1e:	4614      	mov	r4, r2
 8008d20:	18d5      	adds	r5, r2, r3
 8008d22:	42ac      	cmp	r4, r5
 8008d24:	d101      	bne.n	8008d2a <__sfputs_r+0x12>
 8008d26:	2000      	movs	r0, #0
 8008d28:	e007      	b.n	8008d3a <__sfputs_r+0x22>
 8008d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d2e:	463a      	mov	r2, r7
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff ffda 	bl	8008cea <__sfputc_r>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d1f3      	bne.n	8008d22 <__sfputs_r+0xa>
 8008d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d3c <_vfiprintf_r>:
 8008d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d40:	460d      	mov	r5, r1
 8008d42:	b09d      	sub	sp, #116	; 0x74
 8008d44:	4614      	mov	r4, r2
 8008d46:	4698      	mov	r8, r3
 8008d48:	4606      	mov	r6, r0
 8008d4a:	b118      	cbz	r0, 8008d54 <_vfiprintf_r+0x18>
 8008d4c:	6a03      	ldr	r3, [r0, #32]
 8008d4e:	b90b      	cbnz	r3, 8008d54 <_vfiprintf_r+0x18>
 8008d50:	f7fe f8da 	bl	8006f08 <__sinit>
 8008d54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d56:	07d9      	lsls	r1, r3, #31
 8008d58:	d405      	bmi.n	8008d66 <_vfiprintf_r+0x2a>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	059a      	lsls	r2, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_vfiprintf_r+0x2a>
 8008d60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d62:	f7fe f9e8 	bl	8007136 <__retarget_lock_acquire_recursive>
 8008d66:	89ab      	ldrh	r3, [r5, #12]
 8008d68:	071b      	lsls	r3, r3, #28
 8008d6a:	d501      	bpl.n	8008d70 <_vfiprintf_r+0x34>
 8008d6c:	692b      	ldr	r3, [r5, #16]
 8008d6e:	b99b      	cbnz	r3, 8008d98 <_vfiprintf_r+0x5c>
 8008d70:	4629      	mov	r1, r5
 8008d72:	4630      	mov	r0, r6
 8008d74:	f000 f93a 	bl	8008fec <__swsetup_r>
 8008d78:	b170      	cbz	r0, 8008d98 <_vfiprintf_r+0x5c>
 8008d7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d7c:	07dc      	lsls	r4, r3, #31
 8008d7e:	d504      	bpl.n	8008d8a <_vfiprintf_r+0x4e>
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	b01d      	add	sp, #116	; 0x74
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	89ab      	ldrh	r3, [r5, #12]
 8008d8c:	0598      	lsls	r0, r3, #22
 8008d8e:	d4f7      	bmi.n	8008d80 <_vfiprintf_r+0x44>
 8008d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d92:	f7fe f9d1 	bl	8007138 <__retarget_lock_release_recursive>
 8008d96:	e7f3      	b.n	8008d80 <_vfiprintf_r+0x44>
 8008d98:	2300      	movs	r3, #0
 8008d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d9c:	2320      	movs	r3, #32
 8008d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008da2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008da6:	2330      	movs	r3, #48	; 0x30
 8008da8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008f5c <_vfiprintf_r+0x220>
 8008dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008db0:	f04f 0901 	mov.w	r9, #1
 8008db4:	4623      	mov	r3, r4
 8008db6:	469a      	mov	sl, r3
 8008db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dbc:	b10a      	cbz	r2, 8008dc2 <_vfiprintf_r+0x86>
 8008dbe:	2a25      	cmp	r2, #37	; 0x25
 8008dc0:	d1f9      	bne.n	8008db6 <_vfiprintf_r+0x7a>
 8008dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8008dc6:	d00b      	beq.n	8008de0 <_vfiprintf_r+0xa4>
 8008dc8:	465b      	mov	r3, fp
 8008dca:	4622      	mov	r2, r4
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ffa2 	bl	8008d18 <__sfputs_r>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f000 80a9 	beq.w	8008f2c <_vfiprintf_r+0x1f0>
 8008dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ddc:	445a      	add	r2, fp
 8008dde:	9209      	str	r2, [sp, #36]	; 0x24
 8008de0:	f89a 3000 	ldrb.w	r3, [sl]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 80a1 	beq.w	8008f2c <_vfiprintf_r+0x1f0>
 8008dea:	2300      	movs	r3, #0
 8008dec:	f04f 32ff 	mov.w	r2, #4294967295
 8008df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008df4:	f10a 0a01 	add.w	sl, sl, #1
 8008df8:	9304      	str	r3, [sp, #16]
 8008dfa:	9307      	str	r3, [sp, #28]
 8008dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e00:	931a      	str	r3, [sp, #104]	; 0x68
 8008e02:	4654      	mov	r4, sl
 8008e04:	2205      	movs	r2, #5
 8008e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e0a:	4854      	ldr	r0, [pc, #336]	; (8008f5c <_vfiprintf_r+0x220>)
 8008e0c:	f7f7 f9e0 	bl	80001d0 <memchr>
 8008e10:	9a04      	ldr	r2, [sp, #16]
 8008e12:	b9d8      	cbnz	r0, 8008e4c <_vfiprintf_r+0x110>
 8008e14:	06d1      	lsls	r1, r2, #27
 8008e16:	bf44      	itt	mi
 8008e18:	2320      	movmi	r3, #32
 8008e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e1e:	0713      	lsls	r3, r2, #28
 8008e20:	bf44      	itt	mi
 8008e22:	232b      	movmi	r3, #43	; 0x2b
 8008e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e28:	f89a 3000 	ldrb.w	r3, [sl]
 8008e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e2e:	d015      	beq.n	8008e5c <_vfiprintf_r+0x120>
 8008e30:	9a07      	ldr	r2, [sp, #28]
 8008e32:	4654      	mov	r4, sl
 8008e34:	2000      	movs	r0, #0
 8008e36:	f04f 0c0a 	mov.w	ip, #10
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e40:	3b30      	subs	r3, #48	; 0x30
 8008e42:	2b09      	cmp	r3, #9
 8008e44:	d94d      	bls.n	8008ee2 <_vfiprintf_r+0x1a6>
 8008e46:	b1b0      	cbz	r0, 8008e76 <_vfiprintf_r+0x13a>
 8008e48:	9207      	str	r2, [sp, #28]
 8008e4a:	e014      	b.n	8008e76 <_vfiprintf_r+0x13a>
 8008e4c:	eba0 0308 	sub.w	r3, r0, r8
 8008e50:	fa09 f303 	lsl.w	r3, r9, r3
 8008e54:	4313      	orrs	r3, r2
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	46a2      	mov	sl, r4
 8008e5a:	e7d2      	b.n	8008e02 <_vfiprintf_r+0xc6>
 8008e5c:	9b03      	ldr	r3, [sp, #12]
 8008e5e:	1d19      	adds	r1, r3, #4
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	9103      	str	r1, [sp, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfbb      	ittet	lt
 8008e68:	425b      	neglt	r3, r3
 8008e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8008e6e:	9307      	strge	r3, [sp, #28]
 8008e70:	9307      	strlt	r3, [sp, #28]
 8008e72:	bfb8      	it	lt
 8008e74:	9204      	strlt	r2, [sp, #16]
 8008e76:	7823      	ldrb	r3, [r4, #0]
 8008e78:	2b2e      	cmp	r3, #46	; 0x2e
 8008e7a:	d10c      	bne.n	8008e96 <_vfiprintf_r+0x15a>
 8008e7c:	7863      	ldrb	r3, [r4, #1]
 8008e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e80:	d134      	bne.n	8008eec <_vfiprintf_r+0x1b0>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	1d1a      	adds	r2, r3, #4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	9203      	str	r2, [sp, #12]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	bfb8      	it	lt
 8008e8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e92:	3402      	adds	r4, #2
 8008e94:	9305      	str	r3, [sp, #20]
 8008e96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008f6c <_vfiprintf_r+0x230>
 8008e9a:	7821      	ldrb	r1, [r4, #0]
 8008e9c:	2203      	movs	r2, #3
 8008e9e:	4650      	mov	r0, sl
 8008ea0:	f7f7 f996 	bl	80001d0 <memchr>
 8008ea4:	b138      	cbz	r0, 8008eb6 <_vfiprintf_r+0x17a>
 8008ea6:	9b04      	ldr	r3, [sp, #16]
 8008ea8:	eba0 000a 	sub.w	r0, r0, sl
 8008eac:	2240      	movs	r2, #64	; 0x40
 8008eae:	4082      	lsls	r2, r0
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	3401      	adds	r4, #1
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eba:	4829      	ldr	r0, [pc, #164]	; (8008f60 <_vfiprintf_r+0x224>)
 8008ebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ec0:	2206      	movs	r2, #6
 8008ec2:	f7f7 f985 	bl	80001d0 <memchr>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d03f      	beq.n	8008f4a <_vfiprintf_r+0x20e>
 8008eca:	4b26      	ldr	r3, [pc, #152]	; (8008f64 <_vfiprintf_r+0x228>)
 8008ecc:	bb1b      	cbnz	r3, 8008f16 <_vfiprintf_r+0x1da>
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	3307      	adds	r3, #7
 8008ed2:	f023 0307 	bic.w	r3, r3, #7
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008edc:	443b      	add	r3, r7
 8008ede:	9309      	str	r3, [sp, #36]	; 0x24
 8008ee0:	e768      	b.n	8008db4 <_vfiprintf_r+0x78>
 8008ee2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	2001      	movs	r0, #1
 8008eea:	e7a6      	b.n	8008e3a <_vfiprintf_r+0xfe>
 8008eec:	2300      	movs	r3, #0
 8008eee:	3401      	adds	r4, #1
 8008ef0:	9305      	str	r3, [sp, #20]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	f04f 0c0a 	mov.w	ip, #10
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008efe:	3a30      	subs	r2, #48	; 0x30
 8008f00:	2a09      	cmp	r2, #9
 8008f02:	d903      	bls.n	8008f0c <_vfiprintf_r+0x1d0>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d0c6      	beq.n	8008e96 <_vfiprintf_r+0x15a>
 8008f08:	9105      	str	r1, [sp, #20]
 8008f0a:	e7c4      	b.n	8008e96 <_vfiprintf_r+0x15a>
 8008f0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f10:	4604      	mov	r4, r0
 8008f12:	2301      	movs	r3, #1
 8008f14:	e7f0      	b.n	8008ef8 <_vfiprintf_r+0x1bc>
 8008f16:	ab03      	add	r3, sp, #12
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	462a      	mov	r2, r5
 8008f1c:	4b12      	ldr	r3, [pc, #72]	; (8008f68 <_vfiprintf_r+0x22c>)
 8008f1e:	a904      	add	r1, sp, #16
 8008f20:	4630      	mov	r0, r6
 8008f22:	f7fd fb9f 	bl	8006664 <_printf_float>
 8008f26:	4607      	mov	r7, r0
 8008f28:	1c78      	adds	r0, r7, #1
 8008f2a:	d1d6      	bne.n	8008eda <_vfiprintf_r+0x19e>
 8008f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008f2e:	07d9      	lsls	r1, r3, #31
 8008f30:	d405      	bmi.n	8008f3e <_vfiprintf_r+0x202>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	059a      	lsls	r2, r3, #22
 8008f36:	d402      	bmi.n	8008f3e <_vfiprintf_r+0x202>
 8008f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f3a:	f7fe f8fd 	bl	8007138 <__retarget_lock_release_recursive>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	065b      	lsls	r3, r3, #25
 8008f42:	f53f af1d 	bmi.w	8008d80 <_vfiprintf_r+0x44>
 8008f46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f48:	e71c      	b.n	8008d84 <_vfiprintf_r+0x48>
 8008f4a:	ab03      	add	r3, sp, #12
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	462a      	mov	r2, r5
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <_vfiprintf_r+0x22c>)
 8008f52:	a904      	add	r1, sp, #16
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7fd fe29 	bl	8006bac <_printf_i>
 8008f5a:	e7e4      	b.n	8008f26 <_vfiprintf_r+0x1ea>
 8008f5c:	080094d4 	.word	0x080094d4
 8008f60:	080094de 	.word	0x080094de
 8008f64:	08006665 	.word	0x08006665
 8008f68:	08008d19 	.word	0x08008d19
 8008f6c:	080094da 	.word	0x080094da

08008f70 <__swbuf_r>:
 8008f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f72:	460e      	mov	r6, r1
 8008f74:	4614      	mov	r4, r2
 8008f76:	4605      	mov	r5, r0
 8008f78:	b118      	cbz	r0, 8008f82 <__swbuf_r+0x12>
 8008f7a:	6a03      	ldr	r3, [r0, #32]
 8008f7c:	b90b      	cbnz	r3, 8008f82 <__swbuf_r+0x12>
 8008f7e:	f7fd ffc3 	bl	8006f08 <__sinit>
 8008f82:	69a3      	ldr	r3, [r4, #24]
 8008f84:	60a3      	str	r3, [r4, #8]
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	071a      	lsls	r2, r3, #28
 8008f8a:	d525      	bpl.n	8008fd8 <__swbuf_r+0x68>
 8008f8c:	6923      	ldr	r3, [r4, #16]
 8008f8e:	b31b      	cbz	r3, 8008fd8 <__swbuf_r+0x68>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	6922      	ldr	r2, [r4, #16]
 8008f94:	1a98      	subs	r0, r3, r2
 8008f96:	6963      	ldr	r3, [r4, #20]
 8008f98:	b2f6      	uxtb	r6, r6
 8008f9a:	4283      	cmp	r3, r0
 8008f9c:	4637      	mov	r7, r6
 8008f9e:	dc04      	bgt.n	8008faa <__swbuf_r+0x3a>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f7ff fdac 	bl	8008b00 <_fflush_r>
 8008fa8:	b9e0      	cbnz	r0, 8008fe4 <__swbuf_r+0x74>
 8008faa:	68a3      	ldr	r3, [r4, #8]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	60a3      	str	r3, [r4, #8]
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	6022      	str	r2, [r4, #0]
 8008fb6:	701e      	strb	r6, [r3, #0]
 8008fb8:	6962      	ldr	r2, [r4, #20]
 8008fba:	1c43      	adds	r3, r0, #1
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d004      	beq.n	8008fca <__swbuf_r+0x5a>
 8008fc0:	89a3      	ldrh	r3, [r4, #12]
 8008fc2:	07db      	lsls	r3, r3, #31
 8008fc4:	d506      	bpl.n	8008fd4 <__swbuf_r+0x64>
 8008fc6:	2e0a      	cmp	r6, #10
 8008fc8:	d104      	bne.n	8008fd4 <__swbuf_r+0x64>
 8008fca:	4621      	mov	r1, r4
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f7ff fd97 	bl	8008b00 <_fflush_r>
 8008fd2:	b938      	cbnz	r0, 8008fe4 <__swbuf_r+0x74>
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fd8:	4621      	mov	r1, r4
 8008fda:	4628      	mov	r0, r5
 8008fdc:	f000 f806 	bl	8008fec <__swsetup_r>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d0d5      	beq.n	8008f90 <__swbuf_r+0x20>
 8008fe4:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe8:	e7f4      	b.n	8008fd4 <__swbuf_r+0x64>
	...

08008fec <__swsetup_r>:
 8008fec:	b538      	push	{r3, r4, r5, lr}
 8008fee:	4b2a      	ldr	r3, [pc, #168]	; (8009098 <__swsetup_r+0xac>)
 8008ff0:	4605      	mov	r5, r0
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	b118      	cbz	r0, 8009000 <__swsetup_r+0x14>
 8008ff8:	6a03      	ldr	r3, [r0, #32]
 8008ffa:	b90b      	cbnz	r3, 8009000 <__swsetup_r+0x14>
 8008ffc:	f7fd ff84 	bl	8006f08 <__sinit>
 8009000:	89a3      	ldrh	r3, [r4, #12]
 8009002:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009006:	0718      	lsls	r0, r3, #28
 8009008:	d422      	bmi.n	8009050 <__swsetup_r+0x64>
 800900a:	06d9      	lsls	r1, r3, #27
 800900c:	d407      	bmi.n	800901e <__swsetup_r+0x32>
 800900e:	2309      	movs	r3, #9
 8009010:	602b      	str	r3, [r5, #0]
 8009012:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	f04f 30ff 	mov.w	r0, #4294967295
 800901c:	e034      	b.n	8009088 <__swsetup_r+0x9c>
 800901e:	0758      	lsls	r0, r3, #29
 8009020:	d512      	bpl.n	8009048 <__swsetup_r+0x5c>
 8009022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009024:	b141      	cbz	r1, 8009038 <__swsetup_r+0x4c>
 8009026:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800902a:	4299      	cmp	r1, r3
 800902c:	d002      	beq.n	8009034 <__swsetup_r+0x48>
 800902e:	4628      	mov	r0, r5
 8009030:	f7fe ff0c 	bl	8007e4c <_free_r>
 8009034:	2300      	movs	r3, #0
 8009036:	6363      	str	r3, [r4, #52]	; 0x34
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800903e:	81a3      	strh	r3, [r4, #12]
 8009040:	2300      	movs	r3, #0
 8009042:	6063      	str	r3, [r4, #4]
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	6023      	str	r3, [r4, #0]
 8009048:	89a3      	ldrh	r3, [r4, #12]
 800904a:	f043 0308 	orr.w	r3, r3, #8
 800904e:	81a3      	strh	r3, [r4, #12]
 8009050:	6923      	ldr	r3, [r4, #16]
 8009052:	b94b      	cbnz	r3, 8009068 <__swsetup_r+0x7c>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800905a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800905e:	d003      	beq.n	8009068 <__swsetup_r+0x7c>
 8009060:	4621      	mov	r1, r4
 8009062:	4628      	mov	r0, r5
 8009064:	f000 f884 	bl	8009170 <__smakebuf_r>
 8009068:	89a0      	ldrh	r0, [r4, #12]
 800906a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800906e:	f010 0301 	ands.w	r3, r0, #1
 8009072:	d00a      	beq.n	800908a <__swsetup_r+0x9e>
 8009074:	2300      	movs	r3, #0
 8009076:	60a3      	str	r3, [r4, #8]
 8009078:	6963      	ldr	r3, [r4, #20]
 800907a:	425b      	negs	r3, r3
 800907c:	61a3      	str	r3, [r4, #24]
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	b943      	cbnz	r3, 8009094 <__swsetup_r+0xa8>
 8009082:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009086:	d1c4      	bne.n	8009012 <__swsetup_r+0x26>
 8009088:	bd38      	pop	{r3, r4, r5, pc}
 800908a:	0781      	lsls	r1, r0, #30
 800908c:	bf58      	it	pl
 800908e:	6963      	ldrpl	r3, [r4, #20]
 8009090:	60a3      	str	r3, [r4, #8]
 8009092:	e7f4      	b.n	800907e <__swsetup_r+0x92>
 8009094:	2000      	movs	r0, #0
 8009096:	e7f7      	b.n	8009088 <__swsetup_r+0x9c>
 8009098:	2000017c 	.word	0x2000017c

0800909c <_raise_r>:
 800909c:	291f      	cmp	r1, #31
 800909e:	b538      	push	{r3, r4, r5, lr}
 80090a0:	4604      	mov	r4, r0
 80090a2:	460d      	mov	r5, r1
 80090a4:	d904      	bls.n	80090b0 <_raise_r+0x14>
 80090a6:	2316      	movs	r3, #22
 80090a8:	6003      	str	r3, [r0, #0]
 80090aa:	f04f 30ff 	mov.w	r0, #4294967295
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090b2:	b112      	cbz	r2, 80090ba <_raise_r+0x1e>
 80090b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090b8:	b94b      	cbnz	r3, 80090ce <_raise_r+0x32>
 80090ba:	4620      	mov	r0, r4
 80090bc:	f000 f830 	bl	8009120 <_getpid_r>
 80090c0:	462a      	mov	r2, r5
 80090c2:	4601      	mov	r1, r0
 80090c4:	4620      	mov	r0, r4
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f000 b817 	b.w	80090fc <_kill_r>
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d00a      	beq.n	80090e8 <_raise_r+0x4c>
 80090d2:	1c59      	adds	r1, r3, #1
 80090d4:	d103      	bne.n	80090de <_raise_r+0x42>
 80090d6:	2316      	movs	r3, #22
 80090d8:	6003      	str	r3, [r0, #0]
 80090da:	2001      	movs	r0, #1
 80090dc:	e7e7      	b.n	80090ae <_raise_r+0x12>
 80090de:	2400      	movs	r4, #0
 80090e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090e4:	4628      	mov	r0, r5
 80090e6:	4798      	blx	r3
 80090e8:	2000      	movs	r0, #0
 80090ea:	e7e0      	b.n	80090ae <_raise_r+0x12>

080090ec <raise>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <raise+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	f7ff bfd3 	b.w	800909c <_raise_r>
 80090f6:	bf00      	nop
 80090f8:	2000017c 	.word	0x2000017c

080090fc <_kill_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_kill_r+0x20>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f7f8 f99b 	bl	8001444 <_kill>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d102      	bne.n	8009118 <_kill_r+0x1c>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <_kill_r+0x1c>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	200008a8 	.word	0x200008a8

08009120 <_getpid_r>:
 8009120:	f7f8 b988 	b.w	8001434 <_getpid>

08009124 <__swhatbuf_r>:
 8009124:	b570      	push	{r4, r5, r6, lr}
 8009126:	460c      	mov	r4, r1
 8009128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800912c:	2900      	cmp	r1, #0
 800912e:	b096      	sub	sp, #88	; 0x58
 8009130:	4615      	mov	r5, r2
 8009132:	461e      	mov	r6, r3
 8009134:	da0d      	bge.n	8009152 <__swhatbuf_r+0x2e>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f013 0f80 	tst.w	r3, #128	; 0x80
 800913c:	f04f 0100 	mov.w	r1, #0
 8009140:	bf0c      	ite	eq
 8009142:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009146:	2340      	movne	r3, #64	; 0x40
 8009148:	2000      	movs	r0, #0
 800914a:	6031      	str	r1, [r6, #0]
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	b016      	add	sp, #88	; 0x58
 8009150:	bd70      	pop	{r4, r5, r6, pc}
 8009152:	466a      	mov	r2, sp
 8009154:	f000 f848 	bl	80091e8 <_fstat_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	dbec      	blt.n	8009136 <__swhatbuf_r+0x12>
 800915c:	9901      	ldr	r1, [sp, #4]
 800915e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009162:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009166:	4259      	negs	r1, r3
 8009168:	4159      	adcs	r1, r3
 800916a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916e:	e7eb      	b.n	8009148 <__swhatbuf_r+0x24>

08009170 <__smakebuf_r>:
 8009170:	898b      	ldrh	r3, [r1, #12]
 8009172:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009174:	079d      	lsls	r5, r3, #30
 8009176:	4606      	mov	r6, r0
 8009178:	460c      	mov	r4, r1
 800917a:	d507      	bpl.n	800918c <__smakebuf_r+0x1c>
 800917c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	6123      	str	r3, [r4, #16]
 8009184:	2301      	movs	r3, #1
 8009186:	6163      	str	r3, [r4, #20]
 8009188:	b002      	add	sp, #8
 800918a:	bd70      	pop	{r4, r5, r6, pc}
 800918c:	ab01      	add	r3, sp, #4
 800918e:	466a      	mov	r2, sp
 8009190:	f7ff ffc8 	bl	8009124 <__swhatbuf_r>
 8009194:	9900      	ldr	r1, [sp, #0]
 8009196:	4605      	mov	r5, r0
 8009198:	4630      	mov	r0, r6
 800919a:	f7fe fecb 	bl	8007f34 <_malloc_r>
 800919e:	b948      	cbnz	r0, 80091b4 <__smakebuf_r+0x44>
 80091a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a4:	059a      	lsls	r2, r3, #22
 80091a6:	d4ef      	bmi.n	8009188 <__smakebuf_r+0x18>
 80091a8:	f023 0303 	bic.w	r3, r3, #3
 80091ac:	f043 0302 	orr.w	r3, r3, #2
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	e7e3      	b.n	800917c <__smakebuf_r+0xc>
 80091b4:	89a3      	ldrh	r3, [r4, #12]
 80091b6:	6020      	str	r0, [r4, #0]
 80091b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091bc:	81a3      	strh	r3, [r4, #12]
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	6163      	str	r3, [r4, #20]
 80091c2:	9b01      	ldr	r3, [sp, #4]
 80091c4:	6120      	str	r0, [r4, #16]
 80091c6:	b15b      	cbz	r3, 80091e0 <__smakebuf_r+0x70>
 80091c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 f81d 	bl	800920c <_isatty_r>
 80091d2:	b128      	cbz	r0, 80091e0 <__smakebuf_r+0x70>
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f023 0303 	bic.w	r3, r3, #3
 80091da:	f043 0301 	orr.w	r3, r3, #1
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	431d      	orrs	r5, r3
 80091e4:	81a5      	strh	r5, [r4, #12]
 80091e6:	e7cf      	b.n	8009188 <__smakebuf_r+0x18>

080091e8 <_fstat_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d07      	ldr	r5, [pc, #28]	; (8009208 <_fstat_r+0x20>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	4611      	mov	r1, r2
 80091f4:	602b      	str	r3, [r5, #0]
 80091f6:	f7f8 f984 	bl	8001502 <_fstat>
 80091fa:	1c43      	adds	r3, r0, #1
 80091fc:	d102      	bne.n	8009204 <_fstat_r+0x1c>
 80091fe:	682b      	ldr	r3, [r5, #0]
 8009200:	b103      	cbz	r3, 8009204 <_fstat_r+0x1c>
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	200008a8 	.word	0x200008a8

0800920c <_isatty_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	; (8009228 <_isatty_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 f983 	bl	8001522 <_isatty>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_isatty_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_isatty_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	200008a8 	.word	0x200008a8

0800922c <_init>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr

08009238 <_fini>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr
