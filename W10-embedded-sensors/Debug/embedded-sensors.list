
embedded-sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08009650  08009650  00019650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a14  08009a14  000202f0  2**0
                  CONTENTS
  4 .ARM          00000000  08009a14  08009a14  000202f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009a14  08009a14  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a14  08009a14  00019a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a18  08009a18  00019a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  08009a1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202f0  2**0
                  CONTENTS
 10 .bss          000005d8  200002f0  200002f0  000202f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008c8  200008c8  000202f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011ed3  00000000  00000000  00020363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003397  00000000  00000000  00032236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001070  00000000  00000000  000355d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c65  00000000  00000000  00036640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da31  00000000  00000000  000372a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000159b5  00000000  00000000  00074cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eb050  00000000  00000000  0008a68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005378  00000000  00000000  001756dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0017aa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f0 	.word	0x200002f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009634 	.word	0x08009634

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002f4 	.word	0x200002f4
 80001cc:	08009634 	.word	0x08009634

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <USART1_IRQHandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float velocity = 0;

void USART1_IRQHandler()
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b092      	sub	sp, #72	; 0x48
 8000c4c:	af00      	add	r7, sp, #0
	uint8_t string_to_send[64] = "This is a string !\r\n";
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <USART1_IRQHandler+0x70>)
 8000c50:	f107 0408 	add.w	r4, r7, #8
 8000c54:	461d      	mov	r5, r3
 8000c56:	6828      	ldr	r0, [r5, #0]
 8000c58:	6869      	ldr	r1, [r5, #4]
 8000c5a:	68aa      	ldr	r2, [r5, #8]
 8000c5c:	68eb      	ldr	r3, [r5, #12]
 8000c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c60:	6928      	ldr	r0, [r5, #16]
 8000c62:	6020      	str	r0, [r4, #0]
 8000c64:	7d2b      	ldrb	r3, [r5, #20]
 8000c66:	7123      	strb	r3, [r4, #4]
 8000c68:	f107 031d 	add.w	r3, r7, #29
 8000c6c:	222b      	movs	r2, #43	; 0x2b
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 fbe6 	bl	8007442 <memset>
	sprintf(string_to_send, "%0.6f,%f\r\n", 0, 0);
 8000c76:	f107 0008 	add.w	r0, r7, #8
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	490f      	ldr	r1, [pc, #60]	; (8000cbc <USART1_IRQHandler+0x74>)
 8000c80:	f006 fb7c 	bl	800737c <siprintf>
    SerialOutputString(string_to_send, &USART1_PORT);
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <USART1_IRQHandler+0x78>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fb6f 	bl	800136e <SerialOutputString>
	//Receive char
	//SerialOutputString("balls", &USART1_PORT);
	if((USART1->ISR & USART_ISR_RXNE)){
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <USART1_IRQHandler+0x7c>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	f003 0320 	and.w	r3, r3, #32
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d008      	beq.n	8000cae <USART1_IRQHandler+0x66>
		velocity = 0;
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <USART1_IRQHandler+0x80>)
 8000c9e:	f04f 0200 	mov.w	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
		uint8_t dummy;
		SerialReceiveChar(&USART1_PORT, &dummy);
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <USART1_IRQHandler+0x78>)
 8000caa:	f000 fb84 	bl	80013b6 <SerialReceiveChar>

	}
}
 8000cae:	bf00      	nop
 8000cb0:	3748      	adds	r7, #72	; 0x48
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	0800965c 	.word	0x0800965c
 8000cbc:	08009650 	.word	0x08009650
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	40013800 	.word	0x40013800
 8000cc8:	200006b0 	.word	0x200006b0

08000ccc <enable_clocks>:

void enable_clocks() {
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <enable_clocks+0x28>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <enable_clocks+0x28>)
 8000cd6:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 8000cda:	6153      	str	r3, [r2, #20]

	// worked
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <enable_clocks+0x28>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <enable_clocks+0x28>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	61d3      	str	r3, [r2, #28]
	// worked
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <read_and_transmit>:

void read_and_transmit(){
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b098      	sub	sp, #96	; 0x60
 8000cfc:	af02      	add	r7, sp, #8
  uint8_t string_to_send[64] = "This is a string !\r\n";
 8000cfe:	4b50      	ldr	r3, [pc, #320]	; (8000e40 <read_and_transmit+0x148>)
 8000d00:	f107 0410 	add.w	r4, r7, #16
 8000d04:	461d      	mov	r5, r3
 8000d06:	6828      	ldr	r0, [r5, #0]
 8000d08:	6869      	ldr	r1, [r5, #4]
 8000d0a:	68aa      	ldr	r2, [r5, #8]
 8000d0c:	68eb      	ldr	r3, [r5, #12]
 8000d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d10:	6928      	ldr	r0, [r5, #16]
 8000d12:	6020      	str	r0, [r4, #0]
 8000d14:	7d2b      	ldrb	r3, [r5, #20]
 8000d16:	7123      	strb	r3, [r4, #4]
 8000d18:	f107 0325 	add.w	r3, r7, #37	; 0x25
 8000d1c:	222b      	movs	r2, #43	; 0x2b
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f006 fb8e 	bl	8007442 <memset>

  float gyro_values[3];
  BSP_GYRO_GetXYZ(&gyro_values[0]);
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f004 fbb3 	bl	8005494 <BSP_GYRO_GetXYZ>

  int *ptr;

  // Assign the desired address to the pointer
  ptr = (int *)(0x48000000 + 0x10);
 8000d2e:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <read_and_transmit+0x14c>)
 8000d30:	657b      	str	r3, [r7, #84]	; 0x54

  // Dereference the pointer to get the value at that address
  int value = *ptr;
 8000d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	653b      	str	r3, [r7, #80]	; 0x50

  if((value&0x01) && (velocity < 4.2)){
 8000d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d020      	beq.n	8000d84 <read_and_transmit+0x8c>
 8000d42:	4b41      	ldr	r3, [pc, #260]	; (8000e48 <read_and_transmit+0x150>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fbfe 	bl	8000548 <__aeabi_f2d>
 8000d4c:	a334      	add	r3, pc, #208	; (adr r3, 8000e20 <read_and_transmit+0x128>)
 8000d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d52:	f7ff fec3 	bl	8000adc <__aeabi_dcmplt>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d013      	beq.n	8000d84 <read_and_transmit+0x8c>
	  velocity+=0.016;
 8000d5c:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <read_and_transmit+0x150>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fbf1 	bl	8000548 <__aeabi_f2d>
 8000d66:	a330      	add	r3, pc, #192	; (adr r3, 8000e28 <read_and_transmit+0x130>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	f7ff fa8e 	bl	800028c <__adddf3>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4610      	mov	r0, r2
 8000d76:	4619      	mov	r1, r3
 8000d78:	f7ff ff16 	bl	8000ba8 <__aeabi_d2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <read_and_transmit+0x150>)
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e024      	b.n	8000dce <read_and_transmit+0xd6>
  }
  else if(!(value&0x01) && (velocity > 0.01)){
 8000d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d11f      	bne.n	8000dce <read_and_transmit+0xd6>
 8000d8e:	4b2e      	ldr	r3, [pc, #184]	; (8000e48 <read_and_transmit+0x150>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fbd8 	bl	8000548 <__aeabi_f2d>
 8000d98:	a325      	add	r3, pc, #148	; (adr r3, 8000e30 <read_and_transmit+0x138>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff febb 	bl	8000b18 <__aeabi_dcmpgt>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d012      	beq.n	8000dce <read_and_transmit+0xd6>
	  velocity -= 0.02;
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <read_and_transmit+0x150>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fbcb 	bl	8000548 <__aeabi_f2d>
 8000db2:	a321      	add	r3, pc, #132	; (adr r3, 8000e38 <read_and_transmit+0x140>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fa66 	bl	8000288 <__aeabi_dsub>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fef0 	bl	8000ba8 <__aeabi_d2f>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4a1f      	ldr	r2, [pc, #124]	; (8000e48 <read_and_transmit+0x150>)
 8000dcc:	6013      	str	r3, [r2, #0]
  }

  sprintf(string_to_send, "%0.6f,%f\r\n", gyro_values[2]/20000, velocity);
 8000dce:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dd2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000e4c <read_and_transmit+0x154>
 8000dd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000dda:	ee16 0a90 	vmov	r0, s13
 8000dde:	f7ff fbb3 	bl	8000548 <__aeabi_f2d>
 8000de2:	4604      	mov	r4, r0
 8000de4:	460d      	mov	r5, r1
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <read_and_transmit+0x150>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fbac 	bl	8000548 <__aeabi_f2d>
 8000df0:	4602      	mov	r2, r0
 8000df2:	460b      	mov	r3, r1
 8000df4:	f107 0010 	add.w	r0, r7, #16
 8000df8:	e9cd 2300 	strd	r2, r3, [sp]
 8000dfc:	4622      	mov	r2, r4
 8000dfe:	462b      	mov	r3, r5
 8000e00:	4913      	ldr	r1, [pc, #76]	; (8000e50 <read_and_transmit+0x158>)
 8000e02:	f006 fabb 	bl	800737c <siprintf>
  SerialOutputString(string_to_send, &USART1_PORT);
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4912      	ldr	r1, [pc, #72]	; (8000e54 <read_and_transmit+0x15c>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 faae 	bl	800136e <SerialOutputString>
}
 8000e12:	bf00      	nop
 8000e14:	3758      	adds	r7, #88	; 0x58
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bdb0      	pop	{r4, r5, r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	f3af 8000 	nop.w
 8000e20:	cccccccd 	.word	0xcccccccd
 8000e24:	4010cccc 	.word	0x4010cccc
 8000e28:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e2c:	3f90624d 	.word	0x3f90624d
 8000e30:	47ae147b 	.word	0x47ae147b
 8000e34:	3f847ae1 	.word	0x3f847ae1
 8000e38:	47ae147b 	.word	0x47ae147b
 8000e3c:	3f947ae1 	.word	0x3f947ae1
 8000e40:	0800965c 	.word	0x0800965c
 8000e44:	48000010 	.word	0x48000010
 8000e48:	200006b0 	.word	0x200006b0
 8000e4c:	469c4000 	.word	0x469c4000
 8000e50:	08009650 	.word	0x08009650
 8000e54:	20000000 	.word	0x20000000

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5c:	f000 fe28 	bl	8001ab0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f822 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e64:	f000 f922 	bl	80010ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e68:	f000 f880 	bl	8000f6c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000e6c:	f000 f8be 	bl	8000fec <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000e70:	f000 f8fa 	bl	8001068 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8000e74:	f004 fa58 	bl	8005328 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();
 8000e78:	f004 f994 	bl	80051a4 <BSP_ACCELERO_Init>


  SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4908      	ldr	r1, [pc, #32]	; (8000ea0 <main+0x48>)
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 f9df 	bl	8001244 <SerialInitialise>

  enable_clocks();
 8000e86:	f7ff ff21 	bl	8000ccc <enable_clocks>
  trigger_prescaler(1000);
 8000e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8e:	f000 fdc8 	bl	8001a22 <trigger_prescaler>
  enable_interrupt_timer2();
 8000e92:	f000 fdaf 	bl	80019f4 <enable_interrupt_timer2>
  interval_mode(100, &read_and_transmit);
 8000e96:	4903      	ldr	r1, [pc, #12]	; (8000ea4 <main+0x4c>)
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f000 fd51 	bl	8001940 <interval_mode>
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <main+0x46>
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	08000cf9 	.word	0x08000cf9

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09e      	sub	sp, #120	; 0x78
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eb2:	2228      	movs	r2, #40	; 0x28
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f006 fac3 	bl	8007442 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ecc:	463b      	mov	r3, r7
 8000ece:	223c      	movs	r2, #60	; 0x3c
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 fab5 	bl	8007442 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000edc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2310      	movs	r3, #16
 8000eec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000efe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 f8d6 	bl	80030b4 <HAL_RCC_OscConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000f0e:	f000 f94b 	bl	80011a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f12:	230f      	movs	r3, #15
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f16:	2302      	movs	r3, #2
 8000f18:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f28:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 f8fe 	bl	8004130 <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3a:	f000 f935 	bl	80011a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <SystemClock_Config+0xc0>)
 8000f40:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fad4 	bl	80044fc <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000f5a:	f000 f925 	bl	80011a8 <Error_Handler>
  }
}
 8000f5e:	bf00      	nop
 8000f60:	3778      	adds	r7, #120	; 0x78
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	00020020 	.word	0x00020020

08000f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_I2C1_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <MX_I2C1_Init+0x7c>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fa8:	f001 f968 	bl	800227c <HAL_I2C_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fb2:	f000 f8f9 	bl	80011a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fba:	f001 ff11 	bl	8002de0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f000 f8f0 	bl	80011a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fcc:	f001 ff53 	bl	8002e76 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f8e7 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000030c 	.word	0x2000030c
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	2000090e 	.word	0x2000090e

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_SPI1_Init+0x74>)
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <MX_SPI1_Init+0x78>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_SPI1_Init+0x74>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_SPI1_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <MX_SPI1_Init+0x74>)
 8001006:	f44f 7240 	mov.w	r2, #768	; 0x300
 800100a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_SPI1_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <MX_SPI1_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_SPI1_Init+0x74>)
 800101a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800101e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001020:	4b0f      	ldr	r3, [pc, #60]	; (8001060 <MX_SPI1_Init+0x74>)
 8001022:	2208      	movs	r2, #8
 8001024:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <MX_SPI1_Init+0x74>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <MX_SPI1_Init+0x74>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <MX_SPI1_Init+0x74>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <MX_SPI1_Init+0x74>)
 800103a:	2207      	movs	r2, #7
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <MX_SPI1_Init+0x74>)
 8001046:	2208      	movs	r2, #8
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_SPI1_Init+0x74>)
 800104c:	f003 fc06 	bl	800485c <HAL_SPI_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001056:	f000 f8a7 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000360 	.word	0x20000360
 8001064:	40013000 	.word	0x40013000

08001068 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800106c:	4b0d      	ldr	r3, [pc, #52]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <MX_USB_PCD_Init+0x40>)
 8001070:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 8001074:	2208      	movs	r2, #8
 8001076:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 800107a:	2202      	movs	r2, #2
 800107c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 8001080:	2202      	movs	r2, #2
 8001082:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_USB_PCD_Init+0x3c>)
 8001092:	f001 ff3c 	bl	8002f0e <HAL_PCD_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800109c:	f000 f884 	bl	80011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200003c4 	.word	0x200003c4
 80010a8:	40005c00 	.word	0x40005c00

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c2:	4b37      	ldr	r3, [pc, #220]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010cc:	6153      	str	r3, [r2, #20]
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b2e      	ldr	r3, [pc, #184]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f2:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010f4:	695b      	ldr	r3, [r3, #20]
 80010f6:	4a2a      	ldr	r2, [pc, #168]	; (80011a0 <MX_GPIO_Init+0xf4>)
 80010f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010fc:	6153      	str	r3, [r2, #20]
 80010fe:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <MX_GPIO_Init+0xf4>)
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_GPIO_Init+0xf4>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a24      	ldr	r2, [pc, #144]	; (80011a0 <MX_GPIO_Init+0xf4>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <MX_GPIO_Init+0xf4>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	4b1f      	ldr	r3, [pc, #124]	; (80011a0 <MX_GPIO_Init+0xf4>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <MX_GPIO_Init+0xf4>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <MX_GPIO_Init+0xf4>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800113a:	2200      	movs	r2, #0
 800113c:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <MX_GPIO_Init+0xf8>)
 8001142:	f001 f883 	bl	800224c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001146:	2337      	movs	r3, #55	; 0x37
 8001148:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800114a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_GPIO_Init+0xf8>)
 800115c:	f000 fe20 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001160:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001164:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480a      	ldr	r0, [pc, #40]	; (80011a4 <MX_GPIO_Init+0xf8>)
 800117a:	f000 fe11 	bl	8001da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117e:	2301      	movs	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f000 fe04 	bl	8001da0 <HAL_GPIO_Init>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001000 	.word	0x48001000

080011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ac:	b672      	cpsid	i
}
 80011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <Error_Handler+0x8>
	...

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <SerialInitialise>:
		0x77};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop

	__disable_irq();
	serial_port->completion_function = completion_function;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <SerialInitialise+0xf4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a36      	ldr	r2, [pc, #216]	; (8001338 <SerialInitialise+0xf4>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <SerialInitialise+0xf4>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	4a33      	ldr	r2, [pc, #204]	; (8001338 <SerialInitialise+0xf4>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6193      	str	r3, [r2, #24]

	switch(serial_port->SerialPortGPIO) {
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d106      	bne.n	8001288 <SerialInitialise+0x44>
	case SERIAL_GPIO_C:
		RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800127a:	4b2f      	ldr	r3, [pc, #188]	; (8001338 <SerialInitialise+0xf4>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a2e      	ldr	r2, [pc, #184]	; (8001338 <SerialInitialise+0xf4>)
 8001280:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001284:	6153      	str	r3, [r2, #20]
		break;
 8001286:	e000      	b.n	800128a <SerialInitialise+0x46>
	default:
		break;
 8001288:	bf00      	nop
	}

	// set pin mode
	*(serial_port->SerialPinModeRegister) = serial_port->SerialPinModeValue;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001292:	601a      	str	r2, [r3, #0]

	// enable high speed clock for GPIOC
	*(serial_port->SerialPinSpeedRegister) = serial_port->SerialPinSpeedValue;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001298:	68ba      	ldr	r2, [r7, #8]
 800129a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800129c:	601a      	str	r2, [r3, #0]

	// set alternate function to enable USART to an external pin
	*(serial_port->SerialPinAlternatePinRegister) = serial_port->SerialPinAlternatePinValue;
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]

	*(serial_port->TimerEnableRegister) |= serial_port->TimerEnableMask;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	69d9      	ldr	r1, [r3, #28]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

	uint16_t *baud_rate_config = ((uint16_t*)serial_port->BaudRate); // only 16 bits used!
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d821      	bhi.n	800130e <SerialInitialise+0xca>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <SerialInitialise+0x8c>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012e5 	.word	0x080012e5
 80012d4:	080012ed 	.word	0x080012ed
 80012d8:	080012f5 	.word	0x080012f5
 80012dc:	080012fd 	.word	0x080012fd
 80012e0:	08001305 	.word	0x08001305
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2246      	movs	r2, #70	; 0x46
 80012e8:	801a      	strh	r2, [r3, #0]
		break;
 80012ea:	e010      	b.n	800130e <SerialInitialise+0xca>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2246      	movs	r2, #70	; 0x46
 80012f0:	801a      	strh	r2, [r3, #0]
		break;
 80012f2:	e00c      	b.n	800130e <SerialInitialise+0xca>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2246      	movs	r2, #70	; 0x46
 80012f8:	801a      	strh	r2, [r3, #0]
		break;
 80012fa:	e008      	b.n	800130e <SerialInitialise+0xca>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2246      	movs	r2, #70	; 0x46
 8001300:	801a      	strh	r2, [r3, #0]
		break;
 8001302:	e004      	b.n	800130e <SerialInitialise+0xca>
	case BAUD_115200:
		*baud_rate_config = 0x46 * 0x06;  // 115200 at 8MHz
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800130a:	801a      	strh	r2, [r3, #0]
		break;
 800130c:	bf00      	nop
	}


	// enable serial port for tx and rx
	*(serial_port->ControlRegister1) |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 800131c:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART1_IRQn, 1);  // Set Priority
 800131e:	2101      	movs	r1, #1
 8001320:	2025      	movs	r0, #37	; 0x25
 8001322:	f7ff ff65 	bl	80011f0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 8001326:	2025      	movs	r0, #37	; 0x25
 8001328:	f7ff ff44 	bl	80011b4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800132c:	b662      	cpsie	i
}
 800132e:	bf00      	nop

	__enable_irq();
}
 8001330:	bf00      	nop
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40021000 	.word	0x40021000

0800133c <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
	while((*(serial_port->StatusRegister) & USART_ISR_TXE) == 0){
 8001348:	bf00      	nop
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f8      	beq.n	800134a <SerialOutputChar+0xe>
	}

	*(serial_port->DataOutputRegister) = data;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	b292      	uxth	r2, r2
 8001360:	801a      	strh	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 800137c:	e00b      	b.n	8001396 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	6839      	ldr	r1, [r7, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ffd9 	bl	800133c <SerialOutputChar>
		counter++;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
		pt++;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3301      	adds	r3, #1
 8001394:	607b      	str	r3, [r7, #4]
	while(*pt) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1ef      	bne.n	800137e <SerialOutputString+0x10>
	}

	if (serial_port->completion_function != 0x00)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <SerialOutputString+0x40>
		serial_port->completion_function(counter);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	4798      	blx	r3
}
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <SerialReceiveChar>:


// returns 1 if valid char, 0 if timeout
uint8_t SerialReceiveChar(SerialPort *serial_port, uint8_t *received_char)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
	uint16_t timeout = 0xffff;
 80013c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c4:	81fb      	strh	r3, [r7, #14]
	while (1) {
		timeout--;
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	81fb      	strh	r3, [r7, #14]
		if (timeout == 0)
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <SerialReceiveChar+0x20>
			return 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e026      	b.n	8001424 <SerialReceiveChar+0x6e>

		if (*(serial_port->StatusRegister) & USART_ISR_ORE || *(serial_port->StatusRegister) & USART_ISR_FE) {
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <SerialReceiveChar+0x3c>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d007      	beq.n	8001402 <SerialReceiveChar+0x4c>
			*(serial_port->FlagClearRegister) |= USART_ICR_ORECF | USART_ICR_FECF;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f042 020a 	orr.w	r2, r2, #10
 8001400:	601a      	str	r2, [r3, #0]
		}

		if (*(serial_port->StatusRegister) & USART_ISR_RXNE) { // Wait for RXNE flag to be set
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d100      	bne.n	8001412 <SerialReceiveChar+0x5c>
		timeout--;
 8001410:	e7d9      	b.n	80013c6 <SerialReceiveChar+0x10>
			break;
 8001412:	bf00      	nop
		}
	}
	*received_char = *(serial_port->DataInputRegister);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	b2da      	uxtb	r2, r3
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	701a      	strb	r2, [r3, #0]
	return 1;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001466:	2007      	movs	r0, #7
 8001468:	f000 fc58 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	; 0x28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <HAL_I2C_MspInit+0x7c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d127      	bne.n	80014ea <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_I2C_MspInit+0x80>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_I2C_MspInit+0x80>)
 80014a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_I2C_MspInit+0x80>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80014b2:	23c0      	movs	r3, #192	; 0xc0
 80014b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b6:	2312      	movs	r3, #18
 80014b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014c2:	2304      	movs	r3, #4
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	480b      	ldr	r0, [pc, #44]	; (80014fc <HAL_I2C_MspInit+0x84>)
 80014ce:	f000 fc67 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014d2:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_I2C_MspInit+0x80>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a08      	ldr	r2, [pc, #32]	; (80014f8 <HAL_I2C_MspInit+0x80>)
 80014d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014dc:	61d3      	str	r3, [r2, #28]
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_I2C_MspInit+0x80>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40005400 	.word	0x40005400
 80014f8:	40021000 	.word	0x40021000
 80014fc:	48000400 	.word	0x48000400

08001500 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_I2C_MspDeInit+0x38>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10d      	bne.n	800152e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_I2C_MspDeInit+0x3c>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_I2C_MspDeInit+0x3c>)
 8001518:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800151c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 800151e:	2140      	movs	r1, #64	; 0x40
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <HAL_I2C_MspDeInit+0x40>)
 8001522:	f000 fdb7 	bl	8002094 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <HAL_I2C_MspDeInit+0x40>)
 800152a:	f000 fdb3 	bl	8002094 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40005400 	.word	0x40005400
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400

08001544 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_SPI_MspInit+0x7c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d128      	bne.n	80015b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_SPI_MspInit+0x80>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	4a16      	ldr	r2, [pc, #88]	; (80015c4 <HAL_SPI_MspInit+0x80>)
 800156c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001570:	6193      	str	r3, [r2, #24]
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <HAL_SPI_MspInit+0x80>)
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_SPI_MspInit+0x80>)
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_SPI_MspInit+0x80>)
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	6153      	str	r3, [r2, #20]
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_SPI_MspInit+0x80>)
 800158c:	695b      	ldr	r3, [r3, #20]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8001596:	23e0      	movs	r3, #224	; 0xe0
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015a6:	2305      	movs	r3, #5
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	4619      	mov	r1, r3
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f000 fbf4 	bl	8001da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015b8:	bf00      	nop
 80015ba:	3728      	adds	r7, #40	; 0x28
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013000 	.word	0x40013000
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_SPI_MspDeInit+0x30>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10a      	bne.n	80015f0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_SPI_MspDeInit+0x34>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_SPI_MspDeInit+0x34>)
 80015e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015e4:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 80015e6:	21e0      	movs	r1, #224	; 0xe0
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f000 fd52 	bl	8002094 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_PCD_MspInit+0x80>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d129      	bne.n	8001676 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_PCD_MspInit+0x84>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_PCD_MspInit+0x84>)
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	6153      	str	r3, [r2, #20]
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <HAL_PCD_MspInit+0x84>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800163a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800164c:	230e      	movs	r3, #14
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165a:	f000 fba1 	bl	8001da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_PCD_MspInit+0x84>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_PCD_MspInit+0x84>)
 8001664:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001668:	61d3      	str	r3, [r2, #28]
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_PCD_MspInit+0x84>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40005c00 	.word	0x40005c00
 8001684:	40021000 	.word	0x40021000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 fa32 	bl	8001b3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
	return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <_kill>:

int _kill(int pid, int sig)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016f6:	f005 fef7 	bl	80074e8 <__errno>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2216      	movs	r2, #22
 80016fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_exit>:

void _exit (int status)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ffe7 	bl	80016ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800171e:	e7fe      	b.n	800171e <_exit+0x12>

08001720 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e00a      	b.n	8001748 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001732:	f3af 8000 	nop.w
 8001736:	4601      	mov	r1, r0
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	60ba      	str	r2, [r7, #8]
 800173e:	b2ca      	uxtb	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf0      	blt.n	8001732 <_read+0x12>
	}

return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	e009      	b.n	8001780 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	60ba      	str	r2, [r7, #8]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf1      	blt.n	800176c <_write+0x12>
	}
	return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_close>:

int _close(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	return -1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ba:	605a      	str	r2, [r3, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <_isatty>:

int _isatty(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	return 1;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <_sbrk+0x5c>)
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <_sbrk+0x60>)
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001810:	4b13      	ldr	r3, [pc, #76]	; (8001860 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <_sbrk+0x64>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <_sbrk+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	429a      	cmp	r2, r3
 800182a:	d207      	bcs.n	800183c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800182c:	f005 fe5c 	bl	80074e8 <__errno>
 8001830:	4603      	mov	r3, r0
 8001832:	220c      	movs	r2, #12
 8001834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e009      	b.n	8001850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <_sbrk+0x64>)
 800184c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184e:	68fb      	ldr	r3, [r7, #12]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3718      	adds	r7, #24
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	2000a000 	.word	0x2000a000
 800185c:	00000400 	.word	0x00000400
 8001860:	200006b4 	.word	0x200006b4
 8001864:	200008c8 	.word	0x200008c8

08001868 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <SystemInit+0x20>)
 800186e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001872:	4a05      	ldr	r2, [pc, #20]	; (8001888 <SystemInit+0x20>)
 8001874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_EnableIRQ>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	2b00      	cmp	r3, #0
 800189c:	db0b      	blt.n	80018b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	f003 021f 	and.w	r2, r3, #31
 80018a4:	4907      	ldr	r1, [pc, #28]	; (80018c4 <__NVIC_EnableIRQ+0x38>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	2001      	movs	r0, #1
 80018ae:	fa00 f202 	lsl.w	r2, r0, r2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000e100 	.word	0xe000e100

080018c8 <__NVIC_SetPriority>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db0a      	blt.n	80018f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	490c      	ldr	r1, [pc, #48]	; (8001914 <__NVIC_SetPriority+0x4c>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	0112      	lsls	r2, r2, #4
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	440b      	add	r3, r1
 80018ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018f0:	e00a      	b.n	8001908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4908      	ldr	r1, [pc, #32]	; (8001918 <__NVIC_SetPriority+0x50>)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	3b04      	subs	r3, #4
 8001900:	0112      	lsls	r2, r2, #4
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	440b      	add	r3, r1
 8001906:	761a      	strb	r2, [r3, #24]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000e100 	.word	0xe000e100
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <reset_modes>:
	}
}

// The purpose of this function is to reset the current mode the timer is working
// Doing this ensures that only one mode is currently running at a time
void reset_modes(){
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
	continous_mode = 0;							// Resets continous mode
 8001920:	4b05      	ldr	r3, [pc, #20]	; (8001938 <reset_modes+0x1c>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
	one_shot_mode = 0;							// Resets one shot mode
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <reset_modes+0x20>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	200006bc 	.word	0x200006bc
 800193c:	200006bd 	.word	0x200006bd

08001940 <interval_mode>:
	finished_interval = display_func;

}

// This function intialises the callback function and sets the mode to continous mode
void interval_mode(uint32_t period, void(*display_func)(void)){// j
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
	reset_modes();
 800194a:	f7ff ffe7 	bl	800191c <reset_modes>
	continous_mode = 1;
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <interval_mode+0x44>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
	newPeriod = period;// j
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <interval_mode+0x48>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
	set_period(newPeriod);//j
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <interval_mode+0x48>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f816 	bl	8001990 <set_period>
	TIM2->CR1 |= TIM_CR1_CEN; 					// enable timer2
 8001964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]
	finished_interval = display_func;// j
 8001974:	4a05      	ldr	r2, [pc, #20]	; (800198c <interval_mode+0x4c>)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	6013      	str	r3, [r2, #0]
}// j
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200006bc 	.word	0x200006bc
 8001988:	20000044 	.word	0x20000044
 800198c:	200006b8 	.word	0x200006b8

08001990 <set_period>:

// This function changes the current period
void set_period(uint32_t period){// j
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
	TIM2->CNT = 0x00;// j
 8001998:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800199c:	2200      	movs	r2, #0
 800199e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->ARR = newPeriod - 1;// j
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <set_period+0x28>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a8:	3b01      	subs	r3, #1
 80019aa:	62d3      	str	r3, [r2, #44]	; 0x2c

}// j
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000044 	.word	0x20000044

080019bc <TIM2_IRQHandler>:


void TIM2_IRQHandler(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	if ((TIM2->SR & TIM_SR_UIF) != 0) {			// check update interrupt flag timer2
 80019c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00e      	beq.n	80019ec <TIM2_IRQHandler+0x30>
        TIM2->SR &= ~TIM_SR_UIF; 				// Clear the update interrupt flag
 80019ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6113      	str	r3, [r2, #16]
        										// Set LEDs to OFF state after timer expires
        //display(); 								// Update the LEDs to OFF state
        if (finished_interval != 0x00){
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <TIM2_IRQHandler+0x34>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <TIM2_IRQHandler+0x30>
        	finished_interval();
 80019e6:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <TIM2_IRQHandler+0x34>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4798      	blx	r3
        }

	}
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	200006b8 	.word	0x200006b8

080019f4 <enable_interrupt_timer2>:

void enable_interrupt_timer2(void) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
    __disable_irq();
    TIM2->DIER |= TIM_DIER_UIE; 				// Enable update interrupt for timer 2
 80019fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	60d3      	str	r3, [r2, #12]
    NVIC_SetPriority(TIM2_IRQn, 0); 			// Set Priority
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	201c      	movs	r0, #28
 8001a10:	f7ff ff5a 	bl	80018c8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TIM2_IRQn); 					// Enable interrupts for timer 2
 8001a14:	201c      	movs	r0, #28
 8001a16:	f7ff ff39 	bl	800188c <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a1a:	b662      	cpsie	i
}
 8001a1c:	bf00      	nop
    __enable_irq();
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <trigger_prescaler>:

void trigger_prescaler(uint32_t periodInSeconds) {
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
    TIM2->CR1 = 0;
 8001a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
    TIM2->PSC = 7999;
 8001a32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a3a:	629a      	str	r2, [r3, #40]	; 0x28

    TIM2->ARR = periodInSeconds - 1;
 8001a3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	62d3      	str	r3, [r2, #44]	; 0x2c
    TIM2->EGR = TIM_EGR_UG;
 8001a46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	615a      	str	r2, [r3, #20]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a60:	f7ff ff02 	bl	8001868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a66:	490d      	ldr	r1, [pc, #52]	; (8001a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a68:	4a0d      	ldr	r2, [pc, #52]	; (8001aa0 <LoopForever+0xe>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a6c:	e002      	b.n	8001a74 <LoopCopyDataInit>

08001a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a72:	3304      	adds	r3, #4

08001a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a78:	d3f9      	bcc.n	8001a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a7c:	4c0a      	ldr	r4, [pc, #40]	; (8001aa8 <LoopForever+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a80:	e001      	b.n	8001a86 <LoopFillZerobss>

08001a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a84:	3204      	adds	r2, #4

08001a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a88:	d3fb      	bcc.n	8001a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f005 fd33 	bl	80074f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a8e:	f7ff f9e3 	bl	8000e58 <main>

08001a92 <LoopForever>:

LoopForever:
    b LoopForever
 8001a92:	e7fe      	b.n	8001a92 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a94:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8001aa0:	08009a1c 	.word	0x08009a1c
  ldr r2, =_sbss
 8001aa4:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 8001aa8:	200008c8 	.word	0x200008c8

08001aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC1_2_IRQHandler>
	...

08001ab0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ab4:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <HAL_Init+0x28>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <HAL_Init+0x28>)
 8001aba:	f043 0310 	orr.w	r3, r3, #16
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ac0:	2003      	movs	r0, #3
 8001ac2:	f000 f92b 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f000 f808 	bl	8001adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001acc:	f7ff fcb0 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40022000 	.word	0x40022000

08001adc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_InitTick+0x54>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_InitTick+0x58>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f000 f943 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e00e      	b.n	8001b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0f      	cmp	r3, #15
 8001b0e:	d80a      	bhi.n	8001b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b10:	2200      	movs	r2, #0
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	f000 f90b 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_InitTick+0x5c>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	e000      	b.n	8001b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20000040 	.word	0x20000040
 8001b34:	2000004c 	.word	0x2000004c
 8001b38:	20000048 	.word	0x20000048

08001b3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_IncTick+0x20>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	461a      	mov	r2, r3
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_IncTick+0x24>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <HAL_IncTick+0x24>)
 8001b4e:	6013      	str	r3, [r2, #0]
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	2000004c 	.word	0x2000004c
 8001b60:	200006c0 	.word	0x200006c0

08001b64 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <HAL_GetTick+0x14>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	200006c0 	.word	0x200006c0

08001b7c <__NVIC_SetPriorityGrouping>:
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <__NVIC_EnableIRQ+0x38>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000e100 	.word	0xe000e100

08001c1c <__NVIC_SetPriority>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff29 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff3e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff8e 	bl	8001c70 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5d 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff31 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dae:	e154      	b.n	800205a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8146 	beq.w	8002054 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d005      	beq.n	8001de0 <HAL_GPIO_Init+0x40>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d130      	bne.n	8001e42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	2203      	movs	r2, #3
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	4013      	ands	r3, r2
 8001df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e16:	2201      	movs	r2, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	f003 0201 	and.w	r2, r3, #1
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d017      	beq.n	8001e7e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	2203      	movs	r2, #3
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	689a      	ldr	r2, [r3, #8]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d123      	bne.n	8001ed2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	220f      	movs	r2, #15
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	08da      	lsrs	r2, r3, #3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3208      	adds	r2, #8
 8001ecc:	6939      	ldr	r1, [r7, #16]
 8001ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0203 	and.w	r2, r3, #3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 80a0 	beq.w	8002054 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f14:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_GPIO_Init+0x2d8>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_GPIO_Init+0x2d8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b55      	ldr	r3, [pc, #340]	; (8002078 <HAL_GPIO_Init+0x2d8>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f2c:	4a53      	ldr	r2, [pc, #332]	; (800207c <HAL_GPIO_Init+0x2dc>)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	3302      	adds	r3, #2
 8001f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	220f      	movs	r2, #15
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f56:	d019      	beq.n	8001f8c <HAL_GPIO_Init+0x1ec>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a49      	ldr	r2, [pc, #292]	; (8002080 <HAL_GPIO_Init+0x2e0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1e8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a48      	ldr	r2, [pc, #288]	; (8002084 <HAL_GPIO_Init+0x2e4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1e4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a47      	ldr	r2, [pc, #284]	; (8002088 <HAL_GPIO_Init+0x2e8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1e0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a46      	ldr	r2, [pc, #280]	; (800208c <HAL_GPIO_Init+0x2ec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e008      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f7c:	2305      	movs	r3, #5
 8001f7e:	e006      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f80:	2303      	movs	r3, #3
 8001f82:	e004      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e002      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e000      	b.n	8001f8e <HAL_GPIO_Init+0x1ee>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	f002 0203 	and.w	r2, r2, #3
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	4093      	lsls	r3, r2
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f9e:	4937      	ldr	r1, [pc, #220]	; (800207c <HAL_GPIO_Init+0x2dc>)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3302      	adds	r3, #2
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fac:	4b38      	ldr	r3, [pc, #224]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd6:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ffa:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002000:	4b23      	ldr	r3, [pc, #140]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	43db      	mvns	r3, r3
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002024:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202a:	4b19      	ldr	r3, [pc, #100]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43db      	mvns	r3, r3
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	4013      	ands	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_GPIO_Init+0x2f0>)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	3301      	adds	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f aea3 	bne.w	8001db0 <HAL_GPIO_Init+0x10>
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40021000 	.word	0x40021000
 800207c:	40010000 	.word	0x40010000
 8002080:	48000400 	.word	0x48000400
 8002084:	48000800 	.word	0x48000800
 8002088:	48000c00 	.word	0x48000c00
 800208c:	48001000 	.word	0x48001000
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80020a2:	e0b8      	b.n	8002216 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80020a4:	2201      	movs	r2, #1
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ab 	beq.w	8002210 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_GPIO_DeInit+0x1a0>)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4013      	ands	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020e2:	d019      	beq.n	8002118 <HAL_GPIO_DeInit+0x84>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a54      	ldr	r2, [pc, #336]	; (8002238 <HAL_GPIO_DeInit+0x1a4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d013      	beq.n	8002114 <HAL_GPIO_DeInit+0x80>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a53      	ldr	r2, [pc, #332]	; (800223c <HAL_GPIO_DeInit+0x1a8>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d00d      	beq.n	8002110 <HAL_GPIO_DeInit+0x7c>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a52      	ldr	r2, [pc, #328]	; (8002240 <HAL_GPIO_DeInit+0x1ac>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d007      	beq.n	800210c <HAL_GPIO_DeInit+0x78>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a51      	ldr	r2, [pc, #324]	; (8002244 <HAL_GPIO_DeInit+0x1b0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d101      	bne.n	8002108 <HAL_GPIO_DeInit+0x74>
 8002104:	2304      	movs	r3, #4
 8002106:	e008      	b.n	800211a <HAL_GPIO_DeInit+0x86>
 8002108:	2305      	movs	r3, #5
 800210a:	e006      	b.n	800211a <HAL_GPIO_DeInit+0x86>
 800210c:	2303      	movs	r3, #3
 800210e:	e004      	b.n	800211a <HAL_GPIO_DeInit+0x86>
 8002110:	2302      	movs	r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_DeInit+0x86>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_GPIO_DeInit+0x86>
 8002118:	2300      	movs	r3, #0
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	f002 0203 	and.w	r2, r2, #3
 8002120:	0092      	lsls	r2, r2, #2
 8002122:	4093      	lsls	r3, r2
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	429a      	cmp	r2, r3
 8002128:	d132      	bne.n	8002190 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	4945      	ldr	r1, [pc, #276]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 8002134:	4013      	ands	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002138:	4b43      	ldr	r3, [pc, #268]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	4941      	ldr	r1, [pc, #260]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 8002142:	4013      	ands	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	493e      	ldr	r1, [pc, #248]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 8002150:	4013      	ands	r3, r2
 8002152:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	493a      	ldr	r1, [pc, #232]	; (8002248 <HAL_GPIO_DeInit+0x1b4>)
 800215e:	4013      	ands	r3, r2
 8002160:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002172:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_GPIO_DeInit+0x1a0>)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	3302      	adds	r3, #2
 800217a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43da      	mvns	r2, r3
 8002182:	482c      	ldr	r0, [pc, #176]	; (8002234 <HAL_GPIO_DeInit+0x1a0>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	400a      	ands	r2, r1
 800218a:	3302      	adds	r3, #2
 800218c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2103      	movs	r1, #3
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	08da      	lsrs	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3208      	adds	r2, #8
 80021ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	08d2      	lsrs	r2, r2, #3
 80021c6:	4019      	ands	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3208      	adds	r2, #8
 80021cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2103      	movs	r1, #3
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43db      	mvns	r3, r3
 80021e0:	401a      	ands	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	2101      	movs	r1, #1
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2103      	movs	r1, #3
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3301      	adds	r3, #1
 8002214:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa22 f303 	lsr.w	r3, r2, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	f47f af40 	bne.w	80020a4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40010000 	.word	0x40010000
 8002238:	48000400 	.word	0x48000400
 800223c:	48000800 	.word	0x48000800
 8002240:	48000c00 	.word	0x48000c00
 8002244:	48001000 	.word	0x48001000
 8002248:	40010400 	.word	0x40010400

0800224c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]
 8002258:	4613      	mov	r3, r2
 800225a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800225c:	787b      	ldrb	r3, [r7, #1]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002262:	887a      	ldrh	r2, [r7, #2]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002268:	e002      	b.n	8002270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e081      	b.n	8002392 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d106      	bne.n	80022a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f8e8 	bl	8001478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	e006      	b.n	8002304 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002302:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d104      	bne.n	8002316 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69d9      	ldr	r1, [r3, #28]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1a      	ldr	r2, [r3, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e021      	b.n	80023f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff f89b 	bl	8001500 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	817b      	strh	r3, [r7, #10]
 800240a:	460b      	mov	r3, r1
 800240c:	813b      	strh	r3, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b20      	cmp	r3, #32
 800241c:	f040 80f9 	bne.w	8002612 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_I2C_Mem_Write+0x34>
 8002426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002428:	2b00      	cmp	r3, #0
 800242a:	d105      	bne.n	8002438 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002432:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0ed      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_I2C_Mem_Write+0x4e>
 8002442:	2302      	movs	r3, #2
 8002444:	e0e6      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800244e:	f7ff fb89 	bl	8001b64 <HAL_GetTick>
 8002452:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2319      	movs	r3, #25
 800245a:	2201      	movs	r2, #1
 800245c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 fad1 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d1      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2221      	movs	r2, #33	; 0x21
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2240      	movs	r2, #64	; 0x40
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a3a      	ldr	r2, [r7, #32]
 800248a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002498:	88f8      	ldrh	r0, [r7, #6]
 800249a:	893a      	ldrh	r2, [r7, #8]
 800249c:	8979      	ldrh	r1, [r7, #10]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	9301      	str	r3, [sp, #4]
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4603      	mov	r3, r0
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f9e1 	bl	8002870 <I2C_RequestMemoryWrite>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0a9      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	2bff      	cmp	r3, #255	; 0xff
 80024c8:	d90e      	bls.n	80024e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	22ff      	movs	r2, #255	; 0xff
 80024ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	8979      	ldrh	r1, [r7, #10]
 80024d8:	2300      	movs	r3, #0
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 fc4b 	bl	8002d7c <I2C_TransferConfig>
 80024e6:	e00f      	b.n	8002508 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	8979      	ldrh	r1, [r7, #10]
 80024fa:	2300      	movs	r3, #0
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fc3a 	bl	8002d7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 faca 	bl	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e07b      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	781a      	ldrb	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d034      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x1c8>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d130      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	2200      	movs	r2, #0
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 fa4d 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e04d      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2bff      	cmp	r3, #255	; 0xff
 8002580:	d90e      	bls.n	80025a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	22ff      	movs	r2, #255	; 0xff
 8002586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	b2da      	uxtb	r2, r3
 800258e:	8979      	ldrh	r1, [r7, #10]
 8002590:	2300      	movs	r3, #0
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fbef 	bl	8002d7c <I2C_TransferConfig>
 800259e:	e00f      	b.n	80025c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	8979      	ldrh	r1, [r7, #10]
 80025b2:	2300      	movs	r3, #0
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 fbde 	bl	8002d7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d19e      	bne.n	8002508 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fab0 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e01a      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2220      	movs	r2, #32
 80025e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b0a      	ldr	r3, [pc, #40]	; (800261c <HAL_I2C_Mem_Write+0x224>)
 80025f2:	400b      	ands	r3, r1
 80025f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
  }
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	fe00e800 	.word	0xfe00e800

08002620 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 80fd 	bne.w	8002842 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_I2C_Mem_Read+0x34>
 800264e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0f1      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Read+0x4e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ea      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002676:	f7ff fa75 	bl	8001b64 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2319      	movs	r3, #25
 8002682:	2201      	movs	r2, #1
 8002684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f9bd 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d5      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2222      	movs	r2, #34	; 0x22
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	; 0x40
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c0:	88f8      	ldrh	r0, [r7, #6]
 80026c2:	893a      	ldrh	r2, [r7, #8]
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4603      	mov	r3, r0
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f921 	bl	8002918 <I2C_RequestMemoryRead>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0ad      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d90e      	bls.n	8002710 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	4b52      	ldr	r3, [pc, #328]	; (800284c <HAL_I2C_Mem_Read+0x22c>)
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fb37 	bl	8002d7c <I2C_TransferConfig>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	4b4a      	ldr	r3, [pc, #296]	; (800284c <HAL_I2C_Mem_Read+0x22c>)
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fb26 	bl	8002d7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002736:	2200      	movs	r2, #0
 8002738:	2104      	movs	r1, #4
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f964 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e07c      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	3b01      	subs	r3, #1
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d034      	beq.n	80027f0 <HAL_I2C_Mem_Read+0x1d0>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d130      	bne.n	80027f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002794:	2200      	movs	r2, #0
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f935 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e04d      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2bff      	cmp	r3, #255	; 0xff
 80027b0:	d90e      	bls.n	80027d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	22ff      	movs	r2, #255	; 0xff
 80027b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	2300      	movs	r3, #0
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fad7 	bl	8002d7c <I2C_TransferConfig>
 80027ce:	e00f      	b.n	80027f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	8979      	ldrh	r1, [r7, #10]
 80027e2:	2300      	movs	r3, #0
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fac6 	bl	8002d7c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d19a      	bne.n	8002730 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 f998 	bl	8002b34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e01a      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2220      	movs	r2, #32
 8002814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_I2C_Mem_Read+0x230>)
 8002822:	400b      	ands	r3, r1
 8002824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3718      	adds	r7, #24
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	80002400 	.word	0x80002400
 8002850:	fe00e800 	.word	0xfe00e800

08002854 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002862:	b2db      	uxtb	r3, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	4608      	mov	r0, r1
 800287a:	4611      	mov	r1, r2
 800287c:	461a      	mov	r2, r3
 800287e:	4603      	mov	r3, r0
 8002880:	817b      	strh	r3, [r7, #10]
 8002882:	460b      	mov	r3, r1
 8002884:	813b      	strh	r3, [r7, #8]
 8002886:	4613      	mov	r3, r2
 8002888:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	4b20      	ldr	r3, [pc, #128]	; (8002914 <I2C_RequestMemoryWrite+0xa4>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 fa6f 	bl	8002d7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	69b9      	ldr	r1, [r7, #24]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f8ff 	bl	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e02c      	b.n	800290c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d105      	bne.n	80028c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028b8:	893b      	ldrh	r3, [r7, #8]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	629a      	str	r2, [r3, #40]	; 0x28
 80028c2:	e015      	b.n	80028f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f8e5 	bl	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e012      	b.n	800290c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e6:	893b      	ldrh	r3, [r7, #8]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f884 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	80002000 	.word	0x80002000

08002918 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af02      	add	r7, sp, #8
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	4608      	mov	r0, r1
 8002922:	4611      	mov	r1, r2
 8002924:	461a      	mov	r2, r3
 8002926:	4603      	mov	r3, r0
 8002928:	817b      	strh	r3, [r7, #10]
 800292a:	460b      	mov	r3, r1
 800292c:	813b      	strh	r3, [r7, #8]
 800292e:	4613      	mov	r3, r2
 8002930:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8979      	ldrh	r1, [r7, #10]
 8002938:	4b20      	ldr	r3, [pc, #128]	; (80029bc <I2C_RequestMemoryRead+0xa4>)
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2300      	movs	r3, #0
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 fa1c 	bl	8002d7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002944:	69fa      	ldr	r2, [r7, #28]
 8002946:	69b9      	ldr	r1, [r7, #24]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 f8ac 	bl	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e02c      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002958:	88fb      	ldrh	r3, [r7, #6]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d105      	bne.n	800296a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800295e:	893b      	ldrh	r3, [r7, #8]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
 8002968:	e015      	b.n	8002996 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800296a:	893b      	ldrh	r3, [r7, #8]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	b29b      	uxth	r3, r3
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f892 	bl	8002aa6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e012      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800298c:	893b      	ldrh	r3, [r7, #8]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2200      	movs	r2, #0
 800299e:	2140      	movs	r1, #64	; 0x40
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f831 	bl	8002a08 <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	80002000 	.word	0x80002000

080029c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d103      	bne.n	80029de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d007      	beq.n	80029fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	619a      	str	r2, [r3, #24]
  }
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	4613      	mov	r3, r2
 8002a16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a18:	e031      	b.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d02d      	beq.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a22:	f7ff f89f 	bl	8001b64 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d122      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699a      	ldr	r2, [r3, #24]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4013      	ands	r3, r2
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	bf0c      	ite	eq
 8002a48:	2301      	moveq	r3, #1
 8002a4a:	2300      	movne	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d113      	bne.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d0be      	beq.n	8002a1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b084      	sub	sp, #16
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ab2:	e033      	b.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	68b9      	ldr	r1, [r7, #8]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f87f 	bl	8002bbc <I2C_IsErrorOccurred>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e031      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d025      	beq.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad0:	f7ff f848 	bl	8001b64 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11a      	bne.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d013      	beq.n	8002b1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	f043 0220 	orr.w	r2, r3, #32
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e007      	b.n	8002b2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d1c4      	bne.n	8002ab4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b40:	e02f      	b.n	8002ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	68b9      	ldr	r1, [r7, #8]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f838 	bl	8002bbc <I2C_IsErrorOccurred>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e02d      	b.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7ff f805 	bl	8001b64 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d11a      	bne.n	8002ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d013      	beq.n	8002ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e007      	b.n	8002bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d1c8      	bne.n	8002b42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08a      	sub	sp, #40	; 0x28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d068      	beq.n	8002cba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2210      	movs	r2, #16
 8002bee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bf0:	e049      	b.n	8002c86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d045      	beq.n	8002c86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7fe ffb3 	bl	8001b64 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <I2C_IsErrorOccurred+0x54>
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d13a      	bne.n	8002c86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c32:	d121      	bne.n	8002c78 <I2C_IsErrorOccurred+0xbc>
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3a:	d01d      	beq.n	8002c78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b20      	cmp	r3, #32
 8002c40:	d01a      	beq.n	8002c78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c52:	f7fe ff87 	bl	8001b64 <HAL_GetTick>
 8002c56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c58:	e00e      	b.n	8002c78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c5a:	f7fe ff83 	bl	8001b64 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b19      	cmp	r3, #25
 8002c66:	d907      	bls.n	8002c78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002c76:	e006      	b.n	8002c86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d1e9      	bne.n	8002c5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f003 0320 	and.w	r3, r3, #32
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	d003      	beq.n	8002c9c <I2C_IsErrorOccurred+0xe0>
 8002c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0aa      	beq.n	8002bf2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d103      	bne.n	8002cac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00b      	beq.n	8002ce4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f043 0301 	orr.w	r3, r3, #1
 8002cd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f043 0308 	orr.w	r3, r3, #8
 8002cf4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d01c      	beq.n	8002d6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fe45 	bl	80029c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <I2C_IsErrorOccurred+0x1bc>)
 8002d42:	400b      	ands	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002d6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	fe00e800 	.word	0xfe00e800

08002d7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	460b      	mov	r3, r1
 8002d88:	817b      	strh	r3, [r7, #10]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d94:	7a7b      	ldrb	r3, [r7, #9]
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002daa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	6a3b      	ldr	r3, [r7, #32]
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002dba:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <I2C_TransferConfig+0x60>)
 8002dbc:	430b      	orrs	r3, r1
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	ea02 0103 	and.w	r1, r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	03ff63ff 	.word	0x03ff63ff

08002de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d138      	bne.n	8002e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e032      	b.n	8002e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6819      	ldr	r1, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d139      	bne.n	8002f00 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e033      	b.n	8002f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2224      	movs	r2, #36	; 0x24
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f10:	b08b      	sub	sp, #44	; 0x2c
 8002f12:	af06      	add	r7, sp, #24
 8002f14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0c4      	b.n	80030aa <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fe fb63 	bl	8001600 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 f8f0 	bl	800512c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	e040      	b.n	8002fd4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	1c5a      	adds	r2, r3, #1
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	3301      	adds	r3, #1
 8002f64:	2201      	movs	r2, #1
 8002f66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	7bfa      	ldrb	r2, [r7, #15]
 8002f7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3303      	adds	r3, #3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3338      	adds	r3, #56	; 0x38
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	00db      	lsls	r3, r3, #3
 8002fb2:	440b      	add	r3, r1
 8002fb4:	333c      	adds	r3, #60	; 0x3c
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fba:	7bfa      	ldrb	r2, [r7, #15]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3340      	adds	r3, #64	; 0x40
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d3b9      	bcc.n	8002f52 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e044      	b.n	800306e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ffa:	7bfa      	ldrb	r2, [r7, #15]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800300c:	7bfa      	ldrb	r2, [r7, #15]
 800300e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	440b      	add	r3, r1
 800304a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	4413      	add	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	440b      	add	r3, r1
 8003060:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	3301      	adds	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	429a      	cmp	r2, r3
 8003076:	d3b5      	bcc.n	8002fe4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	687e      	ldr	r6, [r7, #4]
 8003080:	466d      	mov	r5, sp
 8003082:	f106 0410 	add.w	r4, r6, #16
 8003086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	602b      	str	r3, [r5, #0]
 800308e:	1d33      	adds	r3, r6, #4
 8003090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003092:	6838      	ldr	r0, [r7, #0]
 8003094:	f002 f865 	bl	8005162 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030c4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d102      	bne.n	80030da <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f001 b823 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 817d 	beq.w	80033ea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80030f0:	4bbc      	ldr	r3, [pc, #752]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 030c 	and.w	r3, r3, #12
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00c      	beq.n	8003116 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030fc:	4bb9      	ldr	r3, [pc, #740]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d15c      	bne.n	80031c2 <HAL_RCC_OscConfig+0x10e>
 8003108:	4bb6      	ldr	r3, [pc, #728]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d155      	bne.n	80031c2 <HAL_RCC_OscConfig+0x10e>
 8003116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800311a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003122:	fa93 f3a3 	rbit	r3, r3
 8003126:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800312a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	095b      	lsrs	r3, r3, #5
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_RCC_OscConfig+0x94>
 8003142:	4ba8      	ldr	r3, [pc, #672]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	e015      	b.n	8003174 <HAL_RCC_OscConfig+0xc0>
 8003148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003154:	fa93 f3a3 	rbit	r3, r3
 8003158:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800315c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003160:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003164:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003170:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003178:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800317c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003180:	fa92 f2a2 	rbit	r2, r2
 8003184:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003188:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800318c:	fab2 f282 	clz	r2, r2
 8003190:	b2d2      	uxtb	r2, r2
 8003192:	f042 0220 	orr.w	r2, r2, #32
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	f002 021f 	and.w	r2, r2, #31
 800319c:	2101      	movs	r1, #1
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	4013      	ands	r3, r2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 811f 	beq.w	80033e8 <HAL_RCC_OscConfig+0x334>
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f040 8116 	bne.w	80033e8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f000 bfaf 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x12e>
 80031d4:	4b83      	ldr	r3, [pc, #524]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a82      	ldr	r2, [pc, #520]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	e036      	b.n	8003250 <HAL_RCC_OscConfig+0x19c>
 80031e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10c      	bne.n	800320c <HAL_RCC_OscConfig+0x158>
 80031f2:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a7b      	ldr	r2, [pc, #492]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80031f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b79      	ldr	r3, [pc, #484]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a78      	ldr	r2, [pc, #480]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e021      	b.n	8003250 <HAL_RCC_OscConfig+0x19c>
 800320c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003210:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800321c:	d10c      	bne.n	8003238 <HAL_RCC_OscConfig+0x184>
 800321e:	4b71      	ldr	r3, [pc, #452]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a70      	ldr	r2, [pc, #448]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6d      	ldr	r2, [pc, #436]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e00b      	b.n	8003250 <HAL_RCC_OscConfig+0x19c>
 8003238:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 800323e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 800324a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003250:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	f023 020f 	bic.w	r2, r3, #15
 8003258:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800325c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	495f      	ldr	r1, [pc, #380]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 8003266:	4313      	orrs	r3, r2
 8003268:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d059      	beq.n	800332e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe fc73 	bl	8001b64 <HAL_GetTick>
 800327e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fc6e 	bl	8001b64 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	d902      	bls.n	800329a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	f000 bf43 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
 800329a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800329e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_OscConfig+0x218>
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e015      	b.n	80032f8 <HAL_RCC_OscConfig+0x244>
 80032cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80032d8:	fa93 f3a3 	rbit	r3, r3
 80032dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80032e8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80032ec:	fa93 f3a3 	rbit	r3, r3
 80032f0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80032f4:	4b3b      	ldr	r3, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032fc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003300:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003304:	fa92 f2a2 	rbit	r2, r2
 8003308:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800330c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003310:	fab2 f282 	clz	r2, r2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f002 021f 	and.w	r2, r2, #31
 8003320:	2101      	movs	r1, #1
 8003322:	fa01 f202 	lsl.w	r2, r1, r2
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ab      	beq.n	8003284 <HAL_RCC_OscConfig+0x1d0>
 800332c:	e05d      	b.n	80033ea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332e:	f7fe fc19 	bl	8001b64 <HAL_GetTick>
 8003332:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003336:	e00a      	b.n	800334e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003338:	f7fe fc14 	bl	8001b64 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b64      	cmp	r3, #100	; 0x64
 8003346:	d902      	bls.n	800334e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	f000 bee9 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
 800334e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003352:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003362:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_OscConfig+0x2cc>
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e015      	b.n	80033ac <HAL_RCC_OscConfig+0x2f8>
 8003380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003384:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003394:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003398:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800339c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HAL_RCC_OscConfig+0x330>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033b0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033b4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033b8:	fa92 f2a2 	rbit	r2, r2
 80033bc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033c0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80033c4:	fab2 f282 	clz	r2, r2
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f042 0220 	orr.w	r2, r2, #32
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	f002 021f 	and.w	r2, r2, #31
 80033d4:	2101      	movs	r1, #1
 80033d6:	fa01 f202 	lsl.w	r2, r1, r2
 80033da:	4013      	ands	r3, r2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ab      	bne.n	8003338 <HAL_RCC_OscConfig+0x284>
 80033e0:	e003      	b.n	80033ea <HAL_RCC_OscConfig+0x336>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 817d 	beq.w	80036fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003400:	4ba6      	ldr	r3, [pc, #664]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00b      	beq.n	8003424 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800340c:	4ba3      	ldr	r3, [pc, #652]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d172      	bne.n	80034fe <HAL_RCC_OscConfig+0x44a>
 8003418:	4ba0      	ldr	r3, [pc, #640]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d16c      	bne.n	80034fe <HAL_RCC_OscConfig+0x44a>
 8003424:	2302      	movs	r3, #2
 8003426:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003436:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	095b      	lsrs	r3, r3, #5
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	d102      	bne.n	8003454 <HAL_RCC_OscConfig+0x3a0>
 800344e:	4b93      	ldr	r3, [pc, #588]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	e013      	b.n	800347c <HAL_RCC_OscConfig+0x3c8>
 8003454:	2302      	movs	r3, #2
 8003456:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800345e:	fa93 f3a3 	rbit	r3, r3
 8003462:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003466:	2302      	movs	r3, #2
 8003468:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800346c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003470:	fa93 f3a3 	rbit	r3, r3
 8003474:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003478:	4b88      	ldr	r3, [pc, #544]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	2202      	movs	r2, #2
 800347e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003482:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003486:	fa92 f2a2 	rbit	r2, r2
 800348a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800348e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003492:	fab2 f282 	clz	r2, r2
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	f002 021f 	and.w	r2, r2, #31
 80034a2:	2101      	movs	r1, #1
 80034a4:	fa01 f202 	lsl.w	r2, r1, r2
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCC_OscConfig+0x410>
 80034ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d002      	beq.n	80034c4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f000 be2e 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b75      	ldr	r3, [pc, #468]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	21f8      	movs	r1, #248	; 0xf8
 80034da:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034e2:	fa91 f1a1 	rbit	r1, r1
 80034e6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80034ea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80034ee:	fab1 f181 	clz	r1, r1
 80034f2:	b2c9      	uxtb	r1, r1
 80034f4:	408b      	lsls	r3, r1
 80034f6:	4969      	ldr	r1, [pc, #420]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fc:	e0fd      	b.n	80036fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8088 	beq.w	8003620 <HAL_RCC_OscConfig+0x56c>
 8003510:	2301      	movs	r3, #1
 8003512:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003522:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003530:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	461a      	mov	r2, r3
 8003538:	2301      	movs	r3, #1
 800353a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fe fb12 	bl	8001b64 <HAL_GetTick>
 8003540:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003546:	f7fe fb0d 	bl	8001b64 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d902      	bls.n	800355c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	f000 bde2 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
 800355c:	2302      	movs	r3, #2
 800355e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003562:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003566:	fa93 f3a3 	rbit	r3, r3
 800356a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800356e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	b2db      	uxtb	r3, r3
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d102      	bne.n	800358c <HAL_RCC_OscConfig+0x4d8>
 8003586:	4b45      	ldr	r3, [pc, #276]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	e013      	b.n	80035b4 <HAL_RCC_OscConfig+0x500>
 800358c:	2302      	movs	r3, #2
 800358e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003596:	fa93 f3a3 	rbit	r3, r3
 800359a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800359e:	2302      	movs	r3, #2
 80035a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035b0:	4b3a      	ldr	r3, [pc, #232]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2202      	movs	r2, #2
 80035b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035be:	fa92 f2a2 	rbit	r2, r2
 80035c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80035c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80035ca:	fab2 f282 	clz	r2, r2
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	f042 0220 	orr.w	r2, r2, #32
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	f002 021f 	and.w	r2, r2, #31
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f202 	lsl.w	r2, r1, r2
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0af      	beq.n	8003546 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b2d      	ldr	r3, [pc, #180]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	21f8      	movs	r1, #248	; 0xf8
 80035fc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003604:	fa91 f1a1 	rbit	r1, r1
 8003608:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800360c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003610:	fab1 f181 	clz	r1, r1
 8003614:	b2c9      	uxtb	r1, r1
 8003616:	408b      	lsls	r3, r1
 8003618:	4920      	ldr	r1, [pc, #128]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
 800361e:	e06c      	b.n	80036fa <HAL_RCC_OscConfig+0x646>
 8003620:	2301      	movs	r3, #1
 8003622:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003632:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003640:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	461a      	mov	r2, r3
 8003648:	2300      	movs	r3, #0
 800364a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fa8a 	bl	8001b64 <HAL_GetTick>
 8003650:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fa85 	bl	8001b64 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d902      	bls.n	800366c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	f000 bd5a 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
 800366c:	2302      	movs	r3, #2
 800366e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800367e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d104      	bne.n	80036a0 <HAL_RCC_OscConfig+0x5ec>
 8003696:	4b01      	ldr	r3, [pc, #4]	; (800369c <HAL_RCC_OscConfig+0x5e8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e015      	b.n	80036c8 <HAL_RCC_OscConfig+0x614>
 800369c:	40021000 	.word	0x40021000
 80036a0:	2302      	movs	r3, #2
 80036a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036aa:	fa93 f3a3 	rbit	r3, r3
 80036ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036b2:	2302      	movs	r3, #2
 80036b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036bc:	fa93 f3a3 	rbit	r3, r3
 80036c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80036c4:	4bc8      	ldr	r3, [pc, #800]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2202      	movs	r2, #2
 80036ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80036ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036d2:	fa92 f2a2 	rbit	r2, r2
 80036d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80036da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80036de:	fab2 f282 	clz	r2, r2
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f042 0220 	orr.w	r2, r2, #32
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	f002 021f 	and.w	r2, r2, #31
 80036ee:	2101      	movs	r1, #1
 80036f0:	fa01 f202 	lsl.w	r2, r1, r2
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ad      	bne.n	8003656 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 8110 	beq.w	8003930 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003714:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d079      	beq.n	8003814 <HAL_RCC_OscConfig+0x760>
 8003720:	2301      	movs	r3, #1
 8003722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800372a:	fa93 f3a3 	rbit	r3, r3
 800372e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003732:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4bab      	ldr	r3, [pc, #684]	; (80039ec <HAL_RCC_OscConfig+0x938>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	2301      	movs	r3, #1
 8003748:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fe fa0b 	bl	8001b64 <HAL_GetTick>
 800374e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe fa06 	bl	8001b64 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d902      	bls.n	800376a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	f000 bcdb 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
 800376a:	2302      	movs	r3, #2
 800376c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003770:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800377c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003780:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003784:	2202      	movs	r2, #2
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800378c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	fa93 f2a3 	rbit	r2, r3
 8003796:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037a8:	2202      	movs	r2, #2
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	fa93 f2a3 	rbit	r2, r3
 80037ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c4:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 80037c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037d0:	2102      	movs	r1, #2
 80037d2:	6019      	str	r1, [r3, #0]
 80037d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	fa93 f1a3 	rbit	r1, r3
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037ea:	6019      	str	r1, [r3, #0]
  return result;
 80037ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	2101      	movs	r1, #1
 8003808:	fa01 f303 	lsl.w	r3, r1, r3
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0a0      	beq.n	8003754 <HAL_RCC_OscConfig+0x6a0>
 8003812:	e08d      	b.n	8003930 <HAL_RCC_OscConfig+0x87c>
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800381c:	2201      	movs	r2, #1
 800381e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003832:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003836:	601a      	str	r2, [r3, #0]
  return result;
 8003838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003840:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	4b68      	ldr	r3, [pc, #416]	; (80039ec <HAL_RCC_OscConfig+0x938>)
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	461a      	mov	r2, r3
 8003852:	2300      	movs	r3, #0
 8003854:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe f985 	bl	8001b64 <HAL_GetTick>
 800385a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003860:	f7fe f980 	bl	8001b64 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d902      	bls.n	8003876 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	f000 bc55 	b.w	8004120 <HAL_RCC_OscConfig+0x106c>
 8003876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800387a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800387e:	2202      	movs	r2, #2
 8003880:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003886:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	fa93 f2a3 	rbit	r2, r3
 8003890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003894:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038a2:	2202      	movs	r2, #2
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	fa93 f2a3 	rbit	r2, r3
 80038b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038c6:	2202      	movs	r2, #2
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	fa93 f2a3 	rbit	r2, r3
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 80038e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038ee:	2102      	movs	r1, #2
 80038f0:	6019      	str	r1, [r3, #0]
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	fa93 f1a3 	rbit	r1, r3
 8003900:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003904:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003908:	6019      	str	r1, [r3, #0]
  return result;
 800390a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800390e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2101      	movs	r1, #1
 8003926:	fa01 f303 	lsl.w	r3, r1, r3
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d197      	bne.n	8003860 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 81a1 	beq.w	8003c88 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003946:	2300      	movs	r3, #0
 8003948:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394c:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d116      	bne.n	8003986 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003958:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 800395e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003962:	61d3      	str	r3, [r2, #28]
 8003964:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800396c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003970:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800397a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800397e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b1a      	ldr	r3, [pc, #104]	; (80039f0 <HAL_RCC_OscConfig+0x93c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <HAL_RCC_OscConfig+0x93c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <HAL_RCC_OscConfig+0x93c>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fe f8e1 	bl	8001b64 <HAL_GetTick>
 80039a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a6:	e009      	b.n	80039bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039a8:	f7fe f8dc 	bl	8001b64 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	; 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e3b1      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_RCC_OscConfig+0x93c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ef      	beq.n	80039a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCC_OscConfig+0x940>
 80039d8:	4b03      	ldr	r3, [pc, #12]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a02      	ldr	r2, [pc, #8]	; (80039e8 <HAL_RCC_OscConfig+0x934>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	e03c      	b.n	8003a60 <HAL_RCC_OscConfig+0x9ac>
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	10908120 	.word	0x10908120
 80039f0:	40007000 	.word	0x40007000
 80039f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10c      	bne.n	8003a1e <HAL_RCC_OscConfig+0x96a>
 8003a04:	4bc1      	ldr	r3, [pc, #772]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	4ac0      	ldr	r2, [pc, #768]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	6213      	str	r3, [r2, #32]
 8003a10:	4bbe      	ldr	r3, [pc, #760]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4abd      	ldr	r2, [pc, #756]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	6213      	str	r3, [r2, #32]
 8003a1c:	e020      	b.n	8003a60 <HAL_RCC_OscConfig+0x9ac>
 8003a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x994>
 8003a2e:	4bb7      	ldr	r3, [pc, #732]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4ab6      	ldr	r2, [pc, #728]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	4bb4      	ldr	r3, [pc, #720]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	4ab3      	ldr	r2, [pc, #716]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6213      	str	r3, [r2, #32]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0x9ac>
 8003a48:	4bb0      	ldr	r3, [pc, #704]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4aaf      	ldr	r2, [pc, #700]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6213      	str	r3, [r2, #32]
 8003a54:	4bad      	ldr	r3, [pc, #692]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	4aac      	ldr	r2, [pc, #688]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003a5a:	f023 0304 	bic.w	r3, r3, #4
 8003a5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a64:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8081 	beq.w	8003b74 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a72:	f7fe f877 	bl	8001b64 <HAL_GetTick>
 8003a76:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7c:	f7fe f872 	bl	8001b64 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e345      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
 8003a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a98:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	fa93 f2a3 	rbit	r2, r3
 8003ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ada:	601a      	str	r2, [r3, #0]
  return result;
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003ae4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	095b      	lsrs	r3, r3, #5
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d102      	bne.n	8003b00 <HAL_RCC_OscConfig+0xa4c>
 8003afa:	4b84      	ldr	r3, [pc, #528]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	e013      	b.n	8003b28 <HAL_RCC_OscConfig+0xa74>
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b10:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b1e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	4b79      	ldr	r3, [pc, #484]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b2c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b30:	2102      	movs	r1, #2
 8003b32:	6011      	str	r1, [r2, #0]
 8003b34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b38:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	fa92 f1a2 	rbit	r1, r2
 8003b42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b46:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b4a:	6011      	str	r1, [r2, #0]
  return result;
 8003b4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b50:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	fab2 f282 	clz	r2, r2
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	f002 021f 	and.w	r2, r2, #31
 8003b66:	2101      	movs	r1, #1
 8003b68:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d084      	beq.n	8003a7c <HAL_RCC_OscConfig+0x9c8>
 8003b72:	e07f      	b.n	8003c74 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fd fff6 	bl	8001b64 <HAL_GetTick>
 8003b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b7c:	e00b      	b.n	8003b96 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b7e:	f7fd fff1 	bl	8001b64 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e2c4      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
 8003b96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	fa93 f2a3 	rbit	r2, r3
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	fa93 f2a3 	rbit	r2, r3
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bdc:	601a      	str	r2, [r3, #0]
  return result;
 8003bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003be6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be8:	fab3 f383 	clz	r3, r3
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d102      	bne.n	8003c02 <HAL_RCC_OscConfig+0xb4e>
 8003bfc:	4b43      	ldr	r3, [pc, #268]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	e013      	b.n	8003c2a <HAL_RCC_OscConfig+0xb76>
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c12:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	fa93 f2a3 	rbit	r2, r3
 8003c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c20:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c2e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c32:	2102      	movs	r1, #2
 8003c34:	6011      	str	r1, [r2, #0]
 8003c36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	fa92 f1a2 	rbit	r1, r2
 8003c44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c48:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c4c:	6011      	str	r1, [r2, #0]
  return result;
 8003c4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c52:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	fab2 f282 	clz	r2, r2
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	f002 021f 	and.w	r2, r2, #31
 8003c68:	2101      	movs	r1, #1
 8003c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d184      	bne.n	8003b7e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c74:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 8242 	beq.w	800411e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <HAL_RCC_OscConfig+0xc58>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	f000 8213 	beq.w	80040ce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	f040 8162 	bne.w	8003f7e <HAL_RCC_OscConfig+0xeca>
 8003cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cbe:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	fa93 f2a3 	rbit	r2, r3
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cde:	601a      	str	r2, [r3, #0]
  return result;
 8003ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ce8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	fab3 f383 	clz	r3, r3
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cf4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fd ff30 	bl	8001b64 <HAL_GetTick>
 8003d04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d08:	e00c      	b.n	8003d24 <HAL_RCC_OscConfig+0xc70>
 8003d0a:	bf00      	nop
 8003d0c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fd ff28 	bl	8001b64 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1fd      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
 8003d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d28:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d36:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d48:	601a      	str	r2, [r3, #0]
  return result;
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d52:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d54:	fab3 f383 	clz	r3, r3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_RCC_OscConfig+0xcba>
 8003d68:	4bb0      	ldr	r3, [pc, #704]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e027      	b.n	8003dbe <HAL_RCC_OscConfig+0xd0a>
 8003d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d72:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d76:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d80:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	fa93 f2a3 	rbit	r2, r3
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d98:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	fa93 f2a3 	rbit	r2, r3
 8003db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	4b9c      	ldr	r3, [pc, #624]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dc2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dc6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003dca:	6011      	str	r1, [r2, #0]
 8003dcc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dd0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	fa92 f1a2 	rbit	r1, r2
 8003dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dde:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003de2:	6011      	str	r1, [r2, #0]
  return result;
 8003de4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003de8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	fab2 f282 	clz	r2, r2
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f042 0220 	orr.w	r2, r2, #32
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f002 021f 	and.w	r2, r2, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d182      	bne.n	8003d10 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0a:	4b88      	ldr	r3, [pc, #544]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	497f      	ldr	r1, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e56:	601a      	str	r2, [r3, #0]
  return result;
 8003e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e60:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e62:	fab3 f383 	clz	r3, r3
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	461a      	mov	r2, r3
 8003e74:	2301      	movs	r3, #1
 8003e76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd fe74 	bl	8001b64 <HAL_GetTick>
 8003e7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e80:	e009      	b.n	8003e96 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e82:	f7fd fe6f 	bl	8001b64 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e144      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
 8003e96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003e9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ea2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	fa93 f2a3 	rbit	r2, r3
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003eba:	601a      	str	r2, [r3, #0]
  return result;
 8003ebc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ec4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	f043 0301 	orr.w	r3, r3, #1
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xe2c>
 8003eda:	4b54      	ldr	r3, [pc, #336]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	e027      	b.n	8003f30 <HAL_RCC_OscConfig+0xe7c>
 8003ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ee4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ee8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ef2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	fa93 f2a3 	rbit	r2, r3
 8003efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f00:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	4b3f      	ldr	r3, [pc, #252]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f34:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f3c:	6011      	str	r1, [r2, #0]
 8003f3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f42:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	fa92 f1a2 	rbit	r1, r2
 8003f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f50:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f54:	6011      	str	r1, [r2, #0]
  return result;
 8003f56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f5a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	fab2 f282 	clz	r2, r2
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	f042 0220 	orr.w	r2, r2, #32
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	f002 021f 	and.w	r2, r2, #31
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f202 	lsl.w	r2, r1, r2
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d082      	beq.n	8003e82 <HAL_RCC_OscConfig+0xdce>
 8003f7c:	e0cf      	b.n	800411e <HAL_RCC_OscConfig+0x106a>
 8003f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f82:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f90:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	fa93 f2a3 	rbit	r2, r3
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fa2:	601a      	str	r2, [r3, #0]
  return result;
 8003fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fae:	fab3 f383 	clz	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fdce 	bl	8001b64 <HAL_GetTick>
 8003fc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fcc:	e009      	b.n	8003fe2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fd fdc9 	bl	8001b64 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e09e      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
 8003fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fe6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	fa93 f2a3 	rbit	r2, r3
 8003ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004002:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004006:	601a      	str	r2, [r3, #0]
  return result;
 8004008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800400c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004010:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b01      	cmp	r3, #1
 8004024:	d104      	bne.n	8004030 <HAL_RCC_OscConfig+0xf7c>
 8004026:	4b01      	ldr	r3, [pc, #4]	; (800402c <HAL_RCC_OscConfig+0xf78>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	e029      	b.n	8004080 <HAL_RCC_OscConfig+0xfcc>
 800402c:	40021000 	.word	0x40021000
 8004030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004034:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004038:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800403c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004042:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	fa93 f2a3 	rbit	r2, r3
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800405e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004068:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	fa93 f2a3 	rbit	r2, r3
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_OscConfig+0x1078>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004084:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004088:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800408c:	6011      	str	r1, [r2, #0]
 800408e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004092:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	fa92 f1a2 	rbit	r1, r2
 800409c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040a0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040a4:	6011      	str	r1, [r2, #0]
  return result;
 80040a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040aa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	f042 0220 	orr.w	r2, r2, #32
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	f002 021f 	and.w	r2, r2, #31
 80040c0:	2101      	movs	r1, #1
 80040c2:	fa01 f202 	lsl.w	r2, r1, r2
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d180      	bne.n	8003fce <HAL_RCC_OscConfig+0xf1a>
 80040cc:	e027      	b.n	800411e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e01e      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_OscConfig+0x1078>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040ea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d10b      	bne.n	800411a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004102:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004106:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800410a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800410e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000

08004130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b09e      	sub	sp, #120	; 0x78
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e162      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004148:	4b90      	ldr	r3, [pc, #576]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d910      	bls.n	8004178 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b8d      	ldr	r3, [pc, #564]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 0207 	bic.w	r2, r3, #7
 800415e:	498b      	ldr	r1, [pc, #556]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	4313      	orrs	r3, r2
 8004164:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b89      	ldr	r3, [pc, #548]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e14a      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b82      	ldr	r3, [pc, #520]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	497f      	ldr	r1, [pc, #508]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80dc 	beq.w	800435c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d13c      	bne.n	8004226 <HAL_RCC_ClockConfig+0xf6>
 80041ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041bc:	fab3 f383 	clz	r3, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xa6>
 80041d0:	4b6f      	ldr	r3, [pc, #444]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	e00f      	b.n	80041f6 <HAL_RCC_ClockConfig+0xc6>
 80041d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	667b      	str	r3, [r7, #100]	; 0x64
 80041e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041e8:	663b      	str	r3, [r7, #96]	; 0x60
 80041ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041f2:	4b67      	ldr	r3, [pc, #412]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80041fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fe:	fa92 f2a2 	rbit	r2, r2
 8004202:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004204:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004206:	fab2 f282 	clz	r2, r2
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	f042 0220 	orr.w	r2, r2, #32
 8004210:	b2d2      	uxtb	r2, r2
 8004212:	f002 021f 	and.w	r2, r2, #31
 8004216:	2101      	movs	r1, #1
 8004218:	fa01 f202 	lsl.w	r2, r1, r2
 800421c:	4013      	ands	r3, r2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d17b      	bne.n	800431a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e0f3      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b02      	cmp	r3, #2
 800422c:	d13c      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x178>
 800422e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004232:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800423c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423e:	fab3 f383 	clz	r3, r3
 8004242:	b2db      	uxtb	r3, r3
 8004244:	095b      	lsrs	r3, r3, #5
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d102      	bne.n	8004258 <HAL_RCC_ClockConfig+0x128>
 8004252:	4b4f      	ldr	r3, [pc, #316]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	e00f      	b.n	8004278 <HAL_RCC_ClockConfig+0x148>
 8004258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800425c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	647b      	str	r3, [r7, #68]	; 0x44
 8004266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800426a:	643b      	str	r3, [r7, #64]	; 0x40
 800426c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800427c:	63ba      	str	r2, [r7, #56]	; 0x38
 800427e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004280:	fa92 f2a2 	rbit	r2, r2
 8004284:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004288:	fab2 f282 	clz	r2, r2
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f042 0220 	orr.w	r2, r2, #32
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	f002 021f 	and.w	r2, r2, #31
 8004298:	2101      	movs	r1, #1
 800429a:	fa01 f202 	lsl.w	r2, r1, r2
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d13a      	bne.n	800431a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b2      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
 80042a8:	2302      	movs	r3, #2
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	095b      	lsrs	r3, r3, #5
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d102      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x1a0>
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	e00d      	b.n	80042ec <HAL_RCC_ClockConfig+0x1bc>
 80042d0:	2302      	movs	r3, #2
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	fa93 f3a3 	rbit	r3, r3
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
 80042dc:	2302      	movs	r3, #2
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	61fb      	str	r3, [r7, #28]
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2202      	movs	r2, #2
 80042ee:	61ba      	str	r2, [r7, #24]
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	fa92 f2a2 	rbit	r2, r2
 80042f6:	617a      	str	r2, [r7, #20]
  return result;
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	fab2 f282 	clz	r2, r2
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	f042 0220 	orr.w	r2, r2, #32
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	f002 021f 	and.w	r2, r2, #31
 800430a:	2101      	movs	r1, #1
 800430c:	fa01 f202 	lsl.w	r2, r1, r2
 8004310:	4013      	ands	r3, r2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e079      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b1d      	ldr	r3, [pc, #116]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	491a      	ldr	r1, [pc, #104]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800432c:	f7fd fc1a 	bl	8001b64 <HAL_GetTick>
 8004330:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7fd fc16 	bl	8001b64 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e061      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_RCC_ClockConfig+0x260>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d214      	bcs.n	8004394 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b08      	ldr	r3, [pc, #32]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 0207 	bic.w	r2, r3, #7
 8004372:	4906      	ldr	r1, [pc, #24]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b04      	ldr	r3, [pc, #16]	; (800438c <HAL_RCC_ClockConfig+0x25c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e040      	b.n	800440e <HAL_RCC_ClockConfig+0x2de>
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <HAL_RCC_ClockConfig+0x2e8>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	491a      	ldr	r1, [pc, #104]	; (8004418 <HAL_RCC_ClockConfig+0x2e8>)
 80043ae:	4313      	orrs	r3, r2
 80043b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0308 	and.w	r3, r3, #8
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043be:	4b16      	ldr	r3, [pc, #88]	; (8004418 <HAL_RCC_ClockConfig+0x2e8>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4912      	ldr	r1, [pc, #72]	; (8004418 <HAL_RCC_ClockConfig+0x2e8>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043d2:	f000 f829 	bl	8004428 <HAL_RCC_GetSysClockFreq>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <HAL_RCC_ClockConfig+0x2e8>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043e0:	22f0      	movs	r2, #240	; 0xf0
 80043e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	fa92 f2a2 	rbit	r2, r2
 80043ea:	60fa      	str	r2, [r7, #12]
  return result;
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	fab2 f282 	clz	r2, r2
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	40d3      	lsrs	r3, r2
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_RCC_ClockConfig+0x2ec>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	fa21 f303 	lsr.w	r3, r1, r3
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <HAL_RCC_ClockConfig+0x2f0>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004402:	4b08      	ldr	r3, [pc, #32]	; (8004424 <HAL_RCC_ClockConfig+0x2f4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fd fb68 	bl	8001adc <HAL_InitTick>
  
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3778      	adds	r7, #120	; 0x78
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000
 800441c:	08009674 	.word	0x08009674
 8004420:	20000040 	.word	0x20000040
 8004424:	20000048 	.word	0x20000048

08004428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	b08b      	sub	sp, #44	; 0x2c
 800442c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004442:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b04      	cmp	r3, #4
 8004450:	d002      	beq.n	8004458 <HAL_RCC_GetSysClockFreq+0x30>
 8004452:	2b08      	cmp	r3, #8
 8004454:	d003      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x36>
 8004456:	e03c      	b.n	80044d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800445a:	623b      	str	r3, [r7, #32]
      break;
 800445c:	e03c      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004464:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004468:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	fa92 f2a2 	rbit	r2, r2
 8004470:	607a      	str	r2, [r7, #4]
  return result;
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	fab2 f282 	clz	r2, r2
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	40d3      	lsrs	r3, r2
 800447c:	4a1c      	ldr	r2, [pc, #112]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800447e:	5cd3      	ldrb	r3, [r2, r3]
 8004480:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	220f      	movs	r2, #15
 800448c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	fa92 f2a2 	rbit	r2, r2
 8004494:	60fa      	str	r2, [r7, #12]
  return result;
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	fab2 f282 	clz	r2, r2
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	40d3      	lsrs	r3, r2
 80044a0:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044a2:	5cd3      	ldrb	r3, [r2, r3]
 80044a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044b0:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
 80044c0:	e004      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4a0c      	ldr	r2, [pc, #48]	; (80044f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	623b      	str	r3, [r7, #32]
      break;
 80044d0:	e002      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80044d4:	623b      	str	r3, [r7, #32]
      break;
 80044d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	372c      	adds	r7, #44	; 0x2c
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	007a1200 	.word	0x007a1200
 80044f0:	08009684 	.word	0x08009684
 80044f4:	08009694 	.word	0x08009694
 80044f8:	003d0900 	.word	0x003d0900

080044fc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b092      	sub	sp, #72	; 0x48
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800450c:	2300      	movs	r3, #0
 800450e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451a:	2b00      	cmp	r3, #0
 800451c:	f000 80d4 	beq.w	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004520:	4b4e      	ldr	r3, [pc, #312]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10e      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452c:	4b4b      	ldr	r3, [pc, #300]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	4a4a      	ldr	r2, [pc, #296]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004536:	61d3      	str	r3, [r2, #28]
 8004538:	4b48      	ldr	r3, [pc, #288]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b45      	ldr	r3, [pc, #276]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b42      	ldr	r3, [pc, #264]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a41      	ldr	r2, [pc, #260]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fd faff 	bl	8001b64 <HAL_GetTick>
 8004566:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fd fafb 	bl	8001b64 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	; 0x64
 8004576:	d901      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e169      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b38      	ldr	r3, [pc, #224]	; (8004660 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004590:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8084 	beq.w	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d07c      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a8:	4b2c      	ldr	r3, [pc, #176]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	fa93 f3a3 	rbit	r3, r3
 80045be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045c2:	fab3 f383 	clz	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	461a      	mov	r2, r3
 80045d2:	2301      	movs	r3, #1
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	461a      	mov	r2, r3
 80045f6:	2300      	movs	r3, #0
 80045f8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d04b      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800460a:	f7fd faab 	bl	8001b64 <HAL_GetTick>
 800460e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fd faa7 	bl	8001b64 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e113      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004628:	2302      	movs	r3, #2
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	fa93 f3a3 	rbit	r3, r3
 8004632:	627b      	str	r3, [r7, #36]	; 0x24
 8004634:	2302      	movs	r3, #2
 8004636:	623b      	str	r3, [r7, #32]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	61fb      	str	r3, [r7, #28]
  return result;
 8004640:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004642:	fab3 f383 	clz	r3, r3
 8004646:	b2db      	uxtb	r3, r3
 8004648:	095b      	lsrs	r3, r3, #5
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f043 0302 	orr.w	r3, r3, #2
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d108      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004656:	4b01      	ldr	r3, [pc, #4]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	e00d      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800465c:	40021000 	.word	0x40021000
 8004660:	40007000 	.word	0x40007000
 8004664:	10908100 	.word	0x10908100
 8004668:	2302      	movs	r3, #2
 800466a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	fa93 f3a3 	rbit	r3, r3
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	4b78      	ldr	r3, [pc, #480]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2202      	movs	r2, #2
 800467a:	613a      	str	r2, [r7, #16]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	fa92 f2a2 	rbit	r2, r2
 8004682:	60fa      	str	r2, [r7, #12]
  return result;
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	fab2 f282 	clz	r2, r2
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	f002 021f 	and.w	r2, r2, #31
 8004696:	2101      	movs	r1, #1
 8004698:	fa01 f202 	lsl.w	r2, r1, r2
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0b7      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80046a2:	4b6d      	ldr	r3, [pc, #436]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	496a      	ldr	r1, [pc, #424]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80046b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b66      	ldr	r3, [pc, #408]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	4a65      	ldr	r2, [pc, #404]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046d4:	4b60      	ldr	r3, [pc, #384]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	f023 0203 	bic.w	r2, r3, #3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	495d      	ldr	r1, [pc, #372]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046f2:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	4956      	ldr	r1, [pc, #344]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004700:	4313      	orrs	r3, r2
 8004702:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004710:	4b51      	ldr	r3, [pc, #324]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	494e      	ldr	r1, [pc, #312]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d008      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800472e:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f023 0210 	bic.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
 800473a:	4947      	ldr	r1, [pc, #284]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800473c:	4313      	orrs	r3, r2
 800473e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800474c:	4b42      	ldr	r3, [pc, #264]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	493f      	ldr	r1, [pc, #252]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800476a:	4b3b      	ldr	r3, [pc, #236]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	f023 0220 	bic.w	r2, r3, #32
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	4938      	ldr	r1, [pc, #224]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004778:	4313      	orrs	r3, r2
 800477a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004788:	4b33      	ldr	r3, [pc, #204]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	695b      	ldr	r3, [r3, #20]
 8004794:	4930      	ldr	r1, [pc, #192]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004796:	4313      	orrs	r3, r2
 8004798:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047a6:	4b2c      	ldr	r3, [pc, #176]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	4929      	ldr	r1, [pc, #164]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d008      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047c4:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4921      	ldr	r1, [pc, #132]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047e2:	4b1d      	ldr	r3, [pc, #116]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	491a      	ldr	r1, [pc, #104]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d008      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	4912      	ldr	r1, [pc, #72]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480e:	4313      	orrs	r3, r2
 8004810:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800481e:	4b0e      	ldr	r3, [pc, #56]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	490b      	ldr	r1, [pc, #44]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800482c:	4313      	orrs	r3, r2
 800482e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004848:	4903      	ldr	r1, [pc, #12]	; (8004858 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3748      	adds	r7, #72	; 0x48
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40021000 	.word	0x40021000

0800485c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e09d      	b.n	80049aa <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	2b00      	cmp	r3, #0
 8004874:	d108      	bne.n	8004888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800487e:	d009      	beq.n	8004894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	61da      	str	r2, [r3, #28]
 8004886:	e005      	b.n	8004894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc fe48 	bl	8001544 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048d4:	d902      	bls.n	80048dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	e002      	b.n	80048e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ea:	d007      	beq.n	80048fc <HAL_SPI_Init+0xa0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	69db      	ldr	r3, [r3, #28]
 8004930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493e:	ea42 0103 	orr.w	r1, r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	f003 0204 	and.w	r2, r3, #4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004978:	ea42 0103 	orr.w	r1, r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	69da      	ldr	r2, [r3, #28]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004998:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e01a      	b.n	80049fa <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fc fdf3 	bl	80015c8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b08a      	sub	sp, #40	; 0x28
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	60f8      	str	r0, [r7, #12]
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	607a      	str	r2, [r7, #4]
 8004a0e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a10:	2301      	movs	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x26>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e20a      	b.n	8004e3e <HAL_SPI_TransmitReceive+0x43c>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a30:	f7fd f898 	bl	8001b64 <HAL_GetTick>
 8004a34:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a3c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004a44:	887b      	ldrh	r3, [r7, #2]
 8004a46:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004a48:	887b      	ldrh	r3, [r7, #2]
 8004a4a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a4c:	7efb      	ldrb	r3, [r7, #27]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d00e      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x6e>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a58:	d106      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x66>
 8004a62:	7efb      	ldrb	r3, [r7, #27]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d003      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a6e:	e1e0      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <HAL_SPI_TransmitReceive+0x80>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <HAL_SPI_TransmitReceive+0x80>
 8004a7c:	887b      	ldrh	r3, [r7, #2]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d103      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a88:	e1d3      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2205      	movs	r2, #5
 8004a9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	887a      	ldrh	r2, [r7, #2]
 8004aae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	887a      	ldrh	r2, [r7, #2]
 8004ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	887a      	ldrh	r2, [r7, #2]
 8004ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	887a      	ldrh	r2, [r7, #2]
 8004aca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ae0:	d802      	bhi.n	8004ae8 <HAL_SPI_TransmitReceive+0xe6>
 8004ae2:	8a3b      	ldrh	r3, [r7, #16]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d908      	bls.n	8004afa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	e007      	b.n	8004b0a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d007      	beq.n	8004b28 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b30:	f240 8081 	bls.w	8004c36 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d002      	beq.n	8004b42 <HAL_SPI_TransmitReceive+0x140>
 8004b3c:	8a7b      	ldrh	r3, [r7, #18]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d16d      	bne.n	8004c1e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	881a      	ldrh	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	1c9a      	adds	r2, r3, #2
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b66:	e05a      	b.n	8004c1e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d11b      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x1ac>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d016      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x1ac>
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d113      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	881a      	ldrh	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d11c      	bne.n	8004bf6 <HAL_SPI_TransmitReceive+0x1f4>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d016      	beq.n	8004bf6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bf6:	f7fc ffb5 	bl	8001b64 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d80b      	bhi.n	8004c1e <HAL_SPI_TransmitReceive+0x21c>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d007      	beq.n	8004c1e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004c1c:	e109      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d19f      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x166>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d199      	bne.n	8004b68 <HAL_SPI_TransmitReceive+0x166>
 8004c34:	e0e3      	b.n	8004dfe <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_SPI_TransmitReceive+0x244>
 8004c3e:	8a7b      	ldrh	r3, [r7, #18]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	f040 80cf 	bne.w	8004de4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d912      	bls.n	8004c76 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	881a      	ldrh	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	1c9a      	adds	r2, r3, #2
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b02      	subs	r3, #2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c74:	e0b6      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c9c:	e0a2      	b.n	8004de4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d134      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x314>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d02f      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x314>
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d12c      	bne.n	8004d16 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d912      	bls.n	8004cec <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cca:	881a      	ldrh	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	1c9a      	adds	r2, r3, #2
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b02      	subs	r3, #2
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cea:	e012      	b.n	8004d12 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d148      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x3b4>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d042      	beq.n	8004db6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d923      	bls.n	8004d84 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	b292      	uxth	r2, r2
 8004d48:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	1c9a      	adds	r2, r3, #2
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	3b02      	subs	r3, #2
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d81f      	bhi.n	8004db2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	e016      	b.n	8004db2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f103 020c 	add.w	r2, r3, #12
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	7812      	ldrb	r2, [r2, #0]
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004db2:	2301      	movs	r3, #1
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004db6:	f7fc fed5 	bl	8001b64 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d803      	bhi.n	8004dce <HAL_SPI_TransmitReceive+0x3cc>
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dcc:	d102      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x3d2>
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004de2:	e026      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f47f af57 	bne.w	8004c9e <HAL_SPI_TransmitReceive+0x29c>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f47f af50 	bne.w	8004c9e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f94c 	bl	80050a0 <SPI_EndRxTxTransaction>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d005      	beq.n	8004e1a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2220      	movs	r2, #32
 8004e18:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e28:	e003      	b.n	8004e32 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3728      	adds	r7, #40	; 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e54:	b2db      	uxtb	r3, r3
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	603b      	str	r3, [r7, #0]
 8004e70:	4613      	mov	r3, r2
 8004e72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e74:	f7fc fe76 	bl	8001b64 <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e84:	f7fc fe6e 	bl	8001b64 <HAL_GetTick>
 8004e88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	015b      	lsls	r3, r3, #5
 8004e90:	0d1b      	lsrs	r3, r3, #20
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	fb02 f303 	mul.w	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e9a:	e054      	b.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea2:	d050      	beq.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ea4:	f7fc fe5e 	bl	8001b64 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d902      	bls.n	8004eba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d13d      	bne.n	8004f36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d111      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004edc:	d004      	beq.n	8004ee8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee6:	d107      	bne.n	8004ef8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f00:	d10f      	bne.n	8004f22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e017      	b.n	8004f66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	bf0c      	ite	eq
 8004f56:	2301      	moveq	r3, #1
 8004f58:	2300      	movne	r3, #0
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d19b      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	20000040 	.word	0x20000040

08004f74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f86:	f7fc fded 	bl	8001b64 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8e:	1a9b      	subs	r3, r3, r2
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004f96:	f7fc fde5 	bl	8001b64 <HAL_GetTick>
 8004f9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004fa4:	4b3d      	ldr	r3, [pc, #244]	; (800509c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00da      	lsls	r2, r3, #3
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	0d1b      	lsrs	r3, r3, #20
 8004fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004fbc:	e060      	b.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fc4:	d107      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d050      	beq.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fde:	f7fc fdc1 	bl	8001b64 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d902      	bls.n	8004ff4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d13d      	bne.n	8005070 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005002:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500c:	d111      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005016:	d004      	beq.n	8005022 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005020:	d107      	bne.n	8005032 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005030:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503a:	d10f      	bne.n	800505c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800505a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e010      	b.n	8005092 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	3b01      	subs	r3, #1
 800507e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4013      	ands	r3, r2
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	429a      	cmp	r2, r3
 800508e:	d196      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3728      	adds	r7, #40	; 0x28
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000040 	.word	0x20000040

080050a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af02      	add	r7, sp, #8
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f7ff ff5b 	bl	8004f74 <SPI_WaitFifoStateUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c8:	f043 0220 	orr.w	r2, r3, #32
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e027      	b.n	8005124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	9300      	str	r3, [sp, #0]
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	2200      	movs	r2, #0
 80050dc:	2180      	movs	r1, #128	; 0x80
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff fec0 	bl	8004e64 <SPI_WaitFlagStateUntilTimeout>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d007      	beq.n	80050fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	f043 0220 	orr.w	r2, r3, #32
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e014      	b.n	8005124 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	2200      	movs	r2, #0
 8005102:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f7ff ff34 	bl	8004f74 <SPI_WaitFifoStateUntilTimeout>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005116:	f043 0220 	orr.w	r2, r3, #32
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e000      	b.n	8005124 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005134:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005138:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	b29b      	uxth	r3, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	b29b      	uxth	r3, r3
 800514a:	4013      	ands	r3, r2
 800514c:	b29a      	uxth	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3714      	adds	r7, #20
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr

08005162 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005162:	b084      	sub	sp, #16
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	f107 0014 	add.w	r0, r7, #20
 8005170:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	b004      	add	sp, #16
 80051a2:	4770      	bx	lr

080051a4 <BSP_ACCELERO_Init>:
/**
  * @brief  Set accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80051ae:	2300      	movs	r3, #0
 80051b0:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef         Accelero_InitStructure;
  ACCELERO_FilterConfigTypeDef Accelero_FilterStructure = {0,0,0,0};
 80051b2:	1d3b      	adds	r3, r7, #4
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	809a      	strh	r2, [r3, #4]

  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80051ba:	4b58      	ldr	r3, [pc, #352]	; (800531c <BSP_ACCELERO_Init+0x178>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	4798      	blx	r3
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b33      	cmp	r3, #51	; 0x33
 80051c4:	d14f      	bne.n	8005266 <BSP_ACCELERO_Init+0xc2>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80051c6:	4b56      	ldr	r3, [pc, #344]	; (8005320 <BSP_ACCELERO_Init+0x17c>)
 80051c8:	4a54      	ldr	r2, [pc, #336]	; (800531c <BSP_ACCELERO_Init+0x178>)
 80051ca:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303DLHC_NORMAL_MODE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80051d0:	2340      	movs	r3, #64	; 0x40
 80051d2:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303DLHC_AXES_ENABLE;
 80051d4:	2307      	movs	r3, #7
 80051d6:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303DLHC_FULLSCALE_2G;
 80051d8:	2300      	movs	r3, #0
 80051da:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303DLHC_BlockUpdate_Continous;
 80051dc:	2300      	movs	r3, #0
 80051de:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303DLHC_BLE_LSB;
 80051e0:	2300      	movs	r3, #0
 80051e2:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303DLHC_HR_ENABLE;
 80051e4:	2308      	movs	r3, #8
 80051e6:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80051e8:	7b3a      	ldrb	r2, [r7, #12]
 80051ea:	7b7b      	ldrb	r3, [r7, #13]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 80051f2:	4313      	orrs	r3, r2
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	8abb      	ldrh	r3, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80051fe:	7c3a      	ldrb	r2, [r7, #16]
 8005200:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 8005202:	4313      	orrs	r3, r2
 8005204:	b2da      	uxtb	r2, r3
 8005206:	7cbb      	ldrb	r3, [r7, #18]
 8005208:	4313      	orrs	r3, r2
 800520a:	b2da      	uxtb	r2, r3
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	4313      	orrs	r3, r2
 8005210:	b2db      	uxtb	r3, r3
 8005212:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 8005214:	b21a      	sxth	r2, r3
 8005216:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	b21b      	sxth	r3, r3
 800521e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8005220:	4b3f      	ldr	r3, [pc, #252]	; (8005320 <BSP_ACCELERO_Init+0x17c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	8aba      	ldrh	r2, [r7, #20]
 8005228:	4610      	mov	r0, r2
 800522a:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303DLHC_HPM_NORMAL_MODE;
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8005230:	2310      	movs	r3, #16
 8005232:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303DLHC_HPF_AOI1_DISABLE;
 8005234:	2300      	movs	r3, #0
 8005236:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303DLHC_HPF_AOI2_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800523c:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 800523e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8005240:	4313      	orrs	r3, r2
 8005242:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 8005244:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 8005246:	4313      	orrs	r3, r2
 8005248:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 800524a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 800524c:	4313      	orrs	r3, r2
 800524e:	b2db      	uxtb	r3, r3
 8005250:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8005252:	4b33      	ldr	r3, [pc, #204]	; (8005320 <BSP_ACCELERO_Init+0x17c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	8aba      	ldrh	r2, [r7, #20]
 800525a:	b2d2      	uxtb	r2, r2
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
 8005264:	e054      	b.n	8005310 <BSP_ACCELERO_Init+0x16c>
  }
  else if(Lsm303agrDrv.ReadID() == I_AM_LSM303AGR)
 8005266:	4b2f      	ldr	r3, [pc, #188]	; (8005324 <BSP_ACCELERO_Init+0x180>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4798      	blx	r3
 800526c:	4603      	mov	r3, r0
 800526e:	2b33      	cmp	r3, #51	; 0x33
 8005270:	d14e      	bne.n	8005310 <BSP_ACCELERO_Init+0x16c>
  {
    /* Initialize the accelerometer driver structure */
    AccelerometerDrv = &Lsm303agrDrv;
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <BSP_ACCELERO_Init+0x17c>)
 8005274:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <BSP_ACCELERO_Init+0x180>)
 8005276:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the accelerometer structure */
    Accelero_InitStructure.Power_Mode         = LSM303AGR_NORMAL_MODE;
 8005278:	2300      	movs	r3, #0
 800527a:	733b      	strb	r3, [r7, #12]
    Accelero_InitStructure.AccOutput_DataRate = LSM303AGR_ODR_50_HZ;
 800527c:	2340      	movs	r3, #64	; 0x40
 800527e:	737b      	strb	r3, [r7, #13]
    Accelero_InitStructure.Axes_Enable        = LSM303AGR_AXES_ENABLE;
 8005280:	2307      	movs	r3, #7
 8005282:	73bb      	strb	r3, [r7, #14]
    Accelero_InitStructure.AccFull_Scale      = LSM303AGR_FULLSCALE_2G;
 8005284:	2300      	movs	r3, #0
 8005286:	74bb      	strb	r3, [r7, #18]
    Accelero_InitStructure.BlockData_Update   = LSM303AGR_BlockUpdate_Continous;
 8005288:	2300      	movs	r3, #0
 800528a:	743b      	strb	r3, [r7, #16]
    Accelero_InitStructure.Endianness         = LSM303AGR_BLE_LSB;
 800528c:	2300      	movs	r3, #0
 800528e:	747b      	strb	r3, [r7, #17]
    Accelero_InitStructure.High_Resolution    = LSM303AGR_HR_ENABLE;
 8005290:	2308      	movs	r3, #8
 8005292:	73fb      	strb	r3, [r7, #15]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 8005294:	7b3a      	ldrb	r2, [r7, #12]
 8005296:	7b7b      	ldrb	r3, [r7, #13]
 8005298:	4313      	orrs	r3, r2
 800529a:	b2da      	uxtb	r2, r3
             Accelero_InitStructure.Axes_Enable);
 800529c:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (Accelero_InitStructure.Power_Mode | Accelero_InitStructure.AccOutput_DataRate | \
 800529e:	4313      	orrs	r3, r2
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	8abb      	ldrh	r3, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	82bb      	strh	r3, [r7, #20]

    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80052aa:	7c3a      	ldrb	r2, [r7, #16]
 80052ac:	7c7b      	ldrb	r3, [r7, #17]
              Accelero_InitStructure.AccFull_Scale    | Accelero_InitStructure.High_Resolution) << 8);
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	7cbb      	ldrb	r3, [r7, #18]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	021b      	lsls	r3, r3, #8
    ctrl |= ((Accelero_InitStructure.BlockData_Update | Accelero_InitStructure.Endianness | \
 80052c0:	b21a      	sxth	r2, r3
 80052c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	b21b      	sxth	r3, r3
 80052ca:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80052cc:	4b14      	ldr	r3, [pc, #80]	; (8005320 <BSP_ACCELERO_Init+0x17c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	8aba      	ldrh	r2, [r7, #20]
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3

    /* Fill the accelerometer LPF structure */
    Accelero_FilterStructure.HighPassFilter_Mode_Selection   = LSM303AGR_HPM_NORMAL_MODE;
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	713b      	strb	r3, [r7, #4]
    Accelero_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303AGR_HPFCF_16;
 80052dc:	2310      	movs	r3, #16
 80052de:	717b      	strb	r3, [r7, #5]
    Accelero_FilterStructure.HighPassFilter_AOI1             = LSM303AGR_HPF_AOI1_DISABLE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	71bb      	strb	r3, [r7, #6]
    Accelero_FilterStructure.HighPassFilter_AOI2             = LSM303AGR_HPF_AOI2_DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	71fb      	strb	r3, [r7, #7]

    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80052e8:	793a      	ldrb	r2, [r7, #4]
                      Accelero_FilterStructure.HighPassFilter_CutOff_Frequency |\
 80052ea:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI1             |\
 80052f0:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80052f2:	4313      	orrs	r3, r2
 80052f4:	b2da      	uxtb	r2, r3
                      Accelero_FilterStructure.HighPassFilter_AOI2);
 80052f6:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (Accelero_FilterStructure.HighPassFilter_Mode_Selection   |\
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 80052fe:	4b08      	ldr	r3, [pc, #32]	; (8005320 <BSP_ACCELERO_Init+0x17c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	8aba      	ldrh	r2, [r7, #20]
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	4610      	mov	r0, r2
 800530a:	4798      	blx	r3

    ret = ACCELERO_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005310:	7dfb      	ldrb	r3, [r7, #23]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200000ec 	.word	0x200000ec
 8005320:	200006c4 	.word	0x200006c4
 8005324:	200000b8 	.word	0x200000b8

08005328 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8005332:	2300      	movs	r3, #0
 8005334:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8005336:	2300      	movs	r3, #0
 8005338:	703b      	strb	r3, [r7, #0]
 800533a:	2300      	movs	r3, #0
 800533c:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800533e:	4b52      	ldr	r3, [pc, #328]	; (8005488 <BSP_GYRO_Init+0x160>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	4798      	blx	r3
 8005344:	4603      	mov	r3, r0
 8005346:	2bd4      	cmp	r3, #212	; 0xd4
 8005348:	d005      	beq.n	8005356 <BSP_GYRO_Init+0x2e>
 800534a:	4b4f      	ldr	r3, [pc, #316]	; (8005488 <BSP_GYRO_Init+0x160>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	4798      	blx	r3
 8005350:	4603      	mov	r3, r0
 8005352:	2bd5      	cmp	r3, #213	; 0xd5
 8005354:	d146      	bne.n	80053e4 <BSP_GYRO_Init+0xbc>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8005356:	4b4d      	ldr	r3, [pc, #308]	; (800548c <BSP_GYRO_Init+0x164>)
 8005358:	4a4b      	ldr	r2, [pc, #300]	; (8005488 <BSP_GYRO_Init+0x160>)
 800535a:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 800535c:	2308      	movs	r3, #8
 800535e:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8005360:	2300      	movs	r3, #0
 8005362:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8005364:	2307      	movs	r3, #7
 8005366:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8005368:	2330      	movs	r3, #48	; 0x30
 800536a:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 800536c:	2300      	movs	r3, #0
 800536e:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8005370:	2300      	movs	r3, #0
 8005372:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8005374:	2310      	movs	r3, #16
 8005376:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005378:	793a      	ldrb	r2, [r7, #4]
 800537a:	797b      	ldrb	r3, [r7, #5]
 800537c:	4313      	orrs	r3, r2
 800537e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005380:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005382:	4313      	orrs	r3, r2
 8005384:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005386:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005388:	4313      	orrs	r3, r2
 800538a:	b2db      	uxtb	r3, r3
 800538c:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800538e:	7a3a      	ldrb	r2, [r7, #8]
 8005390:	7a7b      	ldrb	r3, [r7, #9]
 8005392:	4313      	orrs	r3, r2
 8005394:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005396:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005398:	4313      	orrs	r3, r2
 800539a:	b2db      	uxtb	r3, r3
 800539c:	b29b      	uxth	r3, r3
 800539e:	021b      	lsls	r3, r3, #8
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	89bb      	ldrh	r3, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80053a8:	4b38      	ldr	r3, [pc, #224]	; (800548c <BSP_GYRO_Init+0x164>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	89ba      	ldrh	r2, [r7, #12]
 80053b0:	4610      	mov	r0, r2
 80053b2:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80053b4:	2300      	movs	r3, #0
 80053b6:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80053bc:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80053be:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80053c6:	4b31      	ldr	r3, [pc, #196]	; (800548c <BSP_GYRO_Init+0x164>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	89ba      	ldrh	r2, [r7, #12]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	4610      	mov	r0, r2
 80053d2:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80053d4:	4b2d      	ldr	r3, [pc, #180]	; (800548c <BSP_GYRO_Init+0x164>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	2010      	movs	r0, #16
 80053dc:	4798      	blx	r3

    ret = GYRO_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
 80053e2:	e04b      	b.n	800547c <BSP_GYRO_Init+0x154>
  }
  else if (I3g4250Drv.ReadID() == I_AM_I3G4250D)
 80053e4:	4b2a      	ldr	r3, [pc, #168]	; (8005490 <BSP_GYRO_Init+0x168>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	2bd3      	cmp	r3, #211	; 0xd3
 80053ee:	d145      	bne.n	800547c <BSP_GYRO_Init+0x154>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &I3g4250Drv;
 80053f0:	4b26      	ldr	r3, [pc, #152]	; (800548c <BSP_GYRO_Init+0x164>)
 80053f2:	4a27      	ldr	r2, [pc, #156]	; (8005490 <BSP_GYRO_Init+0x168>)
 80053f4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    Gyro_InitStructure.Power_Mode       = I3G4250D_MODE_ACTIVE;
 80053f6:	2308      	movs	r3, #8
 80053f8:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = I3G4250D_OUTPUT_DATARATE_1;
 80053fa:	2300      	movs	r3, #0
 80053fc:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = I3G4250D_AXES_ENABLE;
 80053fe:	2307      	movs	r3, #7
 8005400:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = I3G4250D_BANDWIDTH_4;
 8005402:	2330      	movs	r3, #48	; 0x30
 8005404:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = I3G4250D_BlockDataUpdate_Continous;
 8005406:	2300      	movs	r3, #0
 8005408:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = I3G4250D_BLE_LSB;
 800540a:	2300      	movs	r3, #0
 800540c:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = I3G4250D_FULLSCALE_500;
 800540e:	2310      	movs	r3, #16
 8005410:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005412:	793a      	ldrb	r2, [r7, #4]
 8005414:	797b      	ldrb	r3, [r7, #5]
 8005416:	4313      	orrs	r3, r2
 8005418:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800541a:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800541c:	4313      	orrs	r3, r2
 800541e:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8005420:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8005422:	4313      	orrs	r3, r2
 8005424:	b2db      	uxtb	r3, r3
 8005426:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005428:	7a3a      	ldrb	r2, [r7, #8]
 800542a:	7a7b      	ldrb	r3, [r7, #9]
 800542c:	4313      	orrs	r3, r2
 800542e:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8005430:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8005432:	4313      	orrs	r3, r2
 8005434:	b2db      	uxtb	r3, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	b29a      	uxth	r2, r3
 800543c:	89bb      	ldrh	r3, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	81bb      	strh	r3, [r7, #12]

    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8005442:	4b12      	ldr	r3, [pc, #72]	; (800548c <BSP_GYRO_Init+0x164>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	89ba      	ldrh	r2, [r7, #12]
 800544a:	4610      	mov	r0, r2
 800544c:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = I3G4250D_HPM_NORMAL_MODE_RES;
 800544e:	2300      	movs	r3, #0
 8005450:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = I3G4250D_HPFCF_0;
 8005452:	2300      	movs	r3, #0
 8005454:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8005456:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8005458:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800545a:	4313      	orrs	r3, r2
 800545c:	b2db      	uxtb	r3, r3
 800545e:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl);
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <BSP_GYRO_Init+0x164>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	89ba      	ldrh	r2, [r7, #12]
 8005468:	b2d2      	uxtb	r2, r2
 800546a:	4610      	mov	r0, r2
 800546c:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);
 800546e:	4b07      	ldr	r3, [pc, #28]	; (800548c <BSP_GYRO_Init+0x164>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	2010      	movs	r0, #16
 8005476:	4798      	blx	r3

    ret = GYRO_OK;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800547c:	7bfb      	ldrb	r3, [r7, #15]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000084 	.word	0x20000084
 800548c:	200006c8 	.word	0x200006c8
 8005490:	20000050 	.word	0x20000050

08005494 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <BSP_GYRO_GetXYZ+0x24>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d004      	beq.n	80054b0 <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 80054a6:	4b04      	ldr	r3, [pc, #16]	; (80054b8 <BSP_GYRO_GetXYZ+0x24>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
  }
}
 80054b0:	bf00      	nop
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	200006c8 	.word	0x200006c8

080054bc <I3G4250D_Init>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_Init(uint16_t InitStruct)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	4603      	mov	r3, r0
 80054c4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]

  /* Configure the low level interface */
  GYRO_IO_Init();
 80054ca:	f001 f8df 	bl	800668c <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80054ce:	88fb      	ldrh	r3, [r7, #6]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 80054d4:	f107 030f 	add.w	r3, r7, #15
 80054d8:	2201      	movs	r2, #1
 80054da:	2120      	movs	r1, #32
 80054dc:	4618      	mov	r0, r3
 80054de:	f001 f91b 	bl	8006718 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG4 register */
  ctrl = (uint8_t)(InitStruct >> 8);
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG4_ADDR, 1);
 80054ec:	f107 030f 	add.w	r3, r7, #15
 80054f0:	2201      	movs	r2, #1
 80054f2:	2123      	movs	r1, #35	; 0x23
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f90f 	bl	8006718 <GYRO_IO_Write>
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <I3G4250D_DeInit>:
  * @brief I3G4250D De-initialization
  * @param  None
  * @retval None
  */
void I3G4250D_DeInit(void)
{
 8005502:	b480      	push	{r7}
 8005504:	af00      	add	r7, sp, #0
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr

08005510 <I3G4250D_ReadID>:
  * @brief  Read ID address of I3G4250D
  * @param  None
  * @retval ID name
  */
uint8_t I3G4250D_ReadID(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
  uint8_t tmp;

  /* Configure the low level interface */
  GYRO_IO_Init();
 8005516:	f001 f8b9 	bl	800668c <GYRO_IO_Init>

  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, I3G4250D_WHO_AM_I_ADDR, 1);
 800551a:	1dfb      	adds	r3, r7, #7
 800551c:	2201      	movs	r2, #1
 800551e:	210f      	movs	r1, #15
 8005520:	4618      	mov	r0, r3
 8005522:	f001 f92b 	bl	800677c <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
 8005526:	79fb      	ldrb	r3, [r7, #7]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <I3G4250D_RebootCmd>:
  * @brief  Reboot memory content of I3G4250D
  * @param  None
  * @retval None
  */
void I3G4250D_RebootCmd(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005536:	1dfb      	adds	r3, r7, #7
 8005538:	2201      	movs	r2, #1
 800553a:	2124      	movs	r1, #36	; 0x24
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f91d 	bl	800677c <GYRO_IO_Read>

  /* Enable or Disable the reboot memory */
  tmpreg |= I3G4250D_BOOT_REBOOTMEMORY;
 8005542:	79fb      	ldrb	r3, [r7, #7]
 8005544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	71fb      	strb	r3, [r7, #7]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800554c:	1dfb      	adds	r3, r7, #7
 800554e:	2201      	movs	r2, #1
 8005550:	2124      	movs	r1, #36	; 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f001 f8e0 	bl	8006718 <GYRO_IO_Write>
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <I3G4250D_LowPower>:
  * @param  I3G4250D_InitStruct: pointer to a I3G4250D_InitTypeDef structure
  *         that contains the configuration setting for the I3G4250D.
  * @retval None
  */
void I3G4250D_LowPower(uint16_t InitStruct)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	4603      	mov	r3, r0
 8005568:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800556a:	2300      	movs	r3, #0
 800556c:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800556e:	88fb      	ldrh	r3, [r7, #6]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, I3G4250D_CTRL_REG1_ADDR, 1);
 8005574:	f107 030f 	add.w	r3, r7, #15
 8005578:	2201      	movs	r2, #1
 800557a:	2120      	movs	r1, #32
 800557c:	4618      	mov	r0, r3
 800557e:	f001 f8cb 	bl	8006718 <GYRO_IO_Write>
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <I3G4250D_INT1InterruptConfig>:
  * @brief  Set I3G4250D Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the I3G4250D Interrupt.
  * @retval None
  */
void I3G4250D_INT1InterruptConfig(uint16_t Int1Config)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	4603      	mov	r3, r0
 8005592:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005594:	2300      	movs	r3, #0
 8005596:	73fb      	strb	r3, [r7, #15]
 8005598:	2300      	movs	r3, #0
 800559a:	73bb      	strb	r3, [r7, #14]

  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 800559c:	f107 030f 	add.w	r3, r7, #15
 80055a0:	2201      	movs	r2, #1
 80055a2:	2130      	movs	r1, #48	; 0x30
 80055a4:	4618      	mov	r0, r3
 80055a6:	f001 f8e9 	bl	800677c <GYRO_IO_Read>

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80055aa:	f107 030e 	add.w	r3, r7, #14
 80055ae:	2201      	movs	r2, #1
 80055b0:	2122      	movs	r1, #34	; 0x22
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f8e2 	bl	800677c <GYRO_IO_Read>

  ctrl_cfr &= 0x80;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	121b      	asrs	r3, r3, #8
 80055c8:	b25a      	sxtb	r2, r3
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	4313      	orrs	r3, r2
 80055d0:	b25b      	sxtb	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	73fb      	strb	r3, [r7, #15]

  ctrl3 &= 0xDF;
 80055d6:	7bbb      	ldrb	r3, [r7, #14]
 80055d8:	f023 0320 	bic.w	r3, r3, #32
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	73bb      	strb	r3, [r7, #14]

  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, I3G4250D_INT1_CFG_ADDR, 1);
 80055ec:	f107 030f 	add.w	r3, r7, #15
 80055f0:	2201      	movs	r2, #1
 80055f2:	2130      	movs	r1, #48	; 0x30
 80055f4:	4618      	mov	r0, r3
 80055f6:	f001 f88f 	bl	8006718 <GYRO_IO_Write>

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, I3G4250D_CTRL_REG3_ADDR, 1);
 80055fa:	f107 030e 	add.w	r3, r7, #14
 80055fe:	2201      	movs	r2, #1
 8005600:	2122      	movs	r1, #34	; 0x22
 8005602:	4618      	mov	r0, r3
 8005604:	f001 f888 	bl	8006718 <GYRO_IO_Write>
}
 8005608:	bf00      	nop
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <I3G4250D_EnableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_EnableIT(uint8_t IntSel)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	4603      	mov	r3, r0
 8005618:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800561a:	f107 030f 	add.w	r3, r7, #15
 800561e:	2201      	movs	r2, #1
 8005620:	2122      	movs	r1, #34	; 0x22
 8005622:	4618      	mov	r0, r3
 8005624:	f001 f8aa 	bl	800677c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <I3G4250D_EnableIT+0x34>
  {
    tmpreg &= 0x7F;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005634:	b2db      	uxtb	r3, r3
 8005636:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_ENABLE;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
 800563a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563e:	b2db      	uxtb	r3, r3
 8005640:	73fb      	strb	r3, [r7, #15]
 8005642:	e00c      	b.n	800565e <I3G4250D_EnableIT+0x4e>
  }
  else if (IntSel == I3G4250D_INT2)
 8005644:	79fb      	ldrb	r3, [r7, #7]
 8005646:	2b01      	cmp	r3, #1
 8005648:	d109      	bne.n	800565e <I3G4250D_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	f023 0308 	bic.w	r3, r3, #8
 8005650:	b2db      	uxtb	r3, r3
 8005652:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_ENABLE;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	f043 0308 	orr.w	r3, r3, #8
 800565a:	b2db      	uxtb	r3, r3
 800565c:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800565e:	f107 030f 	add.w	r3, r7, #15
 8005662:	2201      	movs	r2, #1
 8005664:	2122      	movs	r1, #34	; 0x22
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f856 	bl	8006718 <GYRO_IO_Write>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I3G4250D_DisableIT>:
  *        @arg I3G4250D_INT1
  *        @arg I3G4250D_INT2
  * @retval None
  */
void I3G4250D_DisableIT(uint8_t IntSel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	4603      	mov	r3, r0
 800567c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 800567e:	f107 030f 	add.w	r3, r7, #15
 8005682:	2201      	movs	r2, #1
 8005684:	2122      	movs	r1, #34	; 0x22
 8005686:	4618      	mov	r0, r3
 8005688:	f001 f878 	bl	800677c <GYRO_IO_Read>

  if (IntSel == I3G4250D_INT1)
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d107      	bne.n	80056a2 <I3G4250D_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005698:	b2db      	uxtb	r3, r3
 800569a:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT1INTERRUPT_DISABLE;
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	73fb      	strb	r3, [r7, #15]
 80056a0:	e009      	b.n	80056b6 <I3G4250D_DisableIT+0x42>
  }
  else if (IntSel == I3G4250D_INT2)
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <I3G4250D_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	f023 0308 	bic.w	r3, r3, #8
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= I3G4250D_INT2INTERRUPT_DISABLE;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG3_ADDR, 1);
 80056b6:	f107 030f 	add.w	r3, r7, #15
 80056ba:	2201      	movs	r2, #1
 80056bc:	2122      	movs	r1, #34	; 0x22
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 f82a 	bl	8006718 <GYRO_IO_Write>
}
 80056c4:	bf00      	nop
 80056c6:	3710      	adds	r7, #16
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <I3G4250D_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.
  * @retval None
  */
void I3G4250D_FilterConfig(uint8_t FilterStruct)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80056d6:	f107 030f 	add.w	r3, r7, #15
 80056da:	2201      	movs	r2, #1
 80056dc:	2121      	movs	r1, #33	; 0x21
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 f84c 	bl	800677c <GYRO_IO_Read>

  tmpreg &= 0xC0;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	73fb      	strb	r3, [r7, #15]

  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	79fb      	ldrb	r3, [r7, #7]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG2_ADDR, 1);
 80056f8:	f107 030f 	add.w	r3, r7, #15
 80056fc:	2201      	movs	r2, #1
 80056fe:	2121      	movs	r1, #33	; 0x21
 8005700:	4618      	mov	r0, r3
 8005702:	f001 f809 	bl	8006718 <GYRO_IO_Write>
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <I3G4250D_FilterCmd>:
  *         @arg: I3G4250D_HIGHPASSFILTER_DISABLE
  *         @arg: I3G4250D_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void I3G4250D_FilterCmd(uint8_t HighPassFilterState)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	4603      	mov	r3, r0
 8005716:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;

  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 8005718:	f107 030f 	add.w	r3, r7, #15
 800571c:	2201      	movs	r2, #1
 800571e:	2124      	movs	r1, #36	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f82b 	bl	800677c <GYRO_IO_Read>

  tmpreg &= 0xEF;
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	f023 0310 	bic.w	r3, r3, #16
 800572c:	b2db      	uxtb	r3, r3
 800572e:	73fb      	strb	r3, [r7, #15]

  tmpreg |= HighPassFilterState;
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	4313      	orrs	r3, r2
 8005736:	b2db      	uxtb	r3, r3
 8005738:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, I3G4250D_CTRL_REG5_ADDR, 1);
 800573a:	f107 030f 	add.w	r3, r7, #15
 800573e:	2201      	movs	r2, #1
 8005740:	2124      	movs	r1, #36	; 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f000 ffe8 	bl	8006718 <GYRO_IO_Write>
}
 8005748:	bf00      	nop
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <I3G4250D_ReadXYZAngRate>:
* @brief  Calculate the I3G4250D angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void I3G4250D_ReadXYZAngRate(float *pfData)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] = {0};
 8005758:	2300      	movs	r3, #0
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	2300      	movs	r3, #0
 800575e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005760:	f107 0310 	add.w	r3, r7, #16
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800576e:	f04f 0300 	mov.w	r3, #0
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
  int i = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	623b      	str	r3, [r7, #32]

  GYRO_IO_Read(&tmpreg, I3G4250D_CTRL_REG4_ADDR, 1);
 8005778:	f107 030f 	add.w	r3, r7, #15
 800577c:	2201      	movs	r2, #1
 800577e:	2123      	movs	r1, #35	; 0x23
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fffb 	bl	800677c <GYRO_IO_Read>

  GYRO_IO_Read(tmpbuffer, I3G4250D_OUT_X_L_ADDR, 6);
 8005786:	f107 0318 	add.w	r3, r7, #24
 800578a:	2206      	movs	r2, #6
 800578c:	2128      	movs	r1, #40	; 0x28
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fff4 	bl	800677c <GYRO_IO_Read>

  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if (!(tmpreg & I3G4250D_BLE_MSB))
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800579a:	2b00      	cmp	r3, #0
 800579c:	d123      	bne.n	80057e6 <I3G4250D_ReadXYZAngRate+0x96>
  {
    for (i = 0; i < 3; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	e01c      	b.n	80057de <I3G4250D_ReadXYZAngRate+0x8e>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i + 1] << 8) + tmpbuffer[2 * i]);
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	3301      	adds	r3, #1
 80057aa:	3328      	adds	r3, #40	; 0x28
 80057ac:	443b      	add	r3, r7
 80057ae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	3328      	adds	r3, #40	; 0x28
 80057be:	443b      	add	r3, r7
 80057c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4413      	add	r3, r2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	b21a      	sxth	r2, r3
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	3328      	adds	r3, #40	; 0x28
 80057d2:	443b      	add	r3, r7
 80057d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	3301      	adds	r3, #1
 80057dc:	623b      	str	r3, [r7, #32]
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	dddf      	ble.n	80057a4 <I3G4250D_ReadXYZAngRate+0x54>
 80057e4:	e022      	b.n	800582c <I3G4250D_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for (i = 0; i < 3; i++)
 80057e6:	2300      	movs	r3, #0
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	e01c      	b.n	8005826 <I3G4250D_ReadXYZAngRate+0xd6>
    {
      RawData[i] = (int16_t)(((uint16_t)tmpbuffer[2 * i] << 8) + tmpbuffer[2 * i + 1]);
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	3328      	adds	r3, #40	; 0x28
 80057f2:	443b      	add	r3, r7
 80057f4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	3301      	adds	r3, #1
 8005804:	3328      	adds	r3, #40	; 0x28
 8005806:	443b      	add	r3, r7
 8005808:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800580c:	b29b      	uxth	r3, r3
 800580e:	4413      	add	r3, r2
 8005810:	b29b      	uxth	r3, r3
 8005812:	b21a      	sxth	r2, r3
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	3328      	adds	r3, #40	; 0x28
 800581a:	443b      	add	r3, r7
 800581c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0; i < 3; i++)
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	3301      	adds	r3, #1
 8005824:	623b      	str	r3, [r7, #32]
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	2b02      	cmp	r3, #2
 800582a:	dddf      	ble.n	80057ec <I3G4250D_ReadXYZAngRate+0x9c>
    }
  }

  /* Switch the sensitivity value set in the CRTL4 */
  switch (tmpreg & I3G4250D_FULLSCALE_SELECTION)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005832:	2b20      	cmp	r3, #32
 8005834:	d00c      	beq.n	8005850 <I3G4250D_ReadXYZAngRate+0x100>
 8005836:	2b20      	cmp	r3, #32
 8005838:	dc0d      	bgt.n	8005856 <I3G4250D_ReadXYZAngRate+0x106>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <I3G4250D_ReadXYZAngRate+0xf4>
 800583e:	2b10      	cmp	r3, #16
 8005840:	d003      	beq.n	800584a <I3G4250D_ReadXYZAngRate+0xfa>
 8005842:	e008      	b.n	8005856 <I3G4250D_ReadXYZAngRate+0x106>
  {
    case I3G4250D_FULLSCALE_245:
      sensitivity = I3G4250D_SENSITIVITY_245DPS;
 8005844:	4b15      	ldr	r3, [pc, #84]	; (800589c <I3G4250D_ReadXYZAngRate+0x14c>)
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005848:	e005      	b.n	8005856 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_500:
      sensitivity = I3G4250D_SENSITIVITY_500DPS;
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <I3G4250D_ReadXYZAngRate+0x150>)
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800584e:	e002      	b.n	8005856 <I3G4250D_ReadXYZAngRate+0x106>

    case I3G4250D_FULLSCALE_2000:
      sensitivity = I3G4250D_SENSITIVITY_2000DPS;
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <I3G4250D_ReadXYZAngRate+0x154>)
 8005852:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8005854:	bf00      	nop
  }
  /* Multiplied by sensitivity */
  for (i = 0; i < 3; i++)
 8005856:	2300      	movs	r3, #0
 8005858:	623b      	str	r3, [r7, #32]
 800585a:	e016      	b.n	800588a <I3G4250D_ReadXYZAngRate+0x13a>
  {
    pfData[i] = (float)(RawData[i] * sensitivity);
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	3328      	adds	r3, #40	; 0x28
 8005862:	443b      	add	r3, r7
 8005864:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8005868:	ee07 3a90 	vmov	s15, r3
 800586c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800587c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005880:	edc3 7a00 	vstr	s15, [r3]
  for (i = 0; i < 3; i++)
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	3301      	adds	r3, #1
 8005888:	623b      	str	r3, [r7, #32]
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	2b02      	cmp	r3, #2
 800588e:	dde5      	ble.n	800585c <I3G4250D_ReadXYZAngRate+0x10c>
  }
}
 8005890:	bf00      	nop
 8005892:	bf00      	nop
 8005894:	3728      	adds	r7, #40	; 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	410c0000 	.word	0x410c0000
 80058a0:	418c0000 	.word	0x418c0000
 80058a4:	428c0000 	.word	0x428c0000

080058a8 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80058b6:	f000 fee9 	bl	800668c <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80058c0:	f107 030f 	add.w	r3, r7, #15
 80058c4:	2201      	movs	r2, #1
 80058c6:	2120      	movs	r1, #32
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 ff25 	bl	8006718 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	0a1b      	lsrs	r3, r3, #8
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80058d8:	f107 030f 	add.w	r3, r7, #15
 80058dc:	2201      	movs	r2, #1
 80058de:	2123      	movs	r1, #35	; 0x23
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 ff19 	bl	8006718 <GYRO_IO_Write>
}
 80058e6:	bf00      	nop
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80058ee:	b480      	push	{r7}
 80058f0:	af00      	add	r7, sp, #0
}
 80058f2:	bf00      	nop
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8005902:	f000 fec3 	bl	800668c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8005906:	1dfb      	adds	r3, r7, #7
 8005908:	2201      	movs	r2, #1
 800590a:	210f      	movs	r1, #15
 800590c:	4618      	mov	r0, r3
 800590e:	f000 ff35 	bl	800677c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8005912:	79fb      	ldrb	r3, [r7, #7]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005922:	1dfb      	adds	r3, r7, #7
 8005924:	2201      	movs	r2, #1
 8005926:	2124      	movs	r1, #36	; 0x24
 8005928:	4618      	mov	r0, r3
 800592a:	f000 ff27 	bl	800677c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005934:	b2db      	uxtb	r3, r3
 8005936:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005938:	1dfb      	adds	r3, r7, #7
 800593a:	2201      	movs	r2, #1
 800593c:	2124      	movs	r1, #36	; 0x24
 800593e:	4618      	mov	r0, r3
 8005940:	f000 feea 	bl	8006718 <GYRO_IO_Write>
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	4603      	mov	r3, r0
 8005954:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005960:	f107 030f 	add.w	r3, r7, #15
 8005964:	2201      	movs	r2, #1
 8005966:	2120      	movs	r1, #32
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fed5 	bl	8006718 <GYRO_IO_Write>
}
 800596e:	bf00      	nop
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	4603      	mov	r3, r0
 800597e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8005980:	2300      	movs	r3, #0
 8005982:	73fb      	strb	r3, [r7, #15]
 8005984:	2300      	movs	r3, #0
 8005986:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8005988:	f107 030f 	add.w	r3, r7, #15
 800598c:	2201      	movs	r2, #1
 800598e:	2130      	movs	r1, #48	; 0x30
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fef3 	bl	800677c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8005996:	f107 030e 	add.w	r3, r7, #14
 800599a:	2201      	movs	r2, #1
 800599c:	2122      	movs	r1, #34	; 0x22
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 feec 	bl	800677c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
 80059a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	121b      	asrs	r3, r3, #8
 80059b4:	b25a      	sxtb	r2, r3
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b25b      	sxtb	r3, r3
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	f023 0320 	bic.w	r3, r3, #32
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80059cc:	88fb      	ldrh	r3, [r7, #6]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	7bbb      	ldrb	r3, [r7, #14]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80059d8:	f107 030f 	add.w	r3, r7, #15
 80059dc:	2201      	movs	r2, #1
 80059de:	2130      	movs	r1, #48	; 0x30
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fe99 	bl	8006718 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80059e6:	f107 030e 	add.w	r3, r7, #14
 80059ea:	2201      	movs	r2, #1
 80059ec:	2122      	movs	r1, #34	; 0x22
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fe92 	bl	8006718 <GYRO_IO_Write>
}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a06:	f107 030f 	add.w	r3, r7, #15
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	2122      	movs	r1, #34	; 0x22
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 feb4 	bl	800677c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10a      	bne.n	8005a30 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	73fb      	strb	r3, [r7, #15]
 8005a2e:	e00c      	b.n	8005a4a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8005a30:	79fb      	ldrb	r3, [r7, #7]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d109      	bne.n	8005a4a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	f023 0308 	bic.w	r3, r3, #8
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	f043 0308 	orr.w	r3, r3, #8
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a4a:	f107 030f 	add.w	r3, r7, #15
 8005a4e:	2201      	movs	r2, #1
 8005a50:	2122      	movs	r1, #34	; 0x22
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fe60 	bl	8006718 <GYRO_IO_Write>
}
 8005a58:	bf00      	nop
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4603      	mov	r3, r0
 8005a68:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005a6a:	f107 030f 	add.w	r3, r7, #15
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2122      	movs	r1, #34	; 0x22
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fe82 	bl	800677c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	73fb      	strb	r3, [r7, #15]
 8005a8c:	e009      	b.n	8005aa2 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d106      	bne.n	8005aa2 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	f023 0308 	bic.w	r3, r3, #8
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005aa2:	f107 030f 	add.w	r3, r7, #15
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2122      	movs	r1, #34	; 0x22
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f000 fe34 	bl	8006718 <GYRO_IO_Write>
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005ac2:	f107 030f 	add.w	r3, r7, #15
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	2121      	movs	r1, #33	; 0x21
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fe56 	bl	800677c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
 8005ad2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8005ada:	7bfa      	ldrb	r2, [r7, #15]
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005ae4:	f107 030f 	add.w	r3, r7, #15
 8005ae8:	2201      	movs	r2, #1
 8005aea:	2121      	movs	r1, #33	; 0x21
 8005aec:	4618      	mov	r0, r3
 8005aee:	f000 fe13 	bl	8006718 <GYRO_IO_Write>
}
 8005af2:	bf00      	nop
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	4603      	mov	r3, r0
 8005b02:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005b04:	f107 030f 	add.w	r3, r7, #15
 8005b08:	2201      	movs	r2, #1
 8005b0a:	2124      	movs	r1, #36	; 0x24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fe35 	bl	800677c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	f023 0310 	bic.w	r3, r3, #16
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8005b1c:	7bfa      	ldrb	r2, [r7, #15]
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005b26:	f107 030f 	add.w	r3, r7, #15
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	2124      	movs	r1, #36	; 0x24
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fdf2 	bl	8006718 <GYRO_IO_Write>
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8005b4c:	f107 0310 	add.w	r3, r7, #16
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005b64:	f107 030f 	add.w	r3, r7, #15
 8005b68:	2201      	movs	r2, #1
 8005b6a:	2123      	movs	r1, #35	; 0x23
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 fe05 	bl	800677c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8005b72:	f107 0318 	add.w	r3, r7, #24
 8005b76:	2206      	movs	r2, #6
 8005b78:	2128      	movs	r1, #40	; 0x28
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fdfe 	bl	800677c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d123      	bne.n	8005bd2 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	e01c      	b.n	8005bca <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	3301      	adds	r3, #1
 8005b96:	3328      	adds	r3, #40	; 0x28
 8005b98:	443b      	add	r3, r7
 8005b9a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	021b      	lsls	r3, r3, #8
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	3328      	adds	r3, #40	; 0x28
 8005baa:	443b      	add	r3, r7
 8005bac:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	b21a      	sxth	r2, r3
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	3328      	adds	r3, #40	; 0x28
 8005bbe:	443b      	add	r3, r7
 8005bc0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	dddf      	ble.n	8005b90 <L3GD20_ReadXYZAngRate+0x54>
 8005bd0:	e022      	b.n	8005c18 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	623b      	str	r3, [r7, #32]
 8005bd6:	e01c      	b.n	8005c12 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	3328      	adds	r3, #40	; 0x28
 8005bde:	443b      	add	r3, r7
 8005be0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	3301      	adds	r3, #1
 8005bf0:	3328      	adds	r3, #40	; 0x28
 8005bf2:	443b      	add	r3, r7
 8005bf4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	b21a      	sxth	r2, r3
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	3328      	adds	r3, #40	; 0x28
 8005c06:	443b      	add	r3, r7
 8005c08:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	dddf      	ble.n	8005bd8 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d00c      	beq.n	8005c3c <L3GD20_ReadXYZAngRate+0x100>
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	dc0d      	bgt.n	8005c42 <L3GD20_ReadXYZAngRate+0x106>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <L3GD20_ReadXYZAngRate+0xf4>
 8005c2a:	2b10      	cmp	r3, #16
 8005c2c:	d003      	beq.n	8005c36 <L3GD20_ReadXYZAngRate+0xfa>
 8005c2e:	e008      	b.n	8005c42 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8005c30:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <L3GD20_ReadXYZAngRate+0x14c>)
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005c34:	e005      	b.n	8005c42 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8005c36:	4b15      	ldr	r3, [pc, #84]	; (8005c8c <L3GD20_ReadXYZAngRate+0x150>)
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005c3a:	e002      	b.n	8005c42 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8005c3c:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <L3GD20_ReadXYZAngRate+0x154>)
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8005c40:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	623b      	str	r3, [r7, #32]
 8005c46:	e016      	b.n	8005c76 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	3328      	adds	r3, #40	; 0x28
 8005c4e:	443b      	add	r3, r7
 8005c50:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8005c54:	ee07 3a90 	vmov	s15, r3
 8005c58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	4413      	add	r3, r2
 8005c64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	3301      	adds	r3, #1
 8005c74:	623b      	str	r3, [r7, #32]
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	dde5      	ble.n	8005c48 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	3728      	adds	r7, #40	; 0x28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	410c0000 	.word	0x410c0000
 8005c8c:	418c0000 	.word	0x418c0000
 8005c90:	428c0000 	.word	0x428c0000

08005c94 <LSM303AGR_AccInit>:
  * @brief  Set LSM303AGR Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303AGR_AccInit(uint16_t InitStruct)
{  
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8005ca2:	f000 fda5 	bl	80067f0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG1_A, ctrl);
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
 8005cac:	461a      	mov	r2, r3
 8005cae:	2120      	movs	r1, #32
 8005cb0:	2032      	movs	r0, #50	; 0x32
 8005cb2:	f000 fe15 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A, ctrl);
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2123      	movs	r1, #35	; 0x23
 8005cc0:	2032      	movs	r0, #50	; 0x32
 8005cc2:	f000 fe0d 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8005cc6:	bf00      	nop
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <LSM303AGR_AccDeInit>:
  * @brief  LSM303AGR De-initialization.
  * @param  None
  * @retval None
  */
void LSM303AGR_AccDeInit(void)
{  
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <LSM303AGR_AccReadID>:
  * @brief  Read LSM303AGR ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303AGR_AccReadID(void)
{  
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8005ce6:	f000 fd83 	bl	80067f0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_WHO_AM_I_ADDR);
 8005cea:	210f      	movs	r1, #15
 8005cec:	2032      	movs	r0, #50	; 0x32
 8005cee:	f000 fe0a 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <LSM303AGR_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303AGR
  * @param  None
  * @retval None
  */
void LSM303AGR_AccRebootCmd(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8005d06:	2124      	movs	r1, #36	; 0x24
 8005d08:	2032      	movs	r0, #50	; 0x32
 8005d0a:	f000 fdfc 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303AGR_BOOT_REBOOTMEMORY;
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d18:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A, tmpreg);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	2124      	movs	r1, #36	; 0x24
 8005d20:	2032      	movs	r0, #50	; 0x32
 8005d22:	f000 fddd 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8005d26:	bf00      	nop
 8005d28:	3708      	adds	r7, #8
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <LSM303AGR_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303AGR_AccFilterConfig(uint8_t FilterStruct) 
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	4603      	mov	r3, r0
 8005d36:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005d38:	2121      	movs	r1, #33	; 0x21
 8005d3a:	2032      	movs	r0, #50	; 0x32
 8005d3c:	f000 fde3 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005d40:	4603      	mov	r3, r0
 8005d42:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 8005d4c:	7bfa      	ldrb	r2, [r7, #15]
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	461a      	mov	r2, r3
 8005d58:	2121      	movs	r1, #33	; 0x21
 8005d5a:	2032      	movs	r0, #50	; 0x32
 8005d5c:	f000 fdc0 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <LSM303AGR_AccFilterCmd>:
  *         @arg: LSM303AGR_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303AGR_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterCmd(uint8_t HighPassFilterState)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005d72:	2121      	movs	r1, #33	; 0x21
 8005d74:	2032      	movs	r0, #50	; 0x32
 8005d76:	f000 fdc6 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	f023 0308 	bic.w	r3, r3, #8
 8005d84:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8005d86:	7bfa      	ldrb	r2, [r7, #15]
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	461a      	mov	r2, r3
 8005d92:	2121      	movs	r1, #33	; 0x21
 8005d94:	2032      	movs	r0, #50	; 0x32
 8005d96:	f000 fda3 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <LSM303AGR_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303AGR_AccReadXYZ(int16_t* pData)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b088      	sub	sp, #32
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 8005daa:	2300      	movs	r3, #0
 8005dac:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8005db2:	2301      	movs	r3, #1
 8005db4:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG4_A);
 8005db6:	2123      	movs	r1, #35	; 0x23
 8005db8:	2032      	movs	r0, #50	; 0x32
 8005dba:	f000 fda4 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG5_A);
 8005dc2:	2124      	movs	r1, #36	; 0x24
 8005dc4:	2032      	movs	r0, #50	; 0x32
 8005dc6:	f000 fd9e 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_L_A); 
 8005dce:	2128      	movs	r1, #40	; 0x28
 8005dd0:	2032      	movs	r0, #50	; 0x32
 8005dd2:	f000 fd98 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_X_H_A);
 8005ddc:	2129      	movs	r1, #41	; 0x29
 8005dde:	2032      	movs	r0, #50	; 0x32
 8005de0:	f000 fd91 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005de4:	4603      	mov	r3, r0
 8005de6:	b25b      	sxtb	r3, r3
 8005de8:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_L_A);
 8005dea:	212a      	movs	r1, #42	; 0x2a
 8005dec:	2032      	movs	r0, #50	; 0x32
 8005dee:	f000 fd8a 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005df2:	4603      	mov	r3, r0
 8005df4:	b25b      	sxtb	r3, r3
 8005df6:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Y_H_A);
 8005df8:	212b      	movs	r1, #43	; 0x2b
 8005dfa:	2032      	movs	r0, #50	; 0x32
 8005dfc:	f000 fd83 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005e00:	4603      	mov	r3, r0
 8005e02:	b25b      	sxtb	r3, r3
 8005e04:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_L_A);
 8005e06:	212c      	movs	r1, #44	; 0x2c
 8005e08:	2032      	movs	r0, #50	; 0x32
 8005e0a:	f000 fd7c 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	b25b      	sxtb	r3, r3
 8005e12:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_OUT_Z_H_A);
 8005e14:	212d      	movs	r1, #45	; 0x2d
 8005e16:	2032      	movs	r0, #50	; 0x32
 8005e18:	f000 fd75 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	b25b      	sxtb	r3, r3
 8005e20:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303AGR_BLE_MSB)) 
 8005e22:	7d3b      	ldrb	r3, [r7, #20]
 8005e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d123      	bne.n	8005e74 <LSM303AGR_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e01c      	b.n	8005e6c <LSM303AGR_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	3301      	adds	r3, #1
 8005e38:	3320      	adds	r3, #32
 8005e3a:	443b      	add	r3, r7
 8005e3c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	7ffb      	ldrb	r3, [r7, #31]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	3320      	adds	r3, #32
 8005e4c:	443b      	add	r3, r7
 8005e4e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	7ffb      	ldrb	r3, [r7, #31]
 8005e5a:	b212      	sxth	r2, r2
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	3320      	adds	r3, #32
 8005e60:	443b      	add	r3, r7
 8005e62:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005e66:	7ffb      	ldrb	r3, [r7, #31]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	77fb      	strb	r3, [r7, #31]
 8005e6c:	7ffb      	ldrb	r3, [r7, #31]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d9df      	bls.n	8005e32 <LSM303AGR_AccReadXYZ+0x90>
 8005e72:	e022      	b.n	8005eba <LSM303AGR_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8005e74:	2300      	movs	r3, #0
 8005e76:	77fb      	strb	r3, [r7, #31]
 8005e78:	e01c      	b.n	8005eb4 <LSM303AGR_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8005e7a:	7ffb      	ldrb	r3, [r7, #31]
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	3320      	adds	r3, #32
 8005e80:	443b      	add	r3, r7
 8005e82:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	021b      	lsls	r3, r3, #8
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	7ffb      	ldrb	r3, [r7, #31]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	3301      	adds	r3, #1
 8005e92:	3320      	adds	r3, #32
 8005e94:	443b      	add	r3, r7
 8005e96:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	7ffb      	ldrb	r3, [r7, #31]
 8005ea2:	b212      	sxth	r2, r2
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	3320      	adds	r3, #32
 8005ea8:	443b      	add	r3, r7
 8005eaa:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8005eae:	7ffb      	ldrb	r3, [r7, #31]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	77fb      	strb	r3, [r7, #31]
 8005eb4:	7ffb      	ldrb	r3, [r7, #31]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d9df      	bls.n	8005e7a <LSM303AGR_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303AGR_FULLSCALE_16G)
 8005eba:	7d3b      	ldrb	r3, [r7, #20]
 8005ebc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ec0:	2b30      	cmp	r3, #48	; 0x30
 8005ec2:	d013      	beq.n	8005eec <LSM303AGR_AccReadXYZ+0x14a>
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	dc14      	bgt.n	8005ef2 <LSM303AGR_AccReadXYZ+0x150>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d00c      	beq.n	8005ee6 <LSM303AGR_AccReadXYZ+0x144>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	dc10      	bgt.n	8005ef2 <LSM303AGR_AccReadXYZ+0x150>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d002      	beq.n	8005eda <LSM303AGR_AccReadXYZ+0x138>
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d003      	beq.n	8005ee0 <LSM303AGR_AccReadXYZ+0x13e>
 8005ed8:	e00b      	b.n	8005ef2 <LSM303AGR_AccReadXYZ+0x150>
  {
  case LSM303AGR_FULLSCALE_2G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_2G;
 8005eda:	2301      	movs	r3, #1
 8005edc:	77bb      	strb	r3, [r7, #30]
    break;
 8005ede:	e008      	b.n	8005ef2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_4G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_4G;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	77bb      	strb	r3, [r7, #30]
    break;
 8005ee4:	e005      	b.n	8005ef2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_8G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_8G;
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	77bb      	strb	r3, [r7, #30]
    break;
 8005eea:	e002      	b.n	8005ef2 <LSM303AGR_AccReadXYZ+0x150>
  case LSM303AGR_FULLSCALE_16G:
    sensitivity = LSM303AGR_ACC_SENSITIVITY_16G;
 8005eec:	230c      	movs	r3, #12
 8005eee:	77bb      	strb	r3, [r7, #30]
    break;
 8005ef0:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e014      	b.n	8005f22 <LSM303AGR_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8005ef8:	7ffb      	ldrb	r3, [r7, #31]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	3320      	adds	r3, #32
 8005efe:	443b      	add	r3, r7
 8005f00:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	7fbb      	ldrb	r3, [r7, #30]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	fb12 f303 	smulbb	r3, r2, r3
 8005f0e:	b299      	uxth	r1, r3
 8005f10:	7ffb      	ldrb	r3, [r7, #31]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	4413      	add	r3, r2
 8005f18:	b20a      	sxth	r2, r1
 8005f1a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005f1c:	7ffb      	ldrb	r3, [r7, #31]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	7ffb      	ldrb	r3, [r7, #31]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d9e7      	bls.n	8005ef8 <LSM303AGR_AccReadXYZ+0x156>
  }
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	3720      	adds	r7, #32
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <LSM303AGR_AccFilterClickCmd>:
  *         @arg: LSM303AGR_HPF_CLICK_DISABLE 
  *         @arg: LSM303AGR_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303AGR_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b084      	sub	sp, #16
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	4603      	mov	r3, r0
 8005f3a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A);
 8005f40:	2121      	movs	r1, #33	; 0x21
 8005f42:	2032      	movs	r0, #50	; 0x32
 8005f44:	f000 fcdf 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303AGR_HPF_CLICK_ENABLE);
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	f023 0304 	bic.w	r3, r3, #4
 8005f52:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8005f54:	7bfa      	ldrb	r2, [r7, #15]
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG2_A, tmpreg);
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2121      	movs	r1, #33	; 0x21
 8005f62:	2032      	movs	r0, #50	; 0x32
 8005f64:	f000 fcbc 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8005f68:	bf00      	nop
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <LSM303AGR_AccIT1Enable>:
  *         @arg   LSM303AGR_IT1_WTM
  *         @arg   LSM303AGR_IT1_OVERRUN
  * @retval None
  */
void LSM303AGR_AccIT1Enable(uint8_t LSM303AGR_IT)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A);
 8005f7e:	2122      	movs	r1, #34	; 0x22
 8005f80:	2032      	movs	r0, #50	; 0x32
 8005f82:	f000 fcc0 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005f86:	4603      	mov	r3, r0
 8005f88:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303AGR_IT;
 8005f8a:	7bfa      	ldrb	r2, [r7, #15]
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CTRL_REG3_A, tmpval);
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	461a      	mov	r2, r3
 8005f96:	2122      	movs	r1, #34	; 0x22
 8005f98:	2032      	movs	r0, #50	; 0x32
 8005f9a:	f000 fca1 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <LSM303AGR_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303AGR_AccClickITEnable(uint8_t ITClick)
{  
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	4603      	mov	r3, r0
 8005fae:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A);
 8005fb4:	2138      	movs	r1, #56	; 0x38
 8005fb6:	2032      	movs	r0, #50	; 0x32
 8005fb8:	f000 fca5 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8005fc0:	7bfa      	ldrb	r2, [r7, #15]
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_CFG_A, tmpval);
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2138      	movs	r1, #56	; 0x38
 8005fce:	2032      	movs	r0, #50	; 0x32
 8005fd0:	f000 fc86 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8005fd4:	230a      	movs	r3, #10
 8005fd6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_CLICK_THS_A, tmpval);
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	213a      	movs	r1, #58	; 0x3a
 8005fde:	2032      	movs	r0, #50	; 0x32
 8005fe0:	f000 fc7e 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8005fe4:	2305      	movs	r3, #5
 8005fe6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LIMIT_A, tmpval);
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	461a      	mov	r2, r3
 8005fec:	213b      	movs	r1, #59	; 0x3b
 8005fee:	2032      	movs	r0, #50	; 0x32
 8005ff0:	f000 fc76 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_LATENCY_A, tmpval);
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	213c      	movs	r1, #60	; 0x3c
 8005ffa:	2032      	movs	r0, #50	; 0x32
 8005ffc:	f000 fc70 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8006000:	2332      	movs	r3, #50	; 0x32
 8006002:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303AGR_TIME_WINDOW_A, tmpval);
 8006004:	7bfb      	ldrb	r3, [r7, #15]
 8006006:	461a      	mov	r2, r3
 8006008:	213d      	movs	r1, #61	; 0x3d
 800600a:	2032      	movs	r0, #50	; 0x32
 800600c:	f000 fc68 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <LSM303AGR_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303AGR_AccZClickITConfig(void)
{  
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 800601c:	f000 fc32 	bl	8006884 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303AGR_AccIT1Enable(LSM303AGR_IT1_CLICK);
 8006020:	2080      	movs	r0, #128	; 0x80
 8006022:	f7ff ffa5 	bl	8005f70 <LSM303AGR_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303AGR_AccFilterClickCmd(LSM303AGR_HPF_CLICK_ENABLE);
 8006026:	2004      	movs	r0, #4
 8006028:	f7ff ff83 	bl	8005f32 <LSM303AGR_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303AGR_AccClickITEnable(LSM303AGR_Z_SINGLE_CLICK);
 800602c:	2010      	movs	r0, #16
 800602e:	f7ff ffba 	bl	8005fa6 <LSM303AGR_AccClickITEnable>
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}

08006036 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	4603      	mov	r3, r0
 800603e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8006044:	f000 fbd4 	bl	80067f0 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8006048:	88fb      	ldrh	r3, [r7, #6]
 800604a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	461a      	mov	r2, r3
 8006050:	2120      	movs	r1, #32
 8006052:	2032      	movs	r0, #50	; 0x32
 8006054:	f000 fc44 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	461a      	mov	r2, r3
 8006060:	2123      	movs	r1, #35	; 0x23
 8006062:	2032      	movs	r0, #50	; 0x32
 8006064:	f000 fc3c 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8006068:	bf00      	nop
 800606a:	3710      	adds	r7, #16
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
}
 8006074:	bf00      	nop
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8006084:	2300      	movs	r3, #0
 8006086:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 8006088:	f000 fbb2 	bl	80067f0 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 800608c:	210f      	movs	r1, #15
 800608e:	2032      	movs	r0, #50	; 0x32
 8006090:	f000 fc39 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8006094:	4603      	mov	r3, r0
 8006096:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8006098:	79fb      	ldrb	r3, [r7, #7]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80060a8:	2124      	movs	r1, #36	; 0x24
 80060aa:	2032      	movs	r0, #50	; 0x32
 80060ac:	f000 fc2b 	bl	8006906 <COMPASSACCELERO_IO_Read>
 80060b0:	4603      	mov	r3, r0
 80060b2:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80060ba:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 80060bc:	79fb      	ldrb	r3, [r7, #7]
 80060be:	461a      	mov	r2, r3
 80060c0:	2124      	movs	r1, #36	; 0x24
 80060c2:	2032      	movs	r0, #50	; 0x32
 80060c4:	f000 fc0c 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80060da:	2121      	movs	r1, #33	; 0x21
 80060dc:	2032      	movs	r0, #50	; 0x32
 80060de:	f000 fc12 	bl	8006906 <COMPASSACCELERO_IO_Read>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	461a      	mov	r2, r3
 80060fa:	2121      	movs	r1, #33	; 0x21
 80060fc:	2032      	movs	r0, #50	; 0x32
 80060fe:	f000 fbef 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	4603      	mov	r3, r0
 8006112:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8006114:	2121      	movs	r1, #33	; 0x21
 8006116:	2032      	movs	r0, #50	; 0x32
 8006118:	f000 fbf5 	bl	8006906 <COMPASSACCELERO_IO_Read>
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	f023 0308 	bic.w	r3, r3, #8
 8006126:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8006128:	7bfa      	ldrb	r2, [r7, #15]
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	4313      	orrs	r3, r2
 800612e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	461a      	mov	r2, r3
 8006134:	2121      	movs	r1, #33	; 0x21
 8006136:	2032      	movs	r0, #50	; 0x32
 8006138:	f000 fbd2 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 800614c:	2300      	movs	r3, #0
 800614e:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8006154:	2301      	movs	r3, #1
 8006156:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8006158:	2123      	movs	r1, #35	; 0x23
 800615a:	2032      	movs	r0, #50	; 0x32
 800615c:	f000 fbd3 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8006160:	4603      	mov	r3, r0
 8006162:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8006164:	2124      	movs	r1, #36	; 0x24
 8006166:	2032      	movs	r0, #50	; 0x32
 8006168:	f000 fbcd 	bl	8006906 <COMPASSACCELERO_IO_Read>
 800616c:	4603      	mov	r3, r0
 800616e:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8006170:	2128      	movs	r1, #40	; 0x28
 8006172:	2032      	movs	r0, #50	; 0x32
 8006174:	f000 fbc7 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8006178:	4603      	mov	r3, r0
 800617a:	b25b      	sxtb	r3, r3
 800617c:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 800617e:	2129      	movs	r1, #41	; 0x29
 8006180:	2032      	movs	r0, #50	; 0x32
 8006182:	f000 fbc0 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8006186:	4603      	mov	r3, r0
 8006188:	b25b      	sxtb	r3, r3
 800618a:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 800618c:	212a      	movs	r1, #42	; 0x2a
 800618e:	2032      	movs	r0, #50	; 0x32
 8006190:	f000 fbb9 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8006194:	4603      	mov	r3, r0
 8006196:	b25b      	sxtb	r3, r3
 8006198:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 800619a:	212b      	movs	r1, #43	; 0x2b
 800619c:	2032      	movs	r0, #50	; 0x32
 800619e:	f000 fbb2 	bl	8006906 <COMPASSACCELERO_IO_Read>
 80061a2:	4603      	mov	r3, r0
 80061a4:	b25b      	sxtb	r3, r3
 80061a6:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 80061a8:	212c      	movs	r1, #44	; 0x2c
 80061aa:	2032      	movs	r0, #50	; 0x32
 80061ac:	f000 fbab 	bl	8006906 <COMPASSACCELERO_IO_Read>
 80061b0:	4603      	mov	r3, r0
 80061b2:	b25b      	sxtb	r3, r3
 80061b4:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 80061b6:	212d      	movs	r1, #45	; 0x2d
 80061b8:	2032      	movs	r0, #50	; 0x32
 80061ba:	f000 fba4 	bl	8006906 <COMPASSACCELERO_IO_Read>
 80061be:	4603      	mov	r3, r0
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 80061c4:	7d3b      	ldrb	r3, [r7, #20]
 80061c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d123      	bne.n	8006216 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 80061ce:	2300      	movs	r3, #0
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e01c      	b.n	800620e <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 80061d4:	7ffb      	ldrb	r3, [r7, #31]
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	3301      	adds	r3, #1
 80061da:	3320      	adds	r3, #32
 80061dc:	443b      	add	r3, r7
 80061de:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	021b      	lsls	r3, r3, #8
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	7ffb      	ldrb	r3, [r7, #31]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	3320      	adds	r3, #32
 80061ee:	443b      	add	r3, r7
 80061f0:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	4413      	add	r3, r2
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
 80061fc:	b212      	sxth	r2, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	3320      	adds	r3, #32
 8006202:	443b      	add	r3, r7
 8006204:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8006208:	7ffb      	ldrb	r3, [r7, #31]
 800620a:	3301      	adds	r3, #1
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	7ffb      	ldrb	r3, [r7, #31]
 8006210:	2b02      	cmp	r3, #2
 8006212:	d9df      	bls.n	80061d4 <LSM303DLHC_AccReadXYZ+0x90>
 8006214:	e022      	b.n	800625c <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]
 800621a:	e01c      	b.n	8006256 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 800621c:	7ffb      	ldrb	r3, [r7, #31]
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	3320      	adds	r3, #32
 8006222:	443b      	add	r3, r7
 8006224:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8006228:	b29b      	uxth	r3, r3
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	b29a      	uxth	r2, r3
 800622e:	7ffb      	ldrb	r3, [r7, #31]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	3301      	adds	r3, #1
 8006234:	3320      	adds	r3, #32
 8006236:	443b      	add	r3, r7
 8006238:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800623c:	b29b      	uxth	r3, r3
 800623e:	4413      	add	r3, r2
 8006240:	b29a      	uxth	r2, r3
 8006242:	7ffb      	ldrb	r3, [r7, #31]
 8006244:	b212      	sxth	r2, r2
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	3320      	adds	r3, #32
 800624a:	443b      	add	r3, r7
 800624c:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8006250:	7ffb      	ldrb	r3, [r7, #31]
 8006252:	3301      	adds	r3, #1
 8006254:	77fb      	strb	r3, [r7, #31]
 8006256:	7ffb      	ldrb	r3, [r7, #31]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d9df      	bls.n	800621c <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 800625c:	7d3b      	ldrb	r3, [r7, #20]
 800625e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006262:	2b30      	cmp	r3, #48	; 0x30
 8006264:	d013      	beq.n	800628e <LSM303DLHC_AccReadXYZ+0x14a>
 8006266:	2b30      	cmp	r3, #48	; 0x30
 8006268:	dc14      	bgt.n	8006294 <LSM303DLHC_AccReadXYZ+0x150>
 800626a:	2b20      	cmp	r3, #32
 800626c:	d00c      	beq.n	8006288 <LSM303DLHC_AccReadXYZ+0x144>
 800626e:	2b20      	cmp	r3, #32
 8006270:	dc10      	bgt.n	8006294 <LSM303DLHC_AccReadXYZ+0x150>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <LSM303DLHC_AccReadXYZ+0x138>
 8006276:	2b10      	cmp	r3, #16
 8006278:	d003      	beq.n	8006282 <LSM303DLHC_AccReadXYZ+0x13e>
 800627a:	e00b      	b.n	8006294 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 800627c:	2301      	movs	r3, #1
 800627e:	77bb      	strb	r3, [r7, #30]
    break;
 8006280:	e008      	b.n	8006294 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8006282:	2302      	movs	r3, #2
 8006284:	77bb      	strb	r3, [r7, #30]
    break;
 8006286:	e005      	b.n	8006294 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8006288:	2304      	movs	r3, #4
 800628a:	77bb      	strb	r3, [r7, #30]
    break;
 800628c:	e002      	b.n	8006294 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 800628e:	230c      	movs	r3, #12
 8006290:	77bb      	strb	r3, [r7, #30]
    break;
 8006292:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8006294:	2300      	movs	r3, #0
 8006296:	77fb      	strb	r3, [r7, #31]
 8006298:	e014      	b.n	80062c4 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 800629a:	7ffb      	ldrb	r3, [r7, #31]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	3320      	adds	r3, #32
 80062a0:	443b      	add	r3, r7
 80062a2:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	7fbb      	ldrb	r3, [r7, #30]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	fb12 f303 	smulbb	r3, r2, r3
 80062b0:	b299      	uxth	r1, r3
 80062b2:	7ffb      	ldrb	r3, [r7, #31]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	4413      	add	r3, r2
 80062ba:	b20a      	sxth	r2, r1
 80062bc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80062be:	7ffb      	ldrb	r3, [r7, #31]
 80062c0:	3301      	adds	r3, #1
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	7ffb      	ldrb	r3, [r7, #31]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d9e7      	bls.n	800629a <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 80062ca:	bf00      	nop
 80062cc:	bf00      	nop
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	4603      	mov	r3, r0
 80062dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 80062de:	2300      	movs	r3, #0
 80062e0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 80062e2:	2121      	movs	r1, #33	; 0x21
 80062e4:	2032      	movs	r0, #50	; 0x32
 80062e6:	f000 fb0e 	bl	8006906 <COMPASSACCELERO_IO_Read>
 80062ea:	4603      	mov	r3, r0
 80062ec:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 80062ee:	7bfb      	ldrb	r3, [r7, #15]
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 80062f6:	7bfa      	ldrb	r2, [r7, #15]
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	461a      	mov	r2, r3
 8006302:	2121      	movs	r1, #33	; 0x21
 8006304:	2032      	movs	r0, #50	; 0x32
 8006306:	f000 faeb 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 800630a:	bf00      	nop
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	4603      	mov	r3, r0
 800631a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 800631c:	2300      	movs	r3, #0
 800631e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8006320:	2122      	movs	r1, #34	; 0x22
 8006322:	2032      	movs	r0, #50	; 0x32
 8006324:	f000 faef 	bl	8006906 <COMPASSACCELERO_IO_Read>
 8006328:	4603      	mov	r3, r0
 800632a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	4313      	orrs	r3, r2
 8006332:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	461a      	mov	r2, r3
 8006338:	2122      	movs	r1, #34	; 0x22
 800633a:	2032      	movs	r0, #50	; 0x32
 800633c:	f000 fad0 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8006356:	2138      	movs	r1, #56	; 0x38
 8006358:	2032      	movs	r0, #50	; 0x32
 800635a:	f000 fad4 	bl	8006906 <COMPASSACCELERO_IO_Read>
 800635e:	4603      	mov	r3, r0
 8006360:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8006362:	7bfa      	ldrb	r2, [r7, #15]
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	4313      	orrs	r3, r2
 8006368:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 800636a:	7bfb      	ldrb	r3, [r7, #15]
 800636c:	461a      	mov	r2, r3
 800636e:	2138      	movs	r1, #56	; 0x38
 8006370:	2032      	movs	r0, #50	; 0x32
 8006372:	f000 fab5 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8006376:	230a      	movs	r3, #10
 8006378:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	461a      	mov	r2, r3
 800637e:	213a      	movs	r1, #58	; 0x3a
 8006380:	2032      	movs	r0, #50	; 0x32
 8006382:	f000 faad 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8006386:	2305      	movs	r3, #5
 8006388:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	461a      	mov	r2, r3
 800638e:	213b      	movs	r1, #59	; 0x3b
 8006390:	2032      	movs	r0, #50	; 0x32
 8006392:	f000 faa5 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	461a      	mov	r2, r3
 800639a:	213c      	movs	r1, #60	; 0x3c
 800639c:	2032      	movs	r0, #50	; 0x32
 800639e:	f000 fa9f 	bl	80068e0 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 80063a2:	2332      	movs	r3, #50	; 0x32
 80063a4:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	461a      	mov	r2, r3
 80063aa:	213d      	movs	r1, #61	; 0x3d
 80063ac:	2032      	movs	r0, #50	; 0x32
 80063ae:	f000 fa97 	bl	80068e0 <COMPASSACCELERO_IO_Write>
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 80063ba:	b580      	push	{r7, lr}
 80063bc:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 80063be:	f000 fa61 	bl	8006884 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 80063c2:	2080      	movs	r0, #128	; 0x80
 80063c4:	f7ff ffa5 	bl	8006312 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 80063c8:	2004      	movs	r0, #4
 80063ca:	f7ff ff83 	bl	80062d4 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 80063ce:	2010      	movs	r0, #16
 80063d0:	f7ff ffba 	bl	8006348 <LSM303DLHC_AccClickITEnable>
}
 80063d4:	bf00      	nop
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <I2Cx_MspInit+0x60>)
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	4a14      	ldr	r2, [pc, #80]	; (8006438 <I2Cx_MspInit+0x60>)
 80063e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ea:	6153      	str	r3, [r2, #20]
 80063ec:	4b12      	ldr	r3, [pc, #72]	; (8006438 <I2Cx_MspInit+0x60>)
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 80063f8:	23c0      	movs	r3, #192	; 0xc0
 80063fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80063fc:	2302      	movs	r3, #2
 80063fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8006400:	2302      	movs	r3, #2
 8006402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006404:	2303      	movs	r3, #3
 8006406:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8006408:	2304      	movs	r3, #4
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 800640c:	f107 0314 	add.w	r3, r7, #20
 8006410:	4619      	mov	r1, r3
 8006412:	480a      	ldr	r0, [pc, #40]	; (800643c <I2Cx_MspInit+0x64>)
 8006414:	f7fb fcc4 	bl	8001da0 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006418:	4b07      	ldr	r3, [pc, #28]	; (8006438 <I2Cx_MspInit+0x60>)
 800641a:	69db      	ldr	r3, [r3, #28]
 800641c:	4a06      	ldr	r2, [pc, #24]	; (8006438 <I2Cx_MspInit+0x60>)
 800641e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006422:	61d3      	str	r3, [r2, #28]
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <I2Cx_MspInit+0x60>)
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800642c:	60fb      	str	r3, [r7, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	bf00      	nop
 8006432:	3728      	adds	r7, #40	; 0x28
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40021000 	.word	0x40021000
 800643c:	48000400 	.word	0x48000400

08006440 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8006444:	4811      	ldr	r0, [pc, #68]	; (800648c <I2Cx_Init+0x4c>)
 8006446:	f7fc fa05 	bl	8002854 <HAL_I2C_GetState>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d11a      	bne.n	8006486 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8006450:	4b0e      	ldr	r3, [pc, #56]	; (800648c <I2Cx_Init+0x4c>)
 8006452:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <I2Cx_Init+0x50>)
 8006454:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8006456:	4b0d      	ldr	r3, [pc, #52]	; (800648c <I2Cx_Init+0x4c>)
 8006458:	2232      	movs	r2, #50	; 0x32
 800645a:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800645c:	4b0b      	ldr	r3, [pc, #44]	; (800648c <I2Cx_Init+0x4c>)
 800645e:	2201      	movs	r2, #1
 8006460:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006462:	4b0a      	ldr	r3, [pc, #40]	; (800648c <I2Cx_Init+0x4c>)
 8006464:	2200      	movs	r2, #0
 8006466:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <I2Cx_Init+0x4c>)
 800646a:	2200      	movs	r2, #0
 800646c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800646e:	4b07      	ldr	r3, [pc, #28]	; (800648c <I2Cx_Init+0x4c>)
 8006470:	2200      	movs	r2, #0
 8006472:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8006474:	4b05      	ldr	r3, [pc, #20]	; (800648c <I2Cx_Init+0x4c>)
 8006476:	2200      	movs	r2, #0
 8006478:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800647a:	4804      	ldr	r0, [pc, #16]	; (800648c <I2Cx_Init+0x4c>)
 800647c:	f7ff ffac 	bl	80063d8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8006480:	4802      	ldr	r0, [pc, #8]	; (800648c <I2Cx_Init+0x4c>)
 8006482:	f7fb fefb 	bl	800227c <HAL_I2C_Init>
  }
}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000730 	.word	0x20000730
 8006490:	40005400 	.word	0x40005400

08006494 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af04      	add	r7, sp, #16
 800649a:	4603      	mov	r3, r0
 800649c:	80fb      	strh	r3, [r7, #6]
 800649e:	460b      	mov	r3, r1
 80064a0:	717b      	strb	r3, [r7, #5]
 80064a2:	4613      	mov	r3, r2
 80064a4:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 80064aa:	797b      	ldrb	r3, [r7, #5]
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <I2Cx_WriteData+0x48>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	88f9      	ldrh	r1, [r7, #6]
 80064b4:	9302      	str	r3, [sp, #8]
 80064b6:	2301      	movs	r3, #1
 80064b8:	9301      	str	r3, [sp, #4]
 80064ba:	1d3b      	adds	r3, r7, #4
 80064bc:	9300      	str	r3, [sp, #0]
 80064be:	2301      	movs	r3, #1
 80064c0:	4807      	ldr	r0, [pc, #28]	; (80064e0 <I2Cx_WriteData+0x4c>)
 80064c2:	f7fb ff99 	bl	80023f8 <HAL_I2C_Mem_Write>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 80064d0:	f000 f834 	bl	800653c <I2Cx_Error>
  }
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20000124 	.word	0x20000124
 80064e0:	20000730 	.word	0x20000730

080064e4 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b088      	sub	sp, #32
 80064e8:	af04      	add	r7, sp, #16
 80064ea:	4603      	mov	r3, r0
 80064ec:	460a      	mov	r2, r1
 80064ee:	80fb      	strh	r3, [r7, #6]
 80064f0:	4613      	mov	r3, r2
 80064f2:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80064fc:	797b      	ldrb	r3, [r7, #5]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <I2Cx_ReadData+0x50>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	88f9      	ldrh	r1, [r7, #6]
 8006506:	9302      	str	r3, [sp, #8]
 8006508:	2301      	movs	r3, #1
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	f107 030e 	add.w	r3, r7, #14
 8006510:	9300      	str	r3, [sp, #0]
 8006512:	2301      	movs	r3, #1
 8006514:	4808      	ldr	r0, [pc, #32]	; (8006538 <I2Cx_ReadData+0x54>)
 8006516:	f7fc f883 	bl	8002620 <HAL_I2C_Mem_Read>
 800651a:	4603      	mov	r3, r0
 800651c:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8006524:	f000 f80a 	bl	800653c <I2Cx_Error>
  
  }
  return value;
 8006528:	7bbb      	ldrb	r3, [r7, #14]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000124 	.word	0x20000124
 8006538:	20000730 	.word	0x20000730

0800653c <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8006540:	4803      	ldr	r0, [pc, #12]	; (8006550 <I2Cx_Error+0x14>)
 8006542:	f7fb ff2a 	bl	800239a <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8006546:	f7ff ff7b 	bl	8006440 <I2Cx_Init>
}
 800654a:	bf00      	nop
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000730 	.word	0x20000730

08006554 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8006558:	481a      	ldr	r0, [pc, #104]	; (80065c4 <SPIx_Init+0x70>)
 800655a:	f7fe fc74 	bl	8004e46 <HAL_SPI_GetState>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d12c      	bne.n	80065be <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8006564:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <SPIx_Init+0x70>)
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <SPIx_Init+0x74>)
 8006568:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800656a:	4b16      	ldr	r3, [pc, #88]	; (80065c4 <SPIx_Init+0x70>)
 800656c:	2218      	movs	r2, #24
 800656e:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8006570:	4b14      	ldr	r3, [pc, #80]	; (80065c4 <SPIx_Init+0x70>)
 8006572:	2200      	movs	r2, #0
 8006574:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006576:	4b13      	ldr	r3, [pc, #76]	; (80065c4 <SPIx_Init+0x70>)
 8006578:	2200      	movs	r2, #0
 800657a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <SPIx_Init+0x70>)
 800657e:	2200      	movs	r2, #0
 8006580:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <SPIx_Init+0x70>)
 8006584:	2200      	movs	r2, #0
 8006586:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8006588:	4b0e      	ldr	r3, [pc, #56]	; (80065c4 <SPIx_Init+0x70>)
 800658a:	2207      	movs	r2, #7
 800658c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800658e:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <SPIx_Init+0x70>)
 8006590:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006594:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006596:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <SPIx_Init+0x70>)
 8006598:	2200      	movs	r2, #0
 800659a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <SPIx_Init+0x70>)
 800659e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065a2:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80065a4:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <SPIx_Init+0x70>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80065aa:	4b06      	ldr	r3, [pc, #24]	; (80065c4 <SPIx_Init+0x70>)
 80065ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80065b0:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 80065b2:	4804      	ldr	r0, [pc, #16]	; (80065c4 <SPIx_Init+0x70>)
 80065b4:	f000 f836 	bl	8006624 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80065b8:	4802      	ldr	r0, [pc, #8]	; (80065c4 <SPIx_Init+0x70>)
 80065ba:	f7fe f94f 	bl	800485c <HAL_SPI_Init>
  }
}
 80065be:	bf00      	nop
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200006cc 	.word	0x200006cc
 80065c8:	40013000 	.word	0x40013000

080065cc <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	4603      	mov	r3, r0
 80065d4:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <SPIx_WriteRead+0x38>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f107 020f 	add.w	r2, r7, #15
 80065e2:	1df9      	adds	r1, r7, #7
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2301      	movs	r3, #1
 80065e8:	4807      	ldr	r0, [pc, #28]	; (8006608 <SPIx_WriteRead+0x3c>)
 80065ea:	f7fe fa0a 	bl	8004a02 <HAL_SPI_TransmitReceive>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80065f4:	f000 f80a 	bl	800660c <SPIx_Error>
  }
  
  return receivedbyte;
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	20000120 	.word	0x20000120
 8006608:	200006cc 	.word	0x200006cc

0800660c <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8006610:	4803      	ldr	r0, [pc, #12]	; (8006620 <SPIx_Error+0x14>)
 8006612:	f7fe f9ce 	bl	80049b2 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8006616:	f7ff ff9d 	bl	8006554 <SPIx_Init>
}
 800661a:	bf00      	nop
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	200006cc 	.word	0x200006cc

08006624 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 800662c:	4b16      	ldr	r3, [pc, #88]	; (8006688 <SPIx_MspInit+0x64>)
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	4a15      	ldr	r2, [pc, #84]	; (8006688 <SPIx_MspInit+0x64>)
 8006632:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006636:	6193      	str	r3, [r2, #24]
 8006638:	4b13      	ldr	r3, [pc, #76]	; (8006688 <SPIx_MspInit+0x64>)
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <SPIx_MspInit+0x64>)
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <SPIx_MspInit+0x64>)
 800664a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800664e:	6153      	str	r3, [r2, #20]
 8006650:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <SPIx_MspInit+0x64>)
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800665c:	23e0      	movs	r3, #224	; 0xe0
 800665e:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8006660:	2302      	movs	r3, #2
 8006662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8006664:	2300      	movs	r3, #0
 8006666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006668:	2303      	movs	r3, #3
 800666a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800666c:	2305      	movs	r3, #5
 800666e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	4619      	mov	r1, r3
 8006676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800667a:	f7fb fb91 	bl	8001da0 <HAL_GPIO_Init>
}
 800667e:	bf00      	nop
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40021000 	.word	0x40021000

0800668c <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8006692:	4b1f      	ldr	r3, [pc, #124]	; (8006710 <GYRO_IO_Init+0x84>)
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <GYRO_IO_Init+0x84>)
 8006698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800669c:	6153      	str	r3, [r2, #20]
 800669e:	4b1c      	ldr	r3, [pc, #112]	; (8006710 <GYRO_IO_Init+0x84>)
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a6:	60bb      	str	r3, [r7, #8]
 80066a8:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80066aa:	2308      	movs	r3, #8
 80066ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80066ae:	2301      	movs	r3, #1
 80066b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80066b6:	2303      	movs	r3, #3
 80066b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80066ba:	f107 030c 	add.w	r3, r7, #12
 80066be:	4619      	mov	r1, r3
 80066c0:	4814      	ldr	r0, [pc, #80]	; (8006714 <GYRO_IO_Init+0x88>)
 80066c2:	f7fb fb6d 	bl	8001da0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 80066c6:	2201      	movs	r2, #1
 80066c8:	2108      	movs	r1, #8
 80066ca:	4812      	ldr	r0, [pc, #72]	; (8006714 <GYRO_IO_Init+0x88>)
 80066cc:	f7fb fdbe 	bl	800224c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <GYRO_IO_Init+0x84>)
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	4a0e      	ldr	r2, [pc, #56]	; (8006710 <GYRO_IO_Init+0x84>)
 80066d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80066da:	6153      	str	r3, [r2, #20]
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <GYRO_IO_Init+0x84>)
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80066e8:	2303      	movs	r3, #3
 80066ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80066ec:	2300      	movs	r3, #0
 80066ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80066f0:	2303      	movs	r3, #3
 80066f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80066f8:	f107 030c 	add.w	r3, r7, #12
 80066fc:	4619      	mov	r1, r3
 80066fe:	4805      	ldr	r0, [pc, #20]	; (8006714 <GYRO_IO_Init+0x88>)
 8006700:	f7fb fb4e 	bl	8001da0 <HAL_GPIO_Init>
  
  SPIx_Init();
 8006704:	f7ff ff26 	bl	8006554 <SPIx_Init>
}
 8006708:	bf00      	nop
 800670a:	3720      	adds	r7, #32
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40021000 	.word	0x40021000
 8006714:	48001000 	.word	0x48001000

08006718 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
 8006724:	4613      	mov	r3, r2
 8006726:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8006728:	883b      	ldrh	r3, [r7, #0]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d903      	bls.n	8006736 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006734:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8006736:	2200      	movs	r2, #0
 8006738:	2108      	movs	r1, #8
 800673a:	480f      	ldr	r0, [pc, #60]	; (8006778 <GYRO_IO_Write+0x60>)
 800673c:	f7fb fd86 	bl	800224c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	4618      	mov	r0, r3
 8006744:	f7ff ff42 	bl	80065cc <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8006748:	e00a      	b.n	8006760 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff ff3c 	bl	80065cc <SPIx_WriteRead>
    NumByteToWrite--;
 8006754:	883b      	ldrh	r3, [r7, #0]
 8006756:	3b01      	subs	r3, #1
 8006758:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3301      	adds	r3, #1
 800675e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8006760:	883b      	ldrh	r3, [r7, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1f1      	bne.n	800674a <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8006766:	2201      	movs	r2, #1
 8006768:	2108      	movs	r1, #8
 800676a:	4803      	ldr	r0, [pc, #12]	; (8006778 <GYRO_IO_Write+0x60>)
 800676c:	f7fb fd6e 	bl	800224c <HAL_GPIO_WritePin>
}
 8006770:	bf00      	nop
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	48001000 	.word	0x48001000

0800677c <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	70fb      	strb	r3, [r7, #3]
 8006788:	4613      	mov	r3, r2
 800678a:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 800678c:	883b      	ldrh	r3, [r7, #0]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d904      	bls.n	800679c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006798:	70fb      	strb	r3, [r7, #3]
 800679a:	e003      	b.n	80067a4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800679c:	78fb      	ldrb	r3, [r7, #3]
 800679e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067a2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80067a4:	2200      	movs	r2, #0
 80067a6:	2108      	movs	r1, #8
 80067a8:	4810      	ldr	r0, [pc, #64]	; (80067ec <GYRO_IO_Read+0x70>)
 80067aa:	f7fb fd4f 	bl	800224c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff ff0b 	bl	80065cc <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80067b6:	e00c      	b.n	80067d2 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80067b8:	2000      	movs	r0, #0
 80067ba:	f7ff ff07 	bl	80065cc <SPIx_WriteRead>
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80067c6:	883b      	ldrh	r3, [r7, #0]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3301      	adds	r3, #1
 80067d0:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80067d2:	883b      	ldrh	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ef      	bne.n	80067b8 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80067d8:	2201      	movs	r2, #1
 80067da:	2108      	movs	r1, #8
 80067dc:	4803      	ldr	r0, [pc, #12]	; (80067ec <GYRO_IO_Read+0x70>)
 80067de:	f7fb fd35 	bl	800224c <HAL_GPIO_WritePin>
}  
 80067e2:	bf00      	nop
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	48001000 	.word	0x48001000

080067f0 <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 80067f6:	4b21      	ldr	r3, [pc, #132]	; (800687c <COMPASSACCELERO_IO_Init+0x8c>)
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <COMPASSACCELERO_IO_Init+0x8c>)
 80067fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006800:	6153      	str	r3, [r2, #20]
 8006802:	4b1e      	ldr	r3, [pc, #120]	; (800687c <COMPASSACCELERO_IO_Init+0x8c>)
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800680e:	4b1b      	ldr	r3, [pc, #108]	; (800687c <COMPASSACCELERO_IO_Init+0x8c>)
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	4a1a      	ldr	r2, [pc, #104]	; (800687c <COMPASSACCELERO_IO_Init+0x8c>)
 8006814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006818:	6153      	str	r3, [r2, #20]
 800681a:	4b18      	ldr	r3, [pc, #96]	; (800687c <COMPASSACCELERO_IO_Init+0x8c>)
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006822:	607b      	str	r3, [r7, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8006826:	2304      	movs	r3, #4
 8006828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800682a:	2300      	movs	r3, #0
 800682c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800682e:	2300      	movs	r3, #0
 8006830:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006832:	2303      	movs	r3, #3
 8006834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8006836:	f107 030c 	add.w	r3, r7, #12
 800683a:	4619      	mov	r1, r3
 800683c:	4810      	ldr	r0, [pc, #64]	; (8006880 <COMPASSACCELERO_IO_Init+0x90>)
 800683e:	f7fb faaf 	bl	8001da0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 8006842:	2200      	movs	r2, #0
 8006844:	210f      	movs	r1, #15
 8006846:	2008      	movs	r0, #8
 8006848:	f7fb fa73 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 800684c:	2008      	movs	r0, #8
 800684e:	f7fb fa8c 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8006852:	2330      	movs	r3, #48	; 0x30
 8006854:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800685a:	2303      	movs	r3, #3
 800685c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800685e:	2300      	movs	r3, #0
 8006860:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8006862:	f107 030c 	add.w	r3, r7, #12
 8006866:	4619      	mov	r1, r3
 8006868:	4805      	ldr	r0, [pc, #20]	; (8006880 <COMPASSACCELERO_IO_Init+0x90>)
 800686a:	f7fb fa99 	bl	8001da0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 800686e:	f7ff fde7 	bl	8006440 <I2Cx_Init>
}
 8006872:	bf00      	nop
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	40021000 	.word	0x40021000
 8006880:	48001000 	.word	0x48001000

08006884 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800688a:	4b13      	ldr	r3, [pc, #76]	; (80068d8 <COMPASSACCELERO_IO_ITConfig+0x54>)
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	4a12      	ldr	r2, [pc, #72]	; (80068d8 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006894:	6153      	str	r3, [r2, #20]
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800689e:	603b      	str	r3, [r7, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80068a2:	2330      	movs	r3, #48	; 0x30
 80068a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80068a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80068aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80068ac:	2303      	movs	r3, #3
 80068ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80068b4:	1d3b      	adds	r3, r7, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4808      	ldr	r0, [pc, #32]	; (80068dc <COMPASSACCELERO_IO_ITConfig+0x58>)
 80068ba:	f7fb fa71 	bl	8001da0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 80068be:	2200      	movs	r2, #0
 80068c0:	210f      	movs	r1, #15
 80068c2:	200a      	movs	r0, #10
 80068c4:	f7fb fa35 	bl	8001d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 80068c8:	200a      	movs	r0, #10
 80068ca:	f7fb fa4e 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  
}
 80068ce:	bf00      	nop
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40021000 	.word	0x40021000
 80068dc:	48001000 	.word	0x48001000

080068e0 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	80fb      	strh	r3, [r7, #6]
 80068ea:	460b      	mov	r3, r1
 80068ec:	717b      	strb	r3, [r7, #5]
 80068ee:	4613      	mov	r3, r2
 80068f0:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 80068f2:	793a      	ldrb	r2, [r7, #4]
 80068f4:	7979      	ldrb	r1, [r7, #5]
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff fdcb 	bl	8006494 <I2Cx_WriteData>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	4603      	mov	r3, r0
 800690e:	460a      	mov	r2, r1
 8006910:	80fb      	strh	r3, [r7, #6]
 8006912:	4613      	mov	r3, r2
 8006914:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8006916:	797a      	ldrb	r2, [r7, #5]
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	4611      	mov	r1, r2
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fde1 	bl	80064e4 <I2Cx_ReadData>
 8006922:	4603      	mov	r3, r0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <__cvt>:
 800692c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	ec55 4b10 	vmov	r4, r5, d0
 8006934:	2d00      	cmp	r5, #0
 8006936:	460e      	mov	r6, r1
 8006938:	4619      	mov	r1, r3
 800693a:	462b      	mov	r3, r5
 800693c:	bfbb      	ittet	lt
 800693e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006942:	461d      	movlt	r5, r3
 8006944:	2300      	movge	r3, #0
 8006946:	232d      	movlt	r3, #45	; 0x2d
 8006948:	700b      	strb	r3, [r1, #0]
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006950:	4691      	mov	r9, r2
 8006952:	f023 0820 	bic.w	r8, r3, #32
 8006956:	bfbc      	itt	lt
 8006958:	4622      	movlt	r2, r4
 800695a:	4614      	movlt	r4, r2
 800695c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006960:	d005      	beq.n	800696e <__cvt+0x42>
 8006962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006966:	d100      	bne.n	800696a <__cvt+0x3e>
 8006968:	3601      	adds	r6, #1
 800696a:	2102      	movs	r1, #2
 800696c:	e000      	b.n	8006970 <__cvt+0x44>
 800696e:	2103      	movs	r1, #3
 8006970:	ab03      	add	r3, sp, #12
 8006972:	9301      	str	r3, [sp, #4]
 8006974:	ab02      	add	r3, sp, #8
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	ec45 4b10 	vmov	d0, r4, r5
 800697c:	4653      	mov	r3, sl
 800697e:	4632      	mov	r2, r6
 8006980:	f000 fe76 	bl	8007670 <_dtoa_r>
 8006984:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006988:	4607      	mov	r7, r0
 800698a:	d102      	bne.n	8006992 <__cvt+0x66>
 800698c:	f019 0f01 	tst.w	r9, #1
 8006990:	d022      	beq.n	80069d8 <__cvt+0xac>
 8006992:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006996:	eb07 0906 	add.w	r9, r7, r6
 800699a:	d110      	bne.n	80069be <__cvt+0x92>
 800699c:	783b      	ldrb	r3, [r7, #0]
 800699e:	2b30      	cmp	r3, #48	; 0x30
 80069a0:	d10a      	bne.n	80069b8 <__cvt+0x8c>
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7fa f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ae:	b918      	cbnz	r0, 80069b8 <__cvt+0x8c>
 80069b0:	f1c6 0601 	rsb	r6, r6, #1
 80069b4:	f8ca 6000 	str.w	r6, [sl]
 80069b8:	f8da 3000 	ldr.w	r3, [sl]
 80069bc:	4499      	add	r9, r3
 80069be:	2200      	movs	r2, #0
 80069c0:	2300      	movs	r3, #0
 80069c2:	4620      	mov	r0, r4
 80069c4:	4629      	mov	r1, r5
 80069c6:	f7fa f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ca:	b108      	cbz	r0, 80069d0 <__cvt+0xa4>
 80069cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80069d0:	2230      	movs	r2, #48	; 0x30
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	454b      	cmp	r3, r9
 80069d6:	d307      	bcc.n	80069e8 <__cvt+0xbc>
 80069d8:	9b03      	ldr	r3, [sp, #12]
 80069da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069dc:	1bdb      	subs	r3, r3, r7
 80069de:	4638      	mov	r0, r7
 80069e0:	6013      	str	r3, [r2, #0]
 80069e2:	b004      	add	sp, #16
 80069e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e8:	1c59      	adds	r1, r3, #1
 80069ea:	9103      	str	r1, [sp, #12]
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e7f0      	b.n	80069d2 <__cvt+0xa6>

080069f0 <__exponent>:
 80069f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f2:	4603      	mov	r3, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	bfb8      	it	lt
 80069f8:	4249      	neglt	r1, r1
 80069fa:	f803 2b02 	strb.w	r2, [r3], #2
 80069fe:	bfb4      	ite	lt
 8006a00:	222d      	movlt	r2, #45	; 0x2d
 8006a02:	222b      	movge	r2, #43	; 0x2b
 8006a04:	2909      	cmp	r1, #9
 8006a06:	7042      	strb	r2, [r0, #1]
 8006a08:	dd2a      	ble.n	8006a60 <__exponent+0x70>
 8006a0a:	f10d 0207 	add.w	r2, sp, #7
 8006a0e:	4617      	mov	r7, r2
 8006a10:	260a      	movs	r6, #10
 8006a12:	4694      	mov	ip, r2
 8006a14:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a18:	fb06 1415 	mls	r4, r6, r5, r1
 8006a1c:	3430      	adds	r4, #48	; 0x30
 8006a1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006a22:	460c      	mov	r4, r1
 8006a24:	2c63      	cmp	r4, #99	; 0x63
 8006a26:	f102 32ff 	add.w	r2, r2, #4294967295
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	dcf1      	bgt.n	8006a12 <__exponent+0x22>
 8006a2e:	3130      	adds	r1, #48	; 0x30
 8006a30:	f1ac 0402 	sub.w	r4, ip, #2
 8006a34:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a38:	1c41      	adds	r1, r0, #1
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	42ba      	cmp	r2, r7
 8006a3e:	d30a      	bcc.n	8006a56 <__exponent+0x66>
 8006a40:	f10d 0209 	add.w	r2, sp, #9
 8006a44:	eba2 020c 	sub.w	r2, r2, ip
 8006a48:	42bc      	cmp	r4, r7
 8006a4a:	bf88      	it	hi
 8006a4c:	2200      	movhi	r2, #0
 8006a4e:	4413      	add	r3, r2
 8006a50:	1a18      	subs	r0, r3, r0
 8006a52:	b003      	add	sp, #12
 8006a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a56:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006a5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006a5e:	e7ed      	b.n	8006a3c <__exponent+0x4c>
 8006a60:	2330      	movs	r3, #48	; 0x30
 8006a62:	3130      	adds	r1, #48	; 0x30
 8006a64:	7083      	strb	r3, [r0, #2]
 8006a66:	70c1      	strb	r1, [r0, #3]
 8006a68:	1d03      	adds	r3, r0, #4
 8006a6a:	e7f1      	b.n	8006a50 <__exponent+0x60>

08006a6c <_printf_float>:
 8006a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a70:	ed2d 8b02 	vpush	{d8}
 8006a74:	b08d      	sub	sp, #52	; 0x34
 8006a76:	460c      	mov	r4, r1
 8006a78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006a7c:	4616      	mov	r6, r2
 8006a7e:	461f      	mov	r7, r3
 8006a80:	4605      	mov	r5, r0
 8006a82:	f000 fce7 	bl	8007454 <_localeconv_r>
 8006a86:	f8d0 a000 	ldr.w	sl, [r0]
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	f7f9 fbf0 	bl	8000270 <strlen>
 8006a90:	2300      	movs	r3, #0
 8006a92:	930a      	str	r3, [sp, #40]	; 0x28
 8006a94:	6823      	ldr	r3, [r4, #0]
 8006a96:	9305      	str	r3, [sp, #20]
 8006a98:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006aa0:	3307      	adds	r3, #7
 8006aa2:	f023 0307 	bic.w	r3, r3, #7
 8006aa6:	f103 0208 	add.w	r2, r3, #8
 8006aaa:	f8c8 2000 	str.w	r2, [r8]
 8006aae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006abc:	ee08 0a10 	vmov	s16, r0
 8006ac0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ac8:	4b9e      	ldr	r3, [pc, #632]	; (8006d44 <_printf_float+0x2d8>)
 8006aca:	f04f 32ff 	mov.w	r2, #4294967295
 8006ace:	f7fa f82d 	bl	8000b2c <__aeabi_dcmpun>
 8006ad2:	bb88      	cbnz	r0, 8006b38 <_printf_float+0xcc>
 8006ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad8:	4b9a      	ldr	r3, [pc, #616]	; (8006d44 <_printf_float+0x2d8>)
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	f7fa f807 	bl	8000af0 <__aeabi_dcmple>
 8006ae2:	bb48      	cbnz	r0, 8006b38 <_printf_float+0xcc>
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4640      	mov	r0, r8
 8006aea:	4649      	mov	r1, r9
 8006aec:	f7f9 fff6 	bl	8000adc <__aeabi_dcmplt>
 8006af0:	b110      	cbz	r0, 8006af8 <_printf_float+0x8c>
 8006af2:	232d      	movs	r3, #45	; 0x2d
 8006af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af8:	4a93      	ldr	r2, [pc, #588]	; (8006d48 <_printf_float+0x2dc>)
 8006afa:	4b94      	ldr	r3, [pc, #592]	; (8006d4c <_printf_float+0x2e0>)
 8006afc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006b00:	bf94      	ite	ls
 8006b02:	4690      	movls	r8, r2
 8006b04:	4698      	movhi	r8, r3
 8006b06:	2303      	movs	r3, #3
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	9b05      	ldr	r3, [sp, #20]
 8006b0c:	f023 0304 	bic.w	r3, r3, #4
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	f04f 0900 	mov.w	r9, #0
 8006b16:	9700      	str	r7, [sp, #0]
 8006b18:	4633      	mov	r3, r6
 8006b1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f9da 	bl	8006ed8 <_printf_common>
 8006b24:	3001      	adds	r0, #1
 8006b26:	f040 8090 	bne.w	8006c4a <_printf_float+0x1de>
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2e:	b00d      	add	sp, #52	; 0x34
 8006b30:	ecbd 8b02 	vpop	{d8}
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	4642      	mov	r2, r8
 8006b3a:	464b      	mov	r3, r9
 8006b3c:	4640      	mov	r0, r8
 8006b3e:	4649      	mov	r1, r9
 8006b40:	f7f9 fff4 	bl	8000b2c <__aeabi_dcmpun>
 8006b44:	b140      	cbz	r0, 8006b58 <_printf_float+0xec>
 8006b46:	464b      	mov	r3, r9
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bfbc      	itt	lt
 8006b4c:	232d      	movlt	r3, #45	; 0x2d
 8006b4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b52:	4a7f      	ldr	r2, [pc, #508]	; (8006d50 <_printf_float+0x2e4>)
 8006b54:	4b7f      	ldr	r3, [pc, #508]	; (8006d54 <_printf_float+0x2e8>)
 8006b56:	e7d1      	b.n	8006afc <_printf_float+0x90>
 8006b58:	6863      	ldr	r3, [r4, #4]
 8006b5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006b5e:	9206      	str	r2, [sp, #24]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	d13f      	bne.n	8006be4 <_printf_float+0x178>
 8006b64:	2306      	movs	r3, #6
 8006b66:	6063      	str	r3, [r4, #4]
 8006b68:	9b05      	ldr	r3, [sp, #20]
 8006b6a:	6861      	ldr	r1, [r4, #4]
 8006b6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b70:	2300      	movs	r3, #0
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	ab0a      	add	r3, sp, #40	; 0x28
 8006b76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006b7a:	ab09      	add	r3, sp, #36	; 0x24
 8006b7c:	ec49 8b10 	vmov	d0, r8, r9
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	6022      	str	r2, [r4, #0]
 8006b84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f7ff fecf 	bl	800692c <__cvt>
 8006b8e:	9b06      	ldr	r3, [sp, #24]
 8006b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b92:	2b47      	cmp	r3, #71	; 0x47
 8006b94:	4680      	mov	r8, r0
 8006b96:	d108      	bne.n	8006baa <_printf_float+0x13e>
 8006b98:	1cc8      	adds	r0, r1, #3
 8006b9a:	db02      	blt.n	8006ba2 <_printf_float+0x136>
 8006b9c:	6863      	ldr	r3, [r4, #4]
 8006b9e:	4299      	cmp	r1, r3
 8006ba0:	dd41      	ble.n	8006c26 <_printf_float+0x1ba>
 8006ba2:	f1ab 0302 	sub.w	r3, fp, #2
 8006ba6:	fa5f fb83 	uxtb.w	fp, r3
 8006baa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006bae:	d820      	bhi.n	8006bf2 <_printf_float+0x186>
 8006bb0:	3901      	subs	r1, #1
 8006bb2:	465a      	mov	r2, fp
 8006bb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8006bba:	f7ff ff19 	bl	80069f0 <__exponent>
 8006bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006bc0:	1813      	adds	r3, r2, r0
 8006bc2:	2a01      	cmp	r2, #1
 8006bc4:	4681      	mov	r9, r0
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	dc02      	bgt.n	8006bd0 <_printf_float+0x164>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	07d2      	lsls	r2, r2, #31
 8006bce:	d501      	bpl.n	8006bd4 <_printf_float+0x168>
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	6123      	str	r3, [r4, #16]
 8006bd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d09c      	beq.n	8006b16 <_printf_float+0xaa>
 8006bdc:	232d      	movs	r3, #45	; 0x2d
 8006bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006be2:	e798      	b.n	8006b16 <_printf_float+0xaa>
 8006be4:	9a06      	ldr	r2, [sp, #24]
 8006be6:	2a47      	cmp	r2, #71	; 0x47
 8006be8:	d1be      	bne.n	8006b68 <_printf_float+0xfc>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1bc      	bne.n	8006b68 <_printf_float+0xfc>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e7b9      	b.n	8006b66 <_printf_float+0xfa>
 8006bf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006bf6:	d118      	bne.n	8006c2a <_printf_float+0x1be>
 8006bf8:	2900      	cmp	r1, #0
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	dd0b      	ble.n	8006c16 <_printf_float+0x1aa>
 8006bfe:	6121      	str	r1, [r4, #16]
 8006c00:	b913      	cbnz	r3, 8006c08 <_printf_float+0x19c>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	07d0      	lsls	r0, r2, #31
 8006c06:	d502      	bpl.n	8006c0e <_printf_float+0x1a2>
 8006c08:	3301      	adds	r3, #1
 8006c0a:	440b      	add	r3, r1
 8006c0c:	6123      	str	r3, [r4, #16]
 8006c0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c10:	f04f 0900 	mov.w	r9, #0
 8006c14:	e7de      	b.n	8006bd4 <_printf_float+0x168>
 8006c16:	b913      	cbnz	r3, 8006c1e <_printf_float+0x1b2>
 8006c18:	6822      	ldr	r2, [r4, #0]
 8006c1a:	07d2      	lsls	r2, r2, #31
 8006c1c:	d501      	bpl.n	8006c22 <_printf_float+0x1b6>
 8006c1e:	3302      	adds	r3, #2
 8006c20:	e7f4      	b.n	8006c0c <_printf_float+0x1a0>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e7f2      	b.n	8006c0c <_printf_float+0x1a0>
 8006c26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2c:	4299      	cmp	r1, r3
 8006c2e:	db05      	blt.n	8006c3c <_printf_float+0x1d0>
 8006c30:	6823      	ldr	r3, [r4, #0]
 8006c32:	6121      	str	r1, [r4, #16]
 8006c34:	07d8      	lsls	r0, r3, #31
 8006c36:	d5ea      	bpl.n	8006c0e <_printf_float+0x1a2>
 8006c38:	1c4b      	adds	r3, r1, #1
 8006c3a:	e7e7      	b.n	8006c0c <_printf_float+0x1a0>
 8006c3c:	2900      	cmp	r1, #0
 8006c3e:	bfd4      	ite	le
 8006c40:	f1c1 0202 	rsble	r2, r1, #2
 8006c44:	2201      	movgt	r2, #1
 8006c46:	4413      	add	r3, r2
 8006c48:	e7e0      	b.n	8006c0c <_printf_float+0x1a0>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	055a      	lsls	r2, r3, #21
 8006c4e:	d407      	bmi.n	8006c60 <_printf_float+0x1f4>
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	4642      	mov	r2, r8
 8006c54:	4631      	mov	r1, r6
 8006c56:	4628      	mov	r0, r5
 8006c58:	47b8      	blx	r7
 8006c5a:	3001      	adds	r0, #1
 8006c5c:	d12c      	bne.n	8006cb8 <_printf_float+0x24c>
 8006c5e:	e764      	b.n	8006b2a <_printf_float+0xbe>
 8006c60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006c64:	f240 80e0 	bls.w	8006e28 <_printf_float+0x3bc>
 8006c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2300      	movs	r3, #0
 8006c70:	f7f9 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d034      	beq.n	8006ce2 <_printf_float+0x276>
 8006c78:	4a37      	ldr	r2, [pc, #220]	; (8006d58 <_printf_float+0x2ec>)
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4631      	mov	r1, r6
 8006c7e:	4628      	mov	r0, r5
 8006c80:	47b8      	blx	r7
 8006c82:	3001      	adds	r0, #1
 8006c84:	f43f af51 	beq.w	8006b2a <_printf_float+0xbe>
 8006c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	db02      	blt.n	8006c96 <_printf_float+0x22a>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	07d8      	lsls	r0, r3, #31
 8006c94:	d510      	bpl.n	8006cb8 <_printf_float+0x24c>
 8006c96:	ee18 3a10 	vmov	r3, s16
 8006c9a:	4652      	mov	r2, sl
 8006c9c:	4631      	mov	r1, r6
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	47b8      	blx	r7
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	f43f af41 	beq.w	8006b2a <_printf_float+0xbe>
 8006ca8:	f04f 0800 	mov.w	r8, #0
 8006cac:	f104 091a 	add.w	r9, r4, #26
 8006cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	4543      	cmp	r3, r8
 8006cb6:	dc09      	bgt.n	8006ccc <_printf_float+0x260>
 8006cb8:	6823      	ldr	r3, [r4, #0]
 8006cba:	079b      	lsls	r3, r3, #30
 8006cbc:	f100 8107 	bmi.w	8006ece <_printf_float+0x462>
 8006cc0:	68e0      	ldr	r0, [r4, #12]
 8006cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc4:	4298      	cmp	r0, r3
 8006cc6:	bfb8      	it	lt
 8006cc8:	4618      	movlt	r0, r3
 8006cca:	e730      	b.n	8006b2e <_printf_float+0xc2>
 8006ccc:	2301      	movs	r3, #1
 8006cce:	464a      	mov	r2, r9
 8006cd0:	4631      	mov	r1, r6
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	47b8      	blx	r7
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	f43f af27 	beq.w	8006b2a <_printf_float+0xbe>
 8006cdc:	f108 0801 	add.w	r8, r8, #1
 8006ce0:	e7e6      	b.n	8006cb0 <_printf_float+0x244>
 8006ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	dc39      	bgt.n	8006d5c <_printf_float+0x2f0>
 8006ce8:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <_printf_float+0x2ec>)
 8006cea:	2301      	movs	r3, #1
 8006cec:	4631      	mov	r1, r6
 8006cee:	4628      	mov	r0, r5
 8006cf0:	47b8      	blx	r7
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	f43f af19 	beq.w	8006b2a <_printf_float+0xbe>
 8006cf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	d102      	bne.n	8006d06 <_printf_float+0x29a>
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	07d9      	lsls	r1, r3, #31
 8006d04:	d5d8      	bpl.n	8006cb8 <_printf_float+0x24c>
 8006d06:	ee18 3a10 	vmov	r3, s16
 8006d0a:	4652      	mov	r2, sl
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	f43f af09 	beq.w	8006b2a <_printf_float+0xbe>
 8006d18:	f04f 0900 	mov.w	r9, #0
 8006d1c:	f104 0a1a 	add.w	sl, r4, #26
 8006d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d22:	425b      	negs	r3, r3
 8006d24:	454b      	cmp	r3, r9
 8006d26:	dc01      	bgt.n	8006d2c <_printf_float+0x2c0>
 8006d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2a:	e792      	b.n	8006c52 <_printf_float+0x1e6>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4652      	mov	r2, sl
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	f43f aef7 	beq.w	8006b2a <_printf_float+0xbe>
 8006d3c:	f109 0901 	add.w	r9, r9, #1
 8006d40:	e7ee      	b.n	8006d20 <_printf_float+0x2b4>
 8006d42:	bf00      	nop
 8006d44:	7fefffff 	.word	0x7fefffff
 8006d48:	080096a4 	.word	0x080096a4
 8006d4c:	080096a8 	.word	0x080096a8
 8006d50:	080096ac 	.word	0x080096ac
 8006d54:	080096b0 	.word	0x080096b0
 8006d58:	080096b4 	.word	0x080096b4
 8006d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d60:	429a      	cmp	r2, r3
 8006d62:	bfa8      	it	ge
 8006d64:	461a      	movge	r2, r3
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	4691      	mov	r9, r2
 8006d6a:	dc37      	bgt.n	8006ddc <_printf_float+0x370>
 8006d6c:	f04f 0b00 	mov.w	fp, #0
 8006d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d74:	f104 021a 	add.w	r2, r4, #26
 8006d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d7a:	9305      	str	r3, [sp, #20]
 8006d7c:	eba3 0309 	sub.w	r3, r3, r9
 8006d80:	455b      	cmp	r3, fp
 8006d82:	dc33      	bgt.n	8006dec <_printf_float+0x380>
 8006d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	db3b      	blt.n	8006e04 <_printf_float+0x398>
 8006d8c:	6823      	ldr	r3, [r4, #0]
 8006d8e:	07da      	lsls	r2, r3, #31
 8006d90:	d438      	bmi.n	8006e04 <_printf_float+0x398>
 8006d92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006d96:	eba2 0903 	sub.w	r9, r2, r3
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	1ad2      	subs	r2, r2, r3
 8006d9e:	4591      	cmp	r9, r2
 8006da0:	bfa8      	it	ge
 8006da2:	4691      	movge	r9, r2
 8006da4:	f1b9 0f00 	cmp.w	r9, #0
 8006da8:	dc35      	bgt.n	8006e16 <_printf_float+0x3aa>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006db2:	f104 0a1a 	add.w	sl, r4, #26
 8006db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006dba:	1a9b      	subs	r3, r3, r2
 8006dbc:	eba3 0309 	sub.w	r3, r3, r9
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	f77f af79 	ble.w	8006cb8 <_printf_float+0x24c>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	4652      	mov	r2, sl
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f aeaa 	beq.w	8006b2a <_printf_float+0xbe>
 8006dd6:	f108 0801 	add.w	r8, r8, #1
 8006dda:	e7ec      	b.n	8006db6 <_printf_float+0x34a>
 8006ddc:	4613      	mov	r3, r2
 8006dde:	4631      	mov	r1, r6
 8006de0:	4642      	mov	r2, r8
 8006de2:	4628      	mov	r0, r5
 8006de4:	47b8      	blx	r7
 8006de6:	3001      	adds	r0, #1
 8006de8:	d1c0      	bne.n	8006d6c <_printf_float+0x300>
 8006dea:	e69e      	b.n	8006b2a <_printf_float+0xbe>
 8006dec:	2301      	movs	r3, #1
 8006dee:	4631      	mov	r1, r6
 8006df0:	4628      	mov	r0, r5
 8006df2:	9205      	str	r2, [sp, #20]
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f ae97 	beq.w	8006b2a <_printf_float+0xbe>
 8006dfc:	9a05      	ldr	r2, [sp, #20]
 8006dfe:	f10b 0b01 	add.w	fp, fp, #1
 8006e02:	e7b9      	b.n	8006d78 <_printf_float+0x30c>
 8006e04:	ee18 3a10 	vmov	r3, s16
 8006e08:	4652      	mov	r2, sl
 8006e0a:	4631      	mov	r1, r6
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b8      	blx	r7
 8006e10:	3001      	adds	r0, #1
 8006e12:	d1be      	bne.n	8006d92 <_printf_float+0x326>
 8006e14:	e689      	b.n	8006b2a <_printf_float+0xbe>
 8006e16:	9a05      	ldr	r2, [sp, #20]
 8006e18:	464b      	mov	r3, r9
 8006e1a:	4442      	add	r2, r8
 8006e1c:	4631      	mov	r1, r6
 8006e1e:	4628      	mov	r0, r5
 8006e20:	47b8      	blx	r7
 8006e22:	3001      	adds	r0, #1
 8006e24:	d1c1      	bne.n	8006daa <_printf_float+0x33e>
 8006e26:	e680      	b.n	8006b2a <_printf_float+0xbe>
 8006e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2a:	2a01      	cmp	r2, #1
 8006e2c:	dc01      	bgt.n	8006e32 <_printf_float+0x3c6>
 8006e2e:	07db      	lsls	r3, r3, #31
 8006e30:	d53a      	bpl.n	8006ea8 <_printf_float+0x43c>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4642      	mov	r2, r8
 8006e36:	4631      	mov	r1, r6
 8006e38:	4628      	mov	r0, r5
 8006e3a:	47b8      	blx	r7
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	f43f ae74 	beq.w	8006b2a <_printf_float+0xbe>
 8006e42:	ee18 3a10 	vmov	r3, s16
 8006e46:	4652      	mov	r2, sl
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	47b8      	blx	r7
 8006e4e:	3001      	adds	r0, #1
 8006e50:	f43f ae6b 	beq.w	8006b2a <_printf_float+0xbe>
 8006e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006e60:	f7f9 fe32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e64:	b9d8      	cbnz	r0, 8006e9e <_printf_float+0x432>
 8006e66:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006e6a:	f108 0201 	add.w	r2, r8, #1
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4628      	mov	r0, r5
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	d10e      	bne.n	8006e96 <_printf_float+0x42a>
 8006e78:	e657      	b.n	8006b2a <_printf_float+0xbe>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4652      	mov	r2, sl
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	47b8      	blx	r7
 8006e84:	3001      	adds	r0, #1
 8006e86:	f43f ae50 	beq.w	8006b2a <_printf_float+0xbe>
 8006e8a:	f108 0801 	add.w	r8, r8, #1
 8006e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e90:	3b01      	subs	r3, #1
 8006e92:	4543      	cmp	r3, r8
 8006e94:	dcf1      	bgt.n	8006e7a <_printf_float+0x40e>
 8006e96:	464b      	mov	r3, r9
 8006e98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e9c:	e6da      	b.n	8006c54 <_printf_float+0x1e8>
 8006e9e:	f04f 0800 	mov.w	r8, #0
 8006ea2:	f104 0a1a 	add.w	sl, r4, #26
 8006ea6:	e7f2      	b.n	8006e8e <_printf_float+0x422>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	4642      	mov	r2, r8
 8006eac:	e7df      	b.n	8006e6e <_printf_float+0x402>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	464a      	mov	r2, r9
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	47b8      	blx	r7
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f43f ae36 	beq.w	8006b2a <_printf_float+0xbe>
 8006ebe:	f108 0801 	add.w	r8, r8, #1
 8006ec2:	68e3      	ldr	r3, [r4, #12]
 8006ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ec6:	1a5b      	subs	r3, r3, r1
 8006ec8:	4543      	cmp	r3, r8
 8006eca:	dcf0      	bgt.n	8006eae <_printf_float+0x442>
 8006ecc:	e6f8      	b.n	8006cc0 <_printf_float+0x254>
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	f104 0919 	add.w	r9, r4, #25
 8006ed6:	e7f4      	b.n	8006ec2 <_printf_float+0x456>

08006ed8 <_printf_common>:
 8006ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006edc:	4616      	mov	r6, r2
 8006ede:	4699      	mov	r9, r3
 8006ee0:	688a      	ldr	r2, [r1, #8]
 8006ee2:	690b      	ldr	r3, [r1, #16]
 8006ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	bfb8      	it	lt
 8006eec:	4613      	movlt	r3, r2
 8006eee:	6033      	str	r3, [r6, #0]
 8006ef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ef4:	4607      	mov	r7, r0
 8006ef6:	460c      	mov	r4, r1
 8006ef8:	b10a      	cbz	r2, 8006efe <_printf_common+0x26>
 8006efa:	3301      	adds	r3, #1
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	0699      	lsls	r1, r3, #26
 8006f02:	bf42      	ittt	mi
 8006f04:	6833      	ldrmi	r3, [r6, #0]
 8006f06:	3302      	addmi	r3, #2
 8006f08:	6033      	strmi	r3, [r6, #0]
 8006f0a:	6825      	ldr	r5, [r4, #0]
 8006f0c:	f015 0506 	ands.w	r5, r5, #6
 8006f10:	d106      	bne.n	8006f20 <_printf_common+0x48>
 8006f12:	f104 0a19 	add.w	sl, r4, #25
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	6832      	ldr	r2, [r6, #0]
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dc26      	bgt.n	8006f6e <_printf_common+0x96>
 8006f20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f24:	1e13      	subs	r3, r2, #0
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	bf18      	it	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	0692      	lsls	r2, r2, #26
 8006f2e:	d42b      	bmi.n	8006f88 <_printf_common+0xb0>
 8006f30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f34:	4649      	mov	r1, r9
 8006f36:	4638      	mov	r0, r7
 8006f38:	47c0      	blx	r8
 8006f3a:	3001      	adds	r0, #1
 8006f3c:	d01e      	beq.n	8006f7c <_printf_common+0xa4>
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	6922      	ldr	r2, [r4, #16]
 8006f42:	f003 0306 	and.w	r3, r3, #6
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	bf02      	ittt	eq
 8006f4a:	68e5      	ldreq	r5, [r4, #12]
 8006f4c:	6833      	ldreq	r3, [r6, #0]
 8006f4e:	1aed      	subeq	r5, r5, r3
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	bf0c      	ite	eq
 8006f54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f58:	2500      	movne	r5, #0
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	bfc4      	itt	gt
 8006f5e:	1a9b      	subgt	r3, r3, r2
 8006f60:	18ed      	addgt	r5, r5, r3
 8006f62:	2600      	movs	r6, #0
 8006f64:	341a      	adds	r4, #26
 8006f66:	42b5      	cmp	r5, r6
 8006f68:	d11a      	bne.n	8006fa0 <_printf_common+0xc8>
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e008      	b.n	8006f80 <_printf_common+0xa8>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4652      	mov	r2, sl
 8006f72:	4649      	mov	r1, r9
 8006f74:	4638      	mov	r0, r7
 8006f76:	47c0      	blx	r8
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d103      	bne.n	8006f84 <_printf_common+0xac>
 8006f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f84:	3501      	adds	r5, #1
 8006f86:	e7c6      	b.n	8006f16 <_printf_common+0x3e>
 8006f88:	18e1      	adds	r1, r4, r3
 8006f8a:	1c5a      	adds	r2, r3, #1
 8006f8c:	2030      	movs	r0, #48	; 0x30
 8006f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f92:	4422      	add	r2, r4
 8006f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	e7c7      	b.n	8006f30 <_printf_common+0x58>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	47c0      	blx	r8
 8006faa:	3001      	adds	r0, #1
 8006fac:	d0e6      	beq.n	8006f7c <_printf_common+0xa4>
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7d9      	b.n	8006f66 <_printf_common+0x8e>
	...

08006fb4 <_printf_i>:
 8006fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	7e0f      	ldrb	r7, [r1, #24]
 8006fba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fbc:	2f78      	cmp	r7, #120	; 0x78
 8006fbe:	4691      	mov	r9, r2
 8006fc0:	4680      	mov	r8, r0
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	469a      	mov	sl, r3
 8006fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006fca:	d807      	bhi.n	8006fdc <_printf_i+0x28>
 8006fcc:	2f62      	cmp	r7, #98	; 0x62
 8006fce:	d80a      	bhi.n	8006fe6 <_printf_i+0x32>
 8006fd0:	2f00      	cmp	r7, #0
 8006fd2:	f000 80d4 	beq.w	800717e <_printf_i+0x1ca>
 8006fd6:	2f58      	cmp	r7, #88	; 0x58
 8006fd8:	f000 80c0 	beq.w	800715c <_printf_i+0x1a8>
 8006fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006fe4:	e03a      	b.n	800705c <_printf_i+0xa8>
 8006fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006fea:	2b15      	cmp	r3, #21
 8006fec:	d8f6      	bhi.n	8006fdc <_printf_i+0x28>
 8006fee:	a101      	add	r1, pc, #4	; (adr r1, 8006ff4 <_printf_i+0x40>)
 8006ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ff4:	0800704d 	.word	0x0800704d
 8006ff8:	08007061 	.word	0x08007061
 8006ffc:	08006fdd 	.word	0x08006fdd
 8007000:	08006fdd 	.word	0x08006fdd
 8007004:	08006fdd 	.word	0x08006fdd
 8007008:	08006fdd 	.word	0x08006fdd
 800700c:	08007061 	.word	0x08007061
 8007010:	08006fdd 	.word	0x08006fdd
 8007014:	08006fdd 	.word	0x08006fdd
 8007018:	08006fdd 	.word	0x08006fdd
 800701c:	08006fdd 	.word	0x08006fdd
 8007020:	08007165 	.word	0x08007165
 8007024:	0800708d 	.word	0x0800708d
 8007028:	0800711f 	.word	0x0800711f
 800702c:	08006fdd 	.word	0x08006fdd
 8007030:	08006fdd 	.word	0x08006fdd
 8007034:	08007187 	.word	0x08007187
 8007038:	08006fdd 	.word	0x08006fdd
 800703c:	0800708d 	.word	0x0800708d
 8007040:	08006fdd 	.word	0x08006fdd
 8007044:	08006fdd 	.word	0x08006fdd
 8007048:	08007127 	.word	0x08007127
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	1d1a      	adds	r2, r3, #4
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	602a      	str	r2, [r5, #0]
 8007054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800705c:	2301      	movs	r3, #1
 800705e:	e09f      	b.n	80071a0 <_printf_i+0x1ec>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	0607      	lsls	r7, r0, #24
 8007066:	f103 0104 	add.w	r1, r3, #4
 800706a:	6029      	str	r1, [r5, #0]
 800706c:	d501      	bpl.n	8007072 <_printf_i+0xbe>
 800706e:	681e      	ldr	r6, [r3, #0]
 8007070:	e003      	b.n	800707a <_printf_i+0xc6>
 8007072:	0646      	lsls	r6, r0, #25
 8007074:	d5fb      	bpl.n	800706e <_printf_i+0xba>
 8007076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800707a:	2e00      	cmp	r6, #0
 800707c:	da03      	bge.n	8007086 <_printf_i+0xd2>
 800707e:	232d      	movs	r3, #45	; 0x2d
 8007080:	4276      	negs	r6, r6
 8007082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007086:	485a      	ldr	r0, [pc, #360]	; (80071f0 <_printf_i+0x23c>)
 8007088:	230a      	movs	r3, #10
 800708a:	e012      	b.n	80070b2 <_printf_i+0xfe>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	6820      	ldr	r0, [r4, #0]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	6029      	str	r1, [r5, #0]
 8007094:	0605      	lsls	r5, r0, #24
 8007096:	d501      	bpl.n	800709c <_printf_i+0xe8>
 8007098:	681e      	ldr	r6, [r3, #0]
 800709a:	e002      	b.n	80070a2 <_printf_i+0xee>
 800709c:	0641      	lsls	r1, r0, #25
 800709e:	d5fb      	bpl.n	8007098 <_printf_i+0xe4>
 80070a0:	881e      	ldrh	r6, [r3, #0]
 80070a2:	4853      	ldr	r0, [pc, #332]	; (80071f0 <_printf_i+0x23c>)
 80070a4:	2f6f      	cmp	r7, #111	; 0x6f
 80070a6:	bf0c      	ite	eq
 80070a8:	2308      	moveq	r3, #8
 80070aa:	230a      	movne	r3, #10
 80070ac:	2100      	movs	r1, #0
 80070ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070b2:	6865      	ldr	r5, [r4, #4]
 80070b4:	60a5      	str	r5, [r4, #8]
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	bfa2      	ittt	ge
 80070ba:	6821      	ldrge	r1, [r4, #0]
 80070bc:	f021 0104 	bicge.w	r1, r1, #4
 80070c0:	6021      	strge	r1, [r4, #0]
 80070c2:	b90e      	cbnz	r6, 80070c8 <_printf_i+0x114>
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d04b      	beq.n	8007160 <_printf_i+0x1ac>
 80070c8:	4615      	mov	r5, r2
 80070ca:	fbb6 f1f3 	udiv	r1, r6, r3
 80070ce:	fb03 6711 	mls	r7, r3, r1, r6
 80070d2:	5dc7      	ldrb	r7, [r0, r7]
 80070d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80070d8:	4637      	mov	r7, r6
 80070da:	42bb      	cmp	r3, r7
 80070dc:	460e      	mov	r6, r1
 80070de:	d9f4      	bls.n	80070ca <_printf_i+0x116>
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d10b      	bne.n	80070fc <_printf_i+0x148>
 80070e4:	6823      	ldr	r3, [r4, #0]
 80070e6:	07de      	lsls	r6, r3, #31
 80070e8:	d508      	bpl.n	80070fc <_printf_i+0x148>
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	6861      	ldr	r1, [r4, #4]
 80070ee:	4299      	cmp	r1, r3
 80070f0:	bfde      	ittt	le
 80070f2:	2330      	movle	r3, #48	; 0x30
 80070f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80070f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80070fc:	1b52      	subs	r2, r2, r5
 80070fe:	6122      	str	r2, [r4, #16]
 8007100:	f8cd a000 	str.w	sl, [sp]
 8007104:	464b      	mov	r3, r9
 8007106:	aa03      	add	r2, sp, #12
 8007108:	4621      	mov	r1, r4
 800710a:	4640      	mov	r0, r8
 800710c:	f7ff fee4 	bl	8006ed8 <_printf_common>
 8007110:	3001      	adds	r0, #1
 8007112:	d14a      	bne.n	80071aa <_printf_i+0x1f6>
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	b004      	add	sp, #16
 800711a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	f043 0320 	orr.w	r3, r3, #32
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	4833      	ldr	r0, [pc, #204]	; (80071f4 <_printf_i+0x240>)
 8007128:	2778      	movs	r7, #120	; 0x78
 800712a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	6829      	ldr	r1, [r5, #0]
 8007132:	061f      	lsls	r7, r3, #24
 8007134:	f851 6b04 	ldr.w	r6, [r1], #4
 8007138:	d402      	bmi.n	8007140 <_printf_i+0x18c>
 800713a:	065f      	lsls	r7, r3, #25
 800713c:	bf48      	it	mi
 800713e:	b2b6      	uxthmi	r6, r6
 8007140:	07df      	lsls	r7, r3, #31
 8007142:	bf48      	it	mi
 8007144:	f043 0320 	orrmi.w	r3, r3, #32
 8007148:	6029      	str	r1, [r5, #0]
 800714a:	bf48      	it	mi
 800714c:	6023      	strmi	r3, [r4, #0]
 800714e:	b91e      	cbnz	r6, 8007158 <_printf_i+0x1a4>
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	2310      	movs	r3, #16
 800715a:	e7a7      	b.n	80070ac <_printf_i+0xf8>
 800715c:	4824      	ldr	r0, [pc, #144]	; (80071f0 <_printf_i+0x23c>)
 800715e:	e7e4      	b.n	800712a <_printf_i+0x176>
 8007160:	4615      	mov	r5, r2
 8007162:	e7bd      	b.n	80070e0 <_printf_i+0x12c>
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	6826      	ldr	r6, [r4, #0]
 8007168:	6961      	ldr	r1, [r4, #20]
 800716a:	1d18      	adds	r0, r3, #4
 800716c:	6028      	str	r0, [r5, #0]
 800716e:	0635      	lsls	r5, r6, #24
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	d501      	bpl.n	8007178 <_printf_i+0x1c4>
 8007174:	6019      	str	r1, [r3, #0]
 8007176:	e002      	b.n	800717e <_printf_i+0x1ca>
 8007178:	0670      	lsls	r0, r6, #25
 800717a:	d5fb      	bpl.n	8007174 <_printf_i+0x1c0>
 800717c:	8019      	strh	r1, [r3, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	6123      	str	r3, [r4, #16]
 8007182:	4615      	mov	r5, r2
 8007184:	e7bc      	b.n	8007100 <_printf_i+0x14c>
 8007186:	682b      	ldr	r3, [r5, #0]
 8007188:	1d1a      	adds	r2, r3, #4
 800718a:	602a      	str	r2, [r5, #0]
 800718c:	681d      	ldr	r5, [r3, #0]
 800718e:	6862      	ldr	r2, [r4, #4]
 8007190:	2100      	movs	r1, #0
 8007192:	4628      	mov	r0, r5
 8007194:	f7f9 f81c 	bl	80001d0 <memchr>
 8007198:	b108      	cbz	r0, 800719e <_printf_i+0x1ea>
 800719a:	1b40      	subs	r0, r0, r5
 800719c:	6060      	str	r0, [r4, #4]
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	6123      	str	r3, [r4, #16]
 80071a2:	2300      	movs	r3, #0
 80071a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a8:	e7aa      	b.n	8007100 <_printf_i+0x14c>
 80071aa:	6923      	ldr	r3, [r4, #16]
 80071ac:	462a      	mov	r2, r5
 80071ae:	4649      	mov	r1, r9
 80071b0:	4640      	mov	r0, r8
 80071b2:	47d0      	blx	sl
 80071b4:	3001      	adds	r0, #1
 80071b6:	d0ad      	beq.n	8007114 <_printf_i+0x160>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	079b      	lsls	r3, r3, #30
 80071bc:	d413      	bmi.n	80071e6 <_printf_i+0x232>
 80071be:	68e0      	ldr	r0, [r4, #12]
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	4298      	cmp	r0, r3
 80071c4:	bfb8      	it	lt
 80071c6:	4618      	movlt	r0, r3
 80071c8:	e7a6      	b.n	8007118 <_printf_i+0x164>
 80071ca:	2301      	movs	r3, #1
 80071cc:	4632      	mov	r2, r6
 80071ce:	4649      	mov	r1, r9
 80071d0:	4640      	mov	r0, r8
 80071d2:	47d0      	blx	sl
 80071d4:	3001      	adds	r0, #1
 80071d6:	d09d      	beq.n	8007114 <_printf_i+0x160>
 80071d8:	3501      	adds	r5, #1
 80071da:	68e3      	ldr	r3, [r4, #12]
 80071dc:	9903      	ldr	r1, [sp, #12]
 80071de:	1a5b      	subs	r3, r3, r1
 80071e0:	42ab      	cmp	r3, r5
 80071e2:	dcf2      	bgt.n	80071ca <_printf_i+0x216>
 80071e4:	e7eb      	b.n	80071be <_printf_i+0x20a>
 80071e6:	2500      	movs	r5, #0
 80071e8:	f104 0619 	add.w	r6, r4, #25
 80071ec:	e7f5      	b.n	80071da <_printf_i+0x226>
 80071ee:	bf00      	nop
 80071f0:	080096b6 	.word	0x080096b6
 80071f4:	080096c7 	.word	0x080096c7

080071f8 <std>:
 80071f8:	2300      	movs	r3, #0
 80071fa:	b510      	push	{r4, lr}
 80071fc:	4604      	mov	r4, r0
 80071fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007206:	6083      	str	r3, [r0, #8]
 8007208:	8181      	strh	r1, [r0, #12]
 800720a:	6643      	str	r3, [r0, #100]	; 0x64
 800720c:	81c2      	strh	r2, [r0, #14]
 800720e:	6183      	str	r3, [r0, #24]
 8007210:	4619      	mov	r1, r3
 8007212:	2208      	movs	r2, #8
 8007214:	305c      	adds	r0, #92	; 0x5c
 8007216:	f000 f914 	bl	8007442 <memset>
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <std+0x58>)
 800721c:	6263      	str	r3, [r4, #36]	; 0x24
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x5c>)
 8007220:	62a3      	str	r3, [r4, #40]	; 0x28
 8007222:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <std+0x60>)
 8007224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007226:	4b0d      	ldr	r3, [pc, #52]	; (800725c <std+0x64>)
 8007228:	6323      	str	r3, [r4, #48]	; 0x30
 800722a:	4b0d      	ldr	r3, [pc, #52]	; (8007260 <std+0x68>)
 800722c:	6224      	str	r4, [r4, #32]
 800722e:	429c      	cmp	r4, r3
 8007230:	d006      	beq.n	8007240 <std+0x48>
 8007232:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007236:	4294      	cmp	r4, r2
 8007238:	d002      	beq.n	8007240 <std+0x48>
 800723a:	33d0      	adds	r3, #208	; 0xd0
 800723c:	429c      	cmp	r4, r3
 800723e:	d105      	bne.n	800724c <std+0x54>
 8007240:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007248:	f000 b978 	b.w	800753c <__retarget_lock_init_recursive>
 800724c:	bd10      	pop	{r4, pc}
 800724e:	bf00      	nop
 8007250:	080073bd 	.word	0x080073bd
 8007254:	080073df 	.word	0x080073df
 8007258:	08007417 	.word	0x08007417
 800725c:	0800743b 	.word	0x0800743b
 8007260:	2000077c 	.word	0x2000077c

08007264 <stdio_exit_handler>:
 8007264:	4a02      	ldr	r2, [pc, #8]	; (8007270 <stdio_exit_handler+0xc>)
 8007266:	4903      	ldr	r1, [pc, #12]	; (8007274 <stdio_exit_handler+0x10>)
 8007268:	4803      	ldr	r0, [pc, #12]	; (8007278 <stdio_exit_handler+0x14>)
 800726a:	f000 b869 	b.w	8007340 <_fwalk_sglue>
 800726e:	bf00      	nop
 8007270:	20000128 	.word	0x20000128
 8007274:	08008f09 	.word	0x08008f09
 8007278:	20000134 	.word	0x20000134

0800727c <cleanup_stdio>:
 800727c:	6841      	ldr	r1, [r0, #4]
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <cleanup_stdio+0x34>)
 8007280:	4299      	cmp	r1, r3
 8007282:	b510      	push	{r4, lr}
 8007284:	4604      	mov	r4, r0
 8007286:	d001      	beq.n	800728c <cleanup_stdio+0x10>
 8007288:	f001 fe3e 	bl	8008f08 <_fflush_r>
 800728c:	68a1      	ldr	r1, [r4, #8]
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <cleanup_stdio+0x38>)
 8007290:	4299      	cmp	r1, r3
 8007292:	d002      	beq.n	800729a <cleanup_stdio+0x1e>
 8007294:	4620      	mov	r0, r4
 8007296:	f001 fe37 	bl	8008f08 <_fflush_r>
 800729a:	68e1      	ldr	r1, [r4, #12]
 800729c:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <cleanup_stdio+0x3c>)
 800729e:	4299      	cmp	r1, r3
 80072a0:	d004      	beq.n	80072ac <cleanup_stdio+0x30>
 80072a2:	4620      	mov	r0, r4
 80072a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072a8:	f001 be2e 	b.w	8008f08 <_fflush_r>
 80072ac:	bd10      	pop	{r4, pc}
 80072ae:	bf00      	nop
 80072b0:	2000077c 	.word	0x2000077c
 80072b4:	200007e4 	.word	0x200007e4
 80072b8:	2000084c 	.word	0x2000084c

080072bc <global_stdio_init.part.0>:
 80072bc:	b510      	push	{r4, lr}
 80072be:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <global_stdio_init.part.0+0x30>)
 80072c0:	4c0b      	ldr	r4, [pc, #44]	; (80072f0 <global_stdio_init.part.0+0x34>)
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <global_stdio_init.part.0+0x38>)
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	4620      	mov	r0, r4
 80072c8:	2200      	movs	r2, #0
 80072ca:	2104      	movs	r1, #4
 80072cc:	f7ff ff94 	bl	80071f8 <std>
 80072d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072d4:	2201      	movs	r2, #1
 80072d6:	2109      	movs	r1, #9
 80072d8:	f7ff ff8e 	bl	80071f8 <std>
 80072dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072e0:	2202      	movs	r2, #2
 80072e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e6:	2112      	movs	r1, #18
 80072e8:	f7ff bf86 	b.w	80071f8 <std>
 80072ec:	200008b4 	.word	0x200008b4
 80072f0:	2000077c 	.word	0x2000077c
 80072f4:	08007265 	.word	0x08007265

080072f8 <__sfp_lock_acquire>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_acquire+0x8>)
 80072fa:	f000 b920 	b.w	800753e <__retarget_lock_acquire_recursive>
 80072fe:	bf00      	nop
 8007300:	200008bd 	.word	0x200008bd

08007304 <__sfp_lock_release>:
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <__sfp_lock_release+0x8>)
 8007306:	f000 b91b 	b.w	8007540 <__retarget_lock_release_recursive>
 800730a:	bf00      	nop
 800730c:	200008bd 	.word	0x200008bd

08007310 <__sinit>:
 8007310:	b510      	push	{r4, lr}
 8007312:	4604      	mov	r4, r0
 8007314:	f7ff fff0 	bl	80072f8 <__sfp_lock_acquire>
 8007318:	6a23      	ldr	r3, [r4, #32]
 800731a:	b11b      	cbz	r3, 8007324 <__sinit+0x14>
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	f7ff bff0 	b.w	8007304 <__sfp_lock_release>
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <__sinit+0x28>)
 8007326:	6223      	str	r3, [r4, #32]
 8007328:	4b04      	ldr	r3, [pc, #16]	; (800733c <__sinit+0x2c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1f5      	bne.n	800731c <__sinit+0xc>
 8007330:	f7ff ffc4 	bl	80072bc <global_stdio_init.part.0>
 8007334:	e7f2      	b.n	800731c <__sinit+0xc>
 8007336:	bf00      	nop
 8007338:	0800727d 	.word	0x0800727d
 800733c:	200008b4 	.word	0x200008b4

08007340 <_fwalk_sglue>:
 8007340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007344:	4607      	mov	r7, r0
 8007346:	4688      	mov	r8, r1
 8007348:	4614      	mov	r4, r2
 800734a:	2600      	movs	r6, #0
 800734c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007350:	f1b9 0901 	subs.w	r9, r9, #1
 8007354:	d505      	bpl.n	8007362 <_fwalk_sglue+0x22>
 8007356:	6824      	ldr	r4, [r4, #0]
 8007358:	2c00      	cmp	r4, #0
 800735a:	d1f7      	bne.n	800734c <_fwalk_sglue+0xc>
 800735c:	4630      	mov	r0, r6
 800735e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d907      	bls.n	8007378 <_fwalk_sglue+0x38>
 8007368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800736c:	3301      	adds	r3, #1
 800736e:	d003      	beq.n	8007378 <_fwalk_sglue+0x38>
 8007370:	4629      	mov	r1, r5
 8007372:	4638      	mov	r0, r7
 8007374:	47c0      	blx	r8
 8007376:	4306      	orrs	r6, r0
 8007378:	3568      	adds	r5, #104	; 0x68
 800737a:	e7e9      	b.n	8007350 <_fwalk_sglue+0x10>

0800737c <siprintf>:
 800737c:	b40e      	push	{r1, r2, r3}
 800737e:	b500      	push	{lr}
 8007380:	b09c      	sub	sp, #112	; 0x70
 8007382:	ab1d      	add	r3, sp, #116	; 0x74
 8007384:	9002      	str	r0, [sp, #8]
 8007386:	9006      	str	r0, [sp, #24]
 8007388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800738c:	4809      	ldr	r0, [pc, #36]	; (80073b4 <siprintf+0x38>)
 800738e:	9107      	str	r1, [sp, #28]
 8007390:	9104      	str	r1, [sp, #16]
 8007392:	4909      	ldr	r1, [pc, #36]	; (80073b8 <siprintf+0x3c>)
 8007394:	f853 2b04 	ldr.w	r2, [r3], #4
 8007398:	9105      	str	r1, [sp, #20]
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	a902      	add	r1, sp, #8
 80073a0:	f001 fc2e 	bl	8008c00 <_svfiprintf_r>
 80073a4:	9b02      	ldr	r3, [sp, #8]
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
 80073aa:	b01c      	add	sp, #112	; 0x70
 80073ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80073b0:	b003      	add	sp, #12
 80073b2:	4770      	bx	lr
 80073b4:	20000180 	.word	0x20000180
 80073b8:	ffff0208 	.word	0xffff0208

080073bc <__sread>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	460c      	mov	r4, r1
 80073c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c4:	f000 f86c 	bl	80074a0 <_read_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	bfab      	itete	ge
 80073cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ce:	89a3      	ldrhlt	r3, [r4, #12]
 80073d0:	181b      	addge	r3, r3, r0
 80073d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073d6:	bfac      	ite	ge
 80073d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073da:	81a3      	strhlt	r3, [r4, #12]
 80073dc:	bd10      	pop	{r4, pc}

080073de <__swrite>:
 80073de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	461f      	mov	r7, r3
 80073e4:	898b      	ldrh	r3, [r1, #12]
 80073e6:	05db      	lsls	r3, r3, #23
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4616      	mov	r6, r2
 80073ee:	d505      	bpl.n	80073fc <__swrite+0x1e>
 80073f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f4:	2302      	movs	r3, #2
 80073f6:	2200      	movs	r2, #0
 80073f8:	f000 f840 	bl	800747c <_lseek_r>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007402:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	4632      	mov	r2, r6
 800740a:	463b      	mov	r3, r7
 800740c:	4628      	mov	r0, r5
 800740e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	f000 b857 	b.w	80074c4 <_write_r>

08007416 <__sseek>:
 8007416:	b510      	push	{r4, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 f82d 	bl	800747c <_lseek_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	bf15      	itete	ne
 8007428:	6560      	strne	r0, [r4, #84]	; 0x54
 800742a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800742e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007432:	81a3      	strheq	r3, [r4, #12]
 8007434:	bf18      	it	ne
 8007436:	81a3      	strhne	r3, [r4, #12]
 8007438:	bd10      	pop	{r4, pc}

0800743a <__sclose>:
 800743a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743e:	f000 b80d 	b.w	800745c <_close_r>

08007442 <memset>:
 8007442:	4402      	add	r2, r0
 8007444:	4603      	mov	r3, r0
 8007446:	4293      	cmp	r3, r2
 8007448:	d100      	bne.n	800744c <memset+0xa>
 800744a:	4770      	bx	lr
 800744c:	f803 1b01 	strb.w	r1, [r3], #1
 8007450:	e7f9      	b.n	8007446 <memset+0x4>
	...

08007454 <_localeconv_r>:
 8007454:	4800      	ldr	r0, [pc, #0]	; (8007458 <_localeconv_r+0x4>)
 8007456:	4770      	bx	lr
 8007458:	20000274 	.word	0x20000274

0800745c <_close_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	; (8007478 <_close_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7fa f993 	bl	8001792 <_close>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_close_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_close_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	200008b8 	.word	0x200008b8

0800747c <_lseek_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d07      	ldr	r5, [pc, #28]	; (800749c <_lseek_r+0x20>)
 8007480:	4604      	mov	r4, r0
 8007482:	4608      	mov	r0, r1
 8007484:	4611      	mov	r1, r2
 8007486:	2200      	movs	r2, #0
 8007488:	602a      	str	r2, [r5, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	f7fa f9a8 	bl	80017e0 <_lseek>
 8007490:	1c43      	adds	r3, r0, #1
 8007492:	d102      	bne.n	800749a <_lseek_r+0x1e>
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	b103      	cbz	r3, 800749a <_lseek_r+0x1e>
 8007498:	6023      	str	r3, [r4, #0]
 800749a:	bd38      	pop	{r3, r4, r5, pc}
 800749c:	200008b8 	.word	0x200008b8

080074a0 <_read_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d07      	ldr	r5, [pc, #28]	; (80074c0 <_read_r+0x20>)
 80074a4:	4604      	mov	r4, r0
 80074a6:	4608      	mov	r0, r1
 80074a8:	4611      	mov	r1, r2
 80074aa:	2200      	movs	r2, #0
 80074ac:	602a      	str	r2, [r5, #0]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f7fa f936 	bl	8001720 <_read>
 80074b4:	1c43      	adds	r3, r0, #1
 80074b6:	d102      	bne.n	80074be <_read_r+0x1e>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	b103      	cbz	r3, 80074be <_read_r+0x1e>
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	200008b8 	.word	0x200008b8

080074c4 <_write_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4d07      	ldr	r5, [pc, #28]	; (80074e4 <_write_r+0x20>)
 80074c8:	4604      	mov	r4, r0
 80074ca:	4608      	mov	r0, r1
 80074cc:	4611      	mov	r1, r2
 80074ce:	2200      	movs	r2, #0
 80074d0:	602a      	str	r2, [r5, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	f7fa f941 	bl	800175a <_write>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_write_r+0x1e>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_write_r+0x1e>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	200008b8 	.word	0x200008b8

080074e8 <__errno>:
 80074e8:	4b01      	ldr	r3, [pc, #4]	; (80074f0 <__errno+0x8>)
 80074ea:	6818      	ldr	r0, [r3, #0]
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20000180 	.word	0x20000180

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	4d0d      	ldr	r5, [pc, #52]	; (800752c <__libc_init_array+0x38>)
 80074f8:	4c0d      	ldr	r4, [pc, #52]	; (8007530 <__libc_init_array+0x3c>)
 80074fa:	1b64      	subs	r4, r4, r5
 80074fc:	10a4      	asrs	r4, r4, #2
 80074fe:	2600      	movs	r6, #0
 8007500:	42a6      	cmp	r6, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	4d0b      	ldr	r5, [pc, #44]	; (8007534 <__libc_init_array+0x40>)
 8007506:	4c0c      	ldr	r4, [pc, #48]	; (8007538 <__libc_init_array+0x44>)
 8007508:	f002 f894 	bl	8009634 <_init>
 800750c:	1b64      	subs	r4, r4, r5
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	2600      	movs	r6, #0
 8007512:	42a6      	cmp	r6, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f855 3b04 	ldr.w	r3, [r5], #4
 800751c:	4798      	blx	r3
 800751e:	3601      	adds	r6, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f855 3b04 	ldr.w	r3, [r5], #4
 8007526:	4798      	blx	r3
 8007528:	3601      	adds	r6, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	08009a14 	.word	0x08009a14
 8007530:	08009a14 	.word	0x08009a14
 8007534:	08009a14 	.word	0x08009a14
 8007538:	08009a18 	.word	0x08009a18

0800753c <__retarget_lock_init_recursive>:
 800753c:	4770      	bx	lr

0800753e <__retarget_lock_acquire_recursive>:
 800753e:	4770      	bx	lr

08007540 <__retarget_lock_release_recursive>:
 8007540:	4770      	bx	lr

08007542 <memcpy>:
 8007542:	440a      	add	r2, r1
 8007544:	4291      	cmp	r1, r2
 8007546:	f100 33ff 	add.w	r3, r0, #4294967295
 800754a:	d100      	bne.n	800754e <memcpy+0xc>
 800754c:	4770      	bx	lr
 800754e:	b510      	push	{r4, lr}
 8007550:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007554:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007558:	4291      	cmp	r1, r2
 800755a:	d1f9      	bne.n	8007550 <memcpy+0xe>
 800755c:	bd10      	pop	{r4, pc}

0800755e <quorem>:
 800755e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007562:	6903      	ldr	r3, [r0, #16]
 8007564:	690c      	ldr	r4, [r1, #16]
 8007566:	42a3      	cmp	r3, r4
 8007568:	4607      	mov	r7, r0
 800756a:	db7e      	blt.n	800766a <quorem+0x10c>
 800756c:	3c01      	subs	r4, #1
 800756e:	f101 0814 	add.w	r8, r1, #20
 8007572:	f100 0514 	add.w	r5, r0, #20
 8007576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007584:	3301      	adds	r3, #1
 8007586:	429a      	cmp	r2, r3
 8007588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800758c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007590:	fbb2 f6f3 	udiv	r6, r2, r3
 8007594:	d331      	bcc.n	80075fa <quorem+0x9c>
 8007596:	f04f 0e00 	mov.w	lr, #0
 800759a:	4640      	mov	r0, r8
 800759c:	46ac      	mov	ip, r5
 800759e:	46f2      	mov	sl, lr
 80075a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80075a4:	b293      	uxth	r3, r2
 80075a6:	fb06 e303 	mla	r3, r6, r3, lr
 80075aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075ae:	0c1a      	lsrs	r2, r3, #16
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	ebaa 0303 	sub.w	r3, sl, r3
 80075b6:	f8dc a000 	ldr.w	sl, [ip]
 80075ba:	fa13 f38a 	uxtah	r3, r3, sl
 80075be:	fb06 220e 	mla	r2, r6, lr, r2
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	9b00      	ldr	r3, [sp, #0]
 80075c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075ca:	b292      	uxth	r2, r2
 80075cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80075d8:	4581      	cmp	r9, r0
 80075da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075de:	f84c 3b04 	str.w	r3, [ip], #4
 80075e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80075e6:	d2db      	bcs.n	80075a0 <quorem+0x42>
 80075e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80075ec:	b92b      	cbnz	r3, 80075fa <quorem+0x9c>
 80075ee:	9b01      	ldr	r3, [sp, #4]
 80075f0:	3b04      	subs	r3, #4
 80075f2:	429d      	cmp	r5, r3
 80075f4:	461a      	mov	r2, r3
 80075f6:	d32c      	bcc.n	8007652 <quorem+0xf4>
 80075f8:	613c      	str	r4, [r7, #16]
 80075fa:	4638      	mov	r0, r7
 80075fc:	f001 f9a6 	bl	800894c <__mcmp>
 8007600:	2800      	cmp	r0, #0
 8007602:	db22      	blt.n	800764a <quorem+0xec>
 8007604:	3601      	adds	r6, #1
 8007606:	4629      	mov	r1, r5
 8007608:	2000      	movs	r0, #0
 800760a:	f858 2b04 	ldr.w	r2, [r8], #4
 800760e:	f8d1 c000 	ldr.w	ip, [r1]
 8007612:	b293      	uxth	r3, r2
 8007614:	1ac3      	subs	r3, r0, r3
 8007616:	0c12      	lsrs	r2, r2, #16
 8007618:	fa13 f38c 	uxtah	r3, r3, ip
 800761c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007620:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800762a:	45c1      	cmp	r9, r8
 800762c:	f841 3b04 	str.w	r3, [r1], #4
 8007630:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007634:	d2e9      	bcs.n	800760a <quorem+0xac>
 8007636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800763a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800763e:	b922      	cbnz	r2, 800764a <quorem+0xec>
 8007640:	3b04      	subs	r3, #4
 8007642:	429d      	cmp	r5, r3
 8007644:	461a      	mov	r2, r3
 8007646:	d30a      	bcc.n	800765e <quorem+0x100>
 8007648:	613c      	str	r4, [r7, #16]
 800764a:	4630      	mov	r0, r6
 800764c:	b003      	add	sp, #12
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	3b04      	subs	r3, #4
 8007656:	2a00      	cmp	r2, #0
 8007658:	d1ce      	bne.n	80075f8 <quorem+0x9a>
 800765a:	3c01      	subs	r4, #1
 800765c:	e7c9      	b.n	80075f2 <quorem+0x94>
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	3b04      	subs	r3, #4
 8007662:	2a00      	cmp	r2, #0
 8007664:	d1f0      	bne.n	8007648 <quorem+0xea>
 8007666:	3c01      	subs	r4, #1
 8007668:	e7eb      	b.n	8007642 <quorem+0xe4>
 800766a:	2000      	movs	r0, #0
 800766c:	e7ee      	b.n	800764c <quorem+0xee>
	...

08007670 <_dtoa_r>:
 8007670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	ed2d 8b04 	vpush	{d8-d9}
 8007678:	69c5      	ldr	r5, [r0, #28]
 800767a:	b093      	sub	sp, #76	; 0x4c
 800767c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007680:	ec57 6b10 	vmov	r6, r7, d0
 8007684:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007688:	9107      	str	r1, [sp, #28]
 800768a:	4604      	mov	r4, r0
 800768c:	920a      	str	r2, [sp, #40]	; 0x28
 800768e:	930d      	str	r3, [sp, #52]	; 0x34
 8007690:	b975      	cbnz	r5, 80076b0 <_dtoa_r+0x40>
 8007692:	2010      	movs	r0, #16
 8007694:	f000 fe2a 	bl	80082ec <malloc>
 8007698:	4602      	mov	r2, r0
 800769a:	61e0      	str	r0, [r4, #28]
 800769c:	b920      	cbnz	r0, 80076a8 <_dtoa_r+0x38>
 800769e:	4bae      	ldr	r3, [pc, #696]	; (8007958 <_dtoa_r+0x2e8>)
 80076a0:	21ef      	movs	r1, #239	; 0xef
 80076a2:	48ae      	ldr	r0, [pc, #696]	; (800795c <_dtoa_r+0x2ec>)
 80076a4:	f001 fc82 	bl	8008fac <__assert_func>
 80076a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076ac:	6005      	str	r5, [r0, #0]
 80076ae:	60c5      	str	r5, [r0, #12]
 80076b0:	69e3      	ldr	r3, [r4, #28]
 80076b2:	6819      	ldr	r1, [r3, #0]
 80076b4:	b151      	cbz	r1, 80076cc <_dtoa_r+0x5c>
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	604a      	str	r2, [r1, #4]
 80076ba:	2301      	movs	r3, #1
 80076bc:	4093      	lsls	r3, r2
 80076be:	608b      	str	r3, [r1, #8]
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 ff07 	bl	80084d4 <_Bfree>
 80076c6:	69e3      	ldr	r3, [r4, #28]
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	1e3b      	subs	r3, r7, #0
 80076ce:	bfbb      	ittet	lt
 80076d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80076d4:	9303      	strlt	r3, [sp, #12]
 80076d6:	2300      	movge	r3, #0
 80076d8:	2201      	movlt	r2, #1
 80076da:	bfac      	ite	ge
 80076dc:	f8c8 3000 	strge.w	r3, [r8]
 80076e0:	f8c8 2000 	strlt.w	r2, [r8]
 80076e4:	4b9e      	ldr	r3, [pc, #632]	; (8007960 <_dtoa_r+0x2f0>)
 80076e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80076ea:	ea33 0308 	bics.w	r3, r3, r8
 80076ee:	d11b      	bne.n	8007728 <_dtoa_r+0xb8>
 80076f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80076f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80076fc:	4333      	orrs	r3, r6
 80076fe:	f000 8593 	beq.w	8008228 <_dtoa_r+0xbb8>
 8007702:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007704:	b963      	cbnz	r3, 8007720 <_dtoa_r+0xb0>
 8007706:	4b97      	ldr	r3, [pc, #604]	; (8007964 <_dtoa_r+0x2f4>)
 8007708:	e027      	b.n	800775a <_dtoa_r+0xea>
 800770a:	4b97      	ldr	r3, [pc, #604]	; (8007968 <_dtoa_r+0x2f8>)
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	9800      	ldr	r0, [sp, #0]
 8007716:	b013      	add	sp, #76	; 0x4c
 8007718:	ecbd 8b04 	vpop	{d8-d9}
 800771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007720:	4b90      	ldr	r3, [pc, #576]	; (8007964 <_dtoa_r+0x2f4>)
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	3303      	adds	r3, #3
 8007726:	e7f3      	b.n	8007710 <_dtoa_r+0xa0>
 8007728:	ed9d 7b02 	vldr	d7, [sp, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	ec51 0b17 	vmov	r0, r1, d7
 8007732:	eeb0 8a47 	vmov.f32	s16, s14
 8007736:	eef0 8a67 	vmov.f32	s17, s15
 800773a:	2300      	movs	r3, #0
 800773c:	f7f9 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007740:	4681      	mov	r9, r0
 8007742:	b160      	cbz	r0, 800775e <_dtoa_r+0xee>
 8007744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007746:	2301      	movs	r3, #1
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 8568 	beq.w	8008222 <_dtoa_r+0xbb2>
 8007752:	4b86      	ldr	r3, [pc, #536]	; (800796c <_dtoa_r+0x2fc>)
 8007754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	3b01      	subs	r3, #1
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	e7da      	b.n	8007714 <_dtoa_r+0xa4>
 800775e:	aa10      	add	r2, sp, #64	; 0x40
 8007760:	a911      	add	r1, sp, #68	; 0x44
 8007762:	4620      	mov	r0, r4
 8007764:	eeb0 0a48 	vmov.f32	s0, s16
 8007768:	eef0 0a68 	vmov.f32	s1, s17
 800776c:	f001 f994 	bl	8008a98 <__d2b>
 8007770:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007774:	4682      	mov	sl, r0
 8007776:	2d00      	cmp	r5, #0
 8007778:	d07f      	beq.n	800787a <_dtoa_r+0x20a>
 800777a:	ee18 3a90 	vmov	r3, s17
 800777e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007782:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007786:	ec51 0b18 	vmov	r0, r1, d8
 800778a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800778e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007792:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007796:	4619      	mov	r1, r3
 8007798:	2200      	movs	r2, #0
 800779a:	4b75      	ldr	r3, [pc, #468]	; (8007970 <_dtoa_r+0x300>)
 800779c:	f7f8 fd74 	bl	8000288 <__aeabi_dsub>
 80077a0:	a367      	add	r3, pc, #412	; (adr r3, 8007940 <_dtoa_r+0x2d0>)
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f7f8 ff27 	bl	80005f8 <__aeabi_dmul>
 80077aa:	a367      	add	r3, pc, #412	; (adr r3, 8007948 <_dtoa_r+0x2d8>)
 80077ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b0:	f7f8 fd6c 	bl	800028c <__adddf3>
 80077b4:	4606      	mov	r6, r0
 80077b6:	4628      	mov	r0, r5
 80077b8:	460f      	mov	r7, r1
 80077ba:	f7f8 feb3 	bl	8000524 <__aeabi_i2d>
 80077be:	a364      	add	r3, pc, #400	; (adr r3, 8007950 <_dtoa_r+0x2e0>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	f7f8 ff18 	bl	80005f8 <__aeabi_dmul>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4630      	mov	r0, r6
 80077ce:	4639      	mov	r1, r7
 80077d0:	f7f8 fd5c 	bl	800028c <__adddf3>
 80077d4:	4606      	mov	r6, r0
 80077d6:	460f      	mov	r7, r1
 80077d8:	f7f9 f9be 	bl	8000b58 <__aeabi_d2iz>
 80077dc:	2200      	movs	r2, #0
 80077de:	4683      	mov	fp, r0
 80077e0:	2300      	movs	r3, #0
 80077e2:	4630      	mov	r0, r6
 80077e4:	4639      	mov	r1, r7
 80077e6:	f7f9 f979 	bl	8000adc <__aeabi_dcmplt>
 80077ea:	b148      	cbz	r0, 8007800 <_dtoa_r+0x190>
 80077ec:	4658      	mov	r0, fp
 80077ee:	f7f8 fe99 	bl	8000524 <__aeabi_i2d>
 80077f2:	4632      	mov	r2, r6
 80077f4:	463b      	mov	r3, r7
 80077f6:	f7f9 f967 	bl	8000ac8 <__aeabi_dcmpeq>
 80077fa:	b908      	cbnz	r0, 8007800 <_dtoa_r+0x190>
 80077fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007800:	f1bb 0f16 	cmp.w	fp, #22
 8007804:	d857      	bhi.n	80078b6 <_dtoa_r+0x246>
 8007806:	4b5b      	ldr	r3, [pc, #364]	; (8007974 <_dtoa_r+0x304>)
 8007808:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007810:	ec51 0b18 	vmov	r0, r1, d8
 8007814:	f7f9 f962 	bl	8000adc <__aeabi_dcmplt>
 8007818:	2800      	cmp	r0, #0
 800781a:	d04e      	beq.n	80078ba <_dtoa_r+0x24a>
 800781c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007820:	2300      	movs	r3, #0
 8007822:	930c      	str	r3, [sp, #48]	; 0x30
 8007824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007826:	1b5b      	subs	r3, r3, r5
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	bf45      	ittet	mi
 800782c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007830:	9305      	strmi	r3, [sp, #20]
 8007832:	2300      	movpl	r3, #0
 8007834:	2300      	movmi	r3, #0
 8007836:	9206      	str	r2, [sp, #24]
 8007838:	bf54      	ite	pl
 800783a:	9305      	strpl	r3, [sp, #20]
 800783c:	9306      	strmi	r3, [sp, #24]
 800783e:	f1bb 0f00 	cmp.w	fp, #0
 8007842:	db3c      	blt.n	80078be <_dtoa_r+0x24e>
 8007844:	9b06      	ldr	r3, [sp, #24]
 8007846:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800784a:	445b      	add	r3, fp
 800784c:	9306      	str	r3, [sp, #24]
 800784e:	2300      	movs	r3, #0
 8007850:	9308      	str	r3, [sp, #32]
 8007852:	9b07      	ldr	r3, [sp, #28]
 8007854:	2b09      	cmp	r3, #9
 8007856:	d868      	bhi.n	800792a <_dtoa_r+0x2ba>
 8007858:	2b05      	cmp	r3, #5
 800785a:	bfc4      	itt	gt
 800785c:	3b04      	subgt	r3, #4
 800785e:	9307      	strgt	r3, [sp, #28]
 8007860:	9b07      	ldr	r3, [sp, #28]
 8007862:	f1a3 0302 	sub.w	r3, r3, #2
 8007866:	bfcc      	ite	gt
 8007868:	2500      	movgt	r5, #0
 800786a:	2501      	movle	r5, #1
 800786c:	2b03      	cmp	r3, #3
 800786e:	f200 8085 	bhi.w	800797c <_dtoa_r+0x30c>
 8007872:	e8df f003 	tbb	[pc, r3]
 8007876:	3b2e      	.short	0x3b2e
 8007878:	5839      	.short	0x5839
 800787a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800787e:	441d      	add	r5, r3
 8007880:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007884:	2b20      	cmp	r3, #32
 8007886:	bfc1      	itttt	gt
 8007888:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800788c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007890:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007894:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007898:	bfd6      	itet	le
 800789a:	f1c3 0320 	rsble	r3, r3, #32
 800789e:	ea48 0003 	orrgt.w	r0, r8, r3
 80078a2:	fa06 f003 	lslle.w	r0, r6, r3
 80078a6:	f7f8 fe2d 	bl	8000504 <__aeabi_ui2d>
 80078aa:	2201      	movs	r2, #1
 80078ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80078b0:	3d01      	subs	r5, #1
 80078b2:	920e      	str	r2, [sp, #56]	; 0x38
 80078b4:	e76f      	b.n	8007796 <_dtoa_r+0x126>
 80078b6:	2301      	movs	r3, #1
 80078b8:	e7b3      	b.n	8007822 <_dtoa_r+0x1b2>
 80078ba:	900c      	str	r0, [sp, #48]	; 0x30
 80078bc:	e7b2      	b.n	8007824 <_dtoa_r+0x1b4>
 80078be:	9b05      	ldr	r3, [sp, #20]
 80078c0:	eba3 030b 	sub.w	r3, r3, fp
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	f1cb 0300 	rsb	r3, fp, #0
 80078ca:	9308      	str	r3, [sp, #32]
 80078cc:	2300      	movs	r3, #0
 80078ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d0:	e7bf      	b.n	8007852 <_dtoa_r+0x1e2>
 80078d2:	2300      	movs	r3, #0
 80078d4:	9309      	str	r3, [sp, #36]	; 0x24
 80078d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d8:	2b00      	cmp	r3, #0
 80078da:	dc52      	bgt.n	8007982 <_dtoa_r+0x312>
 80078dc:	2301      	movs	r3, #1
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	9304      	str	r3, [sp, #16]
 80078e2:	461a      	mov	r2, r3
 80078e4:	920a      	str	r2, [sp, #40]	; 0x28
 80078e6:	e00b      	b.n	8007900 <_dtoa_r+0x290>
 80078e8:	2301      	movs	r3, #1
 80078ea:	e7f3      	b.n	80078d4 <_dtoa_r+0x264>
 80078ec:	2300      	movs	r3, #0
 80078ee:	9309      	str	r3, [sp, #36]	; 0x24
 80078f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f2:	445b      	add	r3, fp
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	3301      	adds	r3, #1
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	bfb8      	it	lt
 80078fe:	2301      	movlt	r3, #1
 8007900:	69e0      	ldr	r0, [r4, #28]
 8007902:	2100      	movs	r1, #0
 8007904:	2204      	movs	r2, #4
 8007906:	f102 0614 	add.w	r6, r2, #20
 800790a:	429e      	cmp	r6, r3
 800790c:	d93d      	bls.n	800798a <_dtoa_r+0x31a>
 800790e:	6041      	str	r1, [r0, #4]
 8007910:	4620      	mov	r0, r4
 8007912:	f000 fd9f 	bl	8008454 <_Balloc>
 8007916:	9000      	str	r0, [sp, #0]
 8007918:	2800      	cmp	r0, #0
 800791a:	d139      	bne.n	8007990 <_dtoa_r+0x320>
 800791c:	4b16      	ldr	r3, [pc, #88]	; (8007978 <_dtoa_r+0x308>)
 800791e:	4602      	mov	r2, r0
 8007920:	f240 11af 	movw	r1, #431	; 0x1af
 8007924:	e6bd      	b.n	80076a2 <_dtoa_r+0x32>
 8007926:	2301      	movs	r3, #1
 8007928:	e7e1      	b.n	80078ee <_dtoa_r+0x27e>
 800792a:	2501      	movs	r5, #1
 800792c:	2300      	movs	r3, #0
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	9509      	str	r5, [sp, #36]	; 0x24
 8007932:	f04f 33ff 	mov.w	r3, #4294967295
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	2312      	movs	r3, #18
 800793e:	e7d1      	b.n	80078e4 <_dtoa_r+0x274>
 8007940:	636f4361 	.word	0x636f4361
 8007944:	3fd287a7 	.word	0x3fd287a7
 8007948:	8b60c8b3 	.word	0x8b60c8b3
 800794c:	3fc68a28 	.word	0x3fc68a28
 8007950:	509f79fb 	.word	0x509f79fb
 8007954:	3fd34413 	.word	0x3fd34413
 8007958:	080096e5 	.word	0x080096e5
 800795c:	080096fc 	.word	0x080096fc
 8007960:	7ff00000 	.word	0x7ff00000
 8007964:	080096e1 	.word	0x080096e1
 8007968:	080096d8 	.word	0x080096d8
 800796c:	080096b5 	.word	0x080096b5
 8007970:	3ff80000 	.word	0x3ff80000
 8007974:	080097e8 	.word	0x080097e8
 8007978:	08009754 	.word	0x08009754
 800797c:	2301      	movs	r3, #1
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	e7d7      	b.n	8007932 <_dtoa_r+0x2c2>
 8007982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	9304      	str	r3, [sp, #16]
 8007988:	e7ba      	b.n	8007900 <_dtoa_r+0x290>
 800798a:	3101      	adds	r1, #1
 800798c:	0052      	lsls	r2, r2, #1
 800798e:	e7ba      	b.n	8007906 <_dtoa_r+0x296>
 8007990:	69e3      	ldr	r3, [r4, #28]
 8007992:	9a00      	ldr	r2, [sp, #0]
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	2b0e      	cmp	r3, #14
 800799a:	f200 80a8 	bhi.w	8007aee <_dtoa_r+0x47e>
 800799e:	2d00      	cmp	r5, #0
 80079a0:	f000 80a5 	beq.w	8007aee <_dtoa_r+0x47e>
 80079a4:	f1bb 0f00 	cmp.w	fp, #0
 80079a8:	dd38      	ble.n	8007a1c <_dtoa_r+0x3ac>
 80079aa:	4bc0      	ldr	r3, [pc, #768]	; (8007cac <_dtoa_r+0x63c>)
 80079ac:	f00b 020f 	and.w	r2, fp, #15
 80079b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80079b8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80079bc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80079c0:	d019      	beq.n	80079f6 <_dtoa_r+0x386>
 80079c2:	4bbb      	ldr	r3, [pc, #748]	; (8007cb0 <_dtoa_r+0x640>)
 80079c4:	ec51 0b18 	vmov	r0, r1, d8
 80079c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079cc:	f7f8 ff3e 	bl	800084c <__aeabi_ddiv>
 80079d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079d4:	f008 080f 	and.w	r8, r8, #15
 80079d8:	2503      	movs	r5, #3
 80079da:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007cb0 <_dtoa_r+0x640>
 80079de:	f1b8 0f00 	cmp.w	r8, #0
 80079e2:	d10a      	bne.n	80079fa <_dtoa_r+0x38a>
 80079e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079e8:	4632      	mov	r2, r6
 80079ea:	463b      	mov	r3, r7
 80079ec:	f7f8 ff2e 	bl	800084c <__aeabi_ddiv>
 80079f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079f4:	e02b      	b.n	8007a4e <_dtoa_r+0x3de>
 80079f6:	2502      	movs	r5, #2
 80079f8:	e7ef      	b.n	80079da <_dtoa_r+0x36a>
 80079fa:	f018 0f01 	tst.w	r8, #1
 80079fe:	d008      	beq.n	8007a12 <_dtoa_r+0x3a2>
 8007a00:	4630      	mov	r0, r6
 8007a02:	4639      	mov	r1, r7
 8007a04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007a08:	f7f8 fdf6 	bl	80005f8 <__aeabi_dmul>
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	4606      	mov	r6, r0
 8007a10:	460f      	mov	r7, r1
 8007a12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007a16:	f109 0908 	add.w	r9, r9, #8
 8007a1a:	e7e0      	b.n	80079de <_dtoa_r+0x36e>
 8007a1c:	f000 809f 	beq.w	8007b5e <_dtoa_r+0x4ee>
 8007a20:	f1cb 0600 	rsb	r6, fp, #0
 8007a24:	4ba1      	ldr	r3, [pc, #644]	; (8007cac <_dtoa_r+0x63c>)
 8007a26:	4fa2      	ldr	r7, [pc, #648]	; (8007cb0 <_dtoa_r+0x640>)
 8007a28:	f006 020f 	and.w	r2, r6, #15
 8007a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	ec51 0b18 	vmov	r0, r1, d8
 8007a38:	f7f8 fdde 	bl	80005f8 <__aeabi_dmul>
 8007a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a40:	1136      	asrs	r6, r6, #4
 8007a42:	2300      	movs	r3, #0
 8007a44:	2502      	movs	r5, #2
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d17e      	bne.n	8007b48 <_dtoa_r+0x4d8>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1d0      	bne.n	80079f0 <_dtoa_r+0x380>
 8007a4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 8084 	beq.w	8007b62 <_dtoa_r+0x4f2>
 8007a5a:	4b96      	ldr	r3, [pc, #600]	; (8007cb4 <_dtoa_r+0x644>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7f9 f83b 	bl	8000adc <__aeabi_dcmplt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d07b      	beq.n	8007b62 <_dtoa_r+0x4f2>
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d078      	beq.n	8007b62 <_dtoa_r+0x4f2>
 8007a70:	9b01      	ldr	r3, [sp, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dd39      	ble.n	8007aea <_dtoa_r+0x47a>
 8007a76:	4b90      	ldr	r3, [pc, #576]	; (8007cb8 <_dtoa_r+0x648>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	f7f8 fdbb 	bl	80005f8 <__aeabi_dmul>
 8007a82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a86:	9e01      	ldr	r6, [sp, #4]
 8007a88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007a92:	4628      	mov	r0, r5
 8007a94:	f7f8 fd46 	bl	8000524 <__aeabi_i2d>
 8007a98:	4642      	mov	r2, r8
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	f7f8 fdac 	bl	80005f8 <__aeabi_dmul>
 8007aa0:	4b86      	ldr	r3, [pc, #536]	; (8007cbc <_dtoa_r+0x64c>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f7f8 fbf2 	bl	800028c <__adddf3>
 8007aa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab0:	9303      	str	r3, [sp, #12]
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d158      	bne.n	8007b68 <_dtoa_r+0x4f8>
 8007ab6:	4b82      	ldr	r3, [pc, #520]	; (8007cc0 <_dtoa_r+0x650>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4640      	mov	r0, r8
 8007abc:	4649      	mov	r1, r9
 8007abe:	f7f8 fbe3 	bl	8000288 <__aeabi_dsub>
 8007ac2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ac6:	4680      	mov	r8, r0
 8007ac8:	4689      	mov	r9, r1
 8007aca:	f7f9 f825 	bl	8000b18 <__aeabi_dcmpgt>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f040 8296 	bne.w	8008000 <_dtoa_r+0x990>
 8007ad4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ad8:	4640      	mov	r0, r8
 8007ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ade:	4649      	mov	r1, r9
 8007ae0:	f7f8 fffc 	bl	8000adc <__aeabi_dcmplt>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f040 8289 	bne.w	8007ffc <_dtoa_r+0x98c>
 8007aea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007aee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f2c0 814e 	blt.w	8007d92 <_dtoa_r+0x722>
 8007af6:	f1bb 0f0e 	cmp.w	fp, #14
 8007afa:	f300 814a 	bgt.w	8007d92 <_dtoa_r+0x722>
 8007afe:	4b6b      	ldr	r3, [pc, #428]	; (8007cac <_dtoa_r+0x63c>)
 8007b00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f280 80dc 	bge.w	8007cc8 <_dtoa_r+0x658>
 8007b10:	9b04      	ldr	r3, [sp, #16]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f300 80d8 	bgt.w	8007cc8 <_dtoa_r+0x658>
 8007b18:	f040 826f 	bne.w	8007ffa <_dtoa_r+0x98a>
 8007b1c:	4b68      	ldr	r3, [pc, #416]	; (8007cc0 <_dtoa_r+0x650>)
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4640      	mov	r0, r8
 8007b22:	4649      	mov	r1, r9
 8007b24:	f7f8 fd68 	bl	80005f8 <__aeabi_dmul>
 8007b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b2c:	f7f8 ffea 	bl	8000b04 <__aeabi_dcmpge>
 8007b30:	9e04      	ldr	r6, [sp, #16]
 8007b32:	4637      	mov	r7, r6
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f040 8245 	bne.w	8007fc4 <_dtoa_r+0x954>
 8007b3a:	9d00      	ldr	r5, [sp, #0]
 8007b3c:	2331      	movs	r3, #49	; 0x31
 8007b3e:	f805 3b01 	strb.w	r3, [r5], #1
 8007b42:	f10b 0b01 	add.w	fp, fp, #1
 8007b46:	e241      	b.n	8007fcc <_dtoa_r+0x95c>
 8007b48:	07f2      	lsls	r2, r6, #31
 8007b4a:	d505      	bpl.n	8007b58 <_dtoa_r+0x4e8>
 8007b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b50:	f7f8 fd52 	bl	80005f8 <__aeabi_dmul>
 8007b54:	3501      	adds	r5, #1
 8007b56:	2301      	movs	r3, #1
 8007b58:	1076      	asrs	r6, r6, #1
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	e773      	b.n	8007a46 <_dtoa_r+0x3d6>
 8007b5e:	2502      	movs	r5, #2
 8007b60:	e775      	b.n	8007a4e <_dtoa_r+0x3de>
 8007b62:	9e04      	ldr	r6, [sp, #16]
 8007b64:	465f      	mov	r7, fp
 8007b66:	e792      	b.n	8007a8e <_dtoa_r+0x41e>
 8007b68:	9900      	ldr	r1, [sp, #0]
 8007b6a:	4b50      	ldr	r3, [pc, #320]	; (8007cac <_dtoa_r+0x63c>)
 8007b6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b70:	4431      	add	r1, r6
 8007b72:	9102      	str	r1, [sp, #8]
 8007b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b76:	eeb0 9a47 	vmov.f32	s18, s14
 8007b7a:	eef0 9a67 	vmov.f32	s19, s15
 8007b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d044      	beq.n	8007c14 <_dtoa_r+0x5a4>
 8007b8a:	494e      	ldr	r1, [pc, #312]	; (8007cc4 <_dtoa_r+0x654>)
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	f7f8 fe5d 	bl	800084c <__aeabi_ddiv>
 8007b92:	ec53 2b19 	vmov	r2, r3, d9
 8007b96:	f7f8 fb77 	bl	8000288 <__aeabi_dsub>
 8007b9a:	9d00      	ldr	r5, [sp, #0]
 8007b9c:	ec41 0b19 	vmov	d9, r0, r1
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f7f8 ffd8 	bl	8000b58 <__aeabi_d2iz>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	f7f8 fcbb 	bl	8000524 <__aeabi_i2d>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 fb67 	bl	8000288 <__aeabi_dsub>
 8007bba:	3630      	adds	r6, #48	; 0x30
 8007bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8007bc0:	ec53 2b19 	vmov	r2, r3, d9
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	f7f8 ff88 	bl	8000adc <__aeabi_dcmplt>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d164      	bne.n	8007c9a <_dtoa_r+0x62a>
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	4937      	ldr	r1, [pc, #220]	; (8007cb4 <_dtoa_r+0x644>)
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	f7f8 fb56 	bl	8000288 <__aeabi_dsub>
 8007bdc:	ec53 2b19 	vmov	r2, r3, d9
 8007be0:	f7f8 ff7c 	bl	8000adc <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 80b6 	bne.w	8007d56 <_dtoa_r+0x6e6>
 8007bea:	9b02      	ldr	r3, [sp, #8]
 8007bec:	429d      	cmp	r5, r3
 8007bee:	f43f af7c 	beq.w	8007aea <_dtoa_r+0x47a>
 8007bf2:	4b31      	ldr	r3, [pc, #196]	; (8007cb8 <_dtoa_r+0x648>)
 8007bf4:	ec51 0b19 	vmov	r0, r1, d9
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f7f8 fcfd 	bl	80005f8 <__aeabi_dmul>
 8007bfe:	4b2e      	ldr	r3, [pc, #184]	; (8007cb8 <_dtoa_r+0x648>)
 8007c00:	ec41 0b19 	vmov	d9, r0, r1
 8007c04:	2200      	movs	r2, #0
 8007c06:	4640      	mov	r0, r8
 8007c08:	4649      	mov	r1, r9
 8007c0a:	f7f8 fcf5 	bl	80005f8 <__aeabi_dmul>
 8007c0e:	4680      	mov	r8, r0
 8007c10:	4689      	mov	r9, r1
 8007c12:	e7c5      	b.n	8007ba0 <_dtoa_r+0x530>
 8007c14:	ec51 0b17 	vmov	r0, r1, d7
 8007c18:	f7f8 fcee 	bl	80005f8 <__aeabi_dmul>
 8007c1c:	9b02      	ldr	r3, [sp, #8]
 8007c1e:	9d00      	ldr	r5, [sp, #0]
 8007c20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c22:	ec41 0b19 	vmov	d9, r0, r1
 8007c26:	4649      	mov	r1, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	f7f8 ff95 	bl	8000b58 <__aeabi_d2iz>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	f7f8 fc78 	bl	8000524 <__aeabi_i2d>
 8007c34:	3630      	adds	r6, #48	; 0x30
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	f7f8 fb23 	bl	8000288 <__aeabi_dsub>
 8007c42:	f805 6b01 	strb.w	r6, [r5], #1
 8007c46:	9b02      	ldr	r3, [sp, #8]
 8007c48:	429d      	cmp	r5, r3
 8007c4a:	4680      	mov	r8, r0
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	d124      	bne.n	8007c9e <_dtoa_r+0x62e>
 8007c54:	4b1b      	ldr	r3, [pc, #108]	; (8007cc4 <_dtoa_r+0x654>)
 8007c56:	ec51 0b19 	vmov	r0, r1, d9
 8007c5a:	f7f8 fb17 	bl	800028c <__adddf3>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	460b      	mov	r3, r1
 8007c62:	4640      	mov	r0, r8
 8007c64:	4649      	mov	r1, r9
 8007c66:	f7f8 ff57 	bl	8000b18 <__aeabi_dcmpgt>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d173      	bne.n	8007d56 <_dtoa_r+0x6e6>
 8007c6e:	ec53 2b19 	vmov	r2, r3, d9
 8007c72:	4914      	ldr	r1, [pc, #80]	; (8007cc4 <_dtoa_r+0x654>)
 8007c74:	2000      	movs	r0, #0
 8007c76:	f7f8 fb07 	bl	8000288 <__aeabi_dsub>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 ff2b 	bl	8000adc <__aeabi_dcmplt>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	f43f af2f 	beq.w	8007aea <_dtoa_r+0x47a>
 8007c8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c8e:	1e6b      	subs	r3, r5, #1
 8007c90:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c96:	2b30      	cmp	r3, #48	; 0x30
 8007c98:	d0f8      	beq.n	8007c8c <_dtoa_r+0x61c>
 8007c9a:	46bb      	mov	fp, r7
 8007c9c:	e04a      	b.n	8007d34 <_dtoa_r+0x6c4>
 8007c9e:	4b06      	ldr	r3, [pc, #24]	; (8007cb8 <_dtoa_r+0x648>)
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	4680      	mov	r8, r0
 8007ca6:	4689      	mov	r9, r1
 8007ca8:	e7bd      	b.n	8007c26 <_dtoa_r+0x5b6>
 8007caa:	bf00      	nop
 8007cac:	080097e8 	.word	0x080097e8
 8007cb0:	080097c0 	.word	0x080097c0
 8007cb4:	3ff00000 	.word	0x3ff00000
 8007cb8:	40240000 	.word	0x40240000
 8007cbc:	401c0000 	.word	0x401c0000
 8007cc0:	40140000 	.word	0x40140000
 8007cc4:	3fe00000 	.word	0x3fe00000
 8007cc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007ccc:	9d00      	ldr	r5, [sp, #0]
 8007cce:	4642      	mov	r2, r8
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 fdb9 	bl	800084c <__aeabi_ddiv>
 8007cda:	f7f8 ff3d 	bl	8000b58 <__aeabi_d2iz>
 8007cde:	9001      	str	r0, [sp, #4]
 8007ce0:	f7f8 fc20 	bl	8000524 <__aeabi_i2d>
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	f7f8 fc86 	bl	80005f8 <__aeabi_dmul>
 8007cec:	4602      	mov	r2, r0
 8007cee:	460b      	mov	r3, r1
 8007cf0:	4630      	mov	r0, r6
 8007cf2:	4639      	mov	r1, r7
 8007cf4:	f7f8 fac8 	bl	8000288 <__aeabi_dsub>
 8007cf8:	9e01      	ldr	r6, [sp, #4]
 8007cfa:	9f04      	ldr	r7, [sp, #16]
 8007cfc:	3630      	adds	r6, #48	; 0x30
 8007cfe:	f805 6b01 	strb.w	r6, [r5], #1
 8007d02:	9e00      	ldr	r6, [sp, #0]
 8007d04:	1bae      	subs	r6, r5, r6
 8007d06:	42b7      	cmp	r7, r6
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	d134      	bne.n	8007d78 <_dtoa_r+0x708>
 8007d0e:	f7f8 fabd 	bl	800028c <__adddf3>
 8007d12:	4642      	mov	r2, r8
 8007d14:	464b      	mov	r3, r9
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	f7f8 fefd 	bl	8000b18 <__aeabi_dcmpgt>
 8007d1e:	b9c8      	cbnz	r0, 8007d54 <_dtoa_r+0x6e4>
 8007d20:	4642      	mov	r2, r8
 8007d22:	464b      	mov	r3, r9
 8007d24:	4630      	mov	r0, r6
 8007d26:	4639      	mov	r1, r7
 8007d28:	f7f8 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2c:	b110      	cbz	r0, 8007d34 <_dtoa_r+0x6c4>
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	07db      	lsls	r3, r3, #31
 8007d32:	d40f      	bmi.n	8007d54 <_dtoa_r+0x6e4>
 8007d34:	4651      	mov	r1, sl
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 fbcc 	bl	80084d4 <_Bfree>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d40:	702b      	strb	r3, [r5, #0]
 8007d42:	f10b 0301 	add.w	r3, fp, #1
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f43f ace2 	beq.w	8007714 <_dtoa_r+0xa4>
 8007d50:	601d      	str	r5, [r3, #0]
 8007d52:	e4df      	b.n	8007714 <_dtoa_r+0xa4>
 8007d54:	465f      	mov	r7, fp
 8007d56:	462b      	mov	r3, r5
 8007d58:	461d      	mov	r5, r3
 8007d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d5e:	2a39      	cmp	r2, #57	; 0x39
 8007d60:	d106      	bne.n	8007d70 <_dtoa_r+0x700>
 8007d62:	9a00      	ldr	r2, [sp, #0]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d1f7      	bne.n	8007d58 <_dtoa_r+0x6e8>
 8007d68:	9900      	ldr	r1, [sp, #0]
 8007d6a:	2230      	movs	r2, #48	; 0x30
 8007d6c:	3701      	adds	r7, #1
 8007d6e:	700a      	strb	r2, [r1, #0]
 8007d70:	781a      	ldrb	r2, [r3, #0]
 8007d72:	3201      	adds	r2, #1
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e790      	b.n	8007c9a <_dtoa_r+0x62a>
 8007d78:	4ba3      	ldr	r3, [pc, #652]	; (8008008 <_dtoa_r+0x998>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f7f8 fc3c 	bl	80005f8 <__aeabi_dmul>
 8007d80:	2200      	movs	r2, #0
 8007d82:	2300      	movs	r3, #0
 8007d84:	4606      	mov	r6, r0
 8007d86:	460f      	mov	r7, r1
 8007d88:	f7f8 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d09e      	beq.n	8007cce <_dtoa_r+0x65e>
 8007d90:	e7d0      	b.n	8007d34 <_dtoa_r+0x6c4>
 8007d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d94:	2a00      	cmp	r2, #0
 8007d96:	f000 80ca 	beq.w	8007f2e <_dtoa_r+0x8be>
 8007d9a:	9a07      	ldr	r2, [sp, #28]
 8007d9c:	2a01      	cmp	r2, #1
 8007d9e:	f300 80ad 	bgt.w	8007efc <_dtoa_r+0x88c>
 8007da2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	f000 80a5 	beq.w	8007ef4 <_dtoa_r+0x884>
 8007daa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dae:	9e08      	ldr	r6, [sp, #32]
 8007db0:	9d05      	ldr	r5, [sp, #20]
 8007db2:	9a05      	ldr	r2, [sp, #20]
 8007db4:	441a      	add	r2, r3
 8007db6:	9205      	str	r2, [sp, #20]
 8007db8:	9a06      	ldr	r2, [sp, #24]
 8007dba:	2101      	movs	r1, #1
 8007dbc:	441a      	add	r2, r3
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	9206      	str	r2, [sp, #24]
 8007dc2:	f000 fc3d 	bl	8008640 <__i2b>
 8007dc6:	4607      	mov	r7, r0
 8007dc8:	b165      	cbz	r5, 8007de4 <_dtoa_r+0x774>
 8007dca:	9b06      	ldr	r3, [sp, #24]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd09      	ble.n	8007de4 <_dtoa_r+0x774>
 8007dd0:	42ab      	cmp	r3, r5
 8007dd2:	9a05      	ldr	r2, [sp, #20]
 8007dd4:	bfa8      	it	ge
 8007dd6:	462b      	movge	r3, r5
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	9205      	str	r2, [sp, #20]
 8007ddc:	9a06      	ldr	r2, [sp, #24]
 8007dde:	1aed      	subs	r5, r5, r3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	b1f3      	cbz	r3, 8007e26 <_dtoa_r+0x7b6>
 8007de8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 80a3 	beq.w	8007f36 <_dtoa_r+0x8c6>
 8007df0:	2e00      	cmp	r6, #0
 8007df2:	dd10      	ble.n	8007e16 <_dtoa_r+0x7a6>
 8007df4:	4639      	mov	r1, r7
 8007df6:	4632      	mov	r2, r6
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fce1 	bl	80087c0 <__pow5mult>
 8007dfe:	4652      	mov	r2, sl
 8007e00:	4601      	mov	r1, r0
 8007e02:	4607      	mov	r7, r0
 8007e04:	4620      	mov	r0, r4
 8007e06:	f000 fc31 	bl	800866c <__multiply>
 8007e0a:	4651      	mov	r1, sl
 8007e0c:	4680      	mov	r8, r0
 8007e0e:	4620      	mov	r0, r4
 8007e10:	f000 fb60 	bl	80084d4 <_Bfree>
 8007e14:	46c2      	mov	sl, r8
 8007e16:	9b08      	ldr	r3, [sp, #32]
 8007e18:	1b9a      	subs	r2, r3, r6
 8007e1a:	d004      	beq.n	8007e26 <_dtoa_r+0x7b6>
 8007e1c:	4651      	mov	r1, sl
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 fcce 	bl	80087c0 <__pow5mult>
 8007e24:	4682      	mov	sl, r0
 8007e26:	2101      	movs	r1, #1
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f000 fc09 	bl	8008640 <__i2b>
 8007e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	4606      	mov	r6, r0
 8007e34:	f340 8081 	ble.w	8007f3a <_dtoa_r+0x8ca>
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	f000 fcbf 	bl	80087c0 <__pow5mult>
 8007e42:	9b07      	ldr	r3, [sp, #28]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	4606      	mov	r6, r0
 8007e48:	dd7a      	ble.n	8007f40 <_dtoa_r+0x8d0>
 8007e4a:	f04f 0800 	mov.w	r8, #0
 8007e4e:	6933      	ldr	r3, [r6, #16]
 8007e50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e54:	6918      	ldr	r0, [r3, #16]
 8007e56:	f000 fba5 	bl	80085a4 <__hi0bits>
 8007e5a:	f1c0 0020 	rsb	r0, r0, #32
 8007e5e:	9b06      	ldr	r3, [sp, #24]
 8007e60:	4418      	add	r0, r3
 8007e62:	f010 001f 	ands.w	r0, r0, #31
 8007e66:	f000 8094 	beq.w	8007f92 <_dtoa_r+0x922>
 8007e6a:	f1c0 0320 	rsb	r3, r0, #32
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	f340 8085 	ble.w	8007f7e <_dtoa_r+0x90e>
 8007e74:	9b05      	ldr	r3, [sp, #20]
 8007e76:	f1c0 001c 	rsb	r0, r0, #28
 8007e7a:	4403      	add	r3, r0
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	9b06      	ldr	r3, [sp, #24]
 8007e80:	4403      	add	r3, r0
 8007e82:	4405      	add	r5, r0
 8007e84:	9306      	str	r3, [sp, #24]
 8007e86:	9b05      	ldr	r3, [sp, #20]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	dd05      	ble.n	8007e98 <_dtoa_r+0x828>
 8007e8c:	4651      	mov	r1, sl
 8007e8e:	461a      	mov	r2, r3
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 fcef 	bl	8008874 <__lshift>
 8007e96:	4682      	mov	sl, r0
 8007e98:	9b06      	ldr	r3, [sp, #24]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	dd05      	ble.n	8007eaa <_dtoa_r+0x83a>
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fce6 	bl	8008874 <__lshift>
 8007ea8:	4606      	mov	r6, r0
 8007eaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d072      	beq.n	8007f96 <_dtoa_r+0x926>
 8007eb0:	4631      	mov	r1, r6
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f000 fd4a 	bl	800894c <__mcmp>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	da6c      	bge.n	8007f96 <_dtoa_r+0x926>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4651      	mov	r1, sl
 8007ec0:	220a      	movs	r2, #10
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 fb28 	bl	8008518 <__multadd>
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ece:	4682      	mov	sl, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 81b0 	beq.w	8008236 <_dtoa_r+0xbc6>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	4639      	mov	r1, r7
 8007eda:	220a      	movs	r2, #10
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 fb1b 	bl	8008518 <__multadd>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	4607      	mov	r7, r0
 8007ee8:	f300 8096 	bgt.w	8008018 <_dtoa_r+0x9a8>
 8007eec:	9b07      	ldr	r3, [sp, #28]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	dc59      	bgt.n	8007fa6 <_dtoa_r+0x936>
 8007ef2:	e091      	b.n	8008018 <_dtoa_r+0x9a8>
 8007ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007efa:	e758      	b.n	8007dae <_dtoa_r+0x73e>
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	1e5e      	subs	r6, r3, #1
 8007f00:	9b08      	ldr	r3, [sp, #32]
 8007f02:	42b3      	cmp	r3, r6
 8007f04:	bfbf      	itttt	lt
 8007f06:	9b08      	ldrlt	r3, [sp, #32]
 8007f08:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007f0a:	9608      	strlt	r6, [sp, #32]
 8007f0c:	1af3      	sublt	r3, r6, r3
 8007f0e:	bfb4      	ite	lt
 8007f10:	18d2      	addlt	r2, r2, r3
 8007f12:	1b9e      	subge	r6, r3, r6
 8007f14:	9b04      	ldr	r3, [sp, #16]
 8007f16:	bfbc      	itt	lt
 8007f18:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007f1a:	2600      	movlt	r6, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bfb7      	itett	lt
 8007f20:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007f24:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007f28:	1a9d      	sublt	r5, r3, r2
 8007f2a:	2300      	movlt	r3, #0
 8007f2c:	e741      	b.n	8007db2 <_dtoa_r+0x742>
 8007f2e:	9e08      	ldr	r6, [sp, #32]
 8007f30:	9d05      	ldr	r5, [sp, #20]
 8007f32:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f34:	e748      	b.n	8007dc8 <_dtoa_r+0x758>
 8007f36:	9a08      	ldr	r2, [sp, #32]
 8007f38:	e770      	b.n	8007e1c <_dtoa_r+0x7ac>
 8007f3a:	9b07      	ldr	r3, [sp, #28]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	dc19      	bgt.n	8007f74 <_dtoa_r+0x904>
 8007f40:	9b02      	ldr	r3, [sp, #8]
 8007f42:	b9bb      	cbnz	r3, 8007f74 <_dtoa_r+0x904>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f4a:	b99b      	cbnz	r3, 8007f74 <_dtoa_r+0x904>
 8007f4c:	9b03      	ldr	r3, [sp, #12]
 8007f4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007f52:	0d1b      	lsrs	r3, r3, #20
 8007f54:	051b      	lsls	r3, r3, #20
 8007f56:	b183      	cbz	r3, 8007f7a <_dtoa_r+0x90a>
 8007f58:	9b05      	ldr	r3, [sp, #20]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	9305      	str	r3, [sp, #20]
 8007f5e:	9b06      	ldr	r3, [sp, #24]
 8007f60:	3301      	adds	r3, #1
 8007f62:	9306      	str	r3, [sp, #24]
 8007f64:	f04f 0801 	mov.w	r8, #1
 8007f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f47f af6f 	bne.w	8007e4e <_dtoa_r+0x7de>
 8007f70:	2001      	movs	r0, #1
 8007f72:	e774      	b.n	8007e5e <_dtoa_r+0x7ee>
 8007f74:	f04f 0800 	mov.w	r8, #0
 8007f78:	e7f6      	b.n	8007f68 <_dtoa_r+0x8f8>
 8007f7a:	4698      	mov	r8, r3
 8007f7c:	e7f4      	b.n	8007f68 <_dtoa_r+0x8f8>
 8007f7e:	d082      	beq.n	8007e86 <_dtoa_r+0x816>
 8007f80:	9a05      	ldr	r2, [sp, #20]
 8007f82:	331c      	adds	r3, #28
 8007f84:	441a      	add	r2, r3
 8007f86:	9205      	str	r2, [sp, #20]
 8007f88:	9a06      	ldr	r2, [sp, #24]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	441d      	add	r5, r3
 8007f8e:	9206      	str	r2, [sp, #24]
 8007f90:	e779      	b.n	8007e86 <_dtoa_r+0x816>
 8007f92:	4603      	mov	r3, r0
 8007f94:	e7f4      	b.n	8007f80 <_dtoa_r+0x910>
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	dc37      	bgt.n	800800c <_dtoa_r+0x99c>
 8007f9c:	9b07      	ldr	r3, [sp, #28]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	dd34      	ble.n	800800c <_dtoa_r+0x99c>
 8007fa2:	9b04      	ldr	r3, [sp, #16]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	9b01      	ldr	r3, [sp, #4]
 8007fa8:	b963      	cbnz	r3, 8007fc4 <_dtoa_r+0x954>
 8007faa:	4631      	mov	r1, r6
 8007fac:	2205      	movs	r2, #5
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 fab2 	bl	8008518 <__multadd>
 8007fb4:	4601      	mov	r1, r0
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	4650      	mov	r0, sl
 8007fba:	f000 fcc7 	bl	800894c <__mcmp>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	f73f adbb 	bgt.w	8007b3a <_dtoa_r+0x4ca>
 8007fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc6:	9d00      	ldr	r5, [sp, #0]
 8007fc8:	ea6f 0b03 	mvn.w	fp, r3
 8007fcc:	f04f 0800 	mov.w	r8, #0
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fa7e 	bl	80084d4 <_Bfree>
 8007fd8:	2f00      	cmp	r7, #0
 8007fda:	f43f aeab 	beq.w	8007d34 <_dtoa_r+0x6c4>
 8007fde:	f1b8 0f00 	cmp.w	r8, #0
 8007fe2:	d005      	beq.n	8007ff0 <_dtoa_r+0x980>
 8007fe4:	45b8      	cmp	r8, r7
 8007fe6:	d003      	beq.n	8007ff0 <_dtoa_r+0x980>
 8007fe8:	4641      	mov	r1, r8
 8007fea:	4620      	mov	r0, r4
 8007fec:	f000 fa72 	bl	80084d4 <_Bfree>
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f000 fa6e 	bl	80084d4 <_Bfree>
 8007ff8:	e69c      	b.n	8007d34 <_dtoa_r+0x6c4>
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	4637      	mov	r7, r6
 8007ffe:	e7e1      	b.n	8007fc4 <_dtoa_r+0x954>
 8008000:	46bb      	mov	fp, r7
 8008002:	4637      	mov	r7, r6
 8008004:	e599      	b.n	8007b3a <_dtoa_r+0x4ca>
 8008006:	bf00      	nop
 8008008:	40240000 	.word	0x40240000
 800800c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 80c8 	beq.w	80081a4 <_dtoa_r+0xb34>
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	2d00      	cmp	r5, #0
 800801a:	dd05      	ble.n	8008028 <_dtoa_r+0x9b8>
 800801c:	4639      	mov	r1, r7
 800801e:	462a      	mov	r2, r5
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fc27 	bl	8008874 <__lshift>
 8008026:	4607      	mov	r7, r0
 8008028:	f1b8 0f00 	cmp.w	r8, #0
 800802c:	d05b      	beq.n	80080e6 <_dtoa_r+0xa76>
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4620      	mov	r0, r4
 8008032:	f000 fa0f 	bl	8008454 <_Balloc>
 8008036:	4605      	mov	r5, r0
 8008038:	b928      	cbnz	r0, 8008046 <_dtoa_r+0x9d6>
 800803a:	4b83      	ldr	r3, [pc, #524]	; (8008248 <_dtoa_r+0xbd8>)
 800803c:	4602      	mov	r2, r0
 800803e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008042:	f7ff bb2e 	b.w	80076a2 <_dtoa_r+0x32>
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	3202      	adds	r2, #2
 800804a:	0092      	lsls	r2, r2, #2
 800804c:	f107 010c 	add.w	r1, r7, #12
 8008050:	300c      	adds	r0, #12
 8008052:	f7ff fa76 	bl	8007542 <memcpy>
 8008056:	2201      	movs	r2, #1
 8008058:	4629      	mov	r1, r5
 800805a:	4620      	mov	r0, r4
 800805c:	f000 fc0a 	bl	8008874 <__lshift>
 8008060:	9b00      	ldr	r3, [sp, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	e9dd 2300 	ldrd	r2, r3, [sp]
 800806a:	4413      	add	r3, r2
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	9b02      	ldr	r3, [sp, #8]
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	46b8      	mov	r8, r7
 8008076:	9306      	str	r3, [sp, #24]
 8008078:	4607      	mov	r7, r0
 800807a:	9b04      	ldr	r3, [sp, #16]
 800807c:	4631      	mov	r1, r6
 800807e:	3b01      	subs	r3, #1
 8008080:	4650      	mov	r0, sl
 8008082:	9301      	str	r3, [sp, #4]
 8008084:	f7ff fa6b 	bl	800755e <quorem>
 8008088:	4641      	mov	r1, r8
 800808a:	9002      	str	r0, [sp, #8]
 800808c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008090:	4650      	mov	r0, sl
 8008092:	f000 fc5b 	bl	800894c <__mcmp>
 8008096:	463a      	mov	r2, r7
 8008098:	9005      	str	r0, [sp, #20]
 800809a:	4631      	mov	r1, r6
 800809c:	4620      	mov	r0, r4
 800809e:	f000 fc71 	bl	8008984 <__mdiff>
 80080a2:	68c2      	ldr	r2, [r0, #12]
 80080a4:	4605      	mov	r5, r0
 80080a6:	bb02      	cbnz	r2, 80080ea <_dtoa_r+0xa7a>
 80080a8:	4601      	mov	r1, r0
 80080aa:	4650      	mov	r0, sl
 80080ac:	f000 fc4e 	bl	800894c <__mcmp>
 80080b0:	4602      	mov	r2, r0
 80080b2:	4629      	mov	r1, r5
 80080b4:	4620      	mov	r0, r4
 80080b6:	9209      	str	r2, [sp, #36]	; 0x24
 80080b8:	f000 fa0c 	bl	80084d4 <_Bfree>
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080c0:	9d04      	ldr	r5, [sp, #16]
 80080c2:	ea43 0102 	orr.w	r1, r3, r2
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	4319      	orrs	r1, r3
 80080ca:	d110      	bne.n	80080ee <_dtoa_r+0xa7e>
 80080cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80080d0:	d029      	beq.n	8008126 <_dtoa_r+0xab6>
 80080d2:	9b05      	ldr	r3, [sp, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dd02      	ble.n	80080de <_dtoa_r+0xa6e>
 80080d8:	9b02      	ldr	r3, [sp, #8]
 80080da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	f883 9000 	strb.w	r9, [r3]
 80080e4:	e774      	b.n	8007fd0 <_dtoa_r+0x960>
 80080e6:	4638      	mov	r0, r7
 80080e8:	e7ba      	b.n	8008060 <_dtoa_r+0x9f0>
 80080ea:	2201      	movs	r2, #1
 80080ec:	e7e1      	b.n	80080b2 <_dtoa_r+0xa42>
 80080ee:	9b05      	ldr	r3, [sp, #20]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	db04      	blt.n	80080fe <_dtoa_r+0xa8e>
 80080f4:	9907      	ldr	r1, [sp, #28]
 80080f6:	430b      	orrs	r3, r1
 80080f8:	9906      	ldr	r1, [sp, #24]
 80080fa:	430b      	orrs	r3, r1
 80080fc:	d120      	bne.n	8008140 <_dtoa_r+0xad0>
 80080fe:	2a00      	cmp	r2, #0
 8008100:	dded      	ble.n	80080de <_dtoa_r+0xa6e>
 8008102:	4651      	mov	r1, sl
 8008104:	2201      	movs	r2, #1
 8008106:	4620      	mov	r0, r4
 8008108:	f000 fbb4 	bl	8008874 <__lshift>
 800810c:	4631      	mov	r1, r6
 800810e:	4682      	mov	sl, r0
 8008110:	f000 fc1c 	bl	800894c <__mcmp>
 8008114:	2800      	cmp	r0, #0
 8008116:	dc03      	bgt.n	8008120 <_dtoa_r+0xab0>
 8008118:	d1e1      	bne.n	80080de <_dtoa_r+0xa6e>
 800811a:	f019 0f01 	tst.w	r9, #1
 800811e:	d0de      	beq.n	80080de <_dtoa_r+0xa6e>
 8008120:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008124:	d1d8      	bne.n	80080d8 <_dtoa_r+0xa68>
 8008126:	9a01      	ldr	r2, [sp, #4]
 8008128:	2339      	movs	r3, #57	; 0x39
 800812a:	7013      	strb	r3, [r2, #0]
 800812c:	462b      	mov	r3, r5
 800812e:	461d      	mov	r5, r3
 8008130:	3b01      	subs	r3, #1
 8008132:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008136:	2a39      	cmp	r2, #57	; 0x39
 8008138:	d06c      	beq.n	8008214 <_dtoa_r+0xba4>
 800813a:	3201      	adds	r2, #1
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	e747      	b.n	8007fd0 <_dtoa_r+0x960>
 8008140:	2a00      	cmp	r2, #0
 8008142:	dd07      	ble.n	8008154 <_dtoa_r+0xae4>
 8008144:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008148:	d0ed      	beq.n	8008126 <_dtoa_r+0xab6>
 800814a:	9a01      	ldr	r2, [sp, #4]
 800814c:	f109 0301 	add.w	r3, r9, #1
 8008150:	7013      	strb	r3, [r2, #0]
 8008152:	e73d      	b.n	8007fd0 <_dtoa_r+0x960>
 8008154:	9b04      	ldr	r3, [sp, #16]
 8008156:	9a08      	ldr	r2, [sp, #32]
 8008158:	f803 9c01 	strb.w	r9, [r3, #-1]
 800815c:	4293      	cmp	r3, r2
 800815e:	d043      	beq.n	80081e8 <_dtoa_r+0xb78>
 8008160:	4651      	mov	r1, sl
 8008162:	2300      	movs	r3, #0
 8008164:	220a      	movs	r2, #10
 8008166:	4620      	mov	r0, r4
 8008168:	f000 f9d6 	bl	8008518 <__multadd>
 800816c:	45b8      	cmp	r8, r7
 800816e:	4682      	mov	sl, r0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	f04f 020a 	mov.w	r2, #10
 8008178:	4641      	mov	r1, r8
 800817a:	4620      	mov	r0, r4
 800817c:	d107      	bne.n	800818e <_dtoa_r+0xb1e>
 800817e:	f000 f9cb 	bl	8008518 <__multadd>
 8008182:	4680      	mov	r8, r0
 8008184:	4607      	mov	r7, r0
 8008186:	9b04      	ldr	r3, [sp, #16]
 8008188:	3301      	adds	r3, #1
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	e775      	b.n	800807a <_dtoa_r+0xa0a>
 800818e:	f000 f9c3 	bl	8008518 <__multadd>
 8008192:	4639      	mov	r1, r7
 8008194:	4680      	mov	r8, r0
 8008196:	2300      	movs	r3, #0
 8008198:	220a      	movs	r2, #10
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f9bc 	bl	8008518 <__multadd>
 80081a0:	4607      	mov	r7, r0
 80081a2:	e7f0      	b.n	8008186 <_dtoa_r+0xb16>
 80081a4:	9b04      	ldr	r3, [sp, #16]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	9d00      	ldr	r5, [sp, #0]
 80081aa:	4631      	mov	r1, r6
 80081ac:	4650      	mov	r0, sl
 80081ae:	f7ff f9d6 	bl	800755e <quorem>
 80081b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80081b6:	9b00      	ldr	r3, [sp, #0]
 80081b8:	f805 9b01 	strb.w	r9, [r5], #1
 80081bc:	1aea      	subs	r2, r5, r3
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	4293      	cmp	r3, r2
 80081c2:	dd07      	ble.n	80081d4 <_dtoa_r+0xb64>
 80081c4:	4651      	mov	r1, sl
 80081c6:	2300      	movs	r3, #0
 80081c8:	220a      	movs	r2, #10
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 f9a4 	bl	8008518 <__multadd>
 80081d0:	4682      	mov	sl, r0
 80081d2:	e7ea      	b.n	80081aa <_dtoa_r+0xb3a>
 80081d4:	9b01      	ldr	r3, [sp, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	bfc8      	it	gt
 80081da:	461d      	movgt	r5, r3
 80081dc:	9b00      	ldr	r3, [sp, #0]
 80081de:	bfd8      	it	le
 80081e0:	2501      	movle	r5, #1
 80081e2:	441d      	add	r5, r3
 80081e4:	f04f 0800 	mov.w	r8, #0
 80081e8:	4651      	mov	r1, sl
 80081ea:	2201      	movs	r2, #1
 80081ec:	4620      	mov	r0, r4
 80081ee:	f000 fb41 	bl	8008874 <__lshift>
 80081f2:	4631      	mov	r1, r6
 80081f4:	4682      	mov	sl, r0
 80081f6:	f000 fba9 	bl	800894c <__mcmp>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	dc96      	bgt.n	800812c <_dtoa_r+0xabc>
 80081fe:	d102      	bne.n	8008206 <_dtoa_r+0xb96>
 8008200:	f019 0f01 	tst.w	r9, #1
 8008204:	d192      	bne.n	800812c <_dtoa_r+0xabc>
 8008206:	462b      	mov	r3, r5
 8008208:	461d      	mov	r5, r3
 800820a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800820e:	2a30      	cmp	r2, #48	; 0x30
 8008210:	d0fa      	beq.n	8008208 <_dtoa_r+0xb98>
 8008212:	e6dd      	b.n	8007fd0 <_dtoa_r+0x960>
 8008214:	9a00      	ldr	r2, [sp, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d189      	bne.n	800812e <_dtoa_r+0xabe>
 800821a:	f10b 0b01 	add.w	fp, fp, #1
 800821e:	2331      	movs	r3, #49	; 0x31
 8008220:	e796      	b.n	8008150 <_dtoa_r+0xae0>
 8008222:	4b0a      	ldr	r3, [pc, #40]	; (800824c <_dtoa_r+0xbdc>)
 8008224:	f7ff ba99 	b.w	800775a <_dtoa_r+0xea>
 8008228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800822a:	2b00      	cmp	r3, #0
 800822c:	f47f aa6d 	bne.w	800770a <_dtoa_r+0x9a>
 8008230:	4b07      	ldr	r3, [pc, #28]	; (8008250 <_dtoa_r+0xbe0>)
 8008232:	f7ff ba92 	b.w	800775a <_dtoa_r+0xea>
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	dcb5      	bgt.n	80081a8 <_dtoa_r+0xb38>
 800823c:	9b07      	ldr	r3, [sp, #28]
 800823e:	2b02      	cmp	r3, #2
 8008240:	f73f aeb1 	bgt.w	8007fa6 <_dtoa_r+0x936>
 8008244:	e7b0      	b.n	80081a8 <_dtoa_r+0xb38>
 8008246:	bf00      	nop
 8008248:	08009754 	.word	0x08009754
 800824c:	080096b4 	.word	0x080096b4
 8008250:	080096d8 	.word	0x080096d8

08008254 <_free_r>:
 8008254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008256:	2900      	cmp	r1, #0
 8008258:	d044      	beq.n	80082e4 <_free_r+0x90>
 800825a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f1a1 0404 	sub.w	r4, r1, #4
 8008266:	bfb8      	it	lt
 8008268:	18e4      	addlt	r4, r4, r3
 800826a:	f000 f8e7 	bl	800843c <__malloc_lock>
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <_free_r+0x94>)
 8008270:	9801      	ldr	r0, [sp, #4]
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	b933      	cbnz	r3, 8008284 <_free_r+0x30>
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6014      	str	r4, [r2, #0]
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008280:	f000 b8e2 	b.w	8008448 <__malloc_unlock>
 8008284:	42a3      	cmp	r3, r4
 8008286:	d908      	bls.n	800829a <_free_r+0x46>
 8008288:	6825      	ldr	r5, [r4, #0]
 800828a:	1961      	adds	r1, r4, r5
 800828c:	428b      	cmp	r3, r1
 800828e:	bf01      	itttt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	1949      	addeq	r1, r1, r5
 8008296:	6021      	streq	r1, [r4, #0]
 8008298:	e7ed      	b.n	8008276 <_free_r+0x22>
 800829a:	461a      	mov	r2, r3
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	b10b      	cbz	r3, 80082a4 <_free_r+0x50>
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	d9fa      	bls.n	800829a <_free_r+0x46>
 80082a4:	6811      	ldr	r1, [r2, #0]
 80082a6:	1855      	adds	r5, r2, r1
 80082a8:	42a5      	cmp	r5, r4
 80082aa:	d10b      	bne.n	80082c4 <_free_r+0x70>
 80082ac:	6824      	ldr	r4, [r4, #0]
 80082ae:	4421      	add	r1, r4
 80082b0:	1854      	adds	r4, r2, r1
 80082b2:	42a3      	cmp	r3, r4
 80082b4:	6011      	str	r1, [r2, #0]
 80082b6:	d1e0      	bne.n	800827a <_free_r+0x26>
 80082b8:	681c      	ldr	r4, [r3, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	6053      	str	r3, [r2, #4]
 80082be:	440c      	add	r4, r1
 80082c0:	6014      	str	r4, [r2, #0]
 80082c2:	e7da      	b.n	800827a <_free_r+0x26>
 80082c4:	d902      	bls.n	80082cc <_free_r+0x78>
 80082c6:	230c      	movs	r3, #12
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	e7d6      	b.n	800827a <_free_r+0x26>
 80082cc:	6825      	ldr	r5, [r4, #0]
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	428b      	cmp	r3, r1
 80082d2:	bf04      	itt	eq
 80082d4:	6819      	ldreq	r1, [r3, #0]
 80082d6:	685b      	ldreq	r3, [r3, #4]
 80082d8:	6063      	str	r3, [r4, #4]
 80082da:	bf04      	itt	eq
 80082dc:	1949      	addeq	r1, r1, r5
 80082de:	6021      	streq	r1, [r4, #0]
 80082e0:	6054      	str	r4, [r2, #4]
 80082e2:	e7ca      	b.n	800827a <_free_r+0x26>
 80082e4:	b003      	add	sp, #12
 80082e6:	bd30      	pop	{r4, r5, pc}
 80082e8:	200008c0 	.word	0x200008c0

080082ec <malloc>:
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <malloc+0xc>)
 80082ee:	4601      	mov	r1, r0
 80082f0:	6818      	ldr	r0, [r3, #0]
 80082f2:	f000 b823 	b.w	800833c <_malloc_r>
 80082f6:	bf00      	nop
 80082f8:	20000180 	.word	0x20000180

080082fc <sbrk_aligned>:
 80082fc:	b570      	push	{r4, r5, r6, lr}
 80082fe:	4e0e      	ldr	r6, [pc, #56]	; (8008338 <sbrk_aligned+0x3c>)
 8008300:	460c      	mov	r4, r1
 8008302:	6831      	ldr	r1, [r6, #0]
 8008304:	4605      	mov	r5, r0
 8008306:	b911      	cbnz	r1, 800830e <sbrk_aligned+0x12>
 8008308:	f000 fe40 	bl	8008f8c <_sbrk_r>
 800830c:	6030      	str	r0, [r6, #0]
 800830e:	4621      	mov	r1, r4
 8008310:	4628      	mov	r0, r5
 8008312:	f000 fe3b 	bl	8008f8c <_sbrk_r>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d00a      	beq.n	8008330 <sbrk_aligned+0x34>
 800831a:	1cc4      	adds	r4, r0, #3
 800831c:	f024 0403 	bic.w	r4, r4, #3
 8008320:	42a0      	cmp	r0, r4
 8008322:	d007      	beq.n	8008334 <sbrk_aligned+0x38>
 8008324:	1a21      	subs	r1, r4, r0
 8008326:	4628      	mov	r0, r5
 8008328:	f000 fe30 	bl	8008f8c <_sbrk_r>
 800832c:	3001      	adds	r0, #1
 800832e:	d101      	bne.n	8008334 <sbrk_aligned+0x38>
 8008330:	f04f 34ff 	mov.w	r4, #4294967295
 8008334:	4620      	mov	r0, r4
 8008336:	bd70      	pop	{r4, r5, r6, pc}
 8008338:	200008c4 	.word	0x200008c4

0800833c <_malloc_r>:
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	1ccd      	adds	r5, r1, #3
 8008342:	f025 0503 	bic.w	r5, r5, #3
 8008346:	3508      	adds	r5, #8
 8008348:	2d0c      	cmp	r5, #12
 800834a:	bf38      	it	cc
 800834c:	250c      	movcc	r5, #12
 800834e:	2d00      	cmp	r5, #0
 8008350:	4607      	mov	r7, r0
 8008352:	db01      	blt.n	8008358 <_malloc_r+0x1c>
 8008354:	42a9      	cmp	r1, r5
 8008356:	d905      	bls.n	8008364 <_malloc_r+0x28>
 8008358:	230c      	movs	r3, #12
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	2600      	movs	r6, #0
 800835e:	4630      	mov	r0, r6
 8008360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008364:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008438 <_malloc_r+0xfc>
 8008368:	f000 f868 	bl	800843c <__malloc_lock>
 800836c:	f8d8 3000 	ldr.w	r3, [r8]
 8008370:	461c      	mov	r4, r3
 8008372:	bb5c      	cbnz	r4, 80083cc <_malloc_r+0x90>
 8008374:	4629      	mov	r1, r5
 8008376:	4638      	mov	r0, r7
 8008378:	f7ff ffc0 	bl	80082fc <sbrk_aligned>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	4604      	mov	r4, r0
 8008380:	d155      	bne.n	800842e <_malloc_r+0xf2>
 8008382:	f8d8 4000 	ldr.w	r4, [r8]
 8008386:	4626      	mov	r6, r4
 8008388:	2e00      	cmp	r6, #0
 800838a:	d145      	bne.n	8008418 <_malloc_r+0xdc>
 800838c:	2c00      	cmp	r4, #0
 800838e:	d048      	beq.n	8008422 <_malloc_r+0xe6>
 8008390:	6823      	ldr	r3, [r4, #0]
 8008392:	4631      	mov	r1, r6
 8008394:	4638      	mov	r0, r7
 8008396:	eb04 0903 	add.w	r9, r4, r3
 800839a:	f000 fdf7 	bl	8008f8c <_sbrk_r>
 800839e:	4581      	cmp	r9, r0
 80083a0:	d13f      	bne.n	8008422 <_malloc_r+0xe6>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	1a6d      	subs	r5, r5, r1
 80083a6:	4629      	mov	r1, r5
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7ff ffa7 	bl	80082fc <sbrk_aligned>
 80083ae:	3001      	adds	r0, #1
 80083b0:	d037      	beq.n	8008422 <_malloc_r+0xe6>
 80083b2:	6823      	ldr	r3, [r4, #0]
 80083b4:	442b      	add	r3, r5
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	f8d8 3000 	ldr.w	r3, [r8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d038      	beq.n	8008432 <_malloc_r+0xf6>
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	42a2      	cmp	r2, r4
 80083c4:	d12b      	bne.n	800841e <_malloc_r+0xe2>
 80083c6:	2200      	movs	r2, #0
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	e00f      	b.n	80083ec <_malloc_r+0xb0>
 80083cc:	6822      	ldr	r2, [r4, #0]
 80083ce:	1b52      	subs	r2, r2, r5
 80083d0:	d41f      	bmi.n	8008412 <_malloc_r+0xd6>
 80083d2:	2a0b      	cmp	r2, #11
 80083d4:	d917      	bls.n	8008406 <_malloc_r+0xca>
 80083d6:	1961      	adds	r1, r4, r5
 80083d8:	42a3      	cmp	r3, r4
 80083da:	6025      	str	r5, [r4, #0]
 80083dc:	bf18      	it	ne
 80083de:	6059      	strne	r1, [r3, #4]
 80083e0:	6863      	ldr	r3, [r4, #4]
 80083e2:	bf08      	it	eq
 80083e4:	f8c8 1000 	streq.w	r1, [r8]
 80083e8:	5162      	str	r2, [r4, r5]
 80083ea:	604b      	str	r3, [r1, #4]
 80083ec:	4638      	mov	r0, r7
 80083ee:	f104 060b 	add.w	r6, r4, #11
 80083f2:	f000 f829 	bl	8008448 <__malloc_unlock>
 80083f6:	f026 0607 	bic.w	r6, r6, #7
 80083fa:	1d23      	adds	r3, r4, #4
 80083fc:	1af2      	subs	r2, r6, r3
 80083fe:	d0ae      	beq.n	800835e <_malloc_r+0x22>
 8008400:	1b9b      	subs	r3, r3, r6
 8008402:	50a3      	str	r3, [r4, r2]
 8008404:	e7ab      	b.n	800835e <_malloc_r+0x22>
 8008406:	42a3      	cmp	r3, r4
 8008408:	6862      	ldr	r2, [r4, #4]
 800840a:	d1dd      	bne.n	80083c8 <_malloc_r+0x8c>
 800840c:	f8c8 2000 	str.w	r2, [r8]
 8008410:	e7ec      	b.n	80083ec <_malloc_r+0xb0>
 8008412:	4623      	mov	r3, r4
 8008414:	6864      	ldr	r4, [r4, #4]
 8008416:	e7ac      	b.n	8008372 <_malloc_r+0x36>
 8008418:	4634      	mov	r4, r6
 800841a:	6876      	ldr	r6, [r6, #4]
 800841c:	e7b4      	b.n	8008388 <_malloc_r+0x4c>
 800841e:	4613      	mov	r3, r2
 8008420:	e7cc      	b.n	80083bc <_malloc_r+0x80>
 8008422:	230c      	movs	r3, #12
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	4638      	mov	r0, r7
 8008428:	f000 f80e 	bl	8008448 <__malloc_unlock>
 800842c:	e797      	b.n	800835e <_malloc_r+0x22>
 800842e:	6025      	str	r5, [r4, #0]
 8008430:	e7dc      	b.n	80083ec <_malloc_r+0xb0>
 8008432:	605b      	str	r3, [r3, #4]
 8008434:	deff      	udf	#255	; 0xff
 8008436:	bf00      	nop
 8008438:	200008c0 	.word	0x200008c0

0800843c <__malloc_lock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_lock+0x8>)
 800843e:	f7ff b87e 	b.w	800753e <__retarget_lock_acquire_recursive>
 8008442:	bf00      	nop
 8008444:	200008bc 	.word	0x200008bc

08008448 <__malloc_unlock>:
 8008448:	4801      	ldr	r0, [pc, #4]	; (8008450 <__malloc_unlock+0x8>)
 800844a:	f7ff b879 	b.w	8007540 <__retarget_lock_release_recursive>
 800844e:	bf00      	nop
 8008450:	200008bc 	.word	0x200008bc

08008454 <_Balloc>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	69c6      	ldr	r6, [r0, #28]
 8008458:	4604      	mov	r4, r0
 800845a:	460d      	mov	r5, r1
 800845c:	b976      	cbnz	r6, 800847c <_Balloc+0x28>
 800845e:	2010      	movs	r0, #16
 8008460:	f7ff ff44 	bl	80082ec <malloc>
 8008464:	4602      	mov	r2, r0
 8008466:	61e0      	str	r0, [r4, #28]
 8008468:	b920      	cbnz	r0, 8008474 <_Balloc+0x20>
 800846a:	4b18      	ldr	r3, [pc, #96]	; (80084cc <_Balloc+0x78>)
 800846c:	4818      	ldr	r0, [pc, #96]	; (80084d0 <_Balloc+0x7c>)
 800846e:	216b      	movs	r1, #107	; 0x6b
 8008470:	f000 fd9c 	bl	8008fac <__assert_func>
 8008474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008478:	6006      	str	r6, [r0, #0]
 800847a:	60c6      	str	r6, [r0, #12]
 800847c:	69e6      	ldr	r6, [r4, #28]
 800847e:	68f3      	ldr	r3, [r6, #12]
 8008480:	b183      	cbz	r3, 80084a4 <_Balloc+0x50>
 8008482:	69e3      	ldr	r3, [r4, #28]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800848a:	b9b8      	cbnz	r0, 80084bc <_Balloc+0x68>
 800848c:	2101      	movs	r1, #1
 800848e:	fa01 f605 	lsl.w	r6, r1, r5
 8008492:	1d72      	adds	r2, r6, #5
 8008494:	0092      	lsls	r2, r2, #2
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fda6 	bl	8008fe8 <_calloc_r>
 800849c:	b160      	cbz	r0, 80084b8 <_Balloc+0x64>
 800849e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084a2:	e00e      	b.n	80084c2 <_Balloc+0x6e>
 80084a4:	2221      	movs	r2, #33	; 0x21
 80084a6:	2104      	movs	r1, #4
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fd9d 	bl	8008fe8 <_calloc_r>
 80084ae:	69e3      	ldr	r3, [r4, #28]
 80084b0:	60f0      	str	r0, [r6, #12]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e4      	bne.n	8008482 <_Balloc+0x2e>
 80084b8:	2000      	movs	r0, #0
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
 80084bc:	6802      	ldr	r2, [r0, #0]
 80084be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80084c2:	2300      	movs	r3, #0
 80084c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084c8:	e7f7      	b.n	80084ba <_Balloc+0x66>
 80084ca:	bf00      	nop
 80084cc:	080096e5 	.word	0x080096e5
 80084d0:	08009765 	.word	0x08009765

080084d4 <_Bfree>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	69c6      	ldr	r6, [r0, #28]
 80084d8:	4605      	mov	r5, r0
 80084da:	460c      	mov	r4, r1
 80084dc:	b976      	cbnz	r6, 80084fc <_Bfree+0x28>
 80084de:	2010      	movs	r0, #16
 80084e0:	f7ff ff04 	bl	80082ec <malloc>
 80084e4:	4602      	mov	r2, r0
 80084e6:	61e8      	str	r0, [r5, #28]
 80084e8:	b920      	cbnz	r0, 80084f4 <_Bfree+0x20>
 80084ea:	4b09      	ldr	r3, [pc, #36]	; (8008510 <_Bfree+0x3c>)
 80084ec:	4809      	ldr	r0, [pc, #36]	; (8008514 <_Bfree+0x40>)
 80084ee:	218f      	movs	r1, #143	; 0x8f
 80084f0:	f000 fd5c 	bl	8008fac <__assert_func>
 80084f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f8:	6006      	str	r6, [r0, #0]
 80084fa:	60c6      	str	r6, [r0, #12]
 80084fc:	b13c      	cbz	r4, 800850e <_Bfree+0x3a>
 80084fe:	69eb      	ldr	r3, [r5, #28]
 8008500:	6862      	ldr	r2, [r4, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008508:	6021      	str	r1, [r4, #0]
 800850a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800850e:	bd70      	pop	{r4, r5, r6, pc}
 8008510:	080096e5 	.word	0x080096e5
 8008514:	08009765 	.word	0x08009765

08008518 <__multadd>:
 8008518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800851c:	690d      	ldr	r5, [r1, #16]
 800851e:	4607      	mov	r7, r0
 8008520:	460c      	mov	r4, r1
 8008522:	461e      	mov	r6, r3
 8008524:	f101 0c14 	add.w	ip, r1, #20
 8008528:	2000      	movs	r0, #0
 800852a:	f8dc 3000 	ldr.w	r3, [ip]
 800852e:	b299      	uxth	r1, r3
 8008530:	fb02 6101 	mla	r1, r2, r1, r6
 8008534:	0c1e      	lsrs	r6, r3, #16
 8008536:	0c0b      	lsrs	r3, r1, #16
 8008538:	fb02 3306 	mla	r3, r2, r6, r3
 800853c:	b289      	uxth	r1, r1
 800853e:	3001      	adds	r0, #1
 8008540:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008544:	4285      	cmp	r5, r0
 8008546:	f84c 1b04 	str.w	r1, [ip], #4
 800854a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800854e:	dcec      	bgt.n	800852a <__multadd+0x12>
 8008550:	b30e      	cbz	r6, 8008596 <__multadd+0x7e>
 8008552:	68a3      	ldr	r3, [r4, #8]
 8008554:	42ab      	cmp	r3, r5
 8008556:	dc19      	bgt.n	800858c <__multadd+0x74>
 8008558:	6861      	ldr	r1, [r4, #4]
 800855a:	4638      	mov	r0, r7
 800855c:	3101      	adds	r1, #1
 800855e:	f7ff ff79 	bl	8008454 <_Balloc>
 8008562:	4680      	mov	r8, r0
 8008564:	b928      	cbnz	r0, 8008572 <__multadd+0x5a>
 8008566:	4602      	mov	r2, r0
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <__multadd+0x84>)
 800856a:	480d      	ldr	r0, [pc, #52]	; (80085a0 <__multadd+0x88>)
 800856c:	21ba      	movs	r1, #186	; 0xba
 800856e:	f000 fd1d 	bl	8008fac <__assert_func>
 8008572:	6922      	ldr	r2, [r4, #16]
 8008574:	3202      	adds	r2, #2
 8008576:	f104 010c 	add.w	r1, r4, #12
 800857a:	0092      	lsls	r2, r2, #2
 800857c:	300c      	adds	r0, #12
 800857e:	f7fe ffe0 	bl	8007542 <memcpy>
 8008582:	4621      	mov	r1, r4
 8008584:	4638      	mov	r0, r7
 8008586:	f7ff ffa5 	bl	80084d4 <_Bfree>
 800858a:	4644      	mov	r4, r8
 800858c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008590:	3501      	adds	r5, #1
 8008592:	615e      	str	r6, [r3, #20]
 8008594:	6125      	str	r5, [r4, #16]
 8008596:	4620      	mov	r0, r4
 8008598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859c:	08009754 	.word	0x08009754
 80085a0:	08009765 	.word	0x08009765

080085a4 <__hi0bits>:
 80085a4:	0c03      	lsrs	r3, r0, #16
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	b9d3      	cbnz	r3, 80085e0 <__hi0bits+0x3c>
 80085aa:	0400      	lsls	r0, r0, #16
 80085ac:	2310      	movs	r3, #16
 80085ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085b2:	bf04      	itt	eq
 80085b4:	0200      	lsleq	r0, r0, #8
 80085b6:	3308      	addeq	r3, #8
 80085b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085bc:	bf04      	itt	eq
 80085be:	0100      	lsleq	r0, r0, #4
 80085c0:	3304      	addeq	r3, #4
 80085c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80085c6:	bf04      	itt	eq
 80085c8:	0080      	lsleq	r0, r0, #2
 80085ca:	3302      	addeq	r3, #2
 80085cc:	2800      	cmp	r0, #0
 80085ce:	db05      	blt.n	80085dc <__hi0bits+0x38>
 80085d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80085d4:	f103 0301 	add.w	r3, r3, #1
 80085d8:	bf08      	it	eq
 80085da:	2320      	moveq	r3, #32
 80085dc:	4618      	mov	r0, r3
 80085de:	4770      	bx	lr
 80085e0:	2300      	movs	r3, #0
 80085e2:	e7e4      	b.n	80085ae <__hi0bits+0xa>

080085e4 <__lo0bits>:
 80085e4:	6803      	ldr	r3, [r0, #0]
 80085e6:	f013 0207 	ands.w	r2, r3, #7
 80085ea:	d00c      	beq.n	8008606 <__lo0bits+0x22>
 80085ec:	07d9      	lsls	r1, r3, #31
 80085ee:	d422      	bmi.n	8008636 <__lo0bits+0x52>
 80085f0:	079a      	lsls	r2, r3, #30
 80085f2:	bf49      	itett	mi
 80085f4:	085b      	lsrmi	r3, r3, #1
 80085f6:	089b      	lsrpl	r3, r3, #2
 80085f8:	6003      	strmi	r3, [r0, #0]
 80085fa:	2201      	movmi	r2, #1
 80085fc:	bf5c      	itt	pl
 80085fe:	6003      	strpl	r3, [r0, #0]
 8008600:	2202      	movpl	r2, #2
 8008602:	4610      	mov	r0, r2
 8008604:	4770      	bx	lr
 8008606:	b299      	uxth	r1, r3
 8008608:	b909      	cbnz	r1, 800860e <__lo0bits+0x2a>
 800860a:	0c1b      	lsrs	r3, r3, #16
 800860c:	2210      	movs	r2, #16
 800860e:	b2d9      	uxtb	r1, r3
 8008610:	b909      	cbnz	r1, 8008616 <__lo0bits+0x32>
 8008612:	3208      	adds	r2, #8
 8008614:	0a1b      	lsrs	r3, r3, #8
 8008616:	0719      	lsls	r1, r3, #28
 8008618:	bf04      	itt	eq
 800861a:	091b      	lsreq	r3, r3, #4
 800861c:	3204      	addeq	r2, #4
 800861e:	0799      	lsls	r1, r3, #30
 8008620:	bf04      	itt	eq
 8008622:	089b      	lsreq	r3, r3, #2
 8008624:	3202      	addeq	r2, #2
 8008626:	07d9      	lsls	r1, r3, #31
 8008628:	d403      	bmi.n	8008632 <__lo0bits+0x4e>
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	f102 0201 	add.w	r2, r2, #1
 8008630:	d003      	beq.n	800863a <__lo0bits+0x56>
 8008632:	6003      	str	r3, [r0, #0]
 8008634:	e7e5      	b.n	8008602 <__lo0bits+0x1e>
 8008636:	2200      	movs	r2, #0
 8008638:	e7e3      	b.n	8008602 <__lo0bits+0x1e>
 800863a:	2220      	movs	r2, #32
 800863c:	e7e1      	b.n	8008602 <__lo0bits+0x1e>
	...

08008640 <__i2b>:
 8008640:	b510      	push	{r4, lr}
 8008642:	460c      	mov	r4, r1
 8008644:	2101      	movs	r1, #1
 8008646:	f7ff ff05 	bl	8008454 <_Balloc>
 800864a:	4602      	mov	r2, r0
 800864c:	b928      	cbnz	r0, 800865a <__i2b+0x1a>
 800864e:	4b05      	ldr	r3, [pc, #20]	; (8008664 <__i2b+0x24>)
 8008650:	4805      	ldr	r0, [pc, #20]	; (8008668 <__i2b+0x28>)
 8008652:	f240 1145 	movw	r1, #325	; 0x145
 8008656:	f000 fca9 	bl	8008fac <__assert_func>
 800865a:	2301      	movs	r3, #1
 800865c:	6144      	str	r4, [r0, #20]
 800865e:	6103      	str	r3, [r0, #16]
 8008660:	bd10      	pop	{r4, pc}
 8008662:	bf00      	nop
 8008664:	08009754 	.word	0x08009754
 8008668:	08009765 	.word	0x08009765

0800866c <__multiply>:
 800866c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008670:	4691      	mov	r9, r2
 8008672:	690a      	ldr	r2, [r1, #16]
 8008674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008678:	429a      	cmp	r2, r3
 800867a:	bfb8      	it	lt
 800867c:	460b      	movlt	r3, r1
 800867e:	460c      	mov	r4, r1
 8008680:	bfbc      	itt	lt
 8008682:	464c      	movlt	r4, r9
 8008684:	4699      	movlt	r9, r3
 8008686:	6927      	ldr	r7, [r4, #16]
 8008688:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800868c:	68a3      	ldr	r3, [r4, #8]
 800868e:	6861      	ldr	r1, [r4, #4]
 8008690:	eb07 060a 	add.w	r6, r7, sl
 8008694:	42b3      	cmp	r3, r6
 8008696:	b085      	sub	sp, #20
 8008698:	bfb8      	it	lt
 800869a:	3101      	addlt	r1, #1
 800869c:	f7ff feda 	bl	8008454 <_Balloc>
 80086a0:	b930      	cbnz	r0, 80086b0 <__multiply+0x44>
 80086a2:	4602      	mov	r2, r0
 80086a4:	4b44      	ldr	r3, [pc, #272]	; (80087b8 <__multiply+0x14c>)
 80086a6:	4845      	ldr	r0, [pc, #276]	; (80087bc <__multiply+0x150>)
 80086a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80086ac:	f000 fc7e 	bl	8008fac <__assert_func>
 80086b0:	f100 0514 	add.w	r5, r0, #20
 80086b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086b8:	462b      	mov	r3, r5
 80086ba:	2200      	movs	r2, #0
 80086bc:	4543      	cmp	r3, r8
 80086be:	d321      	bcc.n	8008704 <__multiply+0x98>
 80086c0:	f104 0314 	add.w	r3, r4, #20
 80086c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80086c8:	f109 0314 	add.w	r3, r9, #20
 80086cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80086d0:	9202      	str	r2, [sp, #8]
 80086d2:	1b3a      	subs	r2, r7, r4
 80086d4:	3a15      	subs	r2, #21
 80086d6:	f022 0203 	bic.w	r2, r2, #3
 80086da:	3204      	adds	r2, #4
 80086dc:	f104 0115 	add.w	r1, r4, #21
 80086e0:	428f      	cmp	r7, r1
 80086e2:	bf38      	it	cc
 80086e4:	2204      	movcc	r2, #4
 80086e6:	9201      	str	r2, [sp, #4]
 80086e8:	9a02      	ldr	r2, [sp, #8]
 80086ea:	9303      	str	r3, [sp, #12]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d80c      	bhi.n	800870a <__multiply+0x9e>
 80086f0:	2e00      	cmp	r6, #0
 80086f2:	dd03      	ble.n	80086fc <__multiply+0x90>
 80086f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d05b      	beq.n	80087b4 <__multiply+0x148>
 80086fc:	6106      	str	r6, [r0, #16]
 80086fe:	b005      	add	sp, #20
 8008700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008704:	f843 2b04 	str.w	r2, [r3], #4
 8008708:	e7d8      	b.n	80086bc <__multiply+0x50>
 800870a:	f8b3 a000 	ldrh.w	sl, [r3]
 800870e:	f1ba 0f00 	cmp.w	sl, #0
 8008712:	d024      	beq.n	800875e <__multiply+0xf2>
 8008714:	f104 0e14 	add.w	lr, r4, #20
 8008718:	46a9      	mov	r9, r5
 800871a:	f04f 0c00 	mov.w	ip, #0
 800871e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008722:	f8d9 1000 	ldr.w	r1, [r9]
 8008726:	fa1f fb82 	uxth.w	fp, r2
 800872a:	b289      	uxth	r1, r1
 800872c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008730:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008734:	f8d9 2000 	ldr.w	r2, [r9]
 8008738:	4461      	add	r1, ip
 800873a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800873e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008742:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008746:	b289      	uxth	r1, r1
 8008748:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800874c:	4577      	cmp	r7, lr
 800874e:	f849 1b04 	str.w	r1, [r9], #4
 8008752:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008756:	d8e2      	bhi.n	800871e <__multiply+0xb2>
 8008758:	9a01      	ldr	r2, [sp, #4]
 800875a:	f845 c002 	str.w	ip, [r5, r2]
 800875e:	9a03      	ldr	r2, [sp, #12]
 8008760:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008764:	3304      	adds	r3, #4
 8008766:	f1b9 0f00 	cmp.w	r9, #0
 800876a:	d021      	beq.n	80087b0 <__multiply+0x144>
 800876c:	6829      	ldr	r1, [r5, #0]
 800876e:	f104 0c14 	add.w	ip, r4, #20
 8008772:	46ae      	mov	lr, r5
 8008774:	f04f 0a00 	mov.w	sl, #0
 8008778:	f8bc b000 	ldrh.w	fp, [ip]
 800877c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008780:	fb09 220b 	mla	r2, r9, fp, r2
 8008784:	4452      	add	r2, sl
 8008786:	b289      	uxth	r1, r1
 8008788:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800878c:	f84e 1b04 	str.w	r1, [lr], #4
 8008790:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008794:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008798:	f8be 1000 	ldrh.w	r1, [lr]
 800879c:	fb09 110a 	mla	r1, r9, sl, r1
 80087a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80087a4:	4567      	cmp	r7, ip
 80087a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087aa:	d8e5      	bhi.n	8008778 <__multiply+0x10c>
 80087ac:	9a01      	ldr	r2, [sp, #4]
 80087ae:	50a9      	str	r1, [r5, r2]
 80087b0:	3504      	adds	r5, #4
 80087b2:	e799      	b.n	80086e8 <__multiply+0x7c>
 80087b4:	3e01      	subs	r6, #1
 80087b6:	e79b      	b.n	80086f0 <__multiply+0x84>
 80087b8:	08009754 	.word	0x08009754
 80087bc:	08009765 	.word	0x08009765

080087c0 <__pow5mult>:
 80087c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087c4:	4615      	mov	r5, r2
 80087c6:	f012 0203 	ands.w	r2, r2, #3
 80087ca:	4606      	mov	r6, r0
 80087cc:	460f      	mov	r7, r1
 80087ce:	d007      	beq.n	80087e0 <__pow5mult+0x20>
 80087d0:	4c25      	ldr	r4, [pc, #148]	; (8008868 <__pow5mult+0xa8>)
 80087d2:	3a01      	subs	r2, #1
 80087d4:	2300      	movs	r3, #0
 80087d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80087da:	f7ff fe9d 	bl	8008518 <__multadd>
 80087de:	4607      	mov	r7, r0
 80087e0:	10ad      	asrs	r5, r5, #2
 80087e2:	d03d      	beq.n	8008860 <__pow5mult+0xa0>
 80087e4:	69f4      	ldr	r4, [r6, #28]
 80087e6:	b97c      	cbnz	r4, 8008808 <__pow5mult+0x48>
 80087e8:	2010      	movs	r0, #16
 80087ea:	f7ff fd7f 	bl	80082ec <malloc>
 80087ee:	4602      	mov	r2, r0
 80087f0:	61f0      	str	r0, [r6, #28]
 80087f2:	b928      	cbnz	r0, 8008800 <__pow5mult+0x40>
 80087f4:	4b1d      	ldr	r3, [pc, #116]	; (800886c <__pow5mult+0xac>)
 80087f6:	481e      	ldr	r0, [pc, #120]	; (8008870 <__pow5mult+0xb0>)
 80087f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80087fc:	f000 fbd6 	bl	8008fac <__assert_func>
 8008800:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008804:	6004      	str	r4, [r0, #0]
 8008806:	60c4      	str	r4, [r0, #12]
 8008808:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800880c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008810:	b94c      	cbnz	r4, 8008826 <__pow5mult+0x66>
 8008812:	f240 2171 	movw	r1, #625	; 0x271
 8008816:	4630      	mov	r0, r6
 8008818:	f7ff ff12 	bl	8008640 <__i2b>
 800881c:	2300      	movs	r3, #0
 800881e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008822:	4604      	mov	r4, r0
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	f04f 0900 	mov.w	r9, #0
 800882a:	07eb      	lsls	r3, r5, #31
 800882c:	d50a      	bpl.n	8008844 <__pow5mult+0x84>
 800882e:	4639      	mov	r1, r7
 8008830:	4622      	mov	r2, r4
 8008832:	4630      	mov	r0, r6
 8008834:	f7ff ff1a 	bl	800866c <__multiply>
 8008838:	4639      	mov	r1, r7
 800883a:	4680      	mov	r8, r0
 800883c:	4630      	mov	r0, r6
 800883e:	f7ff fe49 	bl	80084d4 <_Bfree>
 8008842:	4647      	mov	r7, r8
 8008844:	106d      	asrs	r5, r5, #1
 8008846:	d00b      	beq.n	8008860 <__pow5mult+0xa0>
 8008848:	6820      	ldr	r0, [r4, #0]
 800884a:	b938      	cbnz	r0, 800885c <__pow5mult+0x9c>
 800884c:	4622      	mov	r2, r4
 800884e:	4621      	mov	r1, r4
 8008850:	4630      	mov	r0, r6
 8008852:	f7ff ff0b 	bl	800866c <__multiply>
 8008856:	6020      	str	r0, [r4, #0]
 8008858:	f8c0 9000 	str.w	r9, [r0]
 800885c:	4604      	mov	r4, r0
 800885e:	e7e4      	b.n	800882a <__pow5mult+0x6a>
 8008860:	4638      	mov	r0, r7
 8008862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008866:	bf00      	nop
 8008868:	080098b0 	.word	0x080098b0
 800886c:	080096e5 	.word	0x080096e5
 8008870:	08009765 	.word	0x08009765

08008874 <__lshift>:
 8008874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	460c      	mov	r4, r1
 800887a:	6849      	ldr	r1, [r1, #4]
 800887c:	6923      	ldr	r3, [r4, #16]
 800887e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008882:	68a3      	ldr	r3, [r4, #8]
 8008884:	4607      	mov	r7, r0
 8008886:	4691      	mov	r9, r2
 8008888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800888c:	f108 0601 	add.w	r6, r8, #1
 8008890:	42b3      	cmp	r3, r6
 8008892:	db0b      	blt.n	80088ac <__lshift+0x38>
 8008894:	4638      	mov	r0, r7
 8008896:	f7ff fddd 	bl	8008454 <_Balloc>
 800889a:	4605      	mov	r5, r0
 800889c:	b948      	cbnz	r0, 80088b2 <__lshift+0x3e>
 800889e:	4602      	mov	r2, r0
 80088a0:	4b28      	ldr	r3, [pc, #160]	; (8008944 <__lshift+0xd0>)
 80088a2:	4829      	ldr	r0, [pc, #164]	; (8008948 <__lshift+0xd4>)
 80088a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80088a8:	f000 fb80 	bl	8008fac <__assert_func>
 80088ac:	3101      	adds	r1, #1
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	e7ee      	b.n	8008890 <__lshift+0x1c>
 80088b2:	2300      	movs	r3, #0
 80088b4:	f100 0114 	add.w	r1, r0, #20
 80088b8:	f100 0210 	add.w	r2, r0, #16
 80088bc:	4618      	mov	r0, r3
 80088be:	4553      	cmp	r3, sl
 80088c0:	db33      	blt.n	800892a <__lshift+0xb6>
 80088c2:	6920      	ldr	r0, [r4, #16]
 80088c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088c8:	f104 0314 	add.w	r3, r4, #20
 80088cc:	f019 091f 	ands.w	r9, r9, #31
 80088d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80088d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80088d8:	d02b      	beq.n	8008932 <__lshift+0xbe>
 80088da:	f1c9 0e20 	rsb	lr, r9, #32
 80088de:	468a      	mov	sl, r1
 80088e0:	2200      	movs	r2, #0
 80088e2:	6818      	ldr	r0, [r3, #0]
 80088e4:	fa00 f009 	lsl.w	r0, r0, r9
 80088e8:	4310      	orrs	r0, r2
 80088ea:	f84a 0b04 	str.w	r0, [sl], #4
 80088ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f2:	459c      	cmp	ip, r3
 80088f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80088f8:	d8f3      	bhi.n	80088e2 <__lshift+0x6e>
 80088fa:	ebac 0304 	sub.w	r3, ip, r4
 80088fe:	3b15      	subs	r3, #21
 8008900:	f023 0303 	bic.w	r3, r3, #3
 8008904:	3304      	adds	r3, #4
 8008906:	f104 0015 	add.w	r0, r4, #21
 800890a:	4584      	cmp	ip, r0
 800890c:	bf38      	it	cc
 800890e:	2304      	movcc	r3, #4
 8008910:	50ca      	str	r2, [r1, r3]
 8008912:	b10a      	cbz	r2, 8008918 <__lshift+0xa4>
 8008914:	f108 0602 	add.w	r6, r8, #2
 8008918:	3e01      	subs	r6, #1
 800891a:	4638      	mov	r0, r7
 800891c:	612e      	str	r6, [r5, #16]
 800891e:	4621      	mov	r1, r4
 8008920:	f7ff fdd8 	bl	80084d4 <_Bfree>
 8008924:	4628      	mov	r0, r5
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	f842 0f04 	str.w	r0, [r2, #4]!
 800892e:	3301      	adds	r3, #1
 8008930:	e7c5      	b.n	80088be <__lshift+0x4a>
 8008932:	3904      	subs	r1, #4
 8008934:	f853 2b04 	ldr.w	r2, [r3], #4
 8008938:	f841 2f04 	str.w	r2, [r1, #4]!
 800893c:	459c      	cmp	ip, r3
 800893e:	d8f9      	bhi.n	8008934 <__lshift+0xc0>
 8008940:	e7ea      	b.n	8008918 <__lshift+0xa4>
 8008942:	bf00      	nop
 8008944:	08009754 	.word	0x08009754
 8008948:	08009765 	.word	0x08009765

0800894c <__mcmp>:
 800894c:	b530      	push	{r4, r5, lr}
 800894e:	6902      	ldr	r2, [r0, #16]
 8008950:	690c      	ldr	r4, [r1, #16]
 8008952:	1b12      	subs	r2, r2, r4
 8008954:	d10e      	bne.n	8008974 <__mcmp+0x28>
 8008956:	f100 0314 	add.w	r3, r0, #20
 800895a:	3114      	adds	r1, #20
 800895c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008960:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008964:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008968:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800896c:	42a5      	cmp	r5, r4
 800896e:	d003      	beq.n	8008978 <__mcmp+0x2c>
 8008970:	d305      	bcc.n	800897e <__mcmp+0x32>
 8008972:	2201      	movs	r2, #1
 8008974:	4610      	mov	r0, r2
 8008976:	bd30      	pop	{r4, r5, pc}
 8008978:	4283      	cmp	r3, r0
 800897a:	d3f3      	bcc.n	8008964 <__mcmp+0x18>
 800897c:	e7fa      	b.n	8008974 <__mcmp+0x28>
 800897e:	f04f 32ff 	mov.w	r2, #4294967295
 8008982:	e7f7      	b.n	8008974 <__mcmp+0x28>

08008984 <__mdiff>:
 8008984:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	460c      	mov	r4, r1
 800898a:	4606      	mov	r6, r0
 800898c:	4611      	mov	r1, r2
 800898e:	4620      	mov	r0, r4
 8008990:	4690      	mov	r8, r2
 8008992:	f7ff ffdb 	bl	800894c <__mcmp>
 8008996:	1e05      	subs	r5, r0, #0
 8008998:	d110      	bne.n	80089bc <__mdiff+0x38>
 800899a:	4629      	mov	r1, r5
 800899c:	4630      	mov	r0, r6
 800899e:	f7ff fd59 	bl	8008454 <_Balloc>
 80089a2:	b930      	cbnz	r0, 80089b2 <__mdiff+0x2e>
 80089a4:	4b3a      	ldr	r3, [pc, #232]	; (8008a90 <__mdiff+0x10c>)
 80089a6:	4602      	mov	r2, r0
 80089a8:	f240 2137 	movw	r1, #567	; 0x237
 80089ac:	4839      	ldr	r0, [pc, #228]	; (8008a94 <__mdiff+0x110>)
 80089ae:	f000 fafd 	bl	8008fac <__assert_func>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	bfa4      	itt	ge
 80089be:	4643      	movge	r3, r8
 80089c0:	46a0      	movge	r8, r4
 80089c2:	4630      	mov	r0, r6
 80089c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80089c8:	bfa6      	itte	ge
 80089ca:	461c      	movge	r4, r3
 80089cc:	2500      	movge	r5, #0
 80089ce:	2501      	movlt	r5, #1
 80089d0:	f7ff fd40 	bl	8008454 <_Balloc>
 80089d4:	b920      	cbnz	r0, 80089e0 <__mdiff+0x5c>
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <__mdiff+0x10c>)
 80089d8:	4602      	mov	r2, r0
 80089da:	f240 2145 	movw	r1, #581	; 0x245
 80089de:	e7e5      	b.n	80089ac <__mdiff+0x28>
 80089e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089e4:	6926      	ldr	r6, [r4, #16]
 80089e6:	60c5      	str	r5, [r0, #12]
 80089e8:	f104 0914 	add.w	r9, r4, #20
 80089ec:	f108 0514 	add.w	r5, r8, #20
 80089f0:	f100 0e14 	add.w	lr, r0, #20
 80089f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80089f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80089fc:	f108 0210 	add.w	r2, r8, #16
 8008a00:	46f2      	mov	sl, lr
 8008a02:	2100      	movs	r1, #0
 8008a04:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a0c:	fa11 f88b 	uxtah	r8, r1, fp
 8008a10:	b299      	uxth	r1, r3
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	eba8 0801 	sub.w	r8, r8, r1
 8008a18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a20:	fa1f f888 	uxth.w	r8, r8
 8008a24:	1419      	asrs	r1, r3, #16
 8008a26:	454e      	cmp	r6, r9
 8008a28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a2c:	f84a 3b04 	str.w	r3, [sl], #4
 8008a30:	d8e8      	bhi.n	8008a04 <__mdiff+0x80>
 8008a32:	1b33      	subs	r3, r6, r4
 8008a34:	3b15      	subs	r3, #21
 8008a36:	f023 0303 	bic.w	r3, r3, #3
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	3415      	adds	r4, #21
 8008a3e:	42a6      	cmp	r6, r4
 8008a40:	bf38      	it	cc
 8008a42:	2304      	movcc	r3, #4
 8008a44:	441d      	add	r5, r3
 8008a46:	4473      	add	r3, lr
 8008a48:	469e      	mov	lr, r3
 8008a4a:	462e      	mov	r6, r5
 8008a4c:	4566      	cmp	r6, ip
 8008a4e:	d30e      	bcc.n	8008a6e <__mdiff+0xea>
 8008a50:	f10c 0203 	add.w	r2, ip, #3
 8008a54:	1b52      	subs	r2, r2, r5
 8008a56:	f022 0203 	bic.w	r2, r2, #3
 8008a5a:	3d03      	subs	r5, #3
 8008a5c:	45ac      	cmp	ip, r5
 8008a5e:	bf38      	it	cc
 8008a60:	2200      	movcc	r2, #0
 8008a62:	4413      	add	r3, r2
 8008a64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008a68:	b17a      	cbz	r2, 8008a8a <__mdiff+0x106>
 8008a6a:	6107      	str	r7, [r0, #16]
 8008a6c:	e7a4      	b.n	80089b8 <__mdiff+0x34>
 8008a6e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008a72:	fa11 f288 	uxtah	r2, r1, r8
 8008a76:	1414      	asrs	r4, r2, #16
 8008a78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008a7c:	b292      	uxth	r2, r2
 8008a7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a82:	f84e 2b04 	str.w	r2, [lr], #4
 8008a86:	1421      	asrs	r1, r4, #16
 8008a88:	e7e0      	b.n	8008a4c <__mdiff+0xc8>
 8008a8a:	3f01      	subs	r7, #1
 8008a8c:	e7ea      	b.n	8008a64 <__mdiff+0xe0>
 8008a8e:	bf00      	nop
 8008a90:	08009754 	.word	0x08009754
 8008a94:	08009765 	.word	0x08009765

08008a98 <__d2b>:
 8008a98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	460f      	mov	r7, r1
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	ec59 8b10 	vmov	r8, r9, d0
 8008aa4:	4616      	mov	r6, r2
 8008aa6:	f7ff fcd5 	bl	8008454 <_Balloc>
 8008aaa:	4604      	mov	r4, r0
 8008aac:	b930      	cbnz	r0, 8008abc <__d2b+0x24>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	4b24      	ldr	r3, [pc, #144]	; (8008b44 <__d2b+0xac>)
 8008ab2:	4825      	ldr	r0, [pc, #148]	; (8008b48 <__d2b+0xb0>)
 8008ab4:	f240 310f 	movw	r1, #783	; 0x30f
 8008ab8:	f000 fa78 	bl	8008fac <__assert_func>
 8008abc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ac4:	bb2d      	cbnz	r5, 8008b12 <__d2b+0x7a>
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	f1b8 0300 	subs.w	r3, r8, #0
 8008acc:	d026      	beq.n	8008b1c <__d2b+0x84>
 8008ace:	4668      	mov	r0, sp
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	f7ff fd87 	bl	80085e4 <__lo0bits>
 8008ad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ada:	b1e8      	cbz	r0, 8008b18 <__d2b+0x80>
 8008adc:	f1c0 0320 	rsb	r3, r0, #32
 8008ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	40c2      	lsrs	r2, r0
 8008ae8:	6163      	str	r3, [r4, #20]
 8008aea:	9201      	str	r2, [sp, #4]
 8008aec:	9b01      	ldr	r3, [sp, #4]
 8008aee:	61a3      	str	r3, [r4, #24]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bf14      	ite	ne
 8008af4:	2202      	movne	r2, #2
 8008af6:	2201      	moveq	r2, #1
 8008af8:	6122      	str	r2, [r4, #16]
 8008afa:	b1bd      	cbz	r5, 8008b2c <__d2b+0x94>
 8008afc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b00:	4405      	add	r5, r0
 8008b02:	603d      	str	r5, [r7, #0]
 8008b04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b08:	6030      	str	r0, [r6, #0]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	b003      	add	sp, #12
 8008b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b16:	e7d6      	b.n	8008ac6 <__d2b+0x2e>
 8008b18:	6161      	str	r1, [r4, #20]
 8008b1a:	e7e7      	b.n	8008aec <__d2b+0x54>
 8008b1c:	a801      	add	r0, sp, #4
 8008b1e:	f7ff fd61 	bl	80085e4 <__lo0bits>
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	6163      	str	r3, [r4, #20]
 8008b26:	3020      	adds	r0, #32
 8008b28:	2201      	movs	r2, #1
 8008b2a:	e7e5      	b.n	8008af8 <__d2b+0x60>
 8008b2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b34:	6038      	str	r0, [r7, #0]
 8008b36:	6918      	ldr	r0, [r3, #16]
 8008b38:	f7ff fd34 	bl	80085a4 <__hi0bits>
 8008b3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b40:	e7e2      	b.n	8008b08 <__d2b+0x70>
 8008b42:	bf00      	nop
 8008b44:	08009754 	.word	0x08009754
 8008b48:	08009765 	.word	0x08009765

08008b4c <__ssputs_r>:
 8008b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	688e      	ldr	r6, [r1, #8]
 8008b52:	461f      	mov	r7, r3
 8008b54:	42be      	cmp	r6, r7
 8008b56:	680b      	ldr	r3, [r1, #0]
 8008b58:	4682      	mov	sl, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	4690      	mov	r8, r2
 8008b5e:	d82c      	bhi.n	8008bba <__ssputs_r+0x6e>
 8008b60:	898a      	ldrh	r2, [r1, #12]
 8008b62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b66:	d026      	beq.n	8008bb6 <__ssputs_r+0x6a>
 8008b68:	6965      	ldr	r5, [r4, #20]
 8008b6a:	6909      	ldr	r1, [r1, #16]
 8008b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b70:	eba3 0901 	sub.w	r9, r3, r1
 8008b74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b78:	1c7b      	adds	r3, r7, #1
 8008b7a:	444b      	add	r3, r9
 8008b7c:	106d      	asrs	r5, r5, #1
 8008b7e:	429d      	cmp	r5, r3
 8008b80:	bf38      	it	cc
 8008b82:	461d      	movcc	r5, r3
 8008b84:	0553      	lsls	r3, r2, #21
 8008b86:	d527      	bpl.n	8008bd8 <__ssputs_r+0x8c>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	f7ff fbd7 	bl	800833c <_malloc_r>
 8008b8e:	4606      	mov	r6, r0
 8008b90:	b360      	cbz	r0, 8008bec <__ssputs_r+0xa0>
 8008b92:	6921      	ldr	r1, [r4, #16]
 8008b94:	464a      	mov	r2, r9
 8008b96:	f7fe fcd4 	bl	8007542 <memcpy>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	6126      	str	r6, [r4, #16]
 8008ba8:	6165      	str	r5, [r4, #20]
 8008baa:	444e      	add	r6, r9
 8008bac:	eba5 0509 	sub.w	r5, r5, r9
 8008bb0:	6026      	str	r6, [r4, #0]
 8008bb2:	60a5      	str	r5, [r4, #8]
 8008bb4:	463e      	mov	r6, r7
 8008bb6:	42be      	cmp	r6, r7
 8008bb8:	d900      	bls.n	8008bbc <__ssputs_r+0x70>
 8008bba:	463e      	mov	r6, r7
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	4641      	mov	r1, r8
 8008bc2:	f000 f9c9 	bl	8008f58 <memmove>
 8008bc6:	68a3      	ldr	r3, [r4, #8]
 8008bc8:	1b9b      	subs	r3, r3, r6
 8008bca:	60a3      	str	r3, [r4, #8]
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	4433      	add	r3, r6
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd8:	462a      	mov	r2, r5
 8008bda:	f000 fa2d 	bl	8009038 <_realloc_r>
 8008bde:	4606      	mov	r6, r0
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d1e0      	bne.n	8008ba6 <__ssputs_r+0x5a>
 8008be4:	6921      	ldr	r1, [r4, #16]
 8008be6:	4650      	mov	r0, sl
 8008be8:	f7ff fb34 	bl	8008254 <_free_r>
 8008bec:	230c      	movs	r3, #12
 8008bee:	f8ca 3000 	str.w	r3, [sl]
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfe:	e7e9      	b.n	8008bd4 <__ssputs_r+0x88>

08008c00 <_svfiprintf_r>:
 8008c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c04:	4698      	mov	r8, r3
 8008c06:	898b      	ldrh	r3, [r1, #12]
 8008c08:	061b      	lsls	r3, r3, #24
 8008c0a:	b09d      	sub	sp, #116	; 0x74
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	460d      	mov	r5, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	d50e      	bpl.n	8008c32 <_svfiprintf_r+0x32>
 8008c14:	690b      	ldr	r3, [r1, #16]
 8008c16:	b963      	cbnz	r3, 8008c32 <_svfiprintf_r+0x32>
 8008c18:	2140      	movs	r1, #64	; 0x40
 8008c1a:	f7ff fb8f 	bl	800833c <_malloc_r>
 8008c1e:	6028      	str	r0, [r5, #0]
 8008c20:	6128      	str	r0, [r5, #16]
 8008c22:	b920      	cbnz	r0, 8008c2e <_svfiprintf_r+0x2e>
 8008c24:	230c      	movs	r3, #12
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	e0d0      	b.n	8008dd0 <_svfiprintf_r+0x1d0>
 8008c2e:	2340      	movs	r3, #64	; 0x40
 8008c30:	616b      	str	r3, [r5, #20]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9309      	str	r3, [sp, #36]	; 0x24
 8008c36:	2320      	movs	r3, #32
 8008c38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c40:	2330      	movs	r3, #48	; 0x30
 8008c42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008de8 <_svfiprintf_r+0x1e8>
 8008c46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c4a:	f04f 0901 	mov.w	r9, #1
 8008c4e:	4623      	mov	r3, r4
 8008c50:	469a      	mov	sl, r3
 8008c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c56:	b10a      	cbz	r2, 8008c5c <_svfiprintf_r+0x5c>
 8008c58:	2a25      	cmp	r2, #37	; 0x25
 8008c5a:	d1f9      	bne.n	8008c50 <_svfiprintf_r+0x50>
 8008c5c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c60:	d00b      	beq.n	8008c7a <_svfiprintf_r+0x7a>
 8008c62:	465b      	mov	r3, fp
 8008c64:	4622      	mov	r2, r4
 8008c66:	4629      	mov	r1, r5
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff ff6f 	bl	8008b4c <__ssputs_r>
 8008c6e:	3001      	adds	r0, #1
 8008c70:	f000 80a9 	beq.w	8008dc6 <_svfiprintf_r+0x1c6>
 8008c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c76:	445a      	add	r2, fp
 8008c78:	9209      	str	r2, [sp, #36]	; 0x24
 8008c7a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 80a1 	beq.w	8008dc6 <_svfiprintf_r+0x1c6>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8e:	f10a 0a01 	add.w	sl, sl, #1
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	9307      	str	r3, [sp, #28]
 8008c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9c:	4654      	mov	r4, sl
 8008c9e:	2205      	movs	r2, #5
 8008ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca4:	4850      	ldr	r0, [pc, #320]	; (8008de8 <_svfiprintf_r+0x1e8>)
 8008ca6:	f7f7 fa93 	bl	80001d0 <memchr>
 8008caa:	9a04      	ldr	r2, [sp, #16]
 8008cac:	b9d8      	cbnz	r0, 8008ce6 <_svfiprintf_r+0xe6>
 8008cae:	06d0      	lsls	r0, r2, #27
 8008cb0:	bf44      	itt	mi
 8008cb2:	2320      	movmi	r3, #32
 8008cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb8:	0711      	lsls	r1, r2, #28
 8008cba:	bf44      	itt	mi
 8008cbc:	232b      	movmi	r3, #43	; 0x2b
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc8:	d015      	beq.n	8008cf6 <_svfiprintf_r+0xf6>
 8008cca:	9a07      	ldr	r2, [sp, #28]
 8008ccc:	4654      	mov	r4, sl
 8008cce:	2000      	movs	r0, #0
 8008cd0:	f04f 0c0a 	mov.w	ip, #10
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cda:	3b30      	subs	r3, #48	; 0x30
 8008cdc:	2b09      	cmp	r3, #9
 8008cde:	d94d      	bls.n	8008d7c <_svfiprintf_r+0x17c>
 8008ce0:	b1b0      	cbz	r0, 8008d10 <_svfiprintf_r+0x110>
 8008ce2:	9207      	str	r2, [sp, #28]
 8008ce4:	e014      	b.n	8008d10 <_svfiprintf_r+0x110>
 8008ce6:	eba0 0308 	sub.w	r3, r0, r8
 8008cea:	fa09 f303 	lsl.w	r3, r9, r3
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	9304      	str	r3, [sp, #16]
 8008cf2:	46a2      	mov	sl, r4
 8008cf4:	e7d2      	b.n	8008c9c <_svfiprintf_r+0x9c>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	1d19      	adds	r1, r3, #4
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	9103      	str	r1, [sp, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfbb      	ittet	lt
 8008d02:	425b      	neglt	r3, r3
 8008d04:	f042 0202 	orrlt.w	r2, r2, #2
 8008d08:	9307      	strge	r3, [sp, #28]
 8008d0a:	9307      	strlt	r3, [sp, #28]
 8008d0c:	bfb8      	it	lt
 8008d0e:	9204      	strlt	r2, [sp, #16]
 8008d10:	7823      	ldrb	r3, [r4, #0]
 8008d12:	2b2e      	cmp	r3, #46	; 0x2e
 8008d14:	d10c      	bne.n	8008d30 <_svfiprintf_r+0x130>
 8008d16:	7863      	ldrb	r3, [r4, #1]
 8008d18:	2b2a      	cmp	r3, #42	; 0x2a
 8008d1a:	d134      	bne.n	8008d86 <_svfiprintf_r+0x186>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	9203      	str	r2, [sp, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfb8      	it	lt
 8008d28:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d2c:	3402      	adds	r4, #2
 8008d2e:	9305      	str	r3, [sp, #20]
 8008d30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008df8 <_svfiprintf_r+0x1f8>
 8008d34:	7821      	ldrb	r1, [r4, #0]
 8008d36:	2203      	movs	r2, #3
 8008d38:	4650      	mov	r0, sl
 8008d3a:	f7f7 fa49 	bl	80001d0 <memchr>
 8008d3e:	b138      	cbz	r0, 8008d50 <_svfiprintf_r+0x150>
 8008d40:	9b04      	ldr	r3, [sp, #16]
 8008d42:	eba0 000a 	sub.w	r0, r0, sl
 8008d46:	2240      	movs	r2, #64	; 0x40
 8008d48:	4082      	lsls	r2, r0
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	3401      	adds	r4, #1
 8008d4e:	9304      	str	r3, [sp, #16]
 8008d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d54:	4825      	ldr	r0, [pc, #148]	; (8008dec <_svfiprintf_r+0x1ec>)
 8008d56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d5a:	2206      	movs	r2, #6
 8008d5c:	f7f7 fa38 	bl	80001d0 <memchr>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d038      	beq.n	8008dd6 <_svfiprintf_r+0x1d6>
 8008d64:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <_svfiprintf_r+0x1f0>)
 8008d66:	bb1b      	cbnz	r3, 8008db0 <_svfiprintf_r+0x1b0>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	3307      	adds	r3, #7
 8008d6c:	f023 0307 	bic.w	r3, r3, #7
 8008d70:	3308      	adds	r3, #8
 8008d72:	9303      	str	r3, [sp, #12]
 8008d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d76:	4433      	add	r3, r6
 8008d78:	9309      	str	r3, [sp, #36]	; 0x24
 8008d7a:	e768      	b.n	8008c4e <_svfiprintf_r+0x4e>
 8008d7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d80:	460c      	mov	r4, r1
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7a6      	b.n	8008cd4 <_svfiprintf_r+0xd4>
 8008d86:	2300      	movs	r3, #0
 8008d88:	3401      	adds	r4, #1
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	f04f 0c0a 	mov.w	ip, #10
 8008d92:	4620      	mov	r0, r4
 8008d94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d98:	3a30      	subs	r2, #48	; 0x30
 8008d9a:	2a09      	cmp	r2, #9
 8008d9c:	d903      	bls.n	8008da6 <_svfiprintf_r+0x1a6>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d0c6      	beq.n	8008d30 <_svfiprintf_r+0x130>
 8008da2:	9105      	str	r1, [sp, #20]
 8008da4:	e7c4      	b.n	8008d30 <_svfiprintf_r+0x130>
 8008da6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008daa:	4604      	mov	r4, r0
 8008dac:	2301      	movs	r3, #1
 8008dae:	e7f0      	b.n	8008d92 <_svfiprintf_r+0x192>
 8008db0:	ab03      	add	r3, sp, #12
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	462a      	mov	r2, r5
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <_svfiprintf_r+0x1f4>)
 8008db8:	a904      	add	r1, sp, #16
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f7fd fe56 	bl	8006a6c <_printf_float>
 8008dc0:	1c42      	adds	r2, r0, #1
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	d1d6      	bne.n	8008d74 <_svfiprintf_r+0x174>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	065b      	lsls	r3, r3, #25
 8008dca:	f53f af2d 	bmi.w	8008c28 <_svfiprintf_r+0x28>
 8008dce:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd0:	b01d      	add	sp, #116	; 0x74
 8008dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd6:	ab03      	add	r3, sp, #12
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	462a      	mov	r2, r5
 8008ddc:	4b05      	ldr	r3, [pc, #20]	; (8008df4 <_svfiprintf_r+0x1f4>)
 8008dde:	a904      	add	r1, sp, #16
 8008de0:	4638      	mov	r0, r7
 8008de2:	f7fe f8e7 	bl	8006fb4 <_printf_i>
 8008de6:	e7eb      	b.n	8008dc0 <_svfiprintf_r+0x1c0>
 8008de8:	080098bc 	.word	0x080098bc
 8008dec:	080098c6 	.word	0x080098c6
 8008df0:	08006a6d 	.word	0x08006a6d
 8008df4:	08008b4d 	.word	0x08008b4d
 8008df8:	080098c2 	.word	0x080098c2

08008dfc <__sflush_r>:
 8008dfc:	898a      	ldrh	r2, [r1, #12]
 8008dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e02:	4605      	mov	r5, r0
 8008e04:	0710      	lsls	r0, r2, #28
 8008e06:	460c      	mov	r4, r1
 8008e08:	d458      	bmi.n	8008ebc <__sflush_r+0xc0>
 8008e0a:	684b      	ldr	r3, [r1, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	dc05      	bgt.n	8008e1c <__sflush_r+0x20>
 8008e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	dc02      	bgt.n	8008e1c <__sflush_r+0x20>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e1e:	2e00      	cmp	r6, #0
 8008e20:	d0f9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e28:	682f      	ldr	r7, [r5, #0]
 8008e2a:	6a21      	ldr	r1, [r4, #32]
 8008e2c:	602b      	str	r3, [r5, #0]
 8008e2e:	d032      	beq.n	8008e96 <__sflush_r+0x9a>
 8008e30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	075a      	lsls	r2, r3, #29
 8008e36:	d505      	bpl.n	8008e44 <__sflush_r+0x48>
 8008e38:	6863      	ldr	r3, [r4, #4]
 8008e3a:	1ac0      	subs	r0, r0, r3
 8008e3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e3e:	b10b      	cbz	r3, 8008e44 <__sflush_r+0x48>
 8008e40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e42:	1ac0      	subs	r0, r0, r3
 8008e44:	2300      	movs	r3, #0
 8008e46:	4602      	mov	r2, r0
 8008e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e4a:	6a21      	ldr	r1, [r4, #32]
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	47b0      	blx	r6
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	89a3      	ldrh	r3, [r4, #12]
 8008e54:	d106      	bne.n	8008e64 <__sflush_r+0x68>
 8008e56:	6829      	ldr	r1, [r5, #0]
 8008e58:	291d      	cmp	r1, #29
 8008e5a:	d82b      	bhi.n	8008eb4 <__sflush_r+0xb8>
 8008e5c:	4a29      	ldr	r2, [pc, #164]	; (8008f04 <__sflush_r+0x108>)
 8008e5e:	410a      	asrs	r2, r1
 8008e60:	07d6      	lsls	r6, r2, #31
 8008e62:	d427      	bmi.n	8008eb4 <__sflush_r+0xb8>
 8008e64:	2200      	movs	r2, #0
 8008e66:	6062      	str	r2, [r4, #4]
 8008e68:	04d9      	lsls	r1, r3, #19
 8008e6a:	6922      	ldr	r2, [r4, #16]
 8008e6c:	6022      	str	r2, [r4, #0]
 8008e6e:	d504      	bpl.n	8008e7a <__sflush_r+0x7e>
 8008e70:	1c42      	adds	r2, r0, #1
 8008e72:	d101      	bne.n	8008e78 <__sflush_r+0x7c>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b903      	cbnz	r3, 8008e7a <__sflush_r+0x7e>
 8008e78:	6560      	str	r0, [r4, #84]	; 0x54
 8008e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e7c:	602f      	str	r7, [r5, #0]
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d0c9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008e82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d002      	beq.n	8008e90 <__sflush_r+0x94>
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	f7ff f9e2 	bl	8008254 <_free_r>
 8008e90:	2000      	movs	r0, #0
 8008e92:	6360      	str	r0, [r4, #52]	; 0x34
 8008e94:	e7c0      	b.n	8008e18 <__sflush_r+0x1c>
 8008e96:	2301      	movs	r3, #1
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b0      	blx	r6
 8008e9c:	1c41      	adds	r1, r0, #1
 8008e9e:	d1c8      	bne.n	8008e32 <__sflush_r+0x36>
 8008ea0:	682b      	ldr	r3, [r5, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0c5      	beq.n	8008e32 <__sflush_r+0x36>
 8008ea6:	2b1d      	cmp	r3, #29
 8008ea8:	d001      	beq.n	8008eae <__sflush_r+0xb2>
 8008eaa:	2b16      	cmp	r3, #22
 8008eac:	d101      	bne.n	8008eb2 <__sflush_r+0xb6>
 8008eae:	602f      	str	r7, [r5, #0]
 8008eb0:	e7b1      	b.n	8008e16 <__sflush_r+0x1a>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	e7ad      	b.n	8008e18 <__sflush_r+0x1c>
 8008ebc:	690f      	ldr	r7, [r1, #16]
 8008ebe:	2f00      	cmp	r7, #0
 8008ec0:	d0a9      	beq.n	8008e16 <__sflush_r+0x1a>
 8008ec2:	0793      	lsls	r3, r2, #30
 8008ec4:	680e      	ldr	r6, [r1, #0]
 8008ec6:	bf08      	it	eq
 8008ec8:	694b      	ldreq	r3, [r1, #20]
 8008eca:	600f      	str	r7, [r1, #0]
 8008ecc:	bf18      	it	ne
 8008ece:	2300      	movne	r3, #0
 8008ed0:	eba6 0807 	sub.w	r8, r6, r7
 8008ed4:	608b      	str	r3, [r1, #8]
 8008ed6:	f1b8 0f00 	cmp.w	r8, #0
 8008eda:	dd9c      	ble.n	8008e16 <__sflush_r+0x1a>
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ee0:	4643      	mov	r3, r8
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	47b0      	blx	r6
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	dc06      	bgt.n	8008efa <__sflush_r+0xfe>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	e78e      	b.n	8008e18 <__sflush_r+0x1c>
 8008efa:	4407      	add	r7, r0
 8008efc:	eba8 0800 	sub.w	r8, r8, r0
 8008f00:	e7e9      	b.n	8008ed6 <__sflush_r+0xda>
 8008f02:	bf00      	nop
 8008f04:	dfbffffe 	.word	0xdfbffffe

08008f08 <_fflush_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	690b      	ldr	r3, [r1, #16]
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	b913      	cbnz	r3, 8008f18 <_fflush_r+0x10>
 8008f12:	2500      	movs	r5, #0
 8008f14:	4628      	mov	r0, r5
 8008f16:	bd38      	pop	{r3, r4, r5, pc}
 8008f18:	b118      	cbz	r0, 8008f22 <_fflush_r+0x1a>
 8008f1a:	6a03      	ldr	r3, [r0, #32]
 8008f1c:	b90b      	cbnz	r3, 8008f22 <_fflush_r+0x1a>
 8008f1e:	f7fe f9f7 	bl	8007310 <__sinit>
 8008f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0f3      	beq.n	8008f12 <_fflush_r+0xa>
 8008f2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f2c:	07d0      	lsls	r0, r2, #31
 8008f2e:	d404      	bmi.n	8008f3a <_fflush_r+0x32>
 8008f30:	0599      	lsls	r1, r3, #22
 8008f32:	d402      	bmi.n	8008f3a <_fflush_r+0x32>
 8008f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f36:	f7fe fb02 	bl	800753e <__retarget_lock_acquire_recursive>
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f7ff ff5d 	bl	8008dfc <__sflush_r>
 8008f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f44:	07da      	lsls	r2, r3, #31
 8008f46:	4605      	mov	r5, r0
 8008f48:	d4e4      	bmi.n	8008f14 <_fflush_r+0xc>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	059b      	lsls	r3, r3, #22
 8008f4e:	d4e1      	bmi.n	8008f14 <_fflush_r+0xc>
 8008f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f52:	f7fe faf5 	bl	8007540 <__retarget_lock_release_recursive>
 8008f56:	e7dd      	b.n	8008f14 <_fflush_r+0xc>

08008f58 <memmove>:
 8008f58:	4288      	cmp	r0, r1
 8008f5a:	b510      	push	{r4, lr}
 8008f5c:	eb01 0402 	add.w	r4, r1, r2
 8008f60:	d902      	bls.n	8008f68 <memmove+0x10>
 8008f62:	4284      	cmp	r4, r0
 8008f64:	4623      	mov	r3, r4
 8008f66:	d807      	bhi.n	8008f78 <memmove+0x20>
 8008f68:	1e43      	subs	r3, r0, #1
 8008f6a:	42a1      	cmp	r1, r4
 8008f6c:	d008      	beq.n	8008f80 <memmove+0x28>
 8008f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f76:	e7f8      	b.n	8008f6a <memmove+0x12>
 8008f78:	4402      	add	r2, r0
 8008f7a:	4601      	mov	r1, r0
 8008f7c:	428a      	cmp	r2, r1
 8008f7e:	d100      	bne.n	8008f82 <memmove+0x2a>
 8008f80:	bd10      	pop	{r4, pc}
 8008f82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f8a:	e7f7      	b.n	8008f7c <memmove+0x24>

08008f8c <_sbrk_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_sbrk_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7f8 fc30 	bl	80017fc <_sbrk>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_sbrk_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_sbrk_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	200008b8 	.word	0x200008b8

08008fac <__assert_func>:
 8008fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fae:	4614      	mov	r4, r2
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <__assert_func+0x2c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	68d8      	ldr	r0, [r3, #12]
 8008fba:	b14c      	cbz	r4, 8008fd0 <__assert_func+0x24>
 8008fbc:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <__assert_func+0x30>)
 8008fbe:	9100      	str	r1, [sp, #0]
 8008fc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008fc4:	4906      	ldr	r1, [pc, #24]	; (8008fe0 <__assert_func+0x34>)
 8008fc6:	462b      	mov	r3, r5
 8008fc8:	f000 f872 	bl	80090b0 <fiprintf>
 8008fcc:	f000 f882 	bl	80090d4 <abort>
 8008fd0:	4b04      	ldr	r3, [pc, #16]	; (8008fe4 <__assert_func+0x38>)
 8008fd2:	461c      	mov	r4, r3
 8008fd4:	e7f3      	b.n	8008fbe <__assert_func+0x12>
 8008fd6:	bf00      	nop
 8008fd8:	20000180 	.word	0x20000180
 8008fdc:	080098d7 	.word	0x080098d7
 8008fe0:	080098e4 	.word	0x080098e4
 8008fe4:	08009912 	.word	0x08009912

08008fe8 <_calloc_r>:
 8008fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fea:	fba1 2402 	umull	r2, r4, r1, r2
 8008fee:	b94c      	cbnz	r4, 8009004 <_calloc_r+0x1c>
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	9201      	str	r2, [sp, #4]
 8008ff4:	f7ff f9a2 	bl	800833c <_malloc_r>
 8008ff8:	9a01      	ldr	r2, [sp, #4]
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	b930      	cbnz	r0, 800900c <_calloc_r+0x24>
 8008ffe:	4628      	mov	r0, r5
 8009000:	b003      	add	sp, #12
 8009002:	bd30      	pop	{r4, r5, pc}
 8009004:	220c      	movs	r2, #12
 8009006:	6002      	str	r2, [r0, #0]
 8009008:	2500      	movs	r5, #0
 800900a:	e7f8      	b.n	8008ffe <_calloc_r+0x16>
 800900c:	4621      	mov	r1, r4
 800900e:	f7fe fa18 	bl	8007442 <memset>
 8009012:	e7f4      	b.n	8008ffe <_calloc_r+0x16>

08009014 <__ascii_mbtowc>:
 8009014:	b082      	sub	sp, #8
 8009016:	b901      	cbnz	r1, 800901a <__ascii_mbtowc+0x6>
 8009018:	a901      	add	r1, sp, #4
 800901a:	b142      	cbz	r2, 800902e <__ascii_mbtowc+0x1a>
 800901c:	b14b      	cbz	r3, 8009032 <__ascii_mbtowc+0x1e>
 800901e:	7813      	ldrb	r3, [r2, #0]
 8009020:	600b      	str	r3, [r1, #0]
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	1e10      	subs	r0, r2, #0
 8009026:	bf18      	it	ne
 8009028:	2001      	movne	r0, #1
 800902a:	b002      	add	sp, #8
 800902c:	4770      	bx	lr
 800902e:	4610      	mov	r0, r2
 8009030:	e7fb      	b.n	800902a <__ascii_mbtowc+0x16>
 8009032:	f06f 0001 	mvn.w	r0, #1
 8009036:	e7f8      	b.n	800902a <__ascii_mbtowc+0x16>

08009038 <_realloc_r>:
 8009038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903c:	4680      	mov	r8, r0
 800903e:	4614      	mov	r4, r2
 8009040:	460e      	mov	r6, r1
 8009042:	b921      	cbnz	r1, 800904e <_realloc_r+0x16>
 8009044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009048:	4611      	mov	r1, r2
 800904a:	f7ff b977 	b.w	800833c <_malloc_r>
 800904e:	b92a      	cbnz	r2, 800905c <_realloc_r+0x24>
 8009050:	f7ff f900 	bl	8008254 <_free_r>
 8009054:	4625      	mov	r5, r4
 8009056:	4628      	mov	r0, r5
 8009058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905c:	f000 f841 	bl	80090e2 <_malloc_usable_size_r>
 8009060:	4284      	cmp	r4, r0
 8009062:	4607      	mov	r7, r0
 8009064:	d802      	bhi.n	800906c <_realloc_r+0x34>
 8009066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800906a:	d812      	bhi.n	8009092 <_realloc_r+0x5a>
 800906c:	4621      	mov	r1, r4
 800906e:	4640      	mov	r0, r8
 8009070:	f7ff f964 	bl	800833c <_malloc_r>
 8009074:	4605      	mov	r5, r0
 8009076:	2800      	cmp	r0, #0
 8009078:	d0ed      	beq.n	8009056 <_realloc_r+0x1e>
 800907a:	42bc      	cmp	r4, r7
 800907c:	4622      	mov	r2, r4
 800907e:	4631      	mov	r1, r6
 8009080:	bf28      	it	cs
 8009082:	463a      	movcs	r2, r7
 8009084:	f7fe fa5d 	bl	8007542 <memcpy>
 8009088:	4631      	mov	r1, r6
 800908a:	4640      	mov	r0, r8
 800908c:	f7ff f8e2 	bl	8008254 <_free_r>
 8009090:	e7e1      	b.n	8009056 <_realloc_r+0x1e>
 8009092:	4635      	mov	r5, r6
 8009094:	e7df      	b.n	8009056 <_realloc_r+0x1e>

08009096 <__ascii_wctomb>:
 8009096:	b149      	cbz	r1, 80090ac <__ascii_wctomb+0x16>
 8009098:	2aff      	cmp	r2, #255	; 0xff
 800909a:	bf85      	ittet	hi
 800909c:	238a      	movhi	r3, #138	; 0x8a
 800909e:	6003      	strhi	r3, [r0, #0]
 80090a0:	700a      	strbls	r2, [r1, #0]
 80090a2:	f04f 30ff 	movhi.w	r0, #4294967295
 80090a6:	bf98      	it	ls
 80090a8:	2001      	movls	r0, #1
 80090aa:	4770      	bx	lr
 80090ac:	4608      	mov	r0, r1
 80090ae:	4770      	bx	lr

080090b0 <fiprintf>:
 80090b0:	b40e      	push	{r1, r2, r3}
 80090b2:	b503      	push	{r0, r1, lr}
 80090b4:	4601      	mov	r1, r0
 80090b6:	ab03      	add	r3, sp, #12
 80090b8:	4805      	ldr	r0, [pc, #20]	; (80090d0 <fiprintf+0x20>)
 80090ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80090be:	6800      	ldr	r0, [r0, #0]
 80090c0:	9301      	str	r3, [sp, #4]
 80090c2:	f000 f83f 	bl	8009144 <_vfiprintf_r>
 80090c6:	b002      	add	sp, #8
 80090c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80090cc:	b003      	add	sp, #12
 80090ce:	4770      	bx	lr
 80090d0:	20000180 	.word	0x20000180

080090d4 <abort>:
 80090d4:	b508      	push	{r3, lr}
 80090d6:	2006      	movs	r0, #6
 80090d8:	f000 fa0c 	bl	80094f4 <raise>
 80090dc:	2001      	movs	r0, #1
 80090de:	f7f8 fb15 	bl	800170c <_exit>

080090e2 <_malloc_usable_size_r>:
 80090e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090e6:	1f18      	subs	r0, r3, #4
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	bfbc      	itt	lt
 80090ec:	580b      	ldrlt	r3, [r1, r0]
 80090ee:	18c0      	addlt	r0, r0, r3
 80090f0:	4770      	bx	lr

080090f2 <__sfputc_r>:
 80090f2:	6893      	ldr	r3, [r2, #8]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	b410      	push	{r4}
 80090fa:	6093      	str	r3, [r2, #8]
 80090fc:	da08      	bge.n	8009110 <__sfputc_r+0x1e>
 80090fe:	6994      	ldr	r4, [r2, #24]
 8009100:	42a3      	cmp	r3, r4
 8009102:	db01      	blt.n	8009108 <__sfputc_r+0x16>
 8009104:	290a      	cmp	r1, #10
 8009106:	d103      	bne.n	8009110 <__sfputc_r+0x1e>
 8009108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800910c:	f000 b934 	b.w	8009378 <__swbuf_r>
 8009110:	6813      	ldr	r3, [r2, #0]
 8009112:	1c58      	adds	r0, r3, #1
 8009114:	6010      	str	r0, [r2, #0]
 8009116:	7019      	strb	r1, [r3, #0]
 8009118:	4608      	mov	r0, r1
 800911a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800911e:	4770      	bx	lr

08009120 <__sfputs_r>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	4614      	mov	r4, r2
 8009128:	18d5      	adds	r5, r2, r3
 800912a:	42ac      	cmp	r4, r5
 800912c:	d101      	bne.n	8009132 <__sfputs_r+0x12>
 800912e:	2000      	movs	r0, #0
 8009130:	e007      	b.n	8009142 <__sfputs_r+0x22>
 8009132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009136:	463a      	mov	r2, r7
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff ffda 	bl	80090f2 <__sfputc_r>
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	d1f3      	bne.n	800912a <__sfputs_r+0xa>
 8009142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009144 <_vfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	460d      	mov	r5, r1
 800914a:	b09d      	sub	sp, #116	; 0x74
 800914c:	4614      	mov	r4, r2
 800914e:	4698      	mov	r8, r3
 8009150:	4606      	mov	r6, r0
 8009152:	b118      	cbz	r0, 800915c <_vfiprintf_r+0x18>
 8009154:	6a03      	ldr	r3, [r0, #32]
 8009156:	b90b      	cbnz	r3, 800915c <_vfiprintf_r+0x18>
 8009158:	f7fe f8da 	bl	8007310 <__sinit>
 800915c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800915e:	07d9      	lsls	r1, r3, #31
 8009160:	d405      	bmi.n	800916e <_vfiprintf_r+0x2a>
 8009162:	89ab      	ldrh	r3, [r5, #12]
 8009164:	059a      	lsls	r2, r3, #22
 8009166:	d402      	bmi.n	800916e <_vfiprintf_r+0x2a>
 8009168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800916a:	f7fe f9e8 	bl	800753e <__retarget_lock_acquire_recursive>
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	071b      	lsls	r3, r3, #28
 8009172:	d501      	bpl.n	8009178 <_vfiprintf_r+0x34>
 8009174:	692b      	ldr	r3, [r5, #16]
 8009176:	b99b      	cbnz	r3, 80091a0 <_vfiprintf_r+0x5c>
 8009178:	4629      	mov	r1, r5
 800917a:	4630      	mov	r0, r6
 800917c:	f000 f93a 	bl	80093f4 <__swsetup_r>
 8009180:	b170      	cbz	r0, 80091a0 <_vfiprintf_r+0x5c>
 8009182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009184:	07dc      	lsls	r4, r3, #31
 8009186:	d504      	bpl.n	8009192 <_vfiprintf_r+0x4e>
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	b01d      	add	sp, #116	; 0x74
 800918e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	0598      	lsls	r0, r3, #22
 8009196:	d4f7      	bmi.n	8009188 <_vfiprintf_r+0x44>
 8009198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800919a:	f7fe f9d1 	bl	8007540 <__retarget_lock_release_recursive>
 800919e:	e7f3      	b.n	8009188 <_vfiprintf_r+0x44>
 80091a0:	2300      	movs	r3, #0
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
 80091a4:	2320      	movs	r3, #32
 80091a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80091aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80091ae:	2330      	movs	r3, #48	; 0x30
 80091b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009364 <_vfiprintf_r+0x220>
 80091b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091b8:	f04f 0901 	mov.w	r9, #1
 80091bc:	4623      	mov	r3, r4
 80091be:	469a      	mov	sl, r3
 80091c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c4:	b10a      	cbz	r2, 80091ca <_vfiprintf_r+0x86>
 80091c6:	2a25      	cmp	r2, #37	; 0x25
 80091c8:	d1f9      	bne.n	80091be <_vfiprintf_r+0x7a>
 80091ca:	ebba 0b04 	subs.w	fp, sl, r4
 80091ce:	d00b      	beq.n	80091e8 <_vfiprintf_r+0xa4>
 80091d0:	465b      	mov	r3, fp
 80091d2:	4622      	mov	r2, r4
 80091d4:	4629      	mov	r1, r5
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff ffa2 	bl	8009120 <__sfputs_r>
 80091dc:	3001      	adds	r0, #1
 80091de:	f000 80a9 	beq.w	8009334 <_vfiprintf_r+0x1f0>
 80091e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091e4:	445a      	add	r2, fp
 80091e6:	9209      	str	r2, [sp, #36]	; 0x24
 80091e8:	f89a 3000 	ldrb.w	r3, [sl]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 80a1 	beq.w	8009334 <_vfiprintf_r+0x1f0>
 80091f2:	2300      	movs	r3, #0
 80091f4:	f04f 32ff 	mov.w	r2, #4294967295
 80091f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091fc:	f10a 0a01 	add.w	sl, sl, #1
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	9307      	str	r3, [sp, #28]
 8009204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009208:	931a      	str	r3, [sp, #104]	; 0x68
 800920a:	4654      	mov	r4, sl
 800920c:	2205      	movs	r2, #5
 800920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009212:	4854      	ldr	r0, [pc, #336]	; (8009364 <_vfiprintf_r+0x220>)
 8009214:	f7f6 ffdc 	bl	80001d0 <memchr>
 8009218:	9a04      	ldr	r2, [sp, #16]
 800921a:	b9d8      	cbnz	r0, 8009254 <_vfiprintf_r+0x110>
 800921c:	06d1      	lsls	r1, r2, #27
 800921e:	bf44      	itt	mi
 8009220:	2320      	movmi	r3, #32
 8009222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009226:	0713      	lsls	r3, r2, #28
 8009228:	bf44      	itt	mi
 800922a:	232b      	movmi	r3, #43	; 0x2b
 800922c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009230:	f89a 3000 	ldrb.w	r3, [sl]
 8009234:	2b2a      	cmp	r3, #42	; 0x2a
 8009236:	d015      	beq.n	8009264 <_vfiprintf_r+0x120>
 8009238:	9a07      	ldr	r2, [sp, #28]
 800923a:	4654      	mov	r4, sl
 800923c:	2000      	movs	r0, #0
 800923e:	f04f 0c0a 	mov.w	ip, #10
 8009242:	4621      	mov	r1, r4
 8009244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009248:	3b30      	subs	r3, #48	; 0x30
 800924a:	2b09      	cmp	r3, #9
 800924c:	d94d      	bls.n	80092ea <_vfiprintf_r+0x1a6>
 800924e:	b1b0      	cbz	r0, 800927e <_vfiprintf_r+0x13a>
 8009250:	9207      	str	r2, [sp, #28]
 8009252:	e014      	b.n	800927e <_vfiprintf_r+0x13a>
 8009254:	eba0 0308 	sub.w	r3, r0, r8
 8009258:	fa09 f303 	lsl.w	r3, r9, r3
 800925c:	4313      	orrs	r3, r2
 800925e:	9304      	str	r3, [sp, #16]
 8009260:	46a2      	mov	sl, r4
 8009262:	e7d2      	b.n	800920a <_vfiprintf_r+0xc6>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	1d19      	adds	r1, r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	9103      	str	r1, [sp, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfbb      	ittet	lt
 8009270:	425b      	neglt	r3, r3
 8009272:	f042 0202 	orrlt.w	r2, r2, #2
 8009276:	9307      	strge	r3, [sp, #28]
 8009278:	9307      	strlt	r3, [sp, #28]
 800927a:	bfb8      	it	lt
 800927c:	9204      	strlt	r2, [sp, #16]
 800927e:	7823      	ldrb	r3, [r4, #0]
 8009280:	2b2e      	cmp	r3, #46	; 0x2e
 8009282:	d10c      	bne.n	800929e <_vfiprintf_r+0x15a>
 8009284:	7863      	ldrb	r3, [r4, #1]
 8009286:	2b2a      	cmp	r3, #42	; 0x2a
 8009288:	d134      	bne.n	80092f4 <_vfiprintf_r+0x1b0>
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	1d1a      	adds	r2, r3, #4
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	9203      	str	r2, [sp, #12]
 8009292:	2b00      	cmp	r3, #0
 8009294:	bfb8      	it	lt
 8009296:	f04f 33ff 	movlt.w	r3, #4294967295
 800929a:	3402      	adds	r4, #2
 800929c:	9305      	str	r3, [sp, #20]
 800929e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009374 <_vfiprintf_r+0x230>
 80092a2:	7821      	ldrb	r1, [r4, #0]
 80092a4:	2203      	movs	r2, #3
 80092a6:	4650      	mov	r0, sl
 80092a8:	f7f6 ff92 	bl	80001d0 <memchr>
 80092ac:	b138      	cbz	r0, 80092be <_vfiprintf_r+0x17a>
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	eba0 000a 	sub.w	r0, r0, sl
 80092b4:	2240      	movs	r2, #64	; 0x40
 80092b6:	4082      	lsls	r2, r0
 80092b8:	4313      	orrs	r3, r2
 80092ba:	3401      	adds	r4, #1
 80092bc:	9304      	str	r3, [sp, #16]
 80092be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c2:	4829      	ldr	r0, [pc, #164]	; (8009368 <_vfiprintf_r+0x224>)
 80092c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092c8:	2206      	movs	r2, #6
 80092ca:	f7f6 ff81 	bl	80001d0 <memchr>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d03f      	beq.n	8009352 <_vfiprintf_r+0x20e>
 80092d2:	4b26      	ldr	r3, [pc, #152]	; (800936c <_vfiprintf_r+0x228>)
 80092d4:	bb1b      	cbnz	r3, 800931e <_vfiprintf_r+0x1da>
 80092d6:	9b03      	ldr	r3, [sp, #12]
 80092d8:	3307      	adds	r3, #7
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	3308      	adds	r3, #8
 80092e0:	9303      	str	r3, [sp, #12]
 80092e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e4:	443b      	add	r3, r7
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	e768      	b.n	80091bc <_vfiprintf_r+0x78>
 80092ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ee:	460c      	mov	r4, r1
 80092f0:	2001      	movs	r0, #1
 80092f2:	e7a6      	b.n	8009242 <_vfiprintf_r+0xfe>
 80092f4:	2300      	movs	r3, #0
 80092f6:	3401      	adds	r4, #1
 80092f8:	9305      	str	r3, [sp, #20]
 80092fa:	4619      	mov	r1, r3
 80092fc:	f04f 0c0a 	mov.w	ip, #10
 8009300:	4620      	mov	r0, r4
 8009302:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009306:	3a30      	subs	r2, #48	; 0x30
 8009308:	2a09      	cmp	r2, #9
 800930a:	d903      	bls.n	8009314 <_vfiprintf_r+0x1d0>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0c6      	beq.n	800929e <_vfiprintf_r+0x15a>
 8009310:	9105      	str	r1, [sp, #20]
 8009312:	e7c4      	b.n	800929e <_vfiprintf_r+0x15a>
 8009314:	fb0c 2101 	mla	r1, ip, r1, r2
 8009318:	4604      	mov	r4, r0
 800931a:	2301      	movs	r3, #1
 800931c:	e7f0      	b.n	8009300 <_vfiprintf_r+0x1bc>
 800931e:	ab03      	add	r3, sp, #12
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	462a      	mov	r2, r5
 8009324:	4b12      	ldr	r3, [pc, #72]	; (8009370 <_vfiprintf_r+0x22c>)
 8009326:	a904      	add	r1, sp, #16
 8009328:	4630      	mov	r0, r6
 800932a:	f7fd fb9f 	bl	8006a6c <_printf_float>
 800932e:	4607      	mov	r7, r0
 8009330:	1c78      	adds	r0, r7, #1
 8009332:	d1d6      	bne.n	80092e2 <_vfiprintf_r+0x19e>
 8009334:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d405      	bmi.n	8009346 <_vfiprintf_r+0x202>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	059a      	lsls	r2, r3, #22
 800933e:	d402      	bmi.n	8009346 <_vfiprintf_r+0x202>
 8009340:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009342:	f7fe f8fd 	bl	8007540 <__retarget_lock_release_recursive>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	065b      	lsls	r3, r3, #25
 800934a:	f53f af1d 	bmi.w	8009188 <_vfiprintf_r+0x44>
 800934e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009350:	e71c      	b.n	800918c <_vfiprintf_r+0x48>
 8009352:	ab03      	add	r3, sp, #12
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	462a      	mov	r2, r5
 8009358:	4b05      	ldr	r3, [pc, #20]	; (8009370 <_vfiprintf_r+0x22c>)
 800935a:	a904      	add	r1, sp, #16
 800935c:	4630      	mov	r0, r6
 800935e:	f7fd fe29 	bl	8006fb4 <_printf_i>
 8009362:	e7e4      	b.n	800932e <_vfiprintf_r+0x1ea>
 8009364:	080098bc 	.word	0x080098bc
 8009368:	080098c6 	.word	0x080098c6
 800936c:	08006a6d 	.word	0x08006a6d
 8009370:	08009121 	.word	0x08009121
 8009374:	080098c2 	.word	0x080098c2

08009378 <__swbuf_r>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	460e      	mov	r6, r1
 800937c:	4614      	mov	r4, r2
 800937e:	4605      	mov	r5, r0
 8009380:	b118      	cbz	r0, 800938a <__swbuf_r+0x12>
 8009382:	6a03      	ldr	r3, [r0, #32]
 8009384:	b90b      	cbnz	r3, 800938a <__swbuf_r+0x12>
 8009386:	f7fd ffc3 	bl	8007310 <__sinit>
 800938a:	69a3      	ldr	r3, [r4, #24]
 800938c:	60a3      	str	r3, [r4, #8]
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	071a      	lsls	r2, r3, #28
 8009392:	d525      	bpl.n	80093e0 <__swbuf_r+0x68>
 8009394:	6923      	ldr	r3, [r4, #16]
 8009396:	b31b      	cbz	r3, 80093e0 <__swbuf_r+0x68>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	6922      	ldr	r2, [r4, #16]
 800939c:	1a98      	subs	r0, r3, r2
 800939e:	6963      	ldr	r3, [r4, #20]
 80093a0:	b2f6      	uxtb	r6, r6
 80093a2:	4283      	cmp	r3, r0
 80093a4:	4637      	mov	r7, r6
 80093a6:	dc04      	bgt.n	80093b2 <__swbuf_r+0x3a>
 80093a8:	4621      	mov	r1, r4
 80093aa:	4628      	mov	r0, r5
 80093ac:	f7ff fdac 	bl	8008f08 <_fflush_r>
 80093b0:	b9e0      	cbnz	r0, 80093ec <__swbuf_r+0x74>
 80093b2:	68a3      	ldr	r3, [r4, #8]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	60a3      	str	r3, [r4, #8]
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	6022      	str	r2, [r4, #0]
 80093be:	701e      	strb	r6, [r3, #0]
 80093c0:	6962      	ldr	r2, [r4, #20]
 80093c2:	1c43      	adds	r3, r0, #1
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d004      	beq.n	80093d2 <__swbuf_r+0x5a>
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	07db      	lsls	r3, r3, #31
 80093cc:	d506      	bpl.n	80093dc <__swbuf_r+0x64>
 80093ce:	2e0a      	cmp	r6, #10
 80093d0:	d104      	bne.n	80093dc <__swbuf_r+0x64>
 80093d2:	4621      	mov	r1, r4
 80093d4:	4628      	mov	r0, r5
 80093d6:	f7ff fd97 	bl	8008f08 <_fflush_r>
 80093da:	b938      	cbnz	r0, 80093ec <__swbuf_r+0x74>
 80093dc:	4638      	mov	r0, r7
 80093de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093e0:	4621      	mov	r1, r4
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f806 	bl	80093f4 <__swsetup_r>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	d0d5      	beq.n	8009398 <__swbuf_r+0x20>
 80093ec:	f04f 37ff 	mov.w	r7, #4294967295
 80093f0:	e7f4      	b.n	80093dc <__swbuf_r+0x64>
	...

080093f4 <__swsetup_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4b2a      	ldr	r3, [pc, #168]	; (80094a0 <__swsetup_r+0xac>)
 80093f8:	4605      	mov	r5, r0
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	460c      	mov	r4, r1
 80093fe:	b118      	cbz	r0, 8009408 <__swsetup_r+0x14>
 8009400:	6a03      	ldr	r3, [r0, #32]
 8009402:	b90b      	cbnz	r3, 8009408 <__swsetup_r+0x14>
 8009404:	f7fd ff84 	bl	8007310 <__sinit>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800940e:	0718      	lsls	r0, r3, #28
 8009410:	d422      	bmi.n	8009458 <__swsetup_r+0x64>
 8009412:	06d9      	lsls	r1, r3, #27
 8009414:	d407      	bmi.n	8009426 <__swsetup_r+0x32>
 8009416:	2309      	movs	r3, #9
 8009418:	602b      	str	r3, [r5, #0]
 800941a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e034      	b.n	8009490 <__swsetup_r+0x9c>
 8009426:	0758      	lsls	r0, r3, #29
 8009428:	d512      	bpl.n	8009450 <__swsetup_r+0x5c>
 800942a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800942c:	b141      	cbz	r1, 8009440 <__swsetup_r+0x4c>
 800942e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009432:	4299      	cmp	r1, r3
 8009434:	d002      	beq.n	800943c <__swsetup_r+0x48>
 8009436:	4628      	mov	r0, r5
 8009438:	f7fe ff0c 	bl	8008254 <_free_r>
 800943c:	2300      	movs	r3, #0
 800943e:	6363      	str	r3, [r4, #52]	; 0x34
 8009440:	89a3      	ldrh	r3, [r4, #12]
 8009442:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009446:	81a3      	strh	r3, [r4, #12]
 8009448:	2300      	movs	r3, #0
 800944a:	6063      	str	r3, [r4, #4]
 800944c:	6923      	ldr	r3, [r4, #16]
 800944e:	6023      	str	r3, [r4, #0]
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	f043 0308 	orr.w	r3, r3, #8
 8009456:	81a3      	strh	r3, [r4, #12]
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	b94b      	cbnz	r3, 8009470 <__swsetup_r+0x7c>
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009466:	d003      	beq.n	8009470 <__swsetup_r+0x7c>
 8009468:	4621      	mov	r1, r4
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f884 	bl	8009578 <__smakebuf_r>
 8009470:	89a0      	ldrh	r0, [r4, #12]
 8009472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009476:	f010 0301 	ands.w	r3, r0, #1
 800947a:	d00a      	beq.n	8009492 <__swsetup_r+0x9e>
 800947c:	2300      	movs	r3, #0
 800947e:	60a3      	str	r3, [r4, #8]
 8009480:	6963      	ldr	r3, [r4, #20]
 8009482:	425b      	negs	r3, r3
 8009484:	61a3      	str	r3, [r4, #24]
 8009486:	6923      	ldr	r3, [r4, #16]
 8009488:	b943      	cbnz	r3, 800949c <__swsetup_r+0xa8>
 800948a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800948e:	d1c4      	bne.n	800941a <__swsetup_r+0x26>
 8009490:	bd38      	pop	{r3, r4, r5, pc}
 8009492:	0781      	lsls	r1, r0, #30
 8009494:	bf58      	it	pl
 8009496:	6963      	ldrpl	r3, [r4, #20]
 8009498:	60a3      	str	r3, [r4, #8]
 800949a:	e7f4      	b.n	8009486 <__swsetup_r+0x92>
 800949c:	2000      	movs	r0, #0
 800949e:	e7f7      	b.n	8009490 <__swsetup_r+0x9c>
 80094a0:	20000180 	.word	0x20000180

080094a4 <_raise_r>:
 80094a4:	291f      	cmp	r1, #31
 80094a6:	b538      	push	{r3, r4, r5, lr}
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	d904      	bls.n	80094b8 <_raise_r+0x14>
 80094ae:	2316      	movs	r3, #22
 80094b0:	6003      	str	r3, [r0, #0]
 80094b2:	f04f 30ff 	mov.w	r0, #4294967295
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80094ba:	b112      	cbz	r2, 80094c2 <_raise_r+0x1e>
 80094bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094c0:	b94b      	cbnz	r3, 80094d6 <_raise_r+0x32>
 80094c2:	4620      	mov	r0, r4
 80094c4:	f000 f830 	bl	8009528 <_getpid_r>
 80094c8:	462a      	mov	r2, r5
 80094ca:	4601      	mov	r1, r0
 80094cc:	4620      	mov	r0, r4
 80094ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d2:	f000 b817 	b.w	8009504 <_kill_r>
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d00a      	beq.n	80094f0 <_raise_r+0x4c>
 80094da:	1c59      	adds	r1, r3, #1
 80094dc:	d103      	bne.n	80094e6 <_raise_r+0x42>
 80094de:	2316      	movs	r3, #22
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	2001      	movs	r0, #1
 80094e4:	e7e7      	b.n	80094b6 <_raise_r+0x12>
 80094e6:	2400      	movs	r4, #0
 80094e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80094ec:	4628      	mov	r0, r5
 80094ee:	4798      	blx	r3
 80094f0:	2000      	movs	r0, #0
 80094f2:	e7e0      	b.n	80094b6 <_raise_r+0x12>

080094f4 <raise>:
 80094f4:	4b02      	ldr	r3, [pc, #8]	; (8009500 <raise+0xc>)
 80094f6:	4601      	mov	r1, r0
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	f7ff bfd3 	b.w	80094a4 <_raise_r>
 80094fe:	bf00      	nop
 8009500:	20000180 	.word	0x20000180

08009504 <_kill_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_kill_r+0x20>)
 8009508:	2300      	movs	r3, #0
 800950a:	4604      	mov	r4, r0
 800950c:	4608      	mov	r0, r1
 800950e:	4611      	mov	r1, r2
 8009510:	602b      	str	r3, [r5, #0]
 8009512:	f7f8 f8eb 	bl	80016ec <_kill>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	d102      	bne.n	8009520 <_kill_r+0x1c>
 800951a:	682b      	ldr	r3, [r5, #0]
 800951c:	b103      	cbz	r3, 8009520 <_kill_r+0x1c>
 800951e:	6023      	str	r3, [r4, #0]
 8009520:	bd38      	pop	{r3, r4, r5, pc}
 8009522:	bf00      	nop
 8009524:	200008b8 	.word	0x200008b8

08009528 <_getpid_r>:
 8009528:	f7f8 b8d8 	b.w	80016dc <_getpid>

0800952c <__swhatbuf_r>:
 800952c:	b570      	push	{r4, r5, r6, lr}
 800952e:	460c      	mov	r4, r1
 8009530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009534:	2900      	cmp	r1, #0
 8009536:	b096      	sub	sp, #88	; 0x58
 8009538:	4615      	mov	r5, r2
 800953a:	461e      	mov	r6, r3
 800953c:	da0d      	bge.n	800955a <__swhatbuf_r+0x2e>
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009544:	f04f 0100 	mov.w	r1, #0
 8009548:	bf0c      	ite	eq
 800954a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800954e:	2340      	movne	r3, #64	; 0x40
 8009550:	2000      	movs	r0, #0
 8009552:	6031      	str	r1, [r6, #0]
 8009554:	602b      	str	r3, [r5, #0]
 8009556:	b016      	add	sp, #88	; 0x58
 8009558:	bd70      	pop	{r4, r5, r6, pc}
 800955a:	466a      	mov	r2, sp
 800955c:	f000 f848 	bl	80095f0 <_fstat_r>
 8009560:	2800      	cmp	r0, #0
 8009562:	dbec      	blt.n	800953e <__swhatbuf_r+0x12>
 8009564:	9901      	ldr	r1, [sp, #4]
 8009566:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800956a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800956e:	4259      	negs	r1, r3
 8009570:	4159      	adcs	r1, r3
 8009572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009576:	e7eb      	b.n	8009550 <__swhatbuf_r+0x24>

08009578 <__smakebuf_r>:
 8009578:	898b      	ldrh	r3, [r1, #12]
 800957a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800957c:	079d      	lsls	r5, r3, #30
 800957e:	4606      	mov	r6, r0
 8009580:	460c      	mov	r4, r1
 8009582:	d507      	bpl.n	8009594 <__smakebuf_r+0x1c>
 8009584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	6123      	str	r3, [r4, #16]
 800958c:	2301      	movs	r3, #1
 800958e:	6163      	str	r3, [r4, #20]
 8009590:	b002      	add	sp, #8
 8009592:	bd70      	pop	{r4, r5, r6, pc}
 8009594:	ab01      	add	r3, sp, #4
 8009596:	466a      	mov	r2, sp
 8009598:	f7ff ffc8 	bl	800952c <__swhatbuf_r>
 800959c:	9900      	ldr	r1, [sp, #0]
 800959e:	4605      	mov	r5, r0
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7fe fecb 	bl	800833c <_malloc_r>
 80095a6:	b948      	cbnz	r0, 80095bc <__smakebuf_r+0x44>
 80095a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ac:	059a      	lsls	r2, r3, #22
 80095ae:	d4ef      	bmi.n	8009590 <__smakebuf_r+0x18>
 80095b0:	f023 0303 	bic.w	r3, r3, #3
 80095b4:	f043 0302 	orr.w	r3, r3, #2
 80095b8:	81a3      	strh	r3, [r4, #12]
 80095ba:	e7e3      	b.n	8009584 <__smakebuf_r+0xc>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	6020      	str	r0, [r4, #0]
 80095c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	9b00      	ldr	r3, [sp, #0]
 80095c8:	6163      	str	r3, [r4, #20]
 80095ca:	9b01      	ldr	r3, [sp, #4]
 80095cc:	6120      	str	r0, [r4, #16]
 80095ce:	b15b      	cbz	r3, 80095e8 <__smakebuf_r+0x70>
 80095d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095d4:	4630      	mov	r0, r6
 80095d6:	f000 f81d 	bl	8009614 <_isatty_r>
 80095da:	b128      	cbz	r0, 80095e8 <__smakebuf_r+0x70>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	81a3      	strh	r3, [r4, #12]
 80095e8:	89a3      	ldrh	r3, [r4, #12]
 80095ea:	431d      	orrs	r5, r3
 80095ec:	81a5      	strh	r5, [r4, #12]
 80095ee:	e7cf      	b.n	8009590 <__smakebuf_r+0x18>

080095f0 <_fstat_r>:
 80095f0:	b538      	push	{r3, r4, r5, lr}
 80095f2:	4d07      	ldr	r5, [pc, #28]	; (8009610 <_fstat_r+0x20>)
 80095f4:	2300      	movs	r3, #0
 80095f6:	4604      	mov	r4, r0
 80095f8:	4608      	mov	r0, r1
 80095fa:	4611      	mov	r1, r2
 80095fc:	602b      	str	r3, [r5, #0]
 80095fe:	f7f8 f8d4 	bl	80017aa <_fstat>
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	d102      	bne.n	800960c <_fstat_r+0x1c>
 8009606:	682b      	ldr	r3, [r5, #0]
 8009608:	b103      	cbz	r3, 800960c <_fstat_r+0x1c>
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	bd38      	pop	{r3, r4, r5, pc}
 800960e:	bf00      	nop
 8009610:	200008b8 	.word	0x200008b8

08009614 <_isatty_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d06      	ldr	r5, [pc, #24]	; (8009630 <_isatty_r+0x1c>)
 8009618:	2300      	movs	r3, #0
 800961a:	4604      	mov	r4, r0
 800961c:	4608      	mov	r0, r1
 800961e:	602b      	str	r3, [r5, #0]
 8009620:	f7f8 f8d3 	bl	80017ca <_isatty>
 8009624:	1c43      	adds	r3, r0, #1
 8009626:	d102      	bne.n	800962e <_isatty_r+0x1a>
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	b103      	cbz	r3, 800962e <_isatty_r+0x1a>
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	200008b8 	.word	0x200008b8

08009634 <_init>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr

08009640 <_fini>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr
